var __svelte__ = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x2) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x2, {
    get: (a, b2) => (typeof require !== "undefined" ? require : a)[b2]
  }) : x2)(function(x2) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x2 + '" is not supported');
  });
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to2, key) && key !== except)
          __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // compiler.ts
  var compiler_exports = {};
  __export(compiler_exports, {
    compile: () => compile2
  });

  // shimssr.ts
  var URL = class {
    constructor(url) {
      console.log(url);
    }
  };
  var self = {
    performance: {
      now() {
        return 0;
      }
    }
  };
  var window = {
    btoa: (data2) => {
      return "";
    }
  };

  // node_modules/svelte/compiler.mjs
  var now = typeof process !== "undefined" && process.hrtime ? () => {
    const t = process.hrtime();
    return t[0] * 1e3 + t[1] / 1e6;
  } : () => self.performance.now();
  function collapse_timings(timings) {
    const result = {};
    timings.forEach((timing) => {
      result[timing.label] = Object.assign({
        total: timing.end - timing.start
      }, timing.children && collapse_timings(timing.children));
    });
    return result;
  }
  var Stats = class {
    constructor() {
      this.start_time = now();
      this.stack = [];
      this.current_children = this.timings = [];
    }
    start(label) {
      const timing = {
        label,
        start: now(),
        end: null,
        children: []
      };
      this.current_children.push(timing);
      this.stack.push(timing);
      this.current_timing = timing;
      this.current_children = timing.children;
    }
    stop(label) {
      if (label !== this.current_timing.label) {
        throw new Error(`Mismatched timing labels (expected ${this.current_timing.label}, got ${label})`);
      }
      this.current_timing.end = now();
      this.stack.pop();
      this.current_timing = this.stack[this.stack.length - 1];
      this.current_children = this.current_timing ? this.current_timing.children : this.timings;
    }
    render() {
      const timings = Object.assign({
        total: now() - this.start_time
      }, collapse_timings(this.timings));
      return {
        timings
      };
    }
  };
  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];
  var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
  var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
  var reservedWords = {
    3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
    5: "class enum extends super const export import",
    6: "enum",
    strict: "implements interface let package private protected public static yield",
    strictBind: "eval arguments"
  };
  var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
  var keywords$1 = {
    5: ecma5AndLessKeywords,
    "5module": ecma5AndLessKeywords + " export import",
    6: ecma5AndLessKeywords + " const class extends export import super"
  };
  var keywordRelationalOperator = /^in(stanceof)?$/;
  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  function isInAstralSet(code, set) {
    var pos = 65536;
    for (var i = 0; i < set.length; i += 2) {
      pos += set[i];
      if (pos > code) {
        return false;
      }
      pos += set[i + 1];
      if (pos >= code) {
        return true;
      }
    }
    return false;
  }
  function isIdentifierStart(code, astral) {
    if (code < 65) {
      return code === 36;
    }
    if (code < 91) {
      return true;
    }
    if (code < 97) {
      return code === 95;
    }
    if (code < 123) {
      return true;
    }
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
    }
    if (astral === false) {
      return false;
    }
    return isInAstralSet(code, astralIdentifierStartCodes);
  }
  function isIdentifierChar(code, astral) {
    if (code < 48) {
      return code === 36;
    }
    if (code < 58) {
      return true;
    }
    if (code < 65) {
      return false;
    }
    if (code < 91) {
      return true;
    }
    if (code < 97) {
      return code === 95;
    }
    if (code < 123) {
      return true;
    }
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
    }
    if (astral === false) {
      return false;
    }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
  }
  var TokenType = function TokenType2(label, conf) {
    if (conf === void 0)
      conf = {};
    this.label = label;
    this.keyword = conf.keyword;
    this.beforeExpr = !!conf.beforeExpr;
    this.startsExpr = !!conf.startsExpr;
    this.isLoop = !!conf.isLoop;
    this.isAssign = !!conf.isAssign;
    this.prefix = !!conf.prefix;
    this.postfix = !!conf.postfix;
    this.binop = conf.binop || null;
    this.updateContext = null;
  };
  function binop(name2, prec) {
    return new TokenType(name2, { beforeExpr: true, binop: prec });
  }
  var beforeExpr = { beforeExpr: true };
  var startsExpr = { startsExpr: true };
  var keywords = {};
  function kw(name2, options) {
    if (options === void 0)
      options = {};
    options.keyword = name2;
    return keywords[name2] = new TokenType(name2, options);
  }
  var types$1 = {
    num: new TokenType("num", startsExpr),
    regexp: new TokenType("regexp", startsExpr),
    string: new TokenType("string", startsExpr),
    name: new TokenType("name", startsExpr),
    privateId: new TokenType("privateId", startsExpr),
    eof: new TokenType("eof"),
    // Punctuation token types.
    bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
    bracketR: new TokenType("]"),
    braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
    braceR: new TokenType("}"),
    parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
    parenR: new TokenType(")"),
    comma: new TokenType(",", beforeExpr),
    semi: new TokenType(";", beforeExpr),
    colon: new TokenType(":", beforeExpr),
    dot: new TokenType("."),
    question: new TokenType("?", beforeExpr),
    questionDot: new TokenType("?."),
    arrow: new TokenType("=>", beforeExpr),
    template: new TokenType("template"),
    invalidTemplate: new TokenType("invalidTemplate"),
    ellipsis: new TokenType("...", beforeExpr),
    backQuote: new TokenType("`", startsExpr),
    dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
    // Operators. These carry several kinds of properties to help the
    // parser use them properly (the presence of these properties is
    // what categorizes them as operators).
    //
    // `binop`, when present, specifies that this operator is a binary
    // operator, and will refer to its precedence.
    //
    // `prefix` and `postfix` mark the operator as a prefix or postfix
    // unary operator.
    //
    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
    // binary operators with a very low precedence, that should result
    // in AssignmentExpression nodes.
    eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
    assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
    incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
    prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
    logicalOR: binop("||", 1),
    logicalAND: binop("&&", 2),
    bitwiseOR: binop("|", 3),
    bitwiseXOR: binop("^", 4),
    bitwiseAND: binop("&", 5),
    equality: binop("==/!=/===/!==", 6),
    relational: binop("</>/<=/>=", 7),
    bitShift: binop("<</>>/>>>", 8),
    plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
    modulo: binop("%", 10),
    star: binop("*", 10),
    slash: binop("/", 10),
    starstar: new TokenType("**", { beforeExpr: true }),
    coalesce: binop("??", 1),
    // Keyword token types.
    _break: kw("break"),
    _case: kw("case", beforeExpr),
    _catch: kw("catch"),
    _continue: kw("continue"),
    _debugger: kw("debugger"),
    _default: kw("default", beforeExpr),
    _do: kw("do", { isLoop: true, beforeExpr: true }),
    _else: kw("else", beforeExpr),
    _finally: kw("finally"),
    _for: kw("for", { isLoop: true }),
    _function: kw("function", startsExpr),
    _if: kw("if"),
    _return: kw("return", beforeExpr),
    _switch: kw("switch"),
    _throw: kw("throw", beforeExpr),
    _try: kw("try"),
    _var: kw("var"),
    _const: kw("const"),
    _while: kw("while", { isLoop: true }),
    _with: kw("with"),
    _new: kw("new", { beforeExpr: true, startsExpr: true }),
    _this: kw("this", startsExpr),
    _super: kw("super", startsExpr),
    _class: kw("class", startsExpr),
    _extends: kw("extends", beforeExpr),
    _export: kw("export"),
    _import: kw("import", startsExpr),
    _null: kw("null", startsExpr),
    _true: kw("true", startsExpr),
    _false: kw("false", startsExpr),
    _in: kw("in", { beforeExpr: true, binop: 7 }),
    _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
    _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
    _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
    _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
  };
  var lineBreak = /\r\n?|\n|\u2028|\u2029/;
  var lineBreakG = new RegExp(lineBreak.source, "g");
  function isNewLine(code) {
    return code === 10 || code === 13 || code === 8232 || code === 8233;
  }
  function nextLineBreak(code, from, end) {
    if (end === void 0)
      end = code.length;
    for (var i = from; i < end; i++) {
      var next = code.charCodeAt(i);
      if (isNewLine(next)) {
        return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1;
      }
    }
    return -1;
  }
  var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
  var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
  var ref = Object.prototype;
  var hasOwnProperty$1 = ref.hasOwnProperty;
  var toString = ref.toString;
  var hasOwn = Object.hasOwn || function(obj, propName) {
    return hasOwnProperty$1.call(obj, propName);
  };
  var isArray = Array.isArray || function(obj) {
    return toString.call(obj) === "[object Array]";
  };
  function wordsRegexp(words) {
    return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
  }
  function codePointToString(code) {
    if (code <= 65535) {
      return String.fromCharCode(code);
    }
    code -= 65536;
    return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
  }
  var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
  var Position = function Position2(line, col) {
    this.line = line;
    this.column = col;
  };
  Position.prototype.offset = function offset(n2) {
    return new Position(this.line, this.column + n2);
  };
  var SourceLocation = function SourceLocation2(p2, start, end) {
    this.start = start;
    this.end = end;
    if (p2.sourceFile !== null) {
      this.source = p2.sourceFile;
    }
  };
  function getLineInfo(input, offset2) {
    for (var line = 1, cur = 0; ; ) {
      var nextBreak = nextLineBreak(input, cur, offset2);
      if (nextBreak < 0) {
        return new Position(line, offset2 - cur);
      }
      ++line;
      cur = nextBreak;
    }
  }
  var defaultOptions = {
    // `ecmaVersion` indicates the ECMAScript version to parse. Must be
    // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
    // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `"latest"`
    // (the latest version the library supports). This influences
    // support for strict mode, the set of reserved words, and support
    // for new syntax features.
    ecmaVersion: null,
    // `sourceType` indicates the mode the code should be parsed in.
    // Can be either `"script"` or `"module"`. This influences global
    // strict mode and parsing of `import` and `export` declarations.
    sourceType: "script",
    // `onInsertedSemicolon` can be a callback that will be called
    // when a semicolon is automatically inserted. It will be passed
    // the position of the comma as an offset, and if `locations` is
    // enabled, it is given the location as a `{line, column}` object
    // as second argument.
    onInsertedSemicolon: null,
    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
    // trailing commas.
    onTrailingComma: null,
    // By default, reserved words are only enforced if ecmaVersion >= 5.
    // Set `allowReserved` to a boolean value to explicitly turn this on
    // an off. When this option has the value "never", reserved words
    // and keywords can also not be used as property names.
    allowReserved: null,
    // When enabled, a return at the top level is not considered an
    // error.
    allowReturnOutsideFunction: false,
    // When enabled, import/export statements are not constrained to
    // appearing at the top of the program, and an import.meta expression
    // in a script isn't considered an error.
    allowImportExportEverywhere: false,
    // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
    // When enabled, await identifiers are allowed to appear at the top-level scope,
    // but they are still not allowed in non-async functions.
    allowAwaitOutsideFunction: null,
    // When enabled, super identifiers are not constrained to
    // appearing in methods and do not raise an error when they appear elsewhere.
    allowSuperOutsideMethod: null,
    // When enabled, hashbang directive in the beginning of file is
    // allowed and treated as a line comment. Enabled by default when
    // `ecmaVersion` >= 2023.
    allowHashBang: false,
    // When `locations` is on, `loc` properties holding objects with
    // `start` and `end` properties in `{line, column}` form (with
    // line being 1-based and column 0-based) will be attached to the
    // nodes.
    locations: false,
    // A function can be passed as `onToken` option, which will
    // cause Acorn to call that function with object in the same
    // format as tokens returned from `tokenizer().getToken()`. Note
    // that you are not allowed to call the parser from the
    // callback—that will corrupt its internal state.
    onToken: null,
    // A function can be passed as `onComment` option, which will
    // cause Acorn to call that function with `(block, text, start,
    // end)` parameters whenever a comment is skipped. `block` is a
    // boolean indicating whether this is a block (`/* */`) comment,
    // `text` is the content of the comment, and `start` and `end` are
    // character offsets that denote the start and end of the comment.
    // When the `locations` option is on, two more parameters are
    // passed, the full `{line, column}` locations of the start and
    // end of the comments. Note that you are not allowed to call the
    // parser from the callback—that will corrupt its internal state.
    onComment: null,
    // Nodes have their start and end characters offsets recorded in
    // `start` and `end` properties (directly on the node, rather than
    // the `loc` object, which holds line/column data. To also add a
    // [semi-standardized][range] `range` property holding a `[start,
    // end]` array with the same numbers, set the `ranges` option to
    // `true`.
    //
    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
    ranges: false,
    // It is possible to parse multiple files into a single AST by
    // passing the tree produced by parsing the first file as
    // `program` option in subsequent parses. This will add the
    // toplevel forms of the parsed file to the `Program` (top) node
    // of an existing parse tree.
    program: null,
    // When `locations` is on, you can pass this to record the source
    // file in every node's `loc` object.
    sourceFile: null,
    // This value, if given, is stored in every node, whether
    // `locations` is on or off.
    directSourceFile: null,
    // When enabled, parenthesized expressions are represented by
    // (non-standard) ParenthesizedExpression nodes
    preserveParens: false
  };
  var warnedAboutEcmaVersion = false;
  function getOptions(opts) {
    var options = {};
    for (var opt in defaultOptions) {
      options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
    }
    if (options.ecmaVersion === "latest") {
      options.ecmaVersion = 1e8;
    } else if (options.ecmaVersion == null) {
      if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
        warnedAboutEcmaVersion = true;
        console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
      }
      options.ecmaVersion = 11;
    } else if (options.ecmaVersion >= 2015) {
      options.ecmaVersion -= 2009;
    }
    if (options.allowReserved == null) {
      options.allowReserved = options.ecmaVersion < 5;
    }
    if (!opts || opts.allowHashBang == null) {
      options.allowHashBang = options.ecmaVersion >= 14;
    }
    if (isArray(options.onToken)) {
      var tokens = options.onToken;
      options.onToken = function(token) {
        return tokens.push(token);
      };
    }
    if (isArray(options.onComment)) {
      options.onComment = pushComment(options, options.onComment);
    }
    return options;
  }
  function pushComment(options, array) {
    return function(block, text2, start, end, startLoc, endLoc) {
      var comment = {
        type: block ? "Block" : "Line",
        value: text2,
        start,
        end
      };
      if (options.locations) {
        comment.loc = new SourceLocation(this, startLoc, endLoc);
      }
      if (options.ranges) {
        comment.range = [start, end];
      }
      array.push(comment);
    };
  }
  var SCOPE_TOP = 1;
  var SCOPE_FUNCTION = 2;
  var SCOPE_ASYNC = 4;
  var SCOPE_GENERATOR = 8;
  var SCOPE_ARROW = 16;
  var SCOPE_SIMPLE_CATCH = 32;
  var SCOPE_SUPER = 64;
  var SCOPE_DIRECT_SUPER = 128;
  var SCOPE_CLASS_STATIC_BLOCK = 256;
  var SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;
  function functionFlags(async, generator) {
    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
  }
  var BIND_NONE = 0;
  var BIND_VAR = 1;
  var BIND_LEXICAL = 2;
  var BIND_FUNCTION = 3;
  var BIND_SIMPLE_CATCH = 4;
  var BIND_OUTSIDE = 5;
  var Parser = function Parser2(options, input, startPos) {
    this.options = options = getOptions(options);
    this.sourceFile = options.sourceFile;
    this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
    var reserved2 = "";
    if (options.allowReserved !== true) {
      reserved2 = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
      if (options.sourceType === "module") {
        reserved2 += " await";
      }
    }
    this.reservedWords = wordsRegexp(reserved2);
    var reservedStrict = (reserved2 ? reserved2 + " " : "") + reservedWords.strict;
    this.reservedWordsStrict = wordsRegexp(reservedStrict);
    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
    this.input = String(input);
    this.containsEsc = false;
    if (startPos) {
      this.pos = startPos;
      this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
    } else {
      this.pos = this.lineStart = 0;
      this.curLine = 1;
    }
    this.type = types$1.eof;
    this.value = null;
    this.start = this.end = this.pos;
    this.startLoc = this.endLoc = this.curPosition();
    this.lastTokEndLoc = this.lastTokStartLoc = null;
    this.lastTokStart = this.lastTokEnd = this.pos;
    this.context = this.initialContext();
    this.exprAllowed = true;
    this.inModule = options.sourceType === "module";
    this.strict = this.inModule || this.strictDirective(this.pos);
    this.potentialArrowAt = -1;
    this.potentialArrowInForAwait = false;
    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
    this.labels = [];
    this.undefinedExports = /* @__PURE__ */ Object.create(null);
    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
      this.skipLineComment(2);
    }
    this.scopeStack = [];
    this.enterScope(SCOPE_TOP);
    this.regexpState = null;
    this.privateNameStack = [];
  };
  var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
  Parser.prototype.parse = function parse() {
    var node2 = this.options.program || this.startNode();
    this.nextToken();
    return this.parseTopLevel(node2);
  };
  prototypeAccessors.inFunction.get = function() {
    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
  };
  prototypeAccessors.inGenerator.get = function() {
    return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;
  };
  prototypeAccessors.inAsync.get = function() {
    return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;
  };
  prototypeAccessors.canAwait.get = function() {
    for (var i = this.scopeStack.length - 1; i >= 0; i--) {
      var scope = this.scopeStack[i];
      if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) {
        return false;
      }
      if (scope.flags & SCOPE_FUNCTION) {
        return (scope.flags & SCOPE_ASYNC) > 0;
      }
    }
    return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
  };
  prototypeAccessors.allowSuper.get = function() {
    var ref2 = this.currentThisScope();
    var flags = ref2.flags;
    var inClassFieldInit = ref2.inClassFieldInit;
    return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
  };
  prototypeAccessors.allowDirectSuper.get = function() {
    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
  };
  prototypeAccessors.treatFunctionsAsVar.get = function() {
    return this.treatFunctionsAsVarInScope(this.currentScope());
  };
  prototypeAccessors.allowNewDotTarget.get = function() {
    var ref2 = this.currentThisScope();
    var flags = ref2.flags;
    var inClassFieldInit = ref2.inClassFieldInit;
    return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit;
  };
  prototypeAccessors.inClassStaticBlock.get = function() {
    return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0;
  };
  Parser.extend = function extend() {
    var plugins = [], len = arguments.length;
    while (len--)
      plugins[len] = arguments[len];
    var cls = this;
    for (var i = 0; i < plugins.length; i++) {
      cls = plugins[i](cls);
    }
    return cls;
  };
  Parser.parse = function parse2(input, options) {
    return new this(options, input).parse();
  };
  Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
    var parser = new this(options, input, pos);
    parser.nextToken();
    return parser.parseExpression();
  };
  Parser.tokenizer = function tokenizer(input, options) {
    return new this(options, input);
  };
  Object.defineProperties(Parser.prototype, prototypeAccessors);
  var pp$9 = Parser.prototype;
  var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
  pp$9.strictDirective = function(start) {
    if (this.options.ecmaVersion < 5) {
      return false;
    }
    for (; ; ) {
      skipWhiteSpace.lastIndex = start;
      start += skipWhiteSpace.exec(this.input)[0].length;
      var match = literal.exec(this.input.slice(start));
      if (!match) {
        return false;
      }
      if ((match[1] || match[2]) === "use strict") {
        skipWhiteSpace.lastIndex = start + match[0].length;
        var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
        var next = this.input.charAt(end);
        return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
      }
      start += match[0].length;
      skipWhiteSpace.lastIndex = start;
      start += skipWhiteSpace.exec(this.input)[0].length;
      if (this.input[start] === ";") {
        start++;
      }
    }
  };
  pp$9.eat = function(type) {
    if (this.type === type) {
      this.next();
      return true;
    } else {
      return false;
    }
  };
  pp$9.isContextual = function(name2) {
    return this.type === types$1.name && this.value === name2 && !this.containsEsc;
  };
  pp$9.eatContextual = function(name2) {
    if (!this.isContextual(name2)) {
      return false;
    }
    this.next();
    return true;
  };
  pp$9.expectContextual = function(name2) {
    if (!this.eatContextual(name2)) {
      this.unexpected();
    }
  };
  pp$9.canInsertSemicolon = function() {
    return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
  };
  pp$9.insertSemicolon = function() {
    if (this.canInsertSemicolon()) {
      if (this.options.onInsertedSemicolon) {
        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
      }
      return true;
    }
  };
  pp$9.semicolon = function() {
    if (!this.eat(types$1.semi) && !this.insertSemicolon()) {
      this.unexpected();
    }
  };
  pp$9.afterTrailingComma = function(tokType, notNext) {
    if (this.type === tokType) {
      if (this.options.onTrailingComma) {
        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
      }
      if (!notNext) {
        this.next();
      }
      return true;
    }
  };
  pp$9.expect = function(type) {
    this.eat(type) || this.unexpected();
  };
  pp$9.unexpected = function(pos) {
    this.raise(pos != null ? pos : this.start, "Unexpected token");
  };
  var DestructuringErrors = function DestructuringErrors2() {
    this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
  };
  pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
    if (!refDestructuringErrors) {
      return;
    }
    if (refDestructuringErrors.trailingComma > -1) {
      this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
    }
    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
    if (parens > -1) {
      this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
    }
  };
  pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
    if (!refDestructuringErrors) {
      return false;
    }
    var shorthandAssign = refDestructuringErrors.shorthandAssign;
    var doubleProto = refDestructuringErrors.doubleProto;
    if (!andThrow) {
      return shorthandAssign >= 0 || doubleProto >= 0;
    }
    if (shorthandAssign >= 0) {
      this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
    }
    if (doubleProto >= 0) {
      this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
    }
  };
  pp$9.checkYieldAwaitInDefaultParams = function() {
    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
      this.raise(this.yieldPos, "Yield expression cannot be a default value");
    }
    if (this.awaitPos) {
      this.raise(this.awaitPos, "Await expression cannot be a default value");
    }
  };
  pp$9.isSimpleAssignTarget = function(expr) {
    if (expr.type === "ParenthesizedExpression") {
      return this.isSimpleAssignTarget(expr.expression);
    }
    return expr.type === "Identifier" || expr.type === "MemberExpression";
  };
  var pp$8 = Parser.prototype;
  pp$8.parseTopLevel = function(node2) {
    var exports = /* @__PURE__ */ Object.create(null);
    if (!node2.body) {
      node2.body = [];
    }
    while (this.type !== types$1.eof) {
      var stmt = this.parseStatement(null, true, exports);
      node2.body.push(stmt);
    }
    if (this.inModule) {
      for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
        var name2 = list[i];
        this.raiseRecoverable(this.undefinedExports[name2].start, "Export '" + name2 + "' is not defined");
      }
    }
    this.adaptDirectivePrologue(node2.body);
    this.next();
    node2.sourceType = this.options.sourceType;
    return this.finishNode(node2, "Program");
  };
  var loopLabel = { kind: "loop" };
  var switchLabel = { kind: "switch" };
  pp$8.isLet = function(context) {
    if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
      return false;
    }
    skipWhiteSpace.lastIndex = this.pos;
    var skip = skipWhiteSpace.exec(this.input);
    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
    if (nextCh === 91 || nextCh === 92) {
      return true;
    }
    if (context) {
      return false;
    }
    if (nextCh === 123 || nextCh > 55295 && nextCh < 56320) {
      return true;
    }
    if (isIdentifierStart(nextCh, true)) {
      var pos = next + 1;
      while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) {
        ++pos;
      }
      if (nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
        return true;
      }
      var ident = this.input.slice(next, pos);
      if (!keywordRelationalOperator.test(ident)) {
        return true;
      }
    }
    return false;
  };
  pp$8.isAsyncFunction = function() {
    if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
      return false;
    }
    skipWhiteSpace.lastIndex = this.pos;
    var skip = skipWhiteSpace.exec(this.input);
    var next = this.pos + skip[0].length, after;
    return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
  };
  pp$8.parseStatement = function(context, topLevel, exports) {
    var starttype = this.type, node2 = this.startNode(), kind;
    if (this.isLet(context)) {
      starttype = types$1._var;
      kind = "let";
    }
    switch (starttype) {
      case types$1._break:
      case types$1._continue:
        return this.parseBreakContinueStatement(node2, starttype.keyword);
      case types$1._debugger:
        return this.parseDebuggerStatement(node2);
      case types$1._do:
        return this.parseDoStatement(node2);
      case types$1._for:
        return this.parseForStatement(node2);
      case types$1._function:
        if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
          this.unexpected();
        }
        return this.parseFunctionStatement(node2, false, !context);
      case types$1._class:
        if (context) {
          this.unexpected();
        }
        return this.parseClass(node2, true);
      case types$1._if:
        return this.parseIfStatement(node2);
      case types$1._return:
        return this.parseReturnStatement(node2);
      case types$1._switch:
        return this.parseSwitchStatement(node2);
      case types$1._throw:
        return this.parseThrowStatement(node2);
      case types$1._try:
        return this.parseTryStatement(node2);
      case types$1._const:
      case types$1._var:
        kind = kind || this.value;
        if (context && kind !== "var") {
          this.unexpected();
        }
        return this.parseVarStatement(node2, kind);
      case types$1._while:
        return this.parseWhileStatement(node2);
      case types$1._with:
        return this.parseWithStatement(node2);
      case types$1.braceL:
        return this.parseBlock(true, node2);
      case types$1.semi:
        return this.parseEmptyStatement(node2);
      case types$1._export:
      case types$1._import:
        if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (nextCh === 40 || nextCh === 46) {
            return this.parseExpressionStatement(node2, this.parseExpression());
          }
        }
        if (!this.options.allowImportExportEverywhere) {
          if (!topLevel) {
            this.raise(this.start, "'import' and 'export' may only appear at the top level");
          }
          if (!this.inModule) {
            this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
          }
        }
        return starttype === types$1._import ? this.parseImport(node2) : this.parseExport(node2, exports);
      default:
        if (this.isAsyncFunction()) {
          if (context) {
            this.unexpected();
          }
          this.next();
          return this.parseFunctionStatement(node2, true, !context);
        }
        var maybeName = this.value, expr = this.parseExpression();
        if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon)) {
          return this.parseLabeledStatement(node2, maybeName, expr, context);
        } else {
          return this.parseExpressionStatement(node2, expr);
        }
    }
  };
  pp$8.parseBreakContinueStatement = function(node2, keyword) {
    var isBreak = keyword === "break";
    this.next();
    if (this.eat(types$1.semi) || this.insertSemicolon()) {
      node2.label = null;
    } else if (this.type !== types$1.name) {
      this.unexpected();
    } else {
      node2.label = this.parseIdent();
      this.semicolon();
    }
    var i = 0;
    for (; i < this.labels.length; ++i) {
      var lab = this.labels[i];
      if (node2.label == null || lab.name === node2.label.name) {
        if (lab.kind != null && (isBreak || lab.kind === "loop")) {
          break;
        }
        if (node2.label && isBreak) {
          break;
        }
      }
    }
    if (i === this.labels.length) {
      this.raise(node2.start, "Unsyntactic " + keyword);
    }
    return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
  };
  pp$8.parseDebuggerStatement = function(node2) {
    this.next();
    this.semicolon();
    return this.finishNode(node2, "DebuggerStatement");
  };
  pp$8.parseDoStatement = function(node2) {
    this.next();
    this.labels.push(loopLabel);
    node2.body = this.parseStatement("do");
    this.labels.pop();
    this.expect(types$1._while);
    node2.test = this.parseParenExpression();
    if (this.options.ecmaVersion >= 6) {
      this.eat(types$1.semi);
    } else {
      this.semicolon();
    }
    return this.finishNode(node2, "DoWhileStatement");
  };
  pp$8.parseForStatement = function(node2) {
    this.next();
    var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
    this.labels.push(loopLabel);
    this.enterScope(0);
    this.expect(types$1.parenL);
    if (this.type === types$1.semi) {
      if (awaitAt > -1) {
        this.unexpected(awaitAt);
      }
      return this.parseFor(node2, null);
    }
    var isLet = this.isLet();
    if (this.type === types$1._var || this.type === types$1._const || isLet) {
      var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
      this.next();
      this.parseVar(init$1, true, kind);
      this.finishNode(init$1, "VariableDeclaration");
      if ((this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
        if (this.options.ecmaVersion >= 9) {
          if (this.type === types$1._in) {
            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }
          } else {
            node2.await = awaitAt > -1;
          }
        }
        return this.parseForIn(node2, init$1);
      }
      if (awaitAt > -1) {
        this.unexpected(awaitAt);
      }
      return this.parseFor(node2, init$1);
    }
    var startsWithLet = this.isContextual("let"), isForOf = false;
    var refDestructuringErrors = new DestructuringErrors();
    var init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors);
    if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
      if (this.options.ecmaVersion >= 9) {
        if (this.type === types$1._in) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
        } else {
          node2.await = awaitAt > -1;
        }
      }
      if (startsWithLet && isForOf) {
        this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'.");
      }
      this.toAssignable(init, false, refDestructuringErrors);
      this.checkLValPattern(init);
      return this.parseForIn(node2, init);
    } else {
      this.checkExpressionErrors(refDestructuringErrors, true);
    }
    if (awaitAt > -1) {
      this.unexpected(awaitAt);
    }
    return this.parseFor(node2, init);
  };
  pp$8.parseFunctionStatement = function(node2, isAsync, declarationPosition) {
    this.next();
    return this.parseFunction(node2, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
  };
  pp$8.parseIfStatement = function(node2) {
    this.next();
    node2.test = this.parseParenExpression();
    node2.consequent = this.parseStatement("if");
    node2.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
    return this.finishNode(node2, "IfStatement");
  };
  pp$8.parseReturnStatement = function(node2) {
    if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
      this.raise(this.start, "'return' outside of function");
    }
    this.next();
    if (this.eat(types$1.semi) || this.insertSemicolon()) {
      node2.argument = null;
    } else {
      node2.argument = this.parseExpression();
      this.semicolon();
    }
    return this.finishNode(node2, "ReturnStatement");
  };
  pp$8.parseSwitchStatement = function(node2) {
    this.next();
    node2.discriminant = this.parseParenExpression();
    node2.cases = [];
    this.expect(types$1.braceL);
    this.labels.push(switchLabel);
    this.enterScope(0);
    var cur;
    for (var sawDefault = false; this.type !== types$1.braceR; ) {
      if (this.type === types$1._case || this.type === types$1._default) {
        var isCase = this.type === types$1._case;
        if (cur) {
          this.finishNode(cur, "SwitchCase");
        }
        node2.cases.push(cur = this.startNode());
        cur.consequent = [];
        this.next();
        if (isCase) {
          cur.test = this.parseExpression();
        } else {
          if (sawDefault) {
            this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
          }
          sawDefault = true;
          cur.test = null;
        }
        this.expect(types$1.colon);
      } else {
        if (!cur) {
          this.unexpected();
        }
        cur.consequent.push(this.parseStatement(null));
      }
    }
    this.exitScope();
    if (cur) {
      this.finishNode(cur, "SwitchCase");
    }
    this.next();
    this.labels.pop();
    return this.finishNode(node2, "SwitchStatement");
  };
  pp$8.parseThrowStatement = function(node2) {
    this.next();
    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
      this.raise(this.lastTokEnd, "Illegal newline after throw");
    }
    node2.argument = this.parseExpression();
    this.semicolon();
    return this.finishNode(node2, "ThrowStatement");
  };
  var empty$1 = [];
  pp$8.parseTryStatement = function(node2) {
    this.next();
    node2.block = this.parseBlock();
    node2.handler = null;
    if (this.type === types$1._catch) {
      var clause = this.startNode();
      this.next();
      if (this.eat(types$1.parenL)) {
        clause.param = this.parseBindingAtom();
        var simple = clause.param.type === "Identifier";
        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
        this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
        this.expect(types$1.parenR);
      } else {
        if (this.options.ecmaVersion < 10) {
          this.unexpected();
        }
        clause.param = null;
        this.enterScope(0);
      }
      clause.body = this.parseBlock(false);
      this.exitScope();
      node2.handler = this.finishNode(clause, "CatchClause");
    }
    node2.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
    if (!node2.handler && !node2.finalizer) {
      this.raise(node2.start, "Missing catch or finally clause");
    }
    return this.finishNode(node2, "TryStatement");
  };
  pp$8.parseVarStatement = function(node2, kind) {
    this.next();
    this.parseVar(node2, false, kind);
    this.semicolon();
    return this.finishNode(node2, "VariableDeclaration");
  };
  pp$8.parseWhileStatement = function(node2) {
    this.next();
    node2.test = this.parseParenExpression();
    this.labels.push(loopLabel);
    node2.body = this.parseStatement("while");
    this.labels.pop();
    return this.finishNode(node2, "WhileStatement");
  };
  pp$8.parseWithStatement = function(node2) {
    if (this.strict) {
      this.raise(this.start, "'with' in strict mode");
    }
    this.next();
    node2.object = this.parseParenExpression();
    node2.body = this.parseStatement("with");
    return this.finishNode(node2, "WithStatement");
  };
  pp$8.parseEmptyStatement = function(node2) {
    this.next();
    return this.finishNode(node2, "EmptyStatement");
  };
  pp$8.parseLabeledStatement = function(node2, maybeName, expr, context) {
    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
      var label = list[i$1];
      if (label.name === maybeName) {
        this.raise(expr.start, "Label '" + maybeName + "' is already declared");
      }
    }
    var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
    for (var i = this.labels.length - 1; i >= 0; i--) {
      var label$1 = this.labels[i];
      if (label$1.statementStart === node2.start) {
        label$1.statementStart = this.start;
        label$1.kind = kind;
      } else {
        break;
      }
    }
    this.labels.push({ name: maybeName, kind, statementStart: this.start });
    node2.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
    this.labels.pop();
    node2.label = expr;
    return this.finishNode(node2, "LabeledStatement");
  };
  pp$8.parseExpressionStatement = function(node2, expr) {
    node2.expression = expr;
    this.semicolon();
    return this.finishNode(node2, "ExpressionStatement");
  };
  pp$8.parseBlock = function(createNewLexicalScope, node2, exitStrict) {
    if (createNewLexicalScope === void 0)
      createNewLexicalScope = true;
    if (node2 === void 0)
      node2 = this.startNode();
    node2.body = [];
    this.expect(types$1.braceL);
    if (createNewLexicalScope) {
      this.enterScope(0);
    }
    while (this.type !== types$1.braceR) {
      var stmt = this.parseStatement(null);
      node2.body.push(stmt);
    }
    if (exitStrict) {
      this.strict = false;
    }
    this.next();
    if (createNewLexicalScope) {
      this.exitScope();
    }
    return this.finishNode(node2, "BlockStatement");
  };
  pp$8.parseFor = function(node2, init) {
    node2.init = init;
    this.expect(types$1.semi);
    node2.test = this.type === types$1.semi ? null : this.parseExpression();
    this.expect(types$1.semi);
    node2.update = this.type === types$1.parenR ? null : this.parseExpression();
    this.expect(types$1.parenR);
    node2.body = this.parseStatement("for");
    this.exitScope();
    this.labels.pop();
    return this.finishNode(node2, "ForStatement");
  };
  pp$8.parseForIn = function(node2, init) {
    var isForIn = this.type === types$1._in;
    this.next();
    if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
      this.raise(
        init.start,
        (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
      );
    }
    node2.left = init;
    node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
    this.expect(types$1.parenR);
    node2.body = this.parseStatement("for");
    this.exitScope();
    this.labels.pop();
    return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
  };
  pp$8.parseVar = function(node2, isFor, kind) {
    node2.declarations = [];
    node2.kind = kind;
    for (; ; ) {
      var decl = this.startNode();
      this.parseVarId(decl, kind);
      if (this.eat(types$1.eq)) {
        decl.init = this.parseMaybeAssign(isFor);
      } else if (kind === "const" && !(this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
        this.unexpected();
      } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {
        this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
      } else {
        decl.init = null;
      }
      node2.declarations.push(this.finishNode(decl, "VariableDeclarator"));
      if (!this.eat(types$1.comma)) {
        break;
      }
    }
    return node2;
  };
  pp$8.parseVarId = function(decl, kind) {
    decl.id = this.parseBindingAtom();
    this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
  };
  var FUNC_STATEMENT = 1;
  var FUNC_HANGING_STATEMENT = 2;
  var FUNC_NULLABLE_ID = 4;
  pp$8.parseFunction = function(node2, statement, allowExpressionBody, isAsync, forInit) {
    this.initFunction(node2);
    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
      if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) {
        this.unexpected();
      }
      node2.generator = this.eat(types$1.star);
    }
    if (this.options.ecmaVersion >= 8) {
      node2.async = !!isAsync;
    }
    if (statement & FUNC_STATEMENT) {
      node2.id = statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent();
      if (node2.id && !(statement & FUNC_HANGING_STATEMENT)) {
        this.checkLValSimple(node2.id, this.strict || node2.generator || node2.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
      }
    }
    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    this.enterScope(functionFlags(node2.async, node2.generator));
    if (!(statement & FUNC_STATEMENT)) {
      node2.id = this.type === types$1.name ? this.parseIdent() : null;
    }
    this.parseFunctionParams(node2);
    this.parseFunctionBody(node2, allowExpressionBody, false, forInit);
    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node2, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
  };
  pp$8.parseFunctionParams = function(node2) {
    this.expect(types$1.parenL);
    node2.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
    this.checkYieldAwaitInDefaultParams();
  };
  pp$8.parseClass = function(node2, isStatement) {
    this.next();
    var oldStrict = this.strict;
    this.strict = true;
    this.parseClassId(node2, isStatement);
    this.parseClassSuper(node2);
    var privateNameMap = this.enterClassBody();
    var classBody = this.startNode();
    var hadConstructor = false;
    classBody.body = [];
    this.expect(types$1.braceL);
    while (this.type !== types$1.braceR) {
      var element = this.parseClassElement(node2.superClass !== null);
      if (element) {
        classBody.body.push(element);
        if (element.type === "MethodDefinition" && element.kind === "constructor") {
          if (hadConstructor) {
            this.raise(element.start, "Duplicate constructor in the same class");
          }
          hadConstructor = true;
        } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
          this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared");
        }
      }
    }
    this.strict = oldStrict;
    this.next();
    node2.body = this.finishNode(classBody, "ClassBody");
    this.exitClassBody();
    return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
  };
  pp$8.parseClassElement = function(constructorAllowsSuper) {
    if (this.eat(types$1.semi)) {
      return null;
    }
    var ecmaVersion = this.options.ecmaVersion;
    var node2 = this.startNode();
    var keyName = "";
    var isGenerator = false;
    var isAsync = false;
    var kind = "method";
    var isStatic = false;
    if (this.eatContextual("static")) {
      if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {
        this.parseClassStaticBlock(node2);
        return node2;
      }
      if (this.isClassElementNameStart() || this.type === types$1.star) {
        isStatic = true;
      } else {
        keyName = "static";
      }
    }
    node2.static = isStatic;
    if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
      if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {
        isAsync = true;
      } else {
        keyName = "async";
      }
    }
    if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {
      isGenerator = true;
    }
    if (!keyName && !isAsync && !isGenerator) {
      var lastValue = this.value;
      if (this.eatContextual("get") || this.eatContextual("set")) {
        if (this.isClassElementNameStart()) {
          kind = lastValue;
        } else {
          keyName = lastValue;
        }
      }
    }
    if (keyName) {
      node2.computed = false;
      node2.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
      node2.key.name = keyName;
      this.finishNode(node2.key, "Identifier");
    } else {
      this.parseClassElementName(node2);
    }
    if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
      var isConstructor = !node2.static && checkKeyName(node2, "constructor");
      var allowsDirectSuper = isConstructor && constructorAllowsSuper;
      if (isConstructor && kind !== "method") {
        this.raise(node2.key.start, "Constructor can't have get/set modifier");
      }
      node2.kind = isConstructor ? "constructor" : kind;
      this.parseClassMethod(node2, isGenerator, isAsync, allowsDirectSuper);
    } else {
      this.parseClassField(node2);
    }
    return node2;
  };
  pp$8.isClassElementNameStart = function() {
    return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
  };
  pp$8.parseClassElementName = function(element) {
    if (this.type === types$1.privateId) {
      if (this.value === "constructor") {
        this.raise(this.start, "Classes can't have an element named '#constructor'");
      }
      element.computed = false;
      element.key = this.parsePrivateIdent();
    } else {
      this.parsePropertyName(element);
    }
  };
  pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
    var key = method.key;
    if (method.kind === "constructor") {
      if (isGenerator) {
        this.raise(key.start, "Constructor can't be a generator");
      }
      if (isAsync) {
        this.raise(key.start, "Constructor can't be an async method");
      }
    } else if (method.static && checkKeyName(method, "prototype")) {
      this.raise(key.start, "Classes may not have a static property named prototype");
    }
    var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
    if (method.kind === "get" && value.params.length !== 0) {
      this.raiseRecoverable(value.start, "getter should have no params");
    }
    if (method.kind === "set" && value.params.length !== 1) {
      this.raiseRecoverable(value.start, "setter should have exactly one param");
    }
    if (method.kind === "set" && value.params[0].type === "RestElement") {
      this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
    }
    return this.finishNode(method, "MethodDefinition");
  };
  pp$8.parseClassField = function(field) {
    if (checkKeyName(field, "constructor")) {
      this.raise(field.key.start, "Classes can't have a field named 'constructor'");
    } else if (field.static && checkKeyName(field, "prototype")) {
      this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
    }
    if (this.eat(types$1.eq)) {
      var scope = this.currentThisScope();
      var inClassFieldInit = scope.inClassFieldInit;
      scope.inClassFieldInit = true;
      field.value = this.parseMaybeAssign();
      scope.inClassFieldInit = inClassFieldInit;
    } else {
      field.value = null;
    }
    this.semicolon();
    return this.finishNode(field, "PropertyDefinition");
  };
  pp$8.parseClassStaticBlock = function(node2) {
    node2.body = [];
    var oldLabels = this.labels;
    this.labels = [];
    this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
    while (this.type !== types$1.braceR) {
      var stmt = this.parseStatement(null);
      node2.body.push(stmt);
    }
    this.next();
    this.exitScope();
    this.labels = oldLabels;
    return this.finishNode(node2, "StaticBlock");
  };
  pp$8.parseClassId = function(node2, isStatement) {
    if (this.type === types$1.name) {
      node2.id = this.parseIdent();
      if (isStatement) {
        this.checkLValSimple(node2.id, BIND_LEXICAL, false);
      }
    } else {
      if (isStatement === true) {
        this.unexpected();
      }
      node2.id = null;
    }
  };
  pp$8.parseClassSuper = function(node2) {
    node2.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
  };
  pp$8.enterClassBody = function() {
    var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
    this.privateNameStack.push(element);
    return element.declared;
  };
  pp$8.exitClassBody = function() {
    var ref2 = this.privateNameStack.pop();
    var declared = ref2.declared;
    var used = ref2.used;
    var len = this.privateNameStack.length;
    var parent = len === 0 ? null : this.privateNameStack[len - 1];
    for (var i = 0; i < used.length; ++i) {
      var id2 = used[i];
      if (!hasOwn(declared, id2.name)) {
        if (parent) {
          parent.used.push(id2);
        } else {
          this.raiseRecoverable(id2.start, "Private field '#" + id2.name + "' must be declared in an enclosing class");
        }
      }
    }
  };
  function isPrivateNameConflicted(privateNameMap, element) {
    var name2 = element.key.name;
    var curr = privateNameMap[name2];
    var next = "true";
    if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
      next = (element.static ? "s" : "i") + element.kind;
    }
    if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
      privateNameMap[name2] = "true";
      return false;
    } else if (!curr) {
      privateNameMap[name2] = next;
      return false;
    } else {
      return true;
    }
  }
  function checkKeyName(node2, name2) {
    var computed = node2.computed;
    var key = node2.key;
    return !computed && (key.type === "Identifier" && key.name === name2 || key.type === "Literal" && key.value === name2);
  }
  pp$8.parseExport = function(node2, exports) {
    this.next();
    if (this.eat(types$1.star)) {
      if (this.options.ecmaVersion >= 11) {
        if (this.eatContextual("as")) {
          node2.exported = this.parseModuleExportName();
          this.checkExport(exports, node2.exported, this.lastTokStart);
        } else {
          node2.exported = null;
        }
      }
      this.expectContextual("from");
      if (this.type !== types$1.string) {
        this.unexpected();
      }
      node2.source = this.parseExprAtom();
      this.semicolon();
      return this.finishNode(node2, "ExportAllDeclaration");
    }
    if (this.eat(types$1._default)) {
      this.checkExport(exports, "default", this.lastTokStart);
      var isAsync;
      if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
        var fNode = this.startNode();
        this.next();
        if (isAsync) {
          this.next();
        }
        node2.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
      } else if (this.type === types$1._class) {
        var cNode = this.startNode();
        node2.declaration = this.parseClass(cNode, "nullableID");
      } else {
        node2.declaration = this.parseMaybeAssign();
        this.semicolon();
      }
      return this.finishNode(node2, "ExportDefaultDeclaration");
    }
    if (this.shouldParseExportStatement()) {
      node2.declaration = this.parseStatement(null);
      if (node2.declaration.type === "VariableDeclaration") {
        this.checkVariableExport(exports, node2.declaration.declarations);
      } else {
        this.checkExport(exports, node2.declaration.id, node2.declaration.id.start);
      }
      node2.specifiers = [];
      node2.source = null;
    } else {
      node2.declaration = null;
      node2.specifiers = this.parseExportSpecifiers(exports);
      if (this.eatContextual("from")) {
        if (this.type !== types$1.string) {
          this.unexpected();
        }
        node2.source = this.parseExprAtom();
      } else {
        for (var i = 0, list = node2.specifiers; i < list.length; i += 1) {
          var spec = list[i];
          this.checkUnreserved(spec.local);
          this.checkLocalExport(spec.local);
          if (spec.local.type === "Literal") {
            this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
          }
        }
        node2.source = null;
      }
      this.semicolon();
    }
    return this.finishNode(node2, "ExportNamedDeclaration");
  };
  pp$8.checkExport = function(exports, name2, pos) {
    if (!exports) {
      return;
    }
    if (typeof name2 !== "string") {
      name2 = name2.type === "Identifier" ? name2.name : name2.value;
    }
    if (hasOwn(exports, name2)) {
      this.raiseRecoverable(pos, "Duplicate export '" + name2 + "'");
    }
    exports[name2] = true;
  };
  pp$8.checkPatternExport = function(exports, pat) {
    var type = pat.type;
    if (type === "Identifier") {
      this.checkExport(exports, pat, pat.start);
    } else if (type === "ObjectPattern") {
      for (var i = 0, list = pat.properties; i < list.length; i += 1) {
        var prop = list[i];
        this.checkPatternExport(exports, prop);
      }
    } else if (type === "ArrayPattern") {
      for (var i$1 = 0, list$12 = pat.elements; i$1 < list$12.length; i$1 += 1) {
        var elt = list$12[i$1];
        if (elt) {
          this.checkPatternExport(exports, elt);
        }
      }
    } else if (type === "Property") {
      this.checkPatternExport(exports, pat.value);
    } else if (type === "AssignmentPattern") {
      this.checkPatternExport(exports, pat.left);
    } else if (type === "RestElement") {
      this.checkPatternExport(exports, pat.argument);
    } else if (type === "ParenthesizedExpression") {
      this.checkPatternExport(exports, pat.expression);
    }
  };
  pp$8.checkVariableExport = function(exports, decls) {
    if (!exports) {
      return;
    }
    for (var i = 0, list = decls; i < list.length; i += 1) {
      var decl = list[i];
      this.checkPatternExport(exports, decl.id);
    }
  };
  pp$8.shouldParseExportStatement = function() {
    return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
  };
  pp$8.parseExportSpecifiers = function(exports) {
    var nodes = [], first = true;
    this.expect(types$1.braceL);
    while (!this.eat(types$1.braceR)) {
      if (!first) {
        this.expect(types$1.comma);
        if (this.afterTrailingComma(types$1.braceR)) {
          break;
        }
      } else {
        first = false;
      }
      var node2 = this.startNode();
      node2.local = this.parseModuleExportName();
      node2.exported = this.eatContextual("as") ? this.parseModuleExportName() : node2.local;
      this.checkExport(
        exports,
        node2.exported,
        node2.exported.start
      );
      nodes.push(this.finishNode(node2, "ExportSpecifier"));
    }
    return nodes;
  };
  pp$8.parseImport = function(node2) {
    this.next();
    if (this.type === types$1.string) {
      node2.specifiers = empty$1;
      node2.source = this.parseExprAtom();
    } else {
      node2.specifiers = this.parseImportSpecifiers();
      this.expectContextual("from");
      node2.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
    }
    this.semicolon();
    return this.finishNode(node2, "ImportDeclaration");
  };
  pp$8.parseImportSpecifiers = function() {
    var nodes = [], first = true;
    if (this.type === types$1.name) {
      var node2 = this.startNode();
      node2.local = this.parseIdent();
      this.checkLValSimple(node2.local, BIND_LEXICAL);
      nodes.push(this.finishNode(node2, "ImportDefaultSpecifier"));
      if (!this.eat(types$1.comma)) {
        return nodes;
      }
    }
    if (this.type === types$1.star) {
      var node$12 = this.startNode();
      this.next();
      this.expectContextual("as");
      node$12.local = this.parseIdent();
      this.checkLValSimple(node$12.local, BIND_LEXICAL);
      nodes.push(this.finishNode(node$12, "ImportNamespaceSpecifier"));
      return nodes;
    }
    this.expect(types$1.braceL);
    while (!this.eat(types$1.braceR)) {
      if (!first) {
        this.expect(types$1.comma);
        if (this.afterTrailingComma(types$1.braceR)) {
          break;
        }
      } else {
        first = false;
      }
      var node$2 = this.startNode();
      node$2.imported = this.parseModuleExportName();
      if (this.eatContextual("as")) {
        node$2.local = this.parseIdent();
      } else {
        this.checkUnreserved(node$2.imported);
        node$2.local = node$2.imported;
      }
      this.checkLValSimple(node$2.local, BIND_LEXICAL);
      nodes.push(this.finishNode(node$2, "ImportSpecifier"));
    }
    return nodes;
  };
  pp$8.parseModuleExportName = function() {
    if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
      var stringLiteral = this.parseLiteral(this.value);
      if (loneSurrogate.test(stringLiteral.value)) {
        this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
      }
      return stringLiteral;
    }
    return this.parseIdent(true);
  };
  pp$8.adaptDirectivePrologue = function(statements) {
    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
      statements[i].directive = statements[i].expression.raw.slice(1, -1);
    }
  };
  pp$8.isDirectiveCandidate = function(statement) {
    return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && // Reject parenthesized strings.
    (this.input[statement.start] === '"' || this.input[statement.start] === "'");
  };
  var pp$7 = Parser.prototype;
  pp$7.toAssignable = function(node2, isBinding, refDestructuringErrors) {
    if (this.options.ecmaVersion >= 6 && node2) {
      switch (node2.type) {
        case "Identifier":
          if (this.inAsync && node2.name === "await") {
            this.raise(node2.start, "Cannot use 'await' as identifier inside an async function");
          }
          break;
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          break;
        case "ObjectExpression":
          node2.type = "ObjectPattern";
          if (refDestructuringErrors) {
            this.checkPatternErrors(refDestructuringErrors, true);
          }
          for (var i = 0, list = node2.properties; i < list.length; i += 1) {
            var prop = list[i];
            this.toAssignable(prop, isBinding);
            if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
              this.raise(prop.argument.start, "Unexpected token");
            }
          }
          break;
        case "Property":
          if (node2.kind !== "init") {
            this.raise(node2.key.start, "Object pattern can't contain getter or setter");
          }
          this.toAssignable(node2.value, isBinding);
          break;
        case "ArrayExpression":
          node2.type = "ArrayPattern";
          if (refDestructuringErrors) {
            this.checkPatternErrors(refDestructuringErrors, true);
          }
          this.toAssignableList(node2.elements, isBinding);
          break;
        case "SpreadElement":
          node2.type = "RestElement";
          this.toAssignable(node2.argument, isBinding);
          if (node2.argument.type === "AssignmentPattern") {
            this.raise(node2.argument.start, "Rest elements cannot have a default value");
          }
          break;
        case "AssignmentExpression":
          if (node2.operator !== "=") {
            this.raise(node2.left.end, "Only '=' operator can be used for specifying default value.");
          }
          node2.type = "AssignmentPattern";
          delete node2.operator;
          this.toAssignable(node2.left, isBinding);
          break;
        case "ParenthesizedExpression":
          this.toAssignable(node2.expression, isBinding, refDestructuringErrors);
          break;
        case "ChainExpression":
          this.raiseRecoverable(node2.start, "Optional chaining cannot appear in left-hand side");
          break;
        case "MemberExpression":
          if (!isBinding) {
            break;
          }
        default:
          this.raise(node2.start, "Assigning to rvalue");
      }
    } else if (refDestructuringErrors) {
      this.checkPatternErrors(refDestructuringErrors, true);
    }
    return node2;
  };
  pp$7.toAssignableList = function(exprList, isBinding) {
    var end = exprList.length;
    for (var i = 0; i < end; i++) {
      var elt = exprList[i];
      if (elt) {
        this.toAssignable(elt, isBinding);
      }
    }
    if (end) {
      var last = exprList[end - 1];
      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
        this.unexpected(last.argument.start);
      }
    }
    return exprList;
  };
  pp$7.parseSpread = function(refDestructuringErrors) {
    var node2 = this.startNode();
    this.next();
    node2.argument = this.parseMaybeAssign(false, refDestructuringErrors);
    return this.finishNode(node2, "SpreadElement");
  };
  pp$7.parseRestBinding = function() {
    var node2 = this.startNode();
    this.next();
    if (this.options.ecmaVersion === 6 && this.type !== types$1.name) {
      this.unexpected();
    }
    node2.argument = this.parseBindingAtom();
    return this.finishNode(node2, "RestElement");
  };
  pp$7.parseBindingAtom = function() {
    if (this.options.ecmaVersion >= 6) {
      switch (this.type) {
        case types$1.bracketL:
          var node2 = this.startNode();
          this.next();
          node2.elements = this.parseBindingList(types$1.bracketR, true, true);
          return this.finishNode(node2, "ArrayPattern");
        case types$1.braceL:
          return this.parseObj(true);
      }
    }
    return this.parseIdent();
  };
  pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
    var elts = [], first = true;
    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(types$1.comma);
      }
      if (allowEmpty && this.type === types$1.comma) {
        elts.push(null);
      } else if (allowTrailingComma && this.afterTrailingComma(close)) {
        break;
      } else if (this.type === types$1.ellipsis) {
        var rest = this.parseRestBinding();
        this.parseBindingListItem(rest);
        elts.push(rest);
        if (this.type === types$1.comma) {
          this.raise(this.start, "Comma is not permitted after the rest element");
        }
        this.expect(close);
        break;
      } else {
        var elem = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(elem);
        elts.push(elem);
      }
    }
    return elts;
  };
  pp$7.parseBindingListItem = function(param) {
    return param;
  };
  pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
    left = left || this.parseBindingAtom();
    if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) {
      return left;
    }
    var node2 = this.startNodeAt(startPos, startLoc);
    node2.left = left;
    node2.right = this.parseMaybeAssign();
    return this.finishNode(node2, "AssignmentPattern");
  };
  pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
    if (bindingType === void 0)
      bindingType = BIND_NONE;
    var isBind = bindingType !== BIND_NONE;
    switch (expr.type) {
      case "Identifier":
        if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
          this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
        }
        if (isBind) {
          if (bindingType === BIND_LEXICAL && expr.name === "let") {
            this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
          }
          if (checkClashes) {
            if (hasOwn(checkClashes, expr.name)) {
              this.raiseRecoverable(expr.start, "Argument name clash");
            }
            checkClashes[expr.name] = true;
          }
          if (bindingType !== BIND_OUTSIDE) {
            this.declareName(expr.name, bindingType, expr.start);
          }
        }
        break;
      case "ChainExpression":
        this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
        break;
      case "MemberExpression":
        if (isBind) {
          this.raiseRecoverable(expr.start, "Binding member expression");
        }
        break;
      case "ParenthesizedExpression":
        if (isBind) {
          this.raiseRecoverable(expr.start, "Binding parenthesized expression");
        }
        return this.checkLValSimple(expr.expression, bindingType, checkClashes);
      default:
        this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
    }
  };
  pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
    if (bindingType === void 0)
      bindingType = BIND_NONE;
    switch (expr.type) {
      case "ObjectPattern":
        for (var i = 0, list = expr.properties; i < list.length; i += 1) {
          var prop = list[i];
          this.checkLValInnerPattern(prop, bindingType, checkClashes);
        }
        break;
      case "ArrayPattern":
        for (var i$1 = 0, list$12 = expr.elements; i$1 < list$12.length; i$1 += 1) {
          var elem = list$12[i$1];
          if (elem) {
            this.checkLValInnerPattern(elem, bindingType, checkClashes);
          }
        }
        break;
      default:
        this.checkLValSimple(expr, bindingType, checkClashes);
    }
  };
  pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
    if (bindingType === void 0)
      bindingType = BIND_NONE;
    switch (expr.type) {
      case "Property":
        this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
        break;
      case "AssignmentPattern":
        this.checkLValPattern(expr.left, bindingType, checkClashes);
        break;
      case "RestElement":
        this.checkLValPattern(expr.argument, bindingType, checkClashes);
        break;
      default:
        this.checkLValPattern(expr, bindingType, checkClashes);
    }
  };
  var TokContext = function TokContext2(token, isExpr, preserveSpace, override, generator) {
    this.token = token;
    this.isExpr = !!isExpr;
    this.preserveSpace = !!preserveSpace;
    this.override = override;
    this.generator = !!generator;
  };
  var types = {
    b_stat: new TokContext("{", false),
    b_expr: new TokContext("{", true),
    b_tmpl: new TokContext("${", false),
    p_stat: new TokContext("(", false),
    p_expr: new TokContext("(", true),
    q_tmpl: new TokContext("`", true, true, function(p2) {
      return p2.tryReadTemplateToken();
    }),
    f_stat: new TokContext("function", false),
    f_expr: new TokContext("function", true),
    f_expr_gen: new TokContext("function", true, false, null, true),
    f_gen: new TokContext("function", false, false, null, true)
  };
  var pp$6 = Parser.prototype;
  pp$6.initialContext = function() {
    return [types.b_stat];
  };
  pp$6.curContext = function() {
    return this.context[this.context.length - 1];
  };
  pp$6.braceIsBlock = function(prevType) {
    var parent = this.curContext();
    if (parent === types.f_expr || parent === types.f_stat) {
      return true;
    }
    if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) {
      return !parent.isExpr;
    }
    if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed) {
      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
    }
    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {
      return true;
    }
    if (prevType === types$1.braceL) {
      return parent === types.b_stat;
    }
    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {
      return false;
    }
    return !this.exprAllowed;
  };
  pp$6.inGeneratorContext = function() {
    for (var i = this.context.length - 1; i >= 1; i--) {
      var context = this.context[i];
      if (context.token === "function") {
        return context.generator;
      }
    }
    return false;
  };
  pp$6.updateContext = function(prevType) {
    var update, type = this.type;
    if (type.keyword && prevType === types$1.dot) {
      this.exprAllowed = false;
    } else if (update = type.updateContext) {
      update.call(this, prevType);
    } else {
      this.exprAllowed = type.beforeExpr;
    }
  };
  pp$6.overrideContext = function(tokenCtx) {
    if (this.curContext() !== tokenCtx) {
      this.context[this.context.length - 1] = tokenCtx;
    }
  };
  types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
    if (this.context.length === 1) {
      this.exprAllowed = true;
      return;
    }
    var out = this.context.pop();
    if (out === types.b_stat && this.curContext().token === "function") {
      out = this.context.pop();
    }
    this.exprAllowed = !out.isExpr;
  };
  types$1.braceL.updateContext = function(prevType) {
    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
    this.exprAllowed = true;
  };
  types$1.dollarBraceL.updateContext = function() {
    this.context.push(types.b_tmpl);
    this.exprAllowed = true;
  };
  types$1.parenL.updateContext = function(prevType) {
    var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
    this.context.push(statementParens ? types.p_stat : types.p_expr);
    this.exprAllowed = true;
  };
  types$1.incDec.updateContext = function() {
  };
  types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
    if (prevType.beforeExpr && prevType !== types$1._else && !(prevType === types$1.semi && this.curContext() !== types.p_stat) && !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {
      this.context.push(types.f_expr);
    } else {
      this.context.push(types.f_stat);
    }
    this.exprAllowed = false;
  };
  types$1.backQuote.updateContext = function() {
    if (this.curContext() === types.q_tmpl) {
      this.context.pop();
    } else {
      this.context.push(types.q_tmpl);
    }
    this.exprAllowed = false;
  };
  types$1.star.updateContext = function(prevType) {
    if (prevType === types$1._function) {
      var index = this.context.length - 1;
      if (this.context[index] === types.f_expr) {
        this.context[index] = types.f_expr_gen;
      } else {
        this.context[index] = types.f_gen;
      }
    }
    this.exprAllowed = true;
  };
  types$1.name.updateContext = function(prevType) {
    var allowed = false;
    if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
      if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
        allowed = true;
      }
    }
    this.exprAllowed = allowed;
  };
  var pp$5 = Parser.prototype;
  pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
    if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
      return;
    }
    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
      return;
    }
    var key = prop.key;
    var name2;
    switch (key.type) {
      case "Identifier":
        name2 = key.name;
        break;
      case "Literal":
        name2 = String(key.value);
        break;
      default:
        return;
    }
    var kind = prop.kind;
    if (this.options.ecmaVersion >= 6) {
      if (name2 === "__proto__" && kind === "init") {
        if (propHash.proto) {
          if (refDestructuringErrors) {
            if (refDestructuringErrors.doubleProto < 0) {
              refDestructuringErrors.doubleProto = key.start;
            }
          } else {
            this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
          }
        }
        propHash.proto = true;
      }
      return;
    }
    name2 = "$" + name2;
    var other = propHash[name2];
    if (other) {
      var redefinition;
      if (kind === "init") {
        redefinition = this.strict && other.init || other.get || other.set;
      } else {
        redefinition = other.init || other[kind];
      }
      if (redefinition) {
        this.raiseRecoverable(key.start, "Redefinition of property");
      }
    } else {
      other = propHash[name2] = {
        init: false,
        get: false,
        set: false
      };
    }
    other[kind] = true;
  };
  pp$5.parseExpression = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
    if (this.type === types$1.comma) {
      var node2 = this.startNodeAt(startPos, startLoc);
      node2.expressions = [expr];
      while (this.eat(types$1.comma)) {
        node2.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
      }
      return this.finishNode(node2, "SequenceExpression");
    }
    return expr;
  };
  pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
    if (this.isContextual("yield")) {
      if (this.inGenerator) {
        return this.parseYield(forInit);
      } else {
        this.exprAllowed = false;
      }
    }
    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
    if (refDestructuringErrors) {
      oldParenAssign = refDestructuringErrors.parenthesizedAssign;
      oldTrailingComma = refDestructuringErrors.trailingComma;
      oldDoubleProto = refDestructuringErrors.doubleProto;
      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
    } else {
      refDestructuringErrors = new DestructuringErrors();
      ownDestructuringErrors = true;
    }
    var startPos = this.start, startLoc = this.startLoc;
    if (this.type === types$1.parenL || this.type === types$1.name) {
      this.potentialArrowAt = this.start;
      this.potentialArrowInForAwait = forInit === "await";
    }
    var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
    if (afterLeftParse) {
      left = afterLeftParse.call(this, left, startPos, startLoc);
    }
    if (this.type.isAssign) {
      var node2 = this.startNodeAt(startPos, startLoc);
      node2.operator = this.value;
      if (this.type === types$1.eq) {
        left = this.toAssignable(left, false, refDestructuringErrors);
      }
      if (!ownDestructuringErrors) {
        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
      }
      if (refDestructuringErrors.shorthandAssign >= left.start) {
        refDestructuringErrors.shorthandAssign = -1;
      }
      if (this.type === types$1.eq) {
        this.checkLValPattern(left);
      } else {
        this.checkLValSimple(left);
      }
      node2.left = left;
      this.next();
      node2.right = this.parseMaybeAssign(forInit);
      if (oldDoubleProto > -1) {
        refDestructuringErrors.doubleProto = oldDoubleProto;
      }
      return this.finishNode(node2, "AssignmentExpression");
    } else {
      if (ownDestructuringErrors) {
        this.checkExpressionErrors(refDestructuringErrors, true);
      }
    }
    if (oldParenAssign > -1) {
      refDestructuringErrors.parenthesizedAssign = oldParenAssign;
    }
    if (oldTrailingComma > -1) {
      refDestructuringErrors.trailingComma = oldTrailingComma;
    }
    return left;
  };
  pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseExprOps(forInit, refDestructuringErrors);
    if (this.checkExpressionErrors(refDestructuringErrors)) {
      return expr;
    }
    if (this.eat(types$1.question)) {
      var node2 = this.startNodeAt(startPos, startLoc);
      node2.test = expr;
      node2.consequent = this.parseMaybeAssign();
      this.expect(types$1.colon);
      node2.alternate = this.parseMaybeAssign(forInit);
      return this.finishNode(node2, "ConditionalExpression");
    }
    return expr;
  };
  pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
    if (this.checkExpressionErrors(refDestructuringErrors)) {
      return expr;
    }
    return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
  };
  pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
    var prec = this.type.binop;
    if (prec != null && (!forInit || this.type !== types$1._in)) {
      if (prec > minPrec) {
        var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
        var coalesce = this.type === types$1.coalesce;
        if (coalesce) {
          prec = types$1.logicalAND.binop;
        }
        var op2 = this.value;
        this.next();
        var startPos = this.start, startLoc = this.startLoc;
        var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
        var node2 = this.buildBinary(leftStartPos, leftStartLoc, left, right, op2, logical || coalesce);
        if (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) {
          this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
        }
        return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec, forInit);
      }
    }
    return left;
  };
  pp$5.buildBinary = function(startPos, startLoc, left, right, op2, logical) {
    if (right.type === "PrivateIdentifier") {
      this.raise(right.start, "Private identifier can only be left side of binary expression");
    }
    var node2 = this.startNodeAt(startPos, startLoc);
    node2.left = left;
    node2.operator = op2;
    node2.right = right;
    return this.finishNode(node2, logical ? "LogicalExpression" : "BinaryExpression");
  };
  pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
    var startPos = this.start, startLoc = this.startLoc, expr;
    if (this.isContextual("await") && this.canAwait) {
      expr = this.parseAwait(forInit);
      sawUnary = true;
    } else if (this.type.prefix) {
      var node2 = this.startNode(), update = this.type === types$1.incDec;
      node2.operator = this.value;
      node2.prefix = true;
      this.next();
      node2.argument = this.parseMaybeUnary(null, true, update, forInit);
      this.checkExpressionErrors(refDestructuringErrors, true);
      if (update) {
        this.checkLValSimple(node2.argument);
      } else if (this.strict && node2.operator === "delete" && node2.argument.type === "Identifier") {
        this.raiseRecoverable(node2.start, "Deleting local variable in strict mode");
      } else if (node2.operator === "delete" && isPrivateFieldAccess(node2.argument)) {
        this.raiseRecoverable(node2.start, "Private fields can not be deleted");
      } else {
        sawUnary = true;
      }
      expr = this.finishNode(node2, update ? "UpdateExpression" : "UnaryExpression");
    } else if (!sawUnary && this.type === types$1.privateId) {
      if (forInit || this.privateNameStack.length === 0) {
        this.unexpected();
      }
      expr = this.parsePrivateIdent();
      if (this.type !== types$1._in) {
        this.unexpected();
      }
    } else {
      expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
      if (this.checkExpressionErrors(refDestructuringErrors)) {
        return expr;
      }
      while (this.type.postfix && !this.canInsertSemicolon()) {
        var node$12 = this.startNodeAt(startPos, startLoc);
        node$12.operator = this.value;
        node$12.prefix = false;
        node$12.argument = expr;
        this.checkLValSimple(expr);
        this.next();
        expr = this.finishNode(node$12, "UpdateExpression");
      }
    }
    if (!incDec && this.eat(types$1.starstar)) {
      if (sawUnary) {
        this.unexpected(this.lastTokStart);
      } else {
        return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
      }
    } else {
      return expr;
    }
  };
  function isPrivateFieldAccess(node2) {
    return node2.type === "MemberExpression" && node2.property.type === "PrivateIdentifier" || node2.type === "ChainExpression" && isPrivateFieldAccess(node2.expression);
  }
  pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseExprAtom(refDestructuringErrors, forInit);
    if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
      return expr;
    }
    var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
    if (refDestructuringErrors && result.type === "MemberExpression") {
      if (refDestructuringErrors.parenthesizedAssign >= result.start) {
        refDestructuringErrors.parenthesizedAssign = -1;
      }
      if (refDestructuringErrors.parenthesizedBind >= result.start) {
        refDestructuringErrors.parenthesizedBind = -1;
      }
      if (refDestructuringErrors.trailingComma >= result.start) {
        refDestructuringErrors.trailingComma = -1;
      }
    }
    return result;
  };
  pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
    var optionalChained = false;
    while (true) {
      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
      if (element.optional) {
        optionalChained = true;
      }
      if (element === base || element.type === "ArrowFunctionExpression") {
        if (optionalChained) {
          var chainNode = this.startNodeAt(startPos, startLoc);
          chainNode.expression = element;
          element = this.finishNode(chainNode, "ChainExpression");
        }
        return element;
      }
      base = element;
    }
  };
  pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
    var optionalSupported = this.options.ecmaVersion >= 11;
    var optional = optionalSupported && this.eat(types$1.questionDot);
    if (noCalls && optional) {
      this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
    }
    var computed = this.eat(types$1.bracketL);
    if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
      var node2 = this.startNodeAt(startPos, startLoc);
      node2.object = base;
      if (computed) {
        node2.property = this.parseExpression();
        this.expect(types$1.bracketR);
      } else if (this.type === types$1.privateId && base.type !== "Super") {
        node2.property = this.parsePrivateIdent();
      } else {
        node2.property = this.parseIdent(this.options.allowReserved !== "never");
      }
      node2.computed = !!computed;
      if (optionalSupported) {
        node2.optional = optional;
      }
      base = this.finishNode(node2, "MemberExpression");
    } else if (!noCalls && this.eat(types$1.parenL)) {
      var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
      this.yieldPos = 0;
      this.awaitPos = 0;
      this.awaitIdentPos = 0;
      var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
      if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
        this.checkPatternErrors(refDestructuringErrors, false);
        this.checkYieldAwaitInDefaultParams();
        if (this.awaitIdentPos > 0) {
          this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
        }
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
      }
      this.checkExpressionErrors(refDestructuringErrors, true);
      this.yieldPos = oldYieldPos || this.yieldPos;
      this.awaitPos = oldAwaitPos || this.awaitPos;
      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
      var node$12 = this.startNodeAt(startPos, startLoc);
      node$12.callee = base;
      node$12.arguments = exprList;
      if (optionalSupported) {
        node$12.optional = optional;
      }
      base = this.finishNode(node$12, "CallExpression");
    } else if (this.type === types$1.backQuote) {
      if (optional || optionalChained) {
        this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
      }
      var node$2 = this.startNodeAt(startPos, startLoc);
      node$2.tag = base;
      node$2.quasi = this.parseTemplate({ isTagged: true });
      base = this.finishNode(node$2, "TaggedTemplateExpression");
    }
    return base;
  };
  pp$5.parseExprAtom = function(refDestructuringErrors, forInit) {
    if (this.type === types$1.slash) {
      this.readRegexp();
    }
    var node2, canBeArrow = this.potentialArrowAt === this.start;
    switch (this.type) {
      case types$1._super:
        if (!this.allowSuper) {
          this.raise(this.start, "'super' keyword outside a method");
        }
        node2 = this.startNode();
        this.next();
        if (this.type === types$1.parenL && !this.allowDirectSuper) {
          this.raise(node2.start, "super() call outside constructor of a subclass");
        }
        if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL) {
          this.unexpected();
        }
        return this.finishNode(node2, "Super");
      case types$1._this:
        node2 = this.startNode();
        this.next();
        return this.finishNode(node2, "ThisExpression");
      case types$1.name:
        var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
        var id2 = this.parseIdent(false);
        if (this.options.ecmaVersion >= 8 && !containsEsc && id2.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {
          this.overrideContext(types.f_expr);
          return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
        }
        if (canBeArrow && !this.canInsertSemicolon()) {
          if (this.eat(types$1.arrow)) {
            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id2], false, forInit);
          }
          if (this.options.ecmaVersion >= 8 && id2.name === "async" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
            id2 = this.parseIdent(false);
            if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) {
              this.unexpected();
            }
            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id2], true, forInit);
          }
        }
        return id2;
      case types$1.regexp:
        var value = this.value;
        node2 = this.parseLiteral(value.value);
        node2.regex = { pattern: value.pattern, flags: value.flags };
        return node2;
      case types$1.num:
      case types$1.string:
        return this.parseLiteral(this.value);
      case types$1._null:
      case types$1._true:
      case types$1._false:
        node2 = this.startNode();
        node2.value = this.type === types$1._null ? null : this.type === types$1._true;
        node2.raw = this.type.keyword;
        this.next();
        return this.finishNode(node2, "Literal");
      case types$1.parenL:
        var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
        if (refDestructuringErrors) {
          if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
            refDestructuringErrors.parenthesizedAssign = start;
          }
          if (refDestructuringErrors.parenthesizedBind < 0) {
            refDestructuringErrors.parenthesizedBind = start;
          }
        }
        return expr;
      case types$1.bracketL:
        node2 = this.startNode();
        this.next();
        node2.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
        return this.finishNode(node2, "ArrayExpression");
      case types$1.braceL:
        this.overrideContext(types.b_expr);
        return this.parseObj(false, refDestructuringErrors);
      case types$1._function:
        node2 = this.startNode();
        this.next();
        return this.parseFunction(node2, 0);
      case types$1._class:
        return this.parseClass(this.startNode(), false);
      case types$1._new:
        return this.parseNew();
      case types$1.backQuote:
        return this.parseTemplate();
      case types$1._import:
        if (this.options.ecmaVersion >= 11) {
          return this.parseExprImport();
        } else {
          return this.unexpected();
        }
      default:
        this.unexpected();
    }
  };
  pp$5.parseExprImport = function() {
    var node2 = this.startNode();
    if (this.containsEsc) {
      this.raiseRecoverable(this.start, "Escape sequence in keyword import");
    }
    var meta = this.parseIdent(true);
    switch (this.type) {
      case types$1.parenL:
        return this.parseDynamicImport(node2);
      case types$1.dot:
        node2.meta = meta;
        return this.parseImportMeta(node2);
      default:
        this.unexpected();
    }
  };
  pp$5.parseDynamicImport = function(node2) {
    this.next();
    node2.source = this.parseMaybeAssign();
    if (!this.eat(types$1.parenR)) {
      var errorPos = this.start;
      if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
        this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
      } else {
        this.unexpected(errorPos);
      }
    }
    return this.finishNode(node2, "ImportExpression");
  };
  pp$5.parseImportMeta = function(node2) {
    this.next();
    var containsEsc = this.containsEsc;
    node2.property = this.parseIdent(true);
    if (node2.property.name !== "meta") {
      this.raiseRecoverable(node2.property.start, "The only valid meta property for import is 'import.meta'");
    }
    if (containsEsc) {
      this.raiseRecoverable(node2.start, "'import.meta' must not contain escaped characters");
    }
    if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) {
      this.raiseRecoverable(node2.start, "Cannot use 'import.meta' outside a module");
    }
    return this.finishNode(node2, "MetaProperty");
  };
  pp$5.parseLiteral = function(value) {
    var node2 = this.startNode();
    node2.value = value;
    node2.raw = this.input.slice(this.start, this.end);
    if (node2.raw.charCodeAt(node2.raw.length - 1) === 110) {
      node2.bigint = node2.raw.slice(0, -1).replace(/_/g, "");
    }
    this.next();
    return this.finishNode(node2, "Literal");
  };
  pp$5.parseParenExpression = function() {
    this.expect(types$1.parenL);
    var val = this.parseExpression();
    this.expect(types$1.parenR);
    return val;
  };
  pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
    if (this.options.ecmaVersion >= 6) {
      this.next();
      var innerStartPos = this.start, innerStartLoc = this.startLoc;
      var exprList = [], first = true, lastIsComma = false;
      var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
      this.yieldPos = 0;
      this.awaitPos = 0;
      while (this.type !== types$1.parenR) {
        first ? first = false : this.expect(types$1.comma);
        if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
          lastIsComma = true;
          break;
        } else if (this.type === types$1.ellipsis) {
          spreadStart = this.start;
          exprList.push(this.parseParenItem(this.parseRestBinding()));
          if (this.type === types$1.comma) {
            this.raise(this.start, "Comma is not permitted after the rest element");
          }
          break;
        } else {
          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
        }
      }
      var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
      this.expect(types$1.parenR);
      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
        this.checkPatternErrors(refDestructuringErrors, false);
        this.checkYieldAwaitInDefaultParams();
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        return this.parseParenArrowList(startPos, startLoc, exprList, forInit);
      }
      if (!exprList.length || lastIsComma) {
        this.unexpected(this.lastTokStart);
      }
      if (spreadStart) {
        this.unexpected(spreadStart);
      }
      this.checkExpressionErrors(refDestructuringErrors, true);
      this.yieldPos = oldYieldPos || this.yieldPos;
      this.awaitPos = oldAwaitPos || this.awaitPos;
      if (exprList.length > 1) {
        val = this.startNodeAt(innerStartPos, innerStartLoc);
        val.expressions = exprList;
        this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
      } else {
        val = exprList[0];
      }
    } else {
      val = this.parseParenExpression();
    }
    if (this.options.preserveParens) {
      var par = this.startNodeAt(startPos, startLoc);
      par.expression = val;
      return this.finishNode(par, "ParenthesizedExpression");
    } else {
      return val;
    }
  };
  pp$5.parseParenItem = function(item) {
    return item;
  };
  pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
  };
  var empty = [];
  pp$5.parseNew = function() {
    if (this.containsEsc) {
      this.raiseRecoverable(this.start, "Escape sequence in keyword new");
    }
    var node2 = this.startNode();
    var meta = this.parseIdent(true);
    if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {
      node2.meta = meta;
      var containsEsc = this.containsEsc;
      node2.property = this.parseIdent(true);
      if (node2.property.name !== "target") {
        this.raiseRecoverable(node2.property.start, "The only valid meta property for new is 'new.target'");
      }
      if (containsEsc) {
        this.raiseRecoverable(node2.start, "'new.target' must not contain escaped characters");
      }
      if (!this.allowNewDotTarget) {
        this.raiseRecoverable(node2.start, "'new.target' can only be used in functions and class static block");
      }
      return this.finishNode(node2, "MetaProperty");
    }
    var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;
    node2.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);
    if (isImport && node2.callee.type === "ImportExpression") {
      this.raise(startPos, "Cannot use new with import()");
    }
    if (this.eat(types$1.parenL)) {
      node2.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false);
    } else {
      node2.arguments = empty;
    }
    return this.finishNode(node2, "NewExpression");
  };
  pp$5.parseTemplateElement = function(ref2) {
    var isTagged = ref2.isTagged;
    var elem = this.startNode();
    if (this.type === types$1.invalidTemplate) {
      if (!isTagged) {
        this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
      }
      elem.value = {
        raw: this.value,
        cooked: null
      };
    } else {
      elem.value = {
        raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
        cooked: this.value
      };
    }
    this.next();
    elem.tail = this.type === types$1.backQuote;
    return this.finishNode(elem, "TemplateElement");
  };
  pp$5.parseTemplate = function(ref2) {
    if (ref2 === void 0)
      ref2 = {};
    var isTagged = ref2.isTagged;
    if (isTagged === void 0)
      isTagged = false;
    var node2 = this.startNode();
    this.next();
    node2.expressions = [];
    var curElt = this.parseTemplateElement({ isTagged });
    node2.quasis = [curElt];
    while (!curElt.tail) {
      if (this.type === types$1.eof) {
        this.raise(this.pos, "Unterminated template literal");
      }
      this.expect(types$1.dollarBraceL);
      node2.expressions.push(this.parseExpression());
      this.expect(types$1.braceR);
      node2.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
    }
    this.next();
    return this.finishNode(node2, "TemplateLiteral");
  };
  pp$5.isAsyncProp = function(prop) {
    return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
  };
  pp$5.parseObj = function(isPattern, refDestructuringErrors) {
    var node2 = this.startNode(), first = true, propHash = {};
    node2.properties = [];
    this.next();
    while (!this.eat(types$1.braceR)) {
      if (!first) {
        this.expect(types$1.comma);
        if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) {
          break;
        }
      } else {
        first = false;
      }
      var prop = this.parseProperty(isPattern, refDestructuringErrors);
      if (!isPattern) {
        this.checkPropClash(prop, propHash, refDestructuringErrors);
      }
      node2.properties.push(prop);
    }
    return this.finishNode(node2, isPattern ? "ObjectPattern" : "ObjectExpression");
  };
  pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
    if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
      if (isPattern) {
        prop.argument = this.parseIdent(false);
        if (this.type === types$1.comma) {
          this.raise(this.start, "Comma is not permitted after the rest element");
        }
        return this.finishNode(prop, "RestElement");
      }
      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
      if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
        refDestructuringErrors.trailingComma = this.start;
      }
      return this.finishNode(prop, "SpreadElement");
    }
    if (this.options.ecmaVersion >= 6) {
      prop.method = false;
      prop.shorthand = false;
      if (isPattern || refDestructuringErrors) {
        startPos = this.start;
        startLoc = this.startLoc;
      }
      if (!isPattern) {
        isGenerator = this.eat(types$1.star);
      }
    }
    var containsEsc = this.containsEsc;
    this.parsePropertyName(prop);
    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
      isAsync = true;
      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
      this.parsePropertyName(prop);
    } else {
      isAsync = false;
    }
    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
    return this.finishNode(prop, "Property");
  };
  pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
    if ((isGenerator || isAsync) && this.type === types$1.colon) {
      this.unexpected();
    }
    if (this.eat(types$1.colon)) {
      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
      prop.kind = "init";
    } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
      if (isPattern) {
        this.unexpected();
      }
      prop.kind = "init";
      prop.method = true;
      prop.value = this.parseMethod(isGenerator, isAsync);
    } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {
      if (isGenerator || isAsync) {
        this.unexpected();
      }
      prop.kind = prop.key.name;
      this.parsePropertyName(prop);
      prop.value = this.parseMethod(false);
      var paramCount = prop.kind === "get" ? 0 : 1;
      if (prop.value.params.length !== paramCount) {
        var start = prop.value.start;
        if (prop.kind === "get") {
          this.raiseRecoverable(start, "getter should have no params");
        } else {
          this.raiseRecoverable(start, "setter should have exactly one param");
        }
      } else {
        if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
          this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
        }
      }
    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
      if (isGenerator || isAsync) {
        this.unexpected();
      }
      this.checkUnreserved(prop.key);
      if (prop.key.name === "await" && !this.awaitIdentPos) {
        this.awaitIdentPos = startPos;
      }
      prop.kind = "init";
      if (isPattern) {
        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
      } else if (this.type === types$1.eq && refDestructuringErrors) {
        if (refDestructuringErrors.shorthandAssign < 0) {
          refDestructuringErrors.shorthandAssign = this.start;
        }
        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
      } else {
        prop.value = this.copyNode(prop.key);
      }
      prop.shorthand = true;
    } else {
      this.unexpected();
    }
  };
  pp$5.parsePropertyName = function(prop) {
    if (this.options.ecmaVersion >= 6) {
      if (this.eat(types$1.bracketL)) {
        prop.computed = true;
        prop.key = this.parseMaybeAssign();
        this.expect(types$1.bracketR);
        return prop.key;
      } else {
        prop.computed = false;
      }
    }
    return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
  };
  pp$5.initFunction = function(node2) {
    node2.id = null;
    if (this.options.ecmaVersion >= 6) {
      node2.generator = node2.expression = false;
    }
    if (this.options.ecmaVersion >= 8) {
      node2.async = false;
    }
  };
  pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
    var node2 = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.initFunction(node2);
    if (this.options.ecmaVersion >= 6) {
      node2.generator = isGenerator;
    }
    if (this.options.ecmaVersion >= 8) {
      node2.async = !!isAsync;
    }
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    this.enterScope(functionFlags(isAsync, node2.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
    this.expect(types$1.parenL);
    node2.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
    this.checkYieldAwaitInDefaultParams();
    this.parseFunctionBody(node2, false, true, false);
    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node2, "FunctionExpression");
  };
  pp$5.parseArrowExpression = function(node2, params, isAsync, forInit) {
    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
    this.initFunction(node2);
    if (this.options.ecmaVersion >= 8) {
      node2.async = !!isAsync;
    }
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    node2.params = this.toAssignableList(params, true);
    this.parseFunctionBody(node2, true, false, forInit);
    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node2, "ArrowFunctionExpression");
  };
  pp$5.parseFunctionBody = function(node2, isArrowFunction, isMethod, forInit) {
    var isExpression = isArrowFunction && this.type !== types$1.braceL;
    var oldStrict = this.strict, useStrict = false;
    if (isExpression) {
      node2.body = this.parseMaybeAssign(forInit);
      node2.expression = true;
      this.checkParams(node2, false);
    } else {
      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node2.params);
      if (!oldStrict || nonSimple) {
        useStrict = this.strictDirective(this.end);
        if (useStrict && nonSimple) {
          this.raiseRecoverable(node2.start, "Illegal 'use strict' directive in function with non-simple parameter list");
        }
      }
      var oldLabels = this.labels;
      this.labels = [];
      if (useStrict) {
        this.strict = true;
      }
      this.checkParams(node2, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node2.params));
      if (this.strict && node2.id) {
        this.checkLValSimple(node2.id, BIND_OUTSIDE);
      }
      node2.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
      node2.expression = false;
      this.adaptDirectivePrologue(node2.body.body);
      this.labels = oldLabels;
    }
    this.exitScope();
  };
  pp$5.isSimpleParamList = function(params) {
    for (var i = 0, list = params; i < list.length; i += 1) {
      var param = list[i];
      if (param.type !== "Identifier") {
        return false;
      }
    }
    return true;
  };
  pp$5.checkParams = function(node2, allowDuplicates) {
    var nameHash = /* @__PURE__ */ Object.create(null);
    for (var i = 0, list = node2.params; i < list.length; i += 1) {
      var param = list[i];
      this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
    }
  };
  pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
    var elts = [], first = true;
    while (!this.eat(close)) {
      if (!first) {
        this.expect(types$1.comma);
        if (allowTrailingComma && this.afterTrailingComma(close)) {
          break;
        }
      } else {
        first = false;
      }
      var elt = void 0;
      if (allowEmpty && this.type === types$1.comma) {
        elt = null;
      } else if (this.type === types$1.ellipsis) {
        elt = this.parseSpread(refDestructuringErrors);
        if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0) {
          refDestructuringErrors.trailingComma = this.start;
        }
      } else {
        elt = this.parseMaybeAssign(false, refDestructuringErrors);
      }
      elts.push(elt);
    }
    return elts;
  };
  pp$5.checkUnreserved = function(ref2) {
    var start = ref2.start;
    var end = ref2.end;
    var name2 = ref2.name;
    if (this.inGenerator && name2 === "yield") {
      this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
    }
    if (this.inAsync && name2 === "await") {
      this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
    }
    if (this.currentThisScope().inClassFieldInit && name2 === "arguments") {
      this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer");
    }
    if (this.inClassStaticBlock && (name2 === "arguments" || name2 === "await")) {
      this.raise(start, "Cannot use " + name2 + " in class static initialization block");
    }
    if (this.keywords.test(name2)) {
      this.raise(start, "Unexpected keyword '" + name2 + "'");
    }
    if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
      return;
    }
    var re2 = this.strict ? this.reservedWordsStrict : this.reservedWords;
    if (re2.test(name2)) {
      if (!this.inAsync && name2 === "await") {
        this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
      }
      this.raiseRecoverable(start, "The keyword '" + name2 + "' is reserved");
    }
  };
  pp$5.parseIdent = function(liberal) {
    var node2 = this.startNode();
    if (this.type === types$1.name) {
      node2.name = this.value;
    } else if (this.type.keyword) {
      node2.name = this.type.keyword;
      if ((node2.name === "class" || node2.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
        this.context.pop();
      }
    } else {
      this.unexpected();
    }
    this.next(!!liberal);
    this.finishNode(node2, "Identifier");
    if (!liberal) {
      this.checkUnreserved(node2);
      if (node2.name === "await" && !this.awaitIdentPos) {
        this.awaitIdentPos = node2.start;
      }
    }
    return node2;
  };
  pp$5.parsePrivateIdent = function() {
    var node2 = this.startNode();
    if (this.type === types$1.privateId) {
      node2.name = this.value;
    } else {
      this.unexpected();
    }
    this.next();
    this.finishNode(node2, "PrivateIdentifier");
    if (this.privateNameStack.length === 0) {
      this.raise(node2.start, "Private field '#" + node2.name + "' must be declared in an enclosing class");
    } else {
      this.privateNameStack[this.privateNameStack.length - 1].used.push(node2);
    }
    return node2;
  };
  pp$5.parseYield = function(forInit) {
    if (!this.yieldPos) {
      this.yieldPos = this.start;
    }
    var node2 = this.startNode();
    this.next();
    if (this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr) {
      node2.delegate = false;
      node2.argument = null;
    } else {
      node2.delegate = this.eat(types$1.star);
      node2.argument = this.parseMaybeAssign(forInit);
    }
    return this.finishNode(node2, "YieldExpression");
  };
  pp$5.parseAwait = function(forInit) {
    if (!this.awaitPos) {
      this.awaitPos = this.start;
    }
    var node2 = this.startNode();
    this.next();
    node2.argument = this.parseMaybeUnary(null, true, false, forInit);
    return this.finishNode(node2, "AwaitExpression");
  };
  var pp$4 = Parser.prototype;
  pp$4.raise = function(pos, message) {
    var loc = getLineInfo(this.input, pos);
    message += " (" + loc.line + ":" + loc.column + ")";
    var err = new SyntaxError(message);
    err.pos = pos;
    err.loc = loc;
    err.raisedAt = this.pos;
    throw err;
  };
  pp$4.raiseRecoverable = pp$4.raise;
  pp$4.curPosition = function() {
    if (this.options.locations) {
      return new Position(this.curLine, this.pos - this.lineStart);
    }
  };
  var pp$3 = Parser.prototype;
  var Scope = function Scope2(flags) {
    this.flags = flags;
    this.var = [];
    this.lexical = [];
    this.functions = [];
    this.inClassFieldInit = false;
  };
  pp$3.enterScope = function(flags) {
    this.scopeStack.push(new Scope(flags));
  };
  pp$3.exitScope = function() {
    this.scopeStack.pop();
  };
  pp$3.treatFunctionsAsVarInScope = function(scope) {
    return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
  };
  pp$3.declareName = function(name2, bindingType, pos) {
    var redeclared = false;
    if (bindingType === BIND_LEXICAL) {
      var scope = this.currentScope();
      redeclared = scope.lexical.indexOf(name2) > -1 || scope.functions.indexOf(name2) > -1 || scope.var.indexOf(name2) > -1;
      scope.lexical.push(name2);
      if (this.inModule && scope.flags & SCOPE_TOP) {
        delete this.undefinedExports[name2];
      }
    } else if (bindingType === BIND_SIMPLE_CATCH) {
      var scope$1 = this.currentScope();
      scope$1.lexical.push(name2);
    } else if (bindingType === BIND_FUNCTION) {
      var scope$2 = this.currentScope();
      if (this.treatFunctionsAsVar) {
        redeclared = scope$2.lexical.indexOf(name2) > -1;
      } else {
        redeclared = scope$2.lexical.indexOf(name2) > -1 || scope$2.var.indexOf(name2) > -1;
      }
      scope$2.functions.push(name2);
    } else {
      for (var i = this.scopeStack.length - 1; i >= 0; --i) {
        var scope$3 = this.scopeStack[i];
        if (scope$3.lexical.indexOf(name2) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name2) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name2) > -1) {
          redeclared = true;
          break;
        }
        scope$3.var.push(name2);
        if (this.inModule && scope$3.flags & SCOPE_TOP) {
          delete this.undefinedExports[name2];
        }
        if (scope$3.flags & SCOPE_VAR) {
          break;
        }
      }
    }
    if (redeclared) {
      this.raiseRecoverable(pos, "Identifier '" + name2 + "' has already been declared");
    }
  };
  pp$3.checkLocalExport = function(id2) {
    if (this.scopeStack[0].lexical.indexOf(id2.name) === -1 && this.scopeStack[0].var.indexOf(id2.name) === -1) {
      this.undefinedExports[id2.name] = id2;
    }
  };
  pp$3.currentScope = function() {
    return this.scopeStack[this.scopeStack.length - 1];
  };
  pp$3.currentVarScope = function() {
    for (var i = this.scopeStack.length - 1; ; i--) {
      var scope = this.scopeStack[i];
      if (scope.flags & SCOPE_VAR) {
        return scope;
      }
    }
  };
  pp$3.currentThisScope = function() {
    for (var i = this.scopeStack.length - 1; ; i--) {
      var scope = this.scopeStack[i];
      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
        return scope;
      }
    }
  };
  var Node = function Node2(parser, pos, loc) {
    this.type = "";
    this.start = pos;
    this.end = 0;
    if (parser.options.locations) {
      this.loc = new SourceLocation(parser, loc);
    }
    if (parser.options.directSourceFile) {
      this.sourceFile = parser.options.directSourceFile;
    }
    if (parser.options.ranges) {
      this.range = [pos, 0];
    }
  };
  var pp$2 = Parser.prototype;
  pp$2.startNode = function() {
    return new Node(this, this.start, this.startLoc);
  };
  pp$2.startNodeAt = function(pos, loc) {
    return new Node(this, pos, loc);
  };
  function finishNodeAt(node2, type, pos, loc) {
    node2.type = type;
    node2.end = pos;
    if (this.options.locations) {
      node2.loc.end = loc;
    }
    if (this.options.ranges) {
      node2.range[1] = pos;
    }
    return node2;
  }
  pp$2.finishNode = function(node2, type) {
    return finishNodeAt.call(this, node2, type, this.lastTokEnd, this.lastTokEndLoc);
  };
  pp$2.finishNodeAt = function(node2, type, pos, loc) {
    return finishNodeAt.call(this, node2, type, pos, loc);
  };
  pp$2.copyNode = function(node2) {
    var newNode = new Node(this, node2.start, this.startLoc);
    for (var prop in node2) {
      newNode[prop] = node2[prop];
    }
    return newNode;
  };
  var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
  var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
  var ecma11BinaryProperties = ecma10BinaryProperties;
  var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
  var ecma13BinaryProperties = ecma12BinaryProperties;
  var ecma14BinaryProperties = ecma13BinaryProperties;
  var unicodeBinaryProperties = {
    9: ecma9BinaryProperties,
    10: ecma10BinaryProperties,
    11: ecma11BinaryProperties,
    12: ecma12BinaryProperties,
    13: ecma13BinaryProperties,
    14: ecma14BinaryProperties
  };
  var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
  var ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
  var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
  var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
  var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
  var ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
  var ecma14ScriptValues = ecma13ScriptValues + " Kawi Nag_Mundari Nagm";
  var unicodeScriptValues = {
    9: ecma9ScriptValues,
    10: ecma10ScriptValues,
    11: ecma11ScriptValues,
    12: ecma12ScriptValues,
    13: ecma13ScriptValues,
    14: ecma14ScriptValues
  };
  var data = {};
  function buildUnicodeData(ecmaVersion) {
    var d2 = data[ecmaVersion] = {
      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
      nonBinary: {
        General_Category: wordsRegexp(unicodeGeneralCategoryValues),
        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
      }
    };
    d2.nonBinary.Script_Extensions = d2.nonBinary.Script;
    d2.nonBinary.gc = d2.nonBinary.General_Category;
    d2.nonBinary.sc = d2.nonBinary.Script;
    d2.nonBinary.scx = d2.nonBinary.Script_Extensions;
  }
  for (i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {
    ecmaVersion = list[i];
    buildUnicodeData(ecmaVersion);
  }
  var ecmaVersion;
  var i;
  var list;
  var pp$1 = Parser.prototype;
  var RegExpValidationState = function RegExpValidationState2(parser) {
    this.parser = parser;
    this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "");
    this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];
    this.source = "";
    this.flags = "";
    this.start = 0;
    this.switchU = false;
    this.switchN = false;
    this.pos = 0;
    this.lastIntValue = 0;
    this.lastStringValue = "";
    this.lastAssertionIsQuantifiable = false;
    this.numCapturingParens = 0;
    this.maxBackReference = 0;
    this.groupNames = [];
    this.backReferenceNames = [];
  };
  RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
    var unicode = flags.indexOf("u") !== -1;
    this.start = start | 0;
    this.source = pattern + "";
    this.flags = flags;
    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
  };
  RegExpValidationState.prototype.raise = function raise(message) {
    this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
  };
  RegExpValidationState.prototype.at = function at(i, forceU) {
    if (forceU === void 0)
      forceU = false;
    var s = this.source;
    var l = s.length;
    if (i >= l) {
      return -1;
    }
    var c2 = s.charCodeAt(i);
    if (!(forceU || this.switchU) || c2 <= 55295 || c2 >= 57344 || i + 1 >= l) {
      return c2;
    }
    var next = s.charCodeAt(i + 1);
    return next >= 56320 && next <= 57343 ? (c2 << 10) + next - 56613888 : c2;
  };
  RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
    if (forceU === void 0)
      forceU = false;
    var s = this.source;
    var l = s.length;
    if (i >= l) {
      return l;
    }
    var c2 = s.charCodeAt(i), next;
    if (!(forceU || this.switchU) || c2 <= 55295 || c2 >= 57344 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 56320 || next > 57343) {
      return i + 1;
    }
    return i + 2;
  };
  RegExpValidationState.prototype.current = function current(forceU) {
    if (forceU === void 0)
      forceU = false;
    return this.at(this.pos, forceU);
  };
  RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
    if (forceU === void 0)
      forceU = false;
    return this.at(this.nextIndex(this.pos, forceU), forceU);
  };
  RegExpValidationState.prototype.advance = function advance(forceU) {
    if (forceU === void 0)
      forceU = false;
    this.pos = this.nextIndex(this.pos, forceU);
  };
  RegExpValidationState.prototype.eat = function eat(ch2, forceU) {
    if (forceU === void 0)
      forceU = false;
    if (this.current(forceU) === ch2) {
      this.advance(forceU);
      return true;
    }
    return false;
  };
  pp$1.validateRegExpFlags = function(state) {
    var validFlags = state.validFlags;
    var flags = state.flags;
    for (var i = 0; i < flags.length; i++) {
      var flag = flags.charAt(i);
      if (validFlags.indexOf(flag) === -1) {
        this.raise(state.start, "Invalid regular expression flag");
      }
      if (flags.indexOf(flag, i + 1) > -1) {
        this.raise(state.start, "Duplicate regular expression flag");
      }
    }
  };
  pp$1.validateRegExpPattern = function(state) {
    this.regexp_pattern(state);
    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
      state.switchN = true;
      this.regexp_pattern(state);
    }
  };
  pp$1.regexp_pattern = function(state) {
    state.pos = 0;
    state.lastIntValue = 0;
    state.lastStringValue = "";
    state.lastAssertionIsQuantifiable = false;
    state.numCapturingParens = 0;
    state.maxBackReference = 0;
    state.groupNames.length = 0;
    state.backReferenceNames.length = 0;
    this.regexp_disjunction(state);
    if (state.pos !== state.source.length) {
      if (state.eat(
        41
        /* ) */
      )) {
        state.raise("Unmatched ')'");
      }
      if (state.eat(
        93
        /* ] */
      ) || state.eat(
        125
        /* } */
      )) {
        state.raise("Lone quantifier brackets");
      }
    }
    if (state.maxBackReference > state.numCapturingParens) {
      state.raise("Invalid escape");
    }
    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
      var name2 = list[i];
      if (state.groupNames.indexOf(name2) === -1) {
        state.raise("Invalid named capture referenced");
      }
    }
  };
  pp$1.regexp_disjunction = function(state) {
    this.regexp_alternative(state);
    while (state.eat(
      124
      /* | */
    )) {
      this.regexp_alternative(state);
    }
    if (this.regexp_eatQuantifier(state, true)) {
      state.raise("Nothing to repeat");
    }
    if (state.eat(
      123
      /* { */
    )) {
      state.raise("Lone quantifier brackets");
    }
  };
  pp$1.regexp_alternative = function(state) {
    while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
    }
  };
  pp$1.regexp_eatTerm = function(state) {
    if (this.regexp_eatAssertion(state)) {
      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
        if (state.switchU) {
          state.raise("Invalid quantifier");
        }
      }
      return true;
    }
    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
      this.regexp_eatQuantifier(state);
      return true;
    }
    return false;
  };
  pp$1.regexp_eatAssertion = function(state) {
    var start = state.pos;
    state.lastAssertionIsQuantifiable = false;
    if (state.eat(
      94
      /* ^ */
    ) || state.eat(
      36
      /* $ */
    )) {
      return true;
    }
    if (state.eat(
      92
      /* \ */
    )) {
      if (state.eat(
        66
        /* B */
      ) || state.eat(
        98
        /* b */
      )) {
        return true;
      }
      state.pos = start;
    }
    if (state.eat(
      40
      /* ( */
    ) && state.eat(
      63
      /* ? */
    )) {
      var lookbehind = false;
      if (this.options.ecmaVersion >= 9) {
        lookbehind = state.eat(
          60
          /* < */
        );
      }
      if (state.eat(
        61
        /* = */
      ) || state.eat(
        33
        /* ! */
      )) {
        this.regexp_disjunction(state);
        if (!state.eat(
          41
          /* ) */
        )) {
          state.raise("Unterminated group");
        }
        state.lastAssertionIsQuantifiable = !lookbehind;
        return true;
      }
    }
    state.pos = start;
    return false;
  };
  pp$1.regexp_eatQuantifier = function(state, noError) {
    if (noError === void 0)
      noError = false;
    if (this.regexp_eatQuantifierPrefix(state, noError)) {
      state.eat(
        63
        /* ? */
      );
      return true;
    }
    return false;
  };
  pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
    return state.eat(
      42
      /* * */
    ) || state.eat(
      43
      /* + */
    ) || state.eat(
      63
      /* ? */
    ) || this.regexp_eatBracedQuantifier(state, noError);
  };
  pp$1.regexp_eatBracedQuantifier = function(state, noError) {
    var start = state.pos;
    if (state.eat(
      123
      /* { */
    )) {
      var min = 0, max = -1;
      if (this.regexp_eatDecimalDigits(state)) {
        min = state.lastIntValue;
        if (state.eat(
          44
          /* , */
        ) && this.regexp_eatDecimalDigits(state)) {
          max = state.lastIntValue;
        }
        if (state.eat(
          125
          /* } */
        )) {
          if (max !== -1 && max < min && !noError) {
            state.raise("numbers out of order in {} quantifier");
          }
          return true;
        }
      }
      if (state.switchU && !noError) {
        state.raise("Incomplete quantifier");
      }
      state.pos = start;
    }
    return false;
  };
  pp$1.regexp_eatAtom = function(state) {
    return this.regexp_eatPatternCharacters(state) || state.eat(
      46
      /* . */
    ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
  };
  pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
    var start = state.pos;
    if (state.eat(
      92
      /* \ */
    )) {
      if (this.regexp_eatAtomEscape(state)) {
        return true;
      }
      state.pos = start;
    }
    return false;
  };
  pp$1.regexp_eatUncapturingGroup = function(state) {
    var start = state.pos;
    if (state.eat(
      40
      /* ( */
    )) {
      if (state.eat(
        63
        /* ? */
      ) && state.eat(
        58
        /* : */
      )) {
        this.regexp_disjunction(state);
        if (state.eat(
          41
          /* ) */
        )) {
          return true;
        }
        state.raise("Unterminated group");
      }
      state.pos = start;
    }
    return false;
  };
  pp$1.regexp_eatCapturingGroup = function(state) {
    if (state.eat(
      40
      /* ( */
    )) {
      if (this.options.ecmaVersion >= 9) {
        this.regexp_groupSpecifier(state);
      } else if (state.current() === 63) {
        state.raise("Invalid group");
      }
      this.regexp_disjunction(state);
      if (state.eat(
        41
        /* ) */
      )) {
        state.numCapturingParens += 1;
        return true;
      }
      state.raise("Unterminated group");
    }
    return false;
  };
  pp$1.regexp_eatExtendedAtom = function(state) {
    return state.eat(
      46
      /* . */
    ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
  };
  pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
    if (this.regexp_eatBracedQuantifier(state, true)) {
      state.raise("Nothing to repeat");
    }
    return false;
  };
  pp$1.regexp_eatSyntaxCharacter = function(state) {
    var ch2 = state.current();
    if (isSyntaxCharacter(ch2)) {
      state.lastIntValue = ch2;
      state.advance();
      return true;
    }
    return false;
  };
  function isSyntaxCharacter(ch2) {
    return ch2 === 36 || ch2 >= 40 && ch2 <= 43 || ch2 === 46 || ch2 === 63 || ch2 >= 91 && ch2 <= 94 || ch2 >= 123 && ch2 <= 125;
  }
  pp$1.regexp_eatPatternCharacters = function(state) {
    var start = state.pos;
    var ch2 = 0;
    while ((ch2 = state.current()) !== -1 && !isSyntaxCharacter(ch2)) {
      state.advance();
    }
    return state.pos !== start;
  };
  pp$1.regexp_eatExtendedPatternCharacter = function(state) {
    var ch2 = state.current();
    if (ch2 !== -1 && ch2 !== 36 && !(ch2 >= 40 && ch2 <= 43) && ch2 !== 46 && ch2 !== 63 && ch2 !== 91 && ch2 !== 94 && ch2 !== 124) {
      state.advance();
      return true;
    }
    return false;
  };
  pp$1.regexp_groupSpecifier = function(state) {
    if (state.eat(
      63
      /* ? */
    )) {
      if (this.regexp_eatGroupName(state)) {
        if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
          state.raise("Duplicate capture group name");
        }
        state.groupNames.push(state.lastStringValue);
        return;
      }
      state.raise("Invalid group");
    }
  };
  pp$1.regexp_eatGroupName = function(state) {
    state.lastStringValue = "";
    if (state.eat(
      60
      /* < */
    )) {
      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(
        62
        /* > */
      )) {
        return true;
      }
      state.raise("Invalid capture group name");
    }
    return false;
  };
  pp$1.regexp_eatRegExpIdentifierName = function(state) {
    state.lastStringValue = "";
    if (this.regexp_eatRegExpIdentifierStart(state)) {
      state.lastStringValue += codePointToString(state.lastIntValue);
      while (this.regexp_eatRegExpIdentifierPart(state)) {
        state.lastStringValue += codePointToString(state.lastIntValue);
      }
      return true;
    }
    return false;
  };
  pp$1.regexp_eatRegExpIdentifierStart = function(state) {
    var start = state.pos;
    var forceU = this.options.ecmaVersion >= 11;
    var ch2 = state.current(forceU);
    state.advance(forceU);
    if (ch2 === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
      ch2 = state.lastIntValue;
    }
    if (isRegExpIdentifierStart(ch2)) {
      state.lastIntValue = ch2;
      return true;
    }
    state.pos = start;
    return false;
  };
  function isRegExpIdentifierStart(ch2) {
    return isIdentifierStart(ch2, true) || ch2 === 36 || ch2 === 95;
  }
  pp$1.regexp_eatRegExpIdentifierPart = function(state) {
    var start = state.pos;
    var forceU = this.options.ecmaVersion >= 11;
    var ch2 = state.current(forceU);
    state.advance(forceU);
    if (ch2 === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
      ch2 = state.lastIntValue;
    }
    if (isRegExpIdentifierPart(ch2)) {
      state.lastIntValue = ch2;
      return true;
    }
    state.pos = start;
    return false;
  };
  function isRegExpIdentifierPart(ch2) {
    return isIdentifierChar(ch2, true) || ch2 === 36 || ch2 === 95 || ch2 === 8204 || ch2 === 8205;
  }
  pp$1.regexp_eatAtomEscape = function(state) {
    if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
      return true;
    }
    if (state.switchU) {
      if (state.current() === 99) {
        state.raise("Invalid unicode escape");
      }
      state.raise("Invalid escape");
    }
    return false;
  };
  pp$1.regexp_eatBackReference = function(state) {
    var start = state.pos;
    if (this.regexp_eatDecimalEscape(state)) {
      var n2 = state.lastIntValue;
      if (state.switchU) {
        if (n2 > state.maxBackReference) {
          state.maxBackReference = n2;
        }
        return true;
      }
      if (n2 <= state.numCapturingParens) {
        return true;
      }
      state.pos = start;
    }
    return false;
  };
  pp$1.regexp_eatKGroupName = function(state) {
    if (state.eat(
      107
      /* k */
    )) {
      if (this.regexp_eatGroupName(state)) {
        state.backReferenceNames.push(state.lastStringValue);
        return true;
      }
      state.raise("Invalid named reference");
    }
    return false;
  };
  pp$1.regexp_eatCharacterEscape = function(state) {
    return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
  };
  pp$1.regexp_eatCControlLetter = function(state) {
    var start = state.pos;
    if (state.eat(
      99
      /* c */
    )) {
      if (this.regexp_eatControlLetter(state)) {
        return true;
      }
      state.pos = start;
    }
    return false;
  };
  pp$1.regexp_eatZero = function(state) {
    if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
      state.lastIntValue = 0;
      state.advance();
      return true;
    }
    return false;
  };
  pp$1.regexp_eatControlEscape = function(state) {
    var ch2 = state.current();
    if (ch2 === 116) {
      state.lastIntValue = 9;
      state.advance();
      return true;
    }
    if (ch2 === 110) {
      state.lastIntValue = 10;
      state.advance();
      return true;
    }
    if (ch2 === 118) {
      state.lastIntValue = 11;
      state.advance();
      return true;
    }
    if (ch2 === 102) {
      state.lastIntValue = 12;
      state.advance();
      return true;
    }
    if (ch2 === 114) {
      state.lastIntValue = 13;
      state.advance();
      return true;
    }
    return false;
  };
  pp$1.regexp_eatControlLetter = function(state) {
    var ch2 = state.current();
    if (isControlLetter(ch2)) {
      state.lastIntValue = ch2 % 32;
      state.advance();
      return true;
    }
    return false;
  };
  function isControlLetter(ch2) {
    return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122;
  }
  pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
    if (forceU === void 0)
      forceU = false;
    var start = state.pos;
    var switchU = forceU || state.switchU;
    if (state.eat(
      117
      /* u */
    )) {
      if (this.regexp_eatFixedHexDigits(state, 4)) {
        var lead = state.lastIntValue;
        if (switchU && lead >= 55296 && lead <= 56319) {
          var leadSurrogateEnd = state.pos;
          if (state.eat(
            92
            /* \ */
          ) && state.eat(
            117
            /* u */
          ) && this.regexp_eatFixedHexDigits(state, 4)) {
            var trail = state.lastIntValue;
            if (trail >= 56320 && trail <= 57343) {
              state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
              return true;
            }
          }
          state.pos = leadSurrogateEnd;
          state.lastIntValue = lead;
        }
        return true;
      }
      if (switchU && state.eat(
        123
        /* { */
      ) && this.regexp_eatHexDigits(state) && state.eat(
        125
        /* } */
      ) && isValidUnicode(state.lastIntValue)) {
        return true;
      }
      if (switchU) {
        state.raise("Invalid unicode escape");
      }
      state.pos = start;
    }
    return false;
  };
  function isValidUnicode(ch2) {
    return ch2 >= 0 && ch2 <= 1114111;
  }
  pp$1.regexp_eatIdentityEscape = function(state) {
    if (state.switchU) {
      if (this.regexp_eatSyntaxCharacter(state)) {
        return true;
      }
      if (state.eat(
        47
        /* / */
      )) {
        state.lastIntValue = 47;
        return true;
      }
      return false;
    }
    var ch2 = state.current();
    if (ch2 !== 99 && (!state.switchN || ch2 !== 107)) {
      state.lastIntValue = ch2;
      state.advance();
      return true;
    }
    return false;
  };
  pp$1.regexp_eatDecimalEscape = function(state) {
    state.lastIntValue = 0;
    var ch2 = state.current();
    if (ch2 >= 49 && ch2 <= 57) {
      do {
        state.lastIntValue = 10 * state.lastIntValue + (ch2 - 48);
        state.advance();
      } while ((ch2 = state.current()) >= 48 && ch2 <= 57);
      return true;
    }
    return false;
  };
  pp$1.regexp_eatCharacterClassEscape = function(state) {
    var ch2 = state.current();
    if (isCharacterClassEscape(ch2)) {
      state.lastIntValue = -1;
      state.advance();
      return true;
    }
    if (state.switchU && this.options.ecmaVersion >= 9 && (ch2 === 80 || ch2 === 112)) {
      state.lastIntValue = -1;
      state.advance();
      if (state.eat(
        123
        /* { */
      ) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(
        125
        /* } */
      )) {
        return true;
      }
      state.raise("Invalid property name");
    }
    return false;
  };
  function isCharacterClassEscape(ch2) {
    return ch2 === 100 || ch2 === 68 || ch2 === 115 || ch2 === 83 || ch2 === 119 || ch2 === 87;
  }
  pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
    var start = state.pos;
    if (this.regexp_eatUnicodePropertyName(state) && state.eat(
      61
      /* = */
    )) {
      var name2 = state.lastStringValue;
      if (this.regexp_eatUnicodePropertyValue(state)) {
        var value = state.lastStringValue;
        this.regexp_validateUnicodePropertyNameAndValue(state, name2, value);
        return true;
      }
    }
    state.pos = start;
    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
      var nameOrValue = state.lastStringValue;
      this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
      return true;
    }
    return false;
  };
  pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name2, value) {
    if (!hasOwn(state.unicodeProperties.nonBinary, name2)) {
      state.raise("Invalid property name");
    }
    if (!state.unicodeProperties.nonBinary[name2].test(value)) {
      state.raise("Invalid property value");
    }
  };
  pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
    if (!state.unicodeProperties.binary.test(nameOrValue)) {
      state.raise("Invalid property name");
    }
  };
  pp$1.regexp_eatUnicodePropertyName = function(state) {
    var ch2 = 0;
    state.lastStringValue = "";
    while (isUnicodePropertyNameCharacter(ch2 = state.current())) {
      state.lastStringValue += codePointToString(ch2);
      state.advance();
    }
    return state.lastStringValue !== "";
  };
  function isUnicodePropertyNameCharacter(ch2) {
    return isControlLetter(ch2) || ch2 === 95;
  }
  pp$1.regexp_eatUnicodePropertyValue = function(state) {
    var ch2 = 0;
    state.lastStringValue = "";
    while (isUnicodePropertyValueCharacter(ch2 = state.current())) {
      state.lastStringValue += codePointToString(ch2);
      state.advance();
    }
    return state.lastStringValue !== "";
  };
  function isUnicodePropertyValueCharacter(ch2) {
    return isUnicodePropertyNameCharacter(ch2) || isDecimalDigit(ch2);
  }
  pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
    return this.regexp_eatUnicodePropertyValue(state);
  };
  pp$1.regexp_eatCharacterClass = function(state) {
    if (state.eat(
      91
      /* [ */
    )) {
      state.eat(
        94
        /* ^ */
      );
      this.regexp_classRanges(state);
      if (state.eat(
        93
        /* ] */
      )) {
        return true;
      }
      state.raise("Unterminated character class");
    }
    return false;
  };
  pp$1.regexp_classRanges = function(state) {
    while (this.regexp_eatClassAtom(state)) {
      var left = state.lastIntValue;
      if (state.eat(
        45
        /* - */
      ) && this.regexp_eatClassAtom(state)) {
        var right = state.lastIntValue;
        if (state.switchU && (left === -1 || right === -1)) {
          state.raise("Invalid character class");
        }
        if (left !== -1 && right !== -1 && left > right) {
          state.raise("Range out of order in character class");
        }
      }
    }
  };
  pp$1.regexp_eatClassAtom = function(state) {
    var start = state.pos;
    if (state.eat(
      92
      /* \ */
    )) {
      if (this.regexp_eatClassEscape(state)) {
        return true;
      }
      if (state.switchU) {
        var ch$1 = state.current();
        if (ch$1 === 99 || isOctalDigit(ch$1)) {
          state.raise("Invalid class escape");
        }
        state.raise("Invalid escape");
      }
      state.pos = start;
    }
    var ch2 = state.current();
    if (ch2 !== 93) {
      state.lastIntValue = ch2;
      state.advance();
      return true;
    }
    return false;
  };
  pp$1.regexp_eatClassEscape = function(state) {
    var start = state.pos;
    if (state.eat(
      98
      /* b */
    )) {
      state.lastIntValue = 8;
      return true;
    }
    if (state.switchU && state.eat(
      45
      /* - */
    )) {
      state.lastIntValue = 45;
      return true;
    }
    if (!state.switchU && state.eat(
      99
      /* c */
    )) {
      if (this.regexp_eatClassControlLetter(state)) {
        return true;
      }
      state.pos = start;
    }
    return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
  };
  pp$1.regexp_eatClassControlLetter = function(state) {
    var ch2 = state.current();
    if (isDecimalDigit(ch2) || ch2 === 95) {
      state.lastIntValue = ch2 % 32;
      state.advance();
      return true;
    }
    return false;
  };
  pp$1.regexp_eatHexEscapeSequence = function(state) {
    var start = state.pos;
    if (state.eat(
      120
      /* x */
    )) {
      if (this.regexp_eatFixedHexDigits(state, 2)) {
        return true;
      }
      if (state.switchU) {
        state.raise("Invalid escape");
      }
      state.pos = start;
    }
    return false;
  };
  pp$1.regexp_eatDecimalDigits = function(state) {
    var start = state.pos;
    var ch2 = 0;
    state.lastIntValue = 0;
    while (isDecimalDigit(ch2 = state.current())) {
      state.lastIntValue = 10 * state.lastIntValue + (ch2 - 48);
      state.advance();
    }
    return state.pos !== start;
  };
  function isDecimalDigit(ch2) {
    return ch2 >= 48 && ch2 <= 57;
  }
  pp$1.regexp_eatHexDigits = function(state) {
    var start = state.pos;
    var ch2 = 0;
    state.lastIntValue = 0;
    while (isHexDigit(ch2 = state.current())) {
      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch2);
      state.advance();
    }
    return state.pos !== start;
  };
  function isHexDigit(ch2) {
    return ch2 >= 48 && ch2 <= 57 || ch2 >= 65 && ch2 <= 70 || ch2 >= 97 && ch2 <= 102;
  }
  function hexToInt(ch2) {
    if (ch2 >= 65 && ch2 <= 70) {
      return 10 + (ch2 - 65);
    }
    if (ch2 >= 97 && ch2 <= 102) {
      return 10 + (ch2 - 97);
    }
    return ch2 - 48;
  }
  pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
    if (this.regexp_eatOctalDigit(state)) {
      var n1 = state.lastIntValue;
      if (this.regexp_eatOctalDigit(state)) {
        var n2 = state.lastIntValue;
        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
        } else {
          state.lastIntValue = n1 * 8 + n2;
        }
      } else {
        state.lastIntValue = n1;
      }
      return true;
    }
    return false;
  };
  pp$1.regexp_eatOctalDigit = function(state) {
    var ch2 = state.current();
    if (isOctalDigit(ch2)) {
      state.lastIntValue = ch2 - 48;
      state.advance();
      return true;
    }
    state.lastIntValue = 0;
    return false;
  };
  function isOctalDigit(ch2) {
    return ch2 >= 48 && ch2 <= 55;
  }
  pp$1.regexp_eatFixedHexDigits = function(state, length) {
    var start = state.pos;
    state.lastIntValue = 0;
    for (var i = 0; i < length; ++i) {
      var ch2 = state.current();
      if (!isHexDigit(ch2)) {
        state.pos = start;
        return false;
      }
      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch2);
      state.advance();
    }
    return true;
  };
  var Token = function Token2(p2) {
    this.type = p2.type;
    this.value = p2.value;
    this.start = p2.start;
    this.end = p2.end;
    if (p2.options.locations) {
      this.loc = new SourceLocation(p2, p2.startLoc, p2.endLoc);
    }
    if (p2.options.ranges) {
      this.range = [p2.start, p2.end];
    }
  };
  var pp = Parser.prototype;
  pp.next = function(ignoreEscapeSequenceInKeyword) {
    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
      this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
    }
    if (this.options.onToken) {
      this.options.onToken(new Token(this));
    }
    this.lastTokEnd = this.end;
    this.lastTokStart = this.start;
    this.lastTokEndLoc = this.endLoc;
    this.lastTokStartLoc = this.startLoc;
    this.nextToken();
  };
  pp.getToken = function() {
    this.next();
    return new Token(this);
  };
  if (typeof Symbol !== "undefined") {
    pp[Symbol.iterator] = function() {
      var this$1$1 = this;
      return {
        next: function() {
          var token = this$1$1.getToken();
          return {
            done: token.type === types$1.eof,
            value: token
          };
        }
      };
    };
  }
  pp.nextToken = function() {
    var curContext = this.curContext();
    if (!curContext || !curContext.preserveSpace) {
      this.skipSpace();
    }
    this.start = this.pos;
    if (this.options.locations) {
      this.startLoc = this.curPosition();
    }
    if (this.pos >= this.input.length) {
      return this.finishToken(types$1.eof);
    }
    if (curContext.override) {
      return curContext.override(this);
    } else {
      this.readToken(this.fullCharCodeAtPos());
    }
  };
  pp.readToken = function(code) {
    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
      return this.readWord();
    }
    return this.getTokenFromCode(code);
  };
  pp.fullCharCodeAtPos = function() {
    var code = this.input.charCodeAt(this.pos);
    if (code <= 55295 || code >= 56320) {
      return code;
    }
    var next = this.input.charCodeAt(this.pos + 1);
    return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
  };
  pp.skipBlockComment = function() {
    var startLoc = this.options.onComment && this.curPosition();
    var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
    if (end === -1) {
      this.raise(this.pos - 2, "Unterminated comment");
    }
    this.pos = end + 2;
    if (this.options.locations) {
      for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) {
        ++this.curLine;
        pos = this.lineStart = nextBreak;
      }
    }
    if (this.options.onComment) {
      this.options.onComment(
        true,
        this.input.slice(start + 2, end),
        start,
        this.pos,
        startLoc,
        this.curPosition()
      );
    }
  };
  pp.skipLineComment = function(startSkip) {
    var start = this.pos;
    var startLoc = this.options.onComment && this.curPosition();
    var ch2 = this.input.charCodeAt(this.pos += startSkip);
    while (this.pos < this.input.length && !isNewLine(ch2)) {
      ch2 = this.input.charCodeAt(++this.pos);
    }
    if (this.options.onComment) {
      this.options.onComment(
        false,
        this.input.slice(start + startSkip, this.pos),
        start,
        this.pos,
        startLoc,
        this.curPosition()
      );
    }
  };
  pp.skipSpace = function() {
    loop:
      while (this.pos < this.input.length) {
        var ch2 = this.input.charCodeAt(this.pos);
        switch (ch2) {
          case 32:
          case 160:
            ++this.pos;
            break;
          case 13:
            if (this.input.charCodeAt(this.pos + 1) === 10) {
              ++this.pos;
            }
          case 10:
          case 8232:
          case 8233:
            ++this.pos;
            if (this.options.locations) {
              ++this.curLine;
              this.lineStart = this.pos;
            }
            break;
          case 47:
            switch (this.input.charCodeAt(this.pos + 1)) {
              case 42:
                this.skipBlockComment();
                break;
              case 47:
                this.skipLineComment(2);
                break;
              default:
                break loop;
            }
            break;
          default:
            if (ch2 > 8 && ch2 < 14 || ch2 >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch2))) {
              ++this.pos;
            } else {
              break loop;
            }
        }
      }
  };
  pp.finishToken = function(type, val) {
    this.end = this.pos;
    if (this.options.locations) {
      this.endLoc = this.curPosition();
    }
    var prevType = this.type;
    this.type = type;
    this.value = val;
    this.updateContext(prevType);
  };
  pp.readToken_dot = function() {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next >= 48 && next <= 57) {
      return this.readNumber(true);
    }
    var next2 = this.input.charCodeAt(this.pos + 2);
    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
      this.pos += 3;
      return this.finishToken(types$1.ellipsis);
    } else {
      ++this.pos;
      return this.finishToken(types$1.dot);
    }
  };
  pp.readToken_slash = function() {
    var next = this.input.charCodeAt(this.pos + 1);
    if (this.exprAllowed) {
      ++this.pos;
      return this.readRegexp();
    }
    if (next === 61) {
      return this.finishOp(types$1.assign, 2);
    }
    return this.finishOp(types$1.slash, 1);
  };
  pp.readToken_mult_modulo_exp = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    var size = 1;
    var tokentype = code === 42 ? types$1.star : types$1.modulo;
    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
      ++size;
      tokentype = types$1.starstar;
      next = this.input.charCodeAt(this.pos + 2);
    }
    if (next === 61) {
      return this.finishOp(types$1.assign, size + 1);
    }
    return this.finishOp(tokentype, size);
  };
  pp.readToken_pipe_amp = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === code) {
      if (this.options.ecmaVersion >= 12) {
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (next2 === 61) {
          return this.finishOp(types$1.assign, 3);
        }
      }
      return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
    }
    if (next === 61) {
      return this.finishOp(types$1.assign, 2);
    }
    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
  };
  pp.readToken_caret = function() {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 61) {
      return this.finishOp(types$1.assign, 2);
    }
    return this.finishOp(types$1.bitwiseXOR, 1);
  };
  pp.readToken_plus_min = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === code) {
      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
        this.skipLineComment(3);
        this.skipSpace();
        return this.nextToken();
      }
      return this.finishOp(types$1.incDec, 2);
    }
    if (next === 61) {
      return this.finishOp(types$1.assign, 2);
    }
    return this.finishOp(types$1.plusMin, 1);
  };
  pp.readToken_lt_gt = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    var size = 1;
    if (next === code) {
      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
      if (this.input.charCodeAt(this.pos + size) === 61) {
        return this.finishOp(types$1.assign, size + 1);
      }
      return this.finishOp(types$1.bitShift, size);
    }
    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
      this.skipLineComment(4);
      this.skipSpace();
      return this.nextToken();
    }
    if (next === 61) {
      size = 2;
    }
    return this.finishOp(types$1.relational, size);
  };
  pp.readToken_eq_excl = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 61) {
      return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
    }
    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
      this.pos += 2;
      return this.finishToken(types$1.arrow);
    }
    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);
  };
  pp.readToken_question = function() {
    var ecmaVersion = this.options.ecmaVersion;
    if (ecmaVersion >= 11) {
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 46) {
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (next2 < 48 || next2 > 57) {
          return this.finishOp(types$1.questionDot, 2);
        }
      }
      if (next === 63) {
        if (ecmaVersion >= 12) {
          var next2$1 = this.input.charCodeAt(this.pos + 2);
          if (next2$1 === 61) {
            return this.finishOp(types$1.assign, 3);
          }
        }
        return this.finishOp(types$1.coalesce, 2);
      }
    }
    return this.finishOp(types$1.question, 1);
  };
  pp.readToken_numberSign = function() {
    var ecmaVersion = this.options.ecmaVersion;
    var code = 35;
    if (ecmaVersion >= 13) {
      ++this.pos;
      code = this.fullCharCodeAtPos();
      if (isIdentifierStart(code, true) || code === 92) {
        return this.finishToken(types$1.privateId, this.readWord1());
      }
    }
    this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
  };
  pp.getTokenFromCode = function(code) {
    switch (code) {
      case 46:
        return this.readToken_dot();
      case 40:
        ++this.pos;
        return this.finishToken(types$1.parenL);
      case 41:
        ++this.pos;
        return this.finishToken(types$1.parenR);
      case 59:
        ++this.pos;
        return this.finishToken(types$1.semi);
      case 44:
        ++this.pos;
        return this.finishToken(types$1.comma);
      case 91:
        ++this.pos;
        return this.finishToken(types$1.bracketL);
      case 93:
        ++this.pos;
        return this.finishToken(types$1.bracketR);
      case 123:
        ++this.pos;
        return this.finishToken(types$1.braceL);
      case 125:
        ++this.pos;
        return this.finishToken(types$1.braceR);
      case 58:
        ++this.pos;
        return this.finishToken(types$1.colon);
      case 96:
        if (this.options.ecmaVersion < 6) {
          break;
        }
        ++this.pos;
        return this.finishToken(types$1.backQuote);
      case 48:
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 120 || next === 88) {
          return this.readRadixNumber(16);
        }
        if (this.options.ecmaVersion >= 6) {
          if (next === 111 || next === 79) {
            return this.readRadixNumber(8);
          }
          if (next === 98 || next === 66) {
            return this.readRadixNumber(2);
          }
        }
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        return this.readNumber(false);
      case 34:
      case 39:
        return this.readString(code);
      case 47:
        return this.readToken_slash();
      case 37:
      case 42:
        return this.readToken_mult_modulo_exp(code);
      case 124:
      case 38:
        return this.readToken_pipe_amp(code);
      case 94:
        return this.readToken_caret();
      case 43:
      case 45:
        return this.readToken_plus_min(code);
      case 60:
      case 62:
        return this.readToken_lt_gt(code);
      case 61:
      case 33:
        return this.readToken_eq_excl(code);
      case 63:
        return this.readToken_question();
      case 126:
        return this.finishOp(types$1.prefix, 1);
      case 35:
        return this.readToken_numberSign();
    }
    this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
  };
  pp.finishOp = function(type, size) {
    var str = this.input.slice(this.pos, this.pos + size);
    this.pos += size;
    return this.finishToken(type, str);
  };
  pp.readRegexp = function() {
    var escaped2, inClass, start = this.pos;
    for (; ; ) {
      if (this.pos >= this.input.length) {
        this.raise(start, "Unterminated regular expression");
      }
      var ch2 = this.input.charAt(this.pos);
      if (lineBreak.test(ch2)) {
        this.raise(start, "Unterminated regular expression");
      }
      if (!escaped2) {
        if (ch2 === "[") {
          inClass = true;
        } else if (ch2 === "]" && inClass) {
          inClass = false;
        } else if (ch2 === "/" && !inClass) {
          break;
        }
        escaped2 = ch2 === "\\";
      } else {
        escaped2 = false;
      }
      ++this.pos;
    }
    var pattern = this.input.slice(start, this.pos);
    ++this.pos;
    var flagsStart = this.pos;
    var flags = this.readWord1();
    if (this.containsEsc) {
      this.unexpected(flagsStart);
    }
    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
    state.reset(start, pattern, flags);
    this.validateRegExpFlags(state);
    this.validateRegExpPattern(state);
    var value = null;
    try {
      value = new RegExp(pattern, flags);
    } catch (e) {
    }
    return this.finishToken(types$1.regexp, { pattern, flags, value });
  };
  pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
    var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
    var start = this.pos, total = 0, lastCode = 0;
    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
      var code = this.input.charCodeAt(this.pos), val = void 0;
      if (allowSeparators && code === 95) {
        if (isLegacyOctalNumericLiteral) {
          this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
        }
        if (lastCode === 95) {
          this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
        }
        if (i === 0) {
          this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
        }
        lastCode = code;
        continue;
      }
      if (code >= 97) {
        val = code - 97 + 10;
      } else if (code >= 65) {
        val = code - 65 + 10;
      } else if (code >= 48 && code <= 57) {
        val = code - 48;
      } else {
        val = Infinity;
      }
      if (val >= radix) {
        break;
      }
      lastCode = code;
      total = total * radix + val;
    }
    if (allowSeparators && lastCode === 95) {
      this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
    }
    if (this.pos === start || len != null && this.pos - start !== len) {
      return null;
    }
    return total;
  };
  function stringToNumber(str, isLegacyOctalNumericLiteral) {
    if (isLegacyOctalNumericLiteral) {
      return parseInt(str, 8);
    }
    return parseFloat(str.replace(/_/g, ""));
  }
  function stringToBigInt(str) {
    if (typeof BigInt !== "function") {
      return null;
    }
    return BigInt(str.replace(/_/g, ""));
  }
  pp.readRadixNumber = function(radix) {
    var start = this.pos;
    this.pos += 2;
    var val = this.readInt(radix);
    if (val == null) {
      this.raise(this.start + 2, "Expected number in radix " + radix);
    }
    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
      val = stringToBigInt(this.input.slice(start, this.pos));
      ++this.pos;
    } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
      this.raise(this.pos, "Identifier directly after number");
    }
    return this.finishToken(types$1.num, val);
  };
  pp.readNumber = function(startsWithDot) {
    var start = this.pos;
    if (!startsWithDot && this.readInt(10, void 0, true) === null) {
      this.raise(start, "Invalid number");
    }
    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
    if (octal && this.strict) {
      this.raise(start, "Invalid number");
    }
    var next = this.input.charCodeAt(this.pos);
    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
      var val$1 = stringToBigInt(this.input.slice(start, this.pos));
      ++this.pos;
      if (isIdentifierStart(this.fullCharCodeAtPos())) {
        this.raise(this.pos, "Identifier directly after number");
      }
      return this.finishToken(types$1.num, val$1);
    }
    if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
      octal = false;
    }
    if (next === 46 && !octal) {
      ++this.pos;
      this.readInt(10);
      next = this.input.charCodeAt(this.pos);
    }
    if ((next === 69 || next === 101) && !octal) {
      next = this.input.charCodeAt(++this.pos);
      if (next === 43 || next === 45) {
        ++this.pos;
      }
      if (this.readInt(10) === null) {
        this.raise(start, "Invalid number");
      }
    }
    if (isIdentifierStart(this.fullCharCodeAtPos())) {
      this.raise(this.pos, "Identifier directly after number");
    }
    var val = stringToNumber(this.input.slice(start, this.pos), octal);
    return this.finishToken(types$1.num, val);
  };
  pp.readCodePoint = function() {
    var ch2 = this.input.charCodeAt(this.pos), code;
    if (ch2 === 123) {
      if (this.options.ecmaVersion < 6) {
        this.unexpected();
      }
      var codePos = ++this.pos;
      code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
      ++this.pos;
      if (code > 1114111) {
        this.invalidStringToken(codePos, "Code point out of bounds");
      }
    } else {
      code = this.readHexChar(4);
    }
    return code;
  };
  pp.readString = function(quote2) {
    var out = "", chunkStart = ++this.pos;
    for (; ; ) {
      if (this.pos >= this.input.length) {
        this.raise(this.start, "Unterminated string constant");
      }
      var ch2 = this.input.charCodeAt(this.pos);
      if (ch2 === quote2) {
        break;
      }
      if (ch2 === 92) {
        out += this.input.slice(chunkStart, this.pos);
        out += this.readEscapedChar(false);
        chunkStart = this.pos;
      } else if (ch2 === 8232 || ch2 === 8233) {
        if (this.options.ecmaVersion < 10) {
          this.raise(this.start, "Unterminated string constant");
        }
        ++this.pos;
        if (this.options.locations) {
          this.curLine++;
          this.lineStart = this.pos;
        }
      } else {
        if (isNewLine(ch2)) {
          this.raise(this.start, "Unterminated string constant");
        }
        ++this.pos;
      }
    }
    out += this.input.slice(chunkStart, this.pos++);
    return this.finishToken(types$1.string, out);
  };
  var INVALID_TEMPLATE_ESCAPE_ERROR = {};
  pp.tryReadTemplateToken = function() {
    this.inTemplateElement = true;
    try {
      this.readTmplToken();
    } catch (err) {
      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
        this.readInvalidTemplateToken();
      } else {
        throw err;
      }
    }
    this.inTemplateElement = false;
  };
  pp.invalidStringToken = function(position, message) {
    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
      throw INVALID_TEMPLATE_ESCAPE_ERROR;
    } else {
      this.raise(position, message);
    }
  };
  pp.readTmplToken = function() {
    var out = "", chunkStart = this.pos;
    for (; ; ) {
      if (this.pos >= this.input.length) {
        this.raise(this.start, "Unterminated template");
      }
      var ch2 = this.input.charCodeAt(this.pos);
      if (ch2 === 96 || ch2 === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
        if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
          if (ch2 === 36) {
            this.pos += 2;
            return this.finishToken(types$1.dollarBraceL);
          } else {
            ++this.pos;
            return this.finishToken(types$1.backQuote);
          }
        }
        out += this.input.slice(chunkStart, this.pos);
        return this.finishToken(types$1.template, out);
      }
      if (ch2 === 92) {
        out += this.input.slice(chunkStart, this.pos);
        out += this.readEscapedChar(true);
        chunkStart = this.pos;
      } else if (isNewLine(ch2)) {
        out += this.input.slice(chunkStart, this.pos);
        ++this.pos;
        switch (ch2) {
          case 13:
            if (this.input.charCodeAt(this.pos) === 10) {
              ++this.pos;
            }
          case 10:
            out += "\n";
            break;
          default:
            out += String.fromCharCode(ch2);
            break;
        }
        if (this.options.locations) {
          ++this.curLine;
          this.lineStart = this.pos;
        }
        chunkStart = this.pos;
      } else {
        ++this.pos;
      }
    }
  };
  pp.readInvalidTemplateToken = function() {
    for (; this.pos < this.input.length; this.pos++) {
      switch (this.input[this.pos]) {
        case "\\":
          ++this.pos;
          break;
        case "$":
          if (this.input[this.pos + 1] !== "{") {
            break;
          }
        case "`":
          return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
      }
    }
    this.raise(this.start, "Unterminated template");
  };
  pp.readEscapedChar = function(inTemplate) {
    var ch2 = this.input.charCodeAt(++this.pos);
    ++this.pos;
    switch (ch2) {
      case 110:
        return "\n";
      case 114:
        return "\r";
      case 120:
        return String.fromCharCode(this.readHexChar(2));
      case 117:
        return codePointToString(this.readCodePoint());
      case 116:
        return "	";
      case 98:
        return "\b";
      case 118:
        return "\v";
      case 102:
        return "\f";
      case 13:
        if (this.input.charCodeAt(this.pos) === 10) {
          ++this.pos;
        }
      case 10:
        if (this.options.locations) {
          this.lineStart = this.pos;
          ++this.curLine;
        }
        return "";
      case 56:
      case 57:
        if (this.strict) {
          this.invalidStringToken(
            this.pos - 1,
            "Invalid escape sequence"
          );
        }
        if (inTemplate) {
          var codePos = this.pos - 1;
          this.invalidStringToken(
            codePos,
            "Invalid escape sequence in template string"
          );
        }
      default:
        if (ch2 >= 48 && ch2 <= 55) {
          var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
          var octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          this.pos += octalStr.length - 1;
          ch2 = this.input.charCodeAt(this.pos);
          if ((octalStr !== "0" || ch2 === 56 || ch2 === 57) && (this.strict || inTemplate)) {
            this.invalidStringToken(
              this.pos - 1 - octalStr.length,
              inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"
            );
          }
          return String.fromCharCode(octal);
        }
        if (isNewLine(ch2)) {
          return "";
        }
        return String.fromCharCode(ch2);
    }
  };
  pp.readHexChar = function(len) {
    var codePos = this.pos;
    var n2 = this.readInt(16, len);
    if (n2 === null) {
      this.invalidStringToken(codePos, "Bad character escape sequence");
    }
    return n2;
  };
  pp.readWord1 = function() {
    this.containsEsc = false;
    var word = "", first = true, chunkStart = this.pos;
    var astral = this.options.ecmaVersion >= 6;
    while (this.pos < this.input.length) {
      var ch2 = this.fullCharCodeAtPos();
      if (isIdentifierChar(ch2, astral)) {
        this.pos += ch2 <= 65535 ? 1 : 2;
      } else if (ch2 === 92) {
        this.containsEsc = true;
        word += this.input.slice(chunkStart, this.pos);
        var escStart = this.pos;
        if (this.input.charCodeAt(++this.pos) !== 117) {
          this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
        }
        ++this.pos;
        var esc = this.readCodePoint();
        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
          this.invalidStringToken(escStart, "Invalid Unicode escape");
        }
        word += codePointToString(esc);
        chunkStart = this.pos;
      } else {
        break;
      }
      first = false;
    }
    return word + this.input.slice(chunkStart, this.pos);
  };
  pp.readWord = function() {
    var word = this.readWord1();
    var type = types$1.name;
    if (this.keywords.test(word)) {
      type = keywords[word];
    }
    return this.finishToken(type, word);
  };
  var version = "8.8.2";
  Parser.acorn = {
    Parser,
    version,
    defaultOptions,
    Position,
    SourceLocation,
    getLineInfo,
    Node,
    TokenType,
    tokTypes: types$1,
    keywordTypes: keywords,
    TokContext,
    tokContexts: types,
    isIdentifierChar,
    isIdentifierStart,
    Token,
    isNewLine,
    lineBreak,
    lineBreakG,
    nonASCIIwhitespace
  };
  function parse3(input, options) {
    return Parser.parse(input, options);
  }
  function parseExpressionAt2(input, pos, options) {
    return Parser.parseExpressionAt(input, pos, options);
  }
  function flatten(nodes, target = []) {
    for (let i = 0; i < nodes.length; i += 1) {
      const node2 = nodes[i];
      if (Array.isArray(node2)) {
        flatten(node2, target);
      } else {
        target.push(node2);
      }
    }
    return target;
  }
  var regex_whitespace = /\s/;
  var regex_whitespaces = /\s+/;
  var regex_starts_with_whitespace = /^\s/;
  var regex_starts_with_whitespaces = /^[ \t\r\n]*/;
  var regex_ends_with_whitespace = /\s$/;
  var regex_ends_with_whitespaces = /[ \t\r\n]*$/;
  var regex_only_whitespaces = /^\s+$/;
  var regex_whitespace_characters = /\s/g;
  var regex_non_whitespace_character = /\S/;
  var regex_starts_with_newline = /^\r?\n/;
  var regex_not_newline_characters = /[^\n]/g;
  var regex_double_quotes = /"/g;
  var regex_backslashes = /\\/g;
  var regex_starts_with_underscore = /^_/;
  var regex_ends_with_underscore = /_$/;
  var regex_dimensions = /^(?:offset|client)(?:Width|Height)$/;
  var regex_content_rect = /^(?:contentRect)$/;
  var regex_content_box_size = /^(?:contentBoxSize)$/;
  var regex_border_box_size = /^(?:borderBoxSize)$/;
  var regex_device_pixel_content_box_size = /^(?:devicePixelContentBoxSize)$/;
  var regex_box_size = /^(?:contentRect|contentBoxSize|borderBoxSize|devicePixelContentBoxSize)$/;
  var regex_svelte_ignore = /^\s*svelte-ignore\s+([\s\S]+)\s*$/m;
  function extract_svelte_ignore(text2) {
    const match = regex_svelte_ignore.exec(text2);
    return match ? match[1].split(regex_whitespace).map((x2) => x2.trim()).filter(Boolean) : [];
  }
  function extract_svelte_ignore_from_comments(node2) {
    return flatten((node2.leadingComments || []).map((comment) => extract_svelte_ignore(comment.value)));
  }
  function extract_ignores_above_position(position, template_nodes) {
    const previous_node_idx = template_nodes.findIndex((child) => child.end === position);
    if (previous_node_idx === -1) {
      return [];
    }
    for (let i = previous_node_idx; i >= 0; i--) {
      const node2 = template_nodes[i];
      if (node2.type !== "Comment" && node2.type !== "Text") {
        return [];
      }
      if (node2.type === "Comment") {
        if (node2.ignores.length) {
          return node2.ignores;
        }
      }
    }
    return [];
  }
  function extract_ignores_above_node(node2) {
    let cur_node = node2.prev;
    while (cur_node) {
      if (cur_node.type !== "Comment" && cur_node.type !== "Text") {
        return [];
      }
      if (cur_node.type === "Comment" && cur_node.ignores.length) {
        return cur_node.ignores;
      }
      cur_node = cur_node.prev;
    }
    return [];
  }
  function fuzzymatch(name2, names) {
    const set = new FuzzySet(names);
    const matches = set.get(name2);
    return matches && matches[0] && matches[0][0] > 0.7 ? matches[0][1] : null;
  }
  var GRAM_SIZE_LOWER = 2;
  var GRAM_SIZE_UPPER = 3;
  function _distance(str1, str2) {
    if (str1 === null && str2 === null) {
      throw "Trying to compare two null values";
    }
    if (str1 === null || str2 === null)
      return 0;
    str1 = String(str1);
    str2 = String(str2);
    const distance = levenshtein(str1, str2);
    if (str1.length > str2.length) {
      return 1 - distance / str1.length;
    } else {
      return 1 - distance / str2.length;
    }
  }
  function levenshtein(str1, str2) {
    const current2 = [];
    let prev;
    let value;
    for (let i = 0; i <= str2.length; i++) {
      for (let j = 0; j <= str1.length; j++) {
        if (i && j) {
          if (str1.charAt(j - 1) === str2.charAt(i - 1)) {
            value = prev;
          } else {
            value = Math.min(current2[j], current2[j - 1], prev) + 1;
          }
        } else {
          value = i + j;
        }
        prev = current2[j];
        current2[j] = value;
      }
    }
    return current2.pop();
  }
  var non_word_regex = /[^\w, ]+/;
  function iterate_grams(value, gram_size = 2) {
    const simplified = "-" + value.toLowerCase().replace(non_word_regex, "") + "-";
    const len_diff = gram_size - simplified.length;
    const results = [];
    if (len_diff > 0) {
      for (let i = 0; i < len_diff; ++i) {
        value += "-";
      }
    }
    for (let i = 0; i < simplified.length - gram_size + 1; ++i) {
      results.push(simplified.slice(i, i + gram_size));
    }
    return results;
  }
  function gram_counter(value, gram_size = 2) {
    const result = {};
    const grams = iterate_grams(value, gram_size);
    let i = 0;
    for (i; i < grams.length; ++i) {
      if (grams[i] in result) {
        result[grams[i]] += 1;
      } else {
        result[grams[i]] = 1;
      }
    }
    return result;
  }
  function sort_descending(a, b2) {
    return b2[0] - a[0];
  }
  var FuzzySet = class {
    constructor(arr) {
      this.exact_set = {};
      this.match_dict = {};
      this.items = {};
      for (let i = GRAM_SIZE_LOWER; i < GRAM_SIZE_UPPER + 1; ++i) {
        this.items[i] = [];
      }
      for (let i = 0; i < arr.length; ++i) {
        this.add(arr[i]);
      }
    }
    add(value) {
      const normalized_value = value.toLowerCase();
      if (normalized_value in this.exact_set) {
        return false;
      }
      let i = GRAM_SIZE_LOWER;
      for (i; i < GRAM_SIZE_UPPER + 1; ++i) {
        this._add(value, i);
      }
    }
    _add(value, gram_size) {
      const normalized_value = value.toLowerCase();
      const items = this.items[gram_size] || [];
      const index = items.length;
      items.push(0);
      const gram_counts = gram_counter(normalized_value, gram_size);
      let sum_of_square_gram_counts = 0;
      let gram;
      let gram_count;
      for (gram in gram_counts) {
        gram_count = gram_counts[gram];
        sum_of_square_gram_counts += Math.pow(gram_count, 2);
        if (gram in this.match_dict) {
          this.match_dict[gram].push([index, gram_count]);
        } else {
          this.match_dict[gram] = [[index, gram_count]];
        }
      }
      const vector_normal = Math.sqrt(sum_of_square_gram_counts);
      items[index] = [vector_normal, normalized_value];
      this.items[gram_size] = items;
      this.exact_set[normalized_value] = value;
    }
    get(value) {
      const normalized_value = value.toLowerCase();
      const result = this.exact_set[normalized_value];
      if (result) {
        return [[1, result]];
      }
      let results = [];
      for (let gram_size = GRAM_SIZE_UPPER; gram_size >= GRAM_SIZE_LOWER; --gram_size) {
        results = this.__get(value, gram_size);
        if (results) {
          return results;
        }
      }
      return null;
    }
    __get(value, gram_size) {
      const normalized_value = value.toLowerCase();
      const matches = {};
      const gram_counts = gram_counter(normalized_value, gram_size);
      const items = this.items[gram_size];
      let sum_of_square_gram_counts = 0;
      let gram;
      let gram_count;
      let i;
      let index;
      let other_gram_count;
      for (gram in gram_counts) {
        gram_count = gram_counts[gram];
        sum_of_square_gram_counts += Math.pow(gram_count, 2);
        if (gram in this.match_dict) {
          for (i = 0; i < this.match_dict[gram].length; ++i) {
            index = this.match_dict[gram][i][0];
            other_gram_count = this.match_dict[gram][i][1];
            if (index in matches) {
              matches[index] += gram_count * other_gram_count;
            } else {
              matches[index] = gram_count * other_gram_count;
            }
          }
        }
      }
      const vector_normal = Math.sqrt(sum_of_square_gram_counts);
      let results = [];
      let match_score;
      for (const match_index in matches) {
        match_score = matches[match_index];
        results.push([
          match_score / (vector_normal * items[match_index][0]),
          items[match_index][1]
        ]);
      }
      results.sort(sort_descending);
      let new_results = [];
      const end_index = Math.min(50, results.length);
      for (let i2 = 0; i2 < end_index; ++i2) {
        new_results.push([
          _distance(results[i2][1], normalized_value),
          results[i2][1]
        ]);
      }
      results = new_results;
      results.sort(sort_descending);
      new_results = [];
      for (let i2 = 0; i2 < results.length; ++i2) {
        if (results[i2][0] == results[0][0]) {
          new_results.push([results[i2][0], this.exact_set[results[i2][1]]]);
        }
      }
      return new_results;
    }
  };
  var void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;
  var html_element_names = /^(?:a|abbr|address|area|article|aside|audio|b|base|bdi|bdo|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|data|datalist|dd|del|details|dfn|dialog|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|head|header|hr|html|i|iframe|img|input|ins|kbd|label|legend|li|link|main|map|mark|meta|meter|nav|noscript|object|ol|optgroup|option|output|p|param|picture|pre|progress|q|rp|rt|ruby|s|samp|script|section|select|small|source|span|strong|style|sub|summary|sup|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|u|ul|var|video|wbr)$/;
  var svg = /^(?:altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform|circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting|feSpotLight|feTile|feTurbulence|filter|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern|image|line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata|missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor|stop|svg|switch|symbol|text|textPath|tref|tspan|unknown|use|view|vkern)$/;
  function is_void(name2) {
    return void_element_names.test(name2) || name2.toLowerCase() === "!doctype";
  }
  function is_html(name2) {
    return html_element_names.test(name2);
  }
  function is_svg(name2) {
    return svg.test(name2);
  }
  function list$1(items, conjunction = "or") {
    if (items.length === 1)
      return items[0];
    return `${items.slice(0, -1).join(", ")} ${conjunction} ${items[items.length - 1]}`;
  }
  var parser_errors = {
    css_syntax_error: (message) => ({
      code: "css-syntax-error",
      message
    }),
    duplicate_attribute: {
      code: "duplicate-attribute",
      message: "Attributes need to be unique"
    },
    duplicate_element: (slug, name2) => ({
      code: `duplicate-${slug}`,
      message: `A component can only have one <${name2}> tag`
    }),
    duplicate_style: {
      code: "duplicate-style",
      message: "You can only have one top-level <style> tag per component"
    },
    empty_attribute_shorthand: {
      code: "empty-attribute-shorthand",
      message: "Attribute shorthand cannot be empty"
    },
    empty_directive_name: (type) => ({
      code: "empty-directive-name",
      message: `${type} name cannot be empty`
    }),
    empty_global_selector: {
      code: "css-syntax-error",
      message: ":global() must contain a selector"
    },
    expected_block_type: {
      code: "expected-block-type",
      message: "Expected if, each or await"
    },
    expected_name: {
      code: "expected-name",
      message: "Expected name"
    },
    invalid_catch_placement_unclosed_block: (block) => ({
      code: "invalid-catch-placement",
      message: `Expected to close ${block} before seeing {:catch} block`
    }),
    invalid_catch_placement_without_await: {
      code: "invalid-catch-placement",
      message: "Cannot have an {:catch} block outside an {#await ...} block"
    },
    invalid_component_definition: {
      code: "invalid-component-definition",
      message: "invalid component definition"
    },
    invalid_closing_tag_unopened: (name2) => ({
      code: "invalid-closing-tag",
      message: `</${name2}> attempted to close an element that was not open`
    }),
    invalid_closing_tag_autoclosed: (name2, reason) => ({
      code: "invalid-closing-tag",
      message: `</${name2}> attempted to close <${name2}> that was already automatically closed by <${reason}>`
    }),
    invalid_debug_args: {
      code: "invalid-debug-args",
      message: "{@debug ...} arguments must be identifiers, not arbitrary expressions"
    },
    invalid_declaration: {
      code: "invalid-declaration",
      message: "Declaration cannot be empty"
    },
    invalid_directive_value: {
      code: "invalid-directive-value",
      message: "Directive value must be a JavaScript expression enclosed in curly braces"
    },
    invalid_elseif: {
      code: "invalid-elseif",
      message: "'elseif' should be 'else if'"
    },
    invalid_elseif_placement_outside_if: {
      code: "invalid-elseif-placement",
      message: "Cannot have an {:else if ...} block outside an {#if ...} block"
    },
    invalid_elseif_placement_unclosed_block: (block) => ({
      code: "invalid-elseif-placement",
      message: `Expected to close ${block} before seeing {:else if ...} block`
    }),
    invalid_else_placement_outside_if: {
      code: "invalid-else-placement",
      message: "Cannot have an {:else} block outside an {#if ...} or {#each ...} block"
    },
    invalid_else_placement_unclosed_block: (block) => ({
      code: "invalid-else-placement",
      message: `Expected to close ${block} before seeing {:else} block`
    }),
    invalid_element_content: (slug, name2) => ({
      code: `invalid-${slug}-content`,
      message: `<${name2}> cannot have children`
    }),
    invalid_element_definition: {
      code: "invalid-element-definition",
      message: "Invalid element definition"
    },
    invalid_element_placement: (slug, name2) => ({
      code: `invalid-${slug}-placement`,
      message: `<${name2}> tags cannot be inside elements or blocks`
    }),
    invalid_logic_block_placement: (location, name2) => ({
      code: "invalid-logic-block-placement",
      message: `{#${name2}} logic block cannot be ${location}`
    }),
    invalid_tag_placement: (location, name2) => ({
      code: "invalid-tag-placement",
      message: `{@${name2}} tag cannot be ${location}`
    }),
    invalid_ref_directive: (name2) => ({
      code: "invalid-ref-directive",
      message: `The ref directive is no longer supported \u2014 use \`bind:this={${name2}}\` instead`
    }),
    invalid_ref_selector: {
      code: "invalid-ref-selector",
      message: "ref selectors are no longer supported"
    },
    invalid_self_placement: {
      code: "invalid-self-placement",
      message: "<svelte:self> components can only exist inside {#if} blocks, {#each} blocks, or slots passed to components"
    },
    invalid_script_instance: {
      code: "invalid-script",
      message: "A component can only have one instance-level <script> element"
    },
    invalid_script_module: {
      code: "invalid-script",
      message: 'A component can only have one <script context="module"> element'
    },
    invalid_script_context_attribute: {
      code: "invalid-script",
      message: "context attribute must be static"
    },
    invalid_script_context_value: {
      code: "invalid-script",
      message: 'If the context attribute is supplied, its value must be "module"'
    },
    invalid_tag_name: {
      code: "invalid-tag-name",
      message: "Expected valid tag name"
    },
    invalid_tag_name_svelte_element: (tags, match) => ({
      code: "invalid-tag-name",
      message: `Valid <svelte:...> tag names are ${list$1(tags)}${match ? " (did you mean " + match + "?)" : ""}`
    }),
    invalid_then_placement_unclosed_block: (block) => ({
      code: "invalid-then-placement",
      message: `Expected to close ${block} before seeing {:then} block`
    }),
    invalid_then_placement_without_await: {
      code: "invalid-then-placement",
      message: "Cannot have an {:then} block outside an {#await ...} block"
    },
    invalid_void_content: (name2) => ({
      code: "invalid-void-content",
      message: `<${name2}> is a void element and cannot have children, or a closing tag`
    }),
    missing_component_definition: {
      code: "missing-component-definition",
      message: "<svelte:component> must have a 'this' attribute"
    },
    missing_attribute_value: {
      code: "missing-attribute-value",
      message: "Expected value for the attribute"
    },
    missing_element_definition: {
      code: "missing-element-definition",
      message: "<svelte:element> must have a 'this' attribute"
    },
    unclosed_script: {
      code: "unclosed-script",
      message: "<script> must have a closing tag"
    },
    unclosed_style: {
      code: "unclosed-style",
      message: "<style> must have a closing tag"
    },
    unclosed_comment: {
      code: "unclosed-comment",
      message: "comment was left open, expected -->"
    },
    unclosed_attribute_value: (token) => ({
      code: "unclosed-attribute-value",
      message: `Expected to close the attribute value with ${token}`
    }),
    unexpected_block_close: {
      code: "unexpected-block-close",
      message: "Unexpected block closing tag"
    },
    unexpected_eof: {
      code: "unexpected-eof",
      message: "Unexpected end of input"
    },
    unexpected_eof_token: (token) => ({
      code: "unexpected-eof",
      message: `Unexpected ${token}`
    }),
    unexpected_token: (token) => ({
      code: "unexpected-token",
      message: `Expected ${token}`
    }),
    unexpected_token_destructure: {
      code: "unexpected-token",
      message: "Expected identifier or destructure pattern"
    }
  };
  var WalkerBase = class {
    constructor() {
      this.should_skip = false;
      this.should_remove = false;
      this.replacement = null;
      this.context = {
        skip: () => this.should_skip = true,
        remove: () => this.should_remove = true,
        replace: (node2) => this.replacement = node2
      };
    }
    /**
     * @template {Node} Parent
     * @param {Parent | null | undefined} parent
     * @param {keyof Parent | null | undefined} prop
     * @param {number | null | undefined} index
     * @param {Node} node
     */
    replace(parent, prop, index, node2) {
      if (parent && prop) {
        if (index != null) {
          parent[prop][index] = node2;
        } else {
          parent[prop] = node2;
        }
      }
    }
    /**
     * @template {Node} Parent
     * @param {Parent | null | undefined} parent
     * @param {keyof Parent | null | undefined} prop
     * @param {number | null | undefined} index
     */
    remove(parent, prop, index) {
      if (parent && prop) {
        if (index !== null && index !== void 0) {
          parent[prop].splice(index, 1);
        } else {
          delete parent[prop];
        }
      }
    }
  };
  var SyncWalker = class extends WalkerBase {
    /**
     *
     * @param {SyncHandler} [enter]
     * @param {SyncHandler} [leave]
     */
    constructor(enter, leave) {
      super();
      this.should_skip = false;
      this.should_remove = false;
      this.replacement = null;
      this.context = {
        skip: () => this.should_skip = true,
        remove: () => this.should_remove = true,
        replace: (node2) => this.replacement = node2
      };
      this.enter = enter;
      this.leave = leave;
    }
    /**
     * @template {Node} Parent
     * @param {Node} node
     * @param {Parent | null} parent
     * @param {keyof Parent} [prop]
     * @param {number | null} [index]
     * @returns {Node | null}
     */
    visit(node2, parent, prop, index) {
      if (node2) {
        if (this.enter) {
          const _should_skip = this.should_skip;
          const _should_remove = this.should_remove;
          const _replacement = this.replacement;
          this.should_skip = false;
          this.should_remove = false;
          this.replacement = null;
          this.enter.call(this.context, node2, parent, prop, index);
          if (this.replacement) {
            node2 = this.replacement;
            this.replace(parent, prop, index, node2);
          }
          if (this.should_remove) {
            this.remove(parent, prop, index);
          }
          const skipped = this.should_skip;
          const removed = this.should_remove;
          this.should_skip = _should_skip;
          this.should_remove = _should_remove;
          this.replacement = _replacement;
          if (skipped)
            return node2;
          if (removed)
            return null;
        }
        let key;
        for (key in node2) {
          const value = node2[key];
          if (value && typeof value === "object") {
            if (Array.isArray(value)) {
              const nodes = (
                /** @type {Array<unknown>} */
                value
              );
              for (let i = 0; i < nodes.length; i += 1) {
                const item = nodes[i];
                if (isNode(item)) {
                  if (!this.visit(item, node2, key, i)) {
                    i--;
                  }
                }
              }
            } else if (isNode(value)) {
              this.visit(value, node2, key, null);
            }
          }
        }
        if (this.leave) {
          const _replacement = this.replacement;
          const _should_remove = this.should_remove;
          this.replacement = null;
          this.should_remove = false;
          this.leave.call(this.context, node2, parent, prop, index);
          if (this.replacement) {
            node2 = this.replacement;
            this.replace(parent, prop, index, node2);
          }
          if (this.should_remove) {
            this.remove(parent, prop, index);
          }
          const removed = this.should_remove;
          this.replacement = _replacement;
          this.should_remove = _should_remove;
          if (removed)
            return null;
        }
      }
      return node2;
    }
  };
  function isNode(value) {
    return value !== null && typeof value === "object" && "type" in value && typeof value.type === "string";
  }
  function walk(ast, { enter, leave }) {
    const instance = new SyncWalker(enter, leave);
    return instance.visit(ast, null);
  }
  var id = Math.round(Math.random() * 1e20).toString(36);
  var re = new RegExp(`_${id}_(?:(\\d+)|(AT)|(HASH))_(\\w+)?`, "g");
  var get_comment_handlers = (comments, raw) => ({
    // pass to acorn options
    /**
     * @param {boolean} block
     * @param {string} value
     * @param {number} start
     * @param {number} end
     */
    onComment: (block, value, start, end) => {
      if (block && /\n/.test(value)) {
        let a = start;
        while (a > 0 && raw[a - 1] !== "\n")
          a -= 1;
        let b2 = a;
        while (/[ \t]/.test(raw[b2]))
          b2 += 1;
        const indentation = raw.slice(a, b2);
        value = value.replace(new RegExp(`^${indentation}`, "gm"), "");
      }
      comments.push({ type: block ? "Block" : "Line", value, start, end });
    },
    // pass to estree-walker options
    /** @param {NodeWithLocation} node */
    enter(node2) {
      let comment;
      while (comments[0] && comments[0].start < node2.start) {
        comment = comments.shift();
        comment.value = comment.value.replace(
          re,
          (match, id2, at3, hash2, value) => {
            if (hash2)
              return `#${value}`;
            if (at3)
              return `@${value}`;
            return match;
          }
        );
        const next = comments[0] || node2;
        comment.has_trailing_newline = comment.type === "Line" || /\n/.test(raw.slice(comment.end, next.start));
        (node2.leadingComments || (node2.leadingComments = [])).push(comment);
      }
    },
    /** @param {NodeWithLocation} node */
    leave(node2) {
      if (comments[0]) {
        const slice2 = raw.slice(node2.end, comments[0].start);
        if (/^[,) \t]*$/.test(slice2)) {
          node2.trailingComments = [comments.shift()];
        }
      }
    }
  });
  function is_reference(node2, parent) {
    if (node2.type === "MemberExpression") {
      return !node2.computed && is_reference(node2.object, node2);
    }
    if (node2.type === "Identifier") {
      if (!parent)
        return true;
      switch (parent.type) {
        case "MemberExpression":
          return parent.computed || node2 === parent.object;
        case "MethodDefinition":
          return parent.computed;
        case "PropertyDefinition":
          return parent.computed || node2 === parent.value;
        case "Property":
          return parent.computed || node2 === parent.value;
        case "ExportSpecifier":
        case "ImportSpecifier":
          return node2 === parent.local;
        case "LabeledStatement":
        case "BreakStatement":
        case "ContinueStatement":
          return false;
        default:
          return true;
      }
    }
    return false;
  }
  function analyze(expression) {
    const map = /* @__PURE__ */ new WeakMap();
    const globals2 = /* @__PURE__ */ new Map();
    const scope = new Scope$1(null, false);
    const references = [];
    let current_scope = scope;
    walk(expression, {
      enter(node2, parent) {
        switch (node2.type) {
          case "Identifier":
            if (parent && is_reference(node2, parent)) {
              references.push([current_scope, node2]);
            }
            break;
          case "ImportDeclaration":
            node2.specifiers.forEach((specifier) => {
              current_scope.declarations.set(specifier.local.name, specifier);
            });
            break;
          case "FunctionExpression":
          case "FunctionDeclaration":
          case "ArrowFunctionExpression":
            if (node2.type === "FunctionDeclaration") {
              if (node2.id) {
                current_scope.declarations.set(node2.id.name, node2);
              }
              map.set(node2, current_scope = new Scope$1(current_scope, false));
            } else {
              map.set(node2, current_scope = new Scope$1(current_scope, false));
              if (node2.type === "FunctionExpression" && node2.id) {
                current_scope.declarations.set(node2.id.name, node2);
              }
            }
            node2.params.forEach((param) => {
              extract_names(param).forEach((name2) => {
                current_scope.declarations.set(name2, node2);
              });
            });
            break;
          case "ForStatement":
          case "ForInStatement":
          case "ForOfStatement":
            map.set(node2, current_scope = new Scope$1(current_scope, true));
            break;
          case "BlockStatement":
            map.set(node2, current_scope = new Scope$1(current_scope, true));
            break;
          case "ClassDeclaration":
          case "VariableDeclaration":
            current_scope.add_declaration(node2);
            break;
          case "CatchClause":
            map.set(node2, current_scope = new Scope$1(current_scope, true));
            if (node2.param) {
              extract_names(node2.param).forEach((name2) => {
                if (node2.param) {
                  current_scope.declarations.set(name2, node2.param);
                }
              });
            }
            break;
        }
      },
      leave(node2) {
        if (map.has(node2) && current_scope !== null && current_scope.parent) {
          current_scope = current_scope.parent;
        }
      }
    });
    for (let i = references.length - 1; i >= 0; --i) {
      const [scope2, reference] = references[i];
      if (!scope2.references.has(reference.name)) {
        add_reference(scope2, reference.name);
      }
      if (!scope2.find_owner(reference.name)) {
        globals2.set(reference.name, reference);
      }
    }
    return { map, scope, globals: globals2 };
  }
  function add_reference(scope, name2) {
    scope.references.add(name2);
    if (scope.parent)
      add_reference(scope.parent, name2);
  }
  var Scope$1 = class {
    /**
     * @param {Scope | null} parent 
     * @param {boolean} block 
     */
    constructor(parent, block) {
      this.parent = parent;
      this.block = block;
      this.declarations = /* @__PURE__ */ new Map();
      this.initialised_declarations = /* @__PURE__ */ new Set();
      this.references = /* @__PURE__ */ new Set();
    }
    /**
     * @param {import('estree').VariableDeclaration | import('estree').ClassDeclaration} node
     */
    add_declaration(node2) {
      if (node2.type === "VariableDeclaration") {
        if (node2.kind === "var" && this.block && this.parent) {
          this.parent.add_declaration(node2);
        } else {
          const handle_declarator = (declarator) => {
            extract_names(declarator.id).forEach((name2) => {
              this.declarations.set(name2, node2);
              if (declarator.init)
                this.initialised_declarations.add(name2);
            });
          };
          node2.declarations.forEach(handle_declarator);
        }
      } else if (node2.id) {
        this.declarations.set(node2.id.name, node2);
      }
    }
    /**
     * @param {string} name
     * @returns {Scope | null}
     */
    find_owner(name2) {
      if (this.declarations.has(name2))
        return this;
      return this.parent && this.parent.find_owner(name2);
    }
    /**
     * @param {string} name
     * @returns {boolean}
     */
    has(name2) {
      return this.declarations.has(name2) || !!this.parent && this.parent.has(name2);
    }
  };
  function extract_names(param) {
    return extract_identifiers(param).map((node2) => node2.name);
  }
  function extract_identifiers(param, nodes = []) {
    switch (param.type) {
      case "Identifier":
        nodes.push(param);
        break;
      case "MemberExpression":
        let object = param;
        while (object.type === "MemberExpression") {
          object = /** @type {any} */
          object.object;
        }
        nodes.push(
          /** @type {any} */
          object
        );
        break;
      case "ObjectPattern":
        const handle_prop = (prop) => {
          if (prop.type === "RestElement") {
            extract_identifiers(prop.argument, nodes);
          } else {
            extract_identifiers(prop.value, nodes);
          }
        };
        param.properties.forEach(handle_prop);
        break;
      case "ArrayPattern":
        const handle_element = (element) => {
          if (element)
            extract_identifiers(element, nodes);
        };
        param.elements.forEach((element) => {
          if (element) {
            handle_element(element);
          }
        });
        break;
      case "RestElement":
        extract_identifiers(param.argument, nodes);
        break;
      case "AssignmentPattern":
        extract_identifiers(param.left, nodes);
        break;
    }
    return nodes;
  }
  function push_array(array, items) {
    for (let i = 0; i < items.length; i++) {
      array.push(items[i]);
    }
  }
  function handle(node2, state) {
    const handler = handlers[node2.type];
    if (!handler) {
      throw new Error(`Not implemented ${node2.type}`);
    }
    const result = handler(node2, state);
    if (node2.leadingComments) {
      result.unshift(
        c(
          node2.leadingComments.map(
            (comment) => comment.type === "Block" ? `/*${comment.value}*/${/** @type {any} */
            comment.has_trailing_newline ? `
${state.indent}` : ` `}` : `//${comment.value}${/** @type {any} */
            comment.has_trailing_newline ? `
${state.indent}` : ` `}`
          ).join(``)
        )
      );
    }
    if (node2.trailingComments) {
      state.comments.push(node2.trailingComments[0]);
    }
    return result;
  }
  function c(content, node2) {
    return {
      content,
      loc: node2 && node2.loc,
      has_newline: /\n/.test(content)
    };
  }
  var OPERATOR_PRECEDENCE = {
    "||": 2,
    "&&": 3,
    "??": 4,
    "|": 5,
    "^": 6,
    "&": 7,
    "==": 8,
    "!=": 8,
    "===": 8,
    "!==": 8,
    "<": 9,
    ">": 9,
    "<=": 9,
    ">=": 9,
    in: 9,
    instanceof: 9,
    "<<": 10,
    ">>": 10,
    ">>>": 10,
    "+": 11,
    "-": 11,
    "*": 12,
    "%": 12,
    "/": 12,
    "**": 13
  };
  var EXPRESSIONS_PRECEDENCE = {
    ArrayExpression: 20,
    TaggedTemplateExpression: 20,
    ThisExpression: 20,
    Identifier: 20,
    Literal: 18,
    TemplateLiteral: 20,
    Super: 20,
    SequenceExpression: 20,
    MemberExpression: 19,
    CallExpression: 19,
    NewExpression: 19,
    AwaitExpression: 17,
    ClassExpression: 17,
    FunctionExpression: 17,
    ObjectExpression: 17,
    UpdateExpression: 16,
    UnaryExpression: 15,
    BinaryExpression: 14,
    LogicalExpression: 13,
    ConditionalExpression: 4,
    ArrowFunctionExpression: 3,
    AssignmentExpression: 3,
    YieldExpression: 2,
    RestElement: 1
  };
  function needs_parens(node2, parent, is_right) {
    if (node2.type === "LogicalExpression" && parent.type === "LogicalExpression" && (parent.operator === "??" && node2.operator !== "??" || parent.operator !== "??" && node2.operator === "??")) {
      return true;
    }
    const precedence = EXPRESSIONS_PRECEDENCE[node2.type];
    const parent_precedence = EXPRESSIONS_PRECEDENCE[parent.type];
    if (precedence !== parent_precedence) {
      return !is_right && precedence === 15 && parent_precedence === 14 && parent.operator === "**" || precedence < parent_precedence;
    }
    if (precedence !== 13 && precedence !== 14) {
      return false;
    }
    if (
      /** @type {BinaryExpression} */
      node2.operator === "**" && parent.operator === "**"
    ) {
      return !is_right;
    }
    if (is_right) {
      return OPERATOR_PRECEDENCE[
        /** @type {BinaryExpression} */
        node2.operator
      ] <= OPERATOR_PRECEDENCE[parent.operator];
    }
    return OPERATOR_PRECEDENCE[
      /** @type {BinaryExpression} */
      node2.operator
    ] < OPERATOR_PRECEDENCE[parent.operator];
  }
  function has_call_expression(node2) {
    while (node2) {
      if (node2.type[0] === "CallExpression") {
        return true;
      } else if (node2.type === "MemberExpression") {
        node2 = node2.object;
      } else {
        return false;
      }
    }
  }
  var has_newline = (chunks) => {
    for (let i = 0; i < chunks.length; i += 1) {
      if (chunks[i].has_newline)
        return true;
    }
    return false;
  };
  var get_length = (chunks) => {
    let total = 0;
    for (let i = 0; i < chunks.length; i += 1) {
      total += chunks[i].content.length;
    }
    return total;
  };
  var sum = (a, b2) => a + b2;
  var join = (nodes, separator) => {
    if (nodes.length === 0)
      return [];
    const joined = [...nodes[0]];
    for (let i = 1; i < nodes.length; i += 1) {
      joined.push(separator);
      push_array(joined, nodes[i]);
    }
    return joined;
  };
  var scoped = (fn2) => {
    const scoped_fn = (node2, state) => {
      return fn2(node2, {
        ...state,
        scope: state.scope_map.get(node2)
      });
    };
    return scoped_fn;
  };
  var deconflict = (name2, names) => {
    const original = name2;
    let i = 1;
    while (names.has(name2)) {
      name2 = `${original}$${i++}`;
    }
    return name2;
  };
  var handle_body = (nodes, state) => {
    const chunks = [];
    const body = nodes.map((statement) => {
      const chunks2 = handle(statement, {
        ...state,
        indent: state.indent
      });
      let add_newline = false;
      while (state.comments.length) {
        const comment = state.comments.shift();
        const prefix = add_newline ? `
${state.indent}` : ` `;
        chunks2.push(
          c(
            comment.type === "Block" ? `${prefix}/*${comment.value}*/` : `${prefix}//${comment.value}`
          )
        );
        add_newline = comment.type === "Line";
      }
      return chunks2;
    });
    let needed_padding = false;
    for (let i = 0; i < body.length; i += 1) {
      const needs_padding = has_newline(body[i]);
      if (i > 0) {
        chunks.push(
          c(
            needs_padding || needed_padding ? `

${state.indent}` : `
${state.indent}`
          )
        );
      }
      push_array(chunks, body[i]);
      needed_padding = needs_padding;
    }
    return chunks;
  };
  var handle_var_declaration = (node2, state) => {
    const chunks = [c(`${node2.kind} `)];
    const declarators = node2.declarations.map(
      (d2) => handle(d2, {
        ...state,
        indent: state.indent + (node2.declarations.length === 1 ? "" : "	")
      })
    );
    const multiple_lines = declarators.some(has_newline) || declarators.map(get_length).reduce(sum, 0) + (state.indent.length + declarators.length - 1) * 2 > 80;
    const separator = c(multiple_lines ? `,
${state.indent}	` : ", ");
    push_array(chunks, join(declarators, separator));
    return chunks;
  };
  var handlers = {
    Program(node2, state) {
      return handle_body(node2.body, state);
    },
    BlockStatement: scoped((node2, state) => {
      return [
        c(`{
${state.indent}	`),
        ...handle_body(node2.body, { ...state, indent: state.indent + "	" }),
        c(`
${state.indent}}`)
      ];
    }),
    EmptyStatement(node2, state) {
      return [c(";")];
    },
    ParenthesizedExpression(node2, state) {
      return handle(node2.expression, state);
    },
    ExpressionStatement(node2, state) {
      if (node2.expression.type === "AssignmentExpression" && node2.expression.left.type === "ObjectPattern") {
        return [c("("), ...handle(node2.expression, state), c(");")];
      }
      return [...handle(node2.expression, state), c(";")];
    },
    IfStatement(node2, state) {
      const chunks = [
        c("if ("),
        ...handle(node2.test, state),
        c(") "),
        ...handle(node2.consequent, state)
      ];
      if (node2.alternate) {
        chunks.push(c(" else "));
        push_array(chunks, handle(node2.alternate, state));
      }
      return chunks;
    },
    LabeledStatement(node2, state) {
      return [...handle(node2.label, state), c(": "), ...handle(node2.body, state)];
    },
    BreakStatement(node2, state) {
      return node2.label ? [c("break "), ...handle(node2.label, state), c(";")] : [c("break;")];
    },
    ContinueStatement(node2, state) {
      return node2.label ? [c("continue "), ...handle(node2.label, state), c(";")] : [c("continue;")];
    },
    WithStatement(node2, state) {
      return [
        c("with ("),
        ...handle(node2.object, state),
        c(") "),
        ...handle(node2.body, state)
      ];
    },
    SwitchStatement(node2, state) {
      const chunks = [
        c("switch ("),
        ...handle(node2.discriminant, state),
        c(") {")
      ];
      node2.cases.forEach((block) => {
        if (block.test) {
          chunks.push(c(`
${state.indent}	case `));
          push_array(
            chunks,
            handle(block.test, { ...state, indent: `${state.indent}	` })
          );
          chunks.push(c(":"));
        } else {
          chunks.push(c(`
${state.indent}	default:`));
        }
        block.consequent.forEach((statement) => {
          chunks.push(c(`
${state.indent}		`));
          push_array(
            chunks,
            handle(statement, { ...state, indent: `${state.indent}		` })
          );
        });
      });
      chunks.push(c(`
${state.indent}}`));
      return chunks;
    },
    ReturnStatement(node2, state) {
      if (node2.argument) {
        const contains_comment = node2.argument.leadingComments && node2.argument.leadingComments.some(
          (comment) => comment.has_trailing_newline
        );
        return [
          c(contains_comment ? "return (" : "return "),
          ...handle(node2.argument, state),
          c(contains_comment ? ");" : ";")
        ];
      } else {
        return [c("return;")];
      }
    },
    ThrowStatement(node2, state) {
      return [c("throw "), ...handle(node2.argument, state), c(";")];
    },
    TryStatement(node2, state) {
      const chunks = [c("try "), ...handle(node2.block, state)];
      if (node2.handler) {
        if (node2.handler.param) {
          chunks.push(c(" catch("));
          push_array(chunks, handle(node2.handler.param, state));
          chunks.push(c(") "));
        } else {
          chunks.push(c(" catch "));
        }
        push_array(chunks, handle(node2.handler.body, state));
      }
      if (node2.finalizer) {
        chunks.push(c(" finally "));
        push_array(chunks, handle(node2.finalizer, state));
      }
      return chunks;
    },
    WhileStatement(node2, state) {
      return [
        c("while ("),
        ...handle(node2.test, state),
        c(") "),
        ...handle(node2.body, state)
      ];
    },
    DoWhileStatement(node2, state) {
      return [
        c("do "),
        ...handle(node2.body, state),
        c(" while ("),
        ...handle(node2.test, state),
        c(");")
      ];
    },
    ForStatement: scoped((node2, state) => {
      const chunks = [c("for (")];
      if (node2.init) {
        if (node2.init.type === "VariableDeclaration") {
          push_array(chunks, handle_var_declaration(node2.init, state));
        } else {
          push_array(chunks, handle(node2.init, state));
        }
      }
      chunks.push(c("; "));
      if (node2.test)
        push_array(chunks, handle(node2.test, state));
      chunks.push(c("; "));
      if (node2.update)
        push_array(chunks, handle(node2.update, state));
      chunks.push(c(") "));
      push_array(chunks, handle(node2.body, state));
      return chunks;
    }),
    ForInStatement: scoped((node2, state) => {
      const chunks = [c(`for ${node2.await ? "await " : ""}(`)];
      if (node2.left.type === "VariableDeclaration") {
        push_array(chunks, handle_var_declaration(node2.left, state));
      } else {
        push_array(chunks, handle(node2.left, state));
      }
      chunks.push(c(node2.type === "ForInStatement" ? ` in ` : ` of `));
      push_array(chunks, handle(node2.right, state));
      chunks.push(c(") "));
      push_array(chunks, handle(node2.body, state));
      return chunks;
    }),
    DebuggerStatement(node2, state) {
      return [c("debugger", node2), c(";")];
    },
    FunctionDeclaration: scoped(
      (node2, state) => {
        const chunks = [];
        if (node2.async)
          chunks.push(c("async "));
        chunks.push(c(node2.generator ? "function* " : "function "));
        if (node2.id)
          push_array(chunks, handle(node2.id, state));
        chunks.push(c("("));
        const params = node2.params.map(
          (p2) => handle(p2, {
            ...state,
            indent: state.indent + "	"
          })
        );
        const multiple_lines = params.some(has_newline) || params.map(get_length).reduce(sum, 0) + (state.indent.length + params.length - 1) * 2 > 80;
        const separator = c(multiple_lines ? `,
${state.indent}` : ", ");
        if (multiple_lines) {
          chunks.push(c(`
${state.indent}	`));
          push_array(chunks, join(params, separator));
          chunks.push(c(`
${state.indent}`));
        } else {
          push_array(chunks, join(params, separator));
        }
        chunks.push(c(") "));
        push_array(chunks, handle(node2.body, state));
        return chunks;
      }
    ),
    VariableDeclaration(node2, state) {
      return handle_var_declaration(node2, state).concat(c(";"));
    },
    VariableDeclarator(node2, state) {
      if (node2.init) {
        return [...handle(node2.id, state), c(" = "), ...handle(node2.init, state)];
      } else {
        return handle(node2.id, state);
      }
    },
    ClassDeclaration(node2, state) {
      const chunks = [c("class ")];
      if (node2.id) {
        push_array(chunks, handle(node2.id, state));
        chunks.push(c(" "));
      }
      if (node2.superClass) {
        chunks.push(c("extends "));
        push_array(chunks, handle(node2.superClass, state));
        chunks.push(c(" "));
      }
      push_array(chunks, handle(node2.body, state));
      return chunks;
    },
    ImportDeclaration(node2, state) {
      const chunks = [c("import ")];
      const { length } = node2.specifiers;
      const source = handle(node2.source, state);
      if (length > 0) {
        let i = 0;
        while (i < length) {
          if (i > 0) {
            chunks.push(c(", "));
          }
          const specifier = node2.specifiers[i];
          if (specifier.type === "ImportDefaultSpecifier") {
            chunks.push(c(specifier.local.name, specifier));
            i += 1;
          } else if (specifier.type === "ImportNamespaceSpecifier") {
            chunks.push(c("* as " + specifier.local.name, specifier));
            i += 1;
          } else {
            break;
          }
        }
        if (i < length) {
          const specifiers = node2.specifiers.slice(i).map((specifier) => {
            const name2 = handle(specifier.imported, state)[0];
            const as2 = handle(specifier.local, state)[0];
            if (name2.content === as2.content) {
              return [as2];
            }
            return [name2, c(" as "), as2];
          });
          const width = get_length(chunks) + specifiers.map(get_length).reduce(sum, 0) + 2 * specifiers.length + 6 + get_length(source);
          if (width > 80) {
            chunks.push(c(`{
	`));
            push_array(chunks, join(specifiers, c(",\n	")));
            chunks.push(c("\n}"));
          } else {
            chunks.push(c(`{ `));
            push_array(chunks, join(specifiers, c(", ")));
            chunks.push(c(" }"));
          }
        }
        chunks.push(c(" from "));
      }
      push_array(chunks, source);
      chunks.push(c(";"));
      return chunks;
    },
    ImportExpression(node2, state) {
      return [c("import("), ...handle(node2.source, state), c(")")];
    },
    ExportDefaultDeclaration(node2, state) {
      const chunks = [c(`export default `), ...handle(node2.declaration, state)];
      if (node2.declaration.type !== "FunctionDeclaration") {
        chunks.push(c(";"));
      }
      return chunks;
    },
    ExportNamedDeclaration(node2, state) {
      const chunks = [c("export ")];
      if (node2.declaration) {
        push_array(chunks, handle(node2.declaration, state));
      } else {
        const specifiers = node2.specifiers.map(
          (specifier) => {
            const name2 = handle(specifier.local, state)[0];
            const as2 = handle(specifier.exported, state)[0];
            if (name2.content === as2.content) {
              return [name2];
            }
            return [name2, c(" as "), as2];
          }
        );
        const width = 7 + specifiers.map(get_length).reduce(sum, 0) + 2 * specifiers.length;
        if (width > 80) {
          chunks.push(c("{\n	"));
          push_array(chunks, join(specifiers, c(",\n	")));
          chunks.push(c("\n}"));
        } else {
          chunks.push(c("{ "));
          push_array(chunks, join(specifiers, c(", ")));
          chunks.push(c(" }"));
        }
        if (node2.source) {
          chunks.push(c(" from "));
          push_array(chunks, handle(node2.source, state));
        }
      }
      chunks.push(c(";"));
      return chunks;
    },
    ExportAllDeclaration(node2, state) {
      return [c(`export * from `), ...handle(node2.source, state), c(`;`)];
    },
    MethodDefinition(node2, state) {
      const chunks = [];
      if (node2.static) {
        chunks.push(c("static "));
      }
      if (node2.kind === "get" || node2.kind === "set") {
        chunks.push(c(node2.kind + " "));
      }
      if (node2.value.async) {
        chunks.push(c("async "));
      }
      if (node2.value.generator) {
        chunks.push(c("*"));
      }
      if (node2.computed) {
        chunks.push(c("["));
        push_array(chunks, handle(node2.key, state));
        chunks.push(c("]"));
      } else {
        push_array(chunks, handle(node2.key, state));
      }
      chunks.push(c("("));
      const { params } = node2.value;
      for (let i = 0; i < params.length; i += 1) {
        push_array(chunks, handle(params[i], state));
        if (i < params.length - 1)
          chunks.push(c(", "));
      }
      chunks.push(c(") "));
      push_array(chunks, handle(node2.value.body, state));
      return chunks;
    },
    ArrowFunctionExpression: scoped(
      (node2, state) => {
        const chunks = [];
        if (node2.async)
          chunks.push(c("async "));
        if (node2.params.length === 1 && node2.params[0].type === "Identifier") {
          push_array(chunks, handle(node2.params[0], state));
        } else {
          const params = node2.params.map(
            (param) => handle(param, {
              ...state,
              indent: state.indent + "	"
            })
          );
          chunks.push(c("("));
          push_array(chunks, join(params, c(", ")));
          chunks.push(c(")"));
        }
        chunks.push(c(" => "));
        if (node2.body.type === "ObjectExpression" || node2.body.type === "AssignmentExpression" && node2.body.left.type === "ObjectPattern") {
          chunks.push(c("("));
          push_array(chunks, handle(node2.body, state));
          chunks.push(c(")"));
        } else {
          push_array(chunks, handle(node2.body, state));
        }
        return chunks;
      }
    ),
    ThisExpression(node2, state) {
      return [c("this", node2)];
    },
    Super(node2, state) {
      return [c("super", node2)];
    },
    RestElement(node2, state) {
      return [c("..."), ...handle(node2.argument, state)];
    },
    YieldExpression(node2, state) {
      if (node2.argument) {
        return [
          c(node2.delegate ? `yield* ` : `yield `),
          ...handle(node2.argument, state)
        ];
      }
      return [c(node2.delegate ? `yield*` : `yield`)];
    },
    AwaitExpression(node2, state) {
      if (node2.argument) {
        const precedence = EXPRESSIONS_PRECEDENCE[node2.argument.type];
        if (precedence && precedence < EXPRESSIONS_PRECEDENCE.AwaitExpression) {
          return [c("await ("), ...handle(node2.argument, state), c(")")];
        } else {
          return [c("await "), ...handle(node2.argument, state)];
        }
      }
      return [c("await")];
    },
    TemplateLiteral(node2, state) {
      const chunks = [c("`")];
      const { quasis, expressions } = node2;
      for (let i = 0; i < expressions.length; i++) {
        chunks.push(c(quasis[i].value.raw), c("${"));
        push_array(chunks, handle(expressions[i], state));
        chunks.push(c("}"));
      }
      chunks.push(c(quasis[quasis.length - 1].value.raw), c("`"));
      return chunks;
    },
    TaggedTemplateExpression(node2, state) {
      return handle(node2.tag, state).concat(handle(node2.quasi, state));
    },
    ArrayExpression(node2, state) {
      const chunks = [c("[")];
      const elements = [];
      let sparse_commas = [];
      for (let i = 0; i < node2.elements.length; i += 1) {
        const element = node2.elements[i];
        if (element) {
          elements.push([
            ...sparse_commas,
            ...handle(element, {
              ...state,
              indent: state.indent + "	"
            })
          ]);
          sparse_commas = [];
        } else {
          sparse_commas.push(c(","));
        }
      }
      const multiple_lines = elements.some(has_newline) || elements.map(get_length).reduce(sum, 0) + (state.indent.length + elements.length - 1) * 2 > 80;
      if (multiple_lines) {
        chunks.push(c(`
${state.indent}	`));
        push_array(chunks, join(elements, c(`,
${state.indent}	`)));
        chunks.push(c(`
${state.indent}`));
        push_array(chunks, sparse_commas);
      } else {
        push_array(chunks, join(elements, c(", ")));
        push_array(chunks, sparse_commas);
      }
      chunks.push(c("]"));
      return chunks;
    },
    ObjectExpression(node2, state) {
      if (node2.properties.length === 0) {
        return [c("{}")];
      }
      let has_inline_comment = false;
      const chunks = [];
      const separator = c(", ");
      node2.properties.forEach((p2, i) => {
        push_array(
          chunks,
          handle(p2, {
            ...state,
            indent: state.indent + "	"
          })
        );
        if (state.comments.length) {
          chunks.push(c(", "));
          while (state.comments.length) {
            const comment = state.comments.shift();
            chunks.push(
              c(
                comment.type === "Block" ? `/*${comment.value}*/
${state.indent}	` : `//${comment.value}
${state.indent}	`
              )
            );
            if (comment.type === "Line") {
              has_inline_comment = true;
            }
          }
        } else {
          if (i < node2.properties.length - 1) {
            chunks.push(separator);
          }
        }
      });
      const multiple_lines = has_inline_comment || has_newline(chunks) || get_length(chunks) > 40;
      if (multiple_lines) {
        separator.content = `,
${state.indent}	`;
      }
      return [
        c(multiple_lines ? `{
${state.indent}	` : `{ `),
        ...chunks,
        c(multiple_lines ? `
${state.indent}}` : ` }`)
      ];
    },
    Property(node2, state) {
      const value = handle(node2.value, state);
      if (node2.key === node2.value) {
        return value;
      }
      if (!node2.computed && node2.value.type === "AssignmentPattern" && node2.value.left.type === "Identifier" && node2.value.left.name === node2.key.name) {
        return value;
      }
      if (!node2.computed && node2.value.type === "Identifier" && (node2.key.type === "Identifier" && node2.key.name === value[0].content || node2.key.type === "Literal" && node2.key.value === value[0].content)) {
        return value;
      }
      const key = handle(node2.key, state);
      if (node2.value.type === "FunctionExpression" && !node2.value.id) {
        state = {
          ...state,
          scope: state.scope_map.get(node2.value)
        };
        const chunks = node2.kind !== "init" ? [c(`${node2.kind} `)] : [];
        if (node2.value.async) {
          chunks.push(c("async "));
        }
        if (node2.value.generator) {
          chunks.push(c("*"));
        }
        push_array(chunks, node2.computed ? [c("["), ...key, c("]")] : key);
        chunks.push(c("("));
        push_array(
          chunks,
          join(
            node2.value.params.map(
              (param) => handle(param, state)
            ),
            c(", ")
          )
        );
        chunks.push(c(") "));
        push_array(chunks, handle(node2.value.body, state));
        return chunks;
      }
      if (node2.computed) {
        return [c("["), ...key, c("]: "), ...value];
      }
      return [...key, c(": "), ...value];
    },
    ObjectPattern(node2, state) {
      const chunks = [c("{ ")];
      for (let i = 0; i < node2.properties.length; i += 1) {
        push_array(chunks, handle(node2.properties[i], state));
        if (i < node2.properties.length - 1)
          chunks.push(c(", "));
      }
      chunks.push(c(" }"));
      return chunks;
    },
    SequenceExpression(node2, state) {
      const expressions = node2.expressions.map((e) => handle(e, state));
      return [c("("), ...join(expressions, c(", ")), c(")")];
    },
    UnaryExpression(node2, state) {
      const chunks = [c(node2.operator)];
      if (node2.operator.length > 1) {
        chunks.push(c(" "));
      }
      if (EXPRESSIONS_PRECEDENCE[node2.argument.type] < EXPRESSIONS_PRECEDENCE.UnaryExpression) {
        chunks.push(c("("));
        push_array(chunks, handle(node2.argument, state));
        chunks.push(c(")"));
      } else {
        push_array(chunks, handle(node2.argument, state));
      }
      return chunks;
    },
    UpdateExpression(node2, state) {
      return node2.prefix ? [c(node2.operator), ...handle(node2.argument, state)] : [...handle(node2.argument, state), c(node2.operator)];
    },
    AssignmentExpression(node2, state) {
      return [
        ...handle(node2.left, state),
        c(` ${node2.operator || "="} `),
        ...handle(node2.right, state)
      ];
    },
    BinaryExpression(node2, state) {
      const chunks = [];
      if (needs_parens(node2.left, node2, false)) {
        chunks.push(c("("));
        push_array(chunks, handle(node2.left, state));
        chunks.push(c(")"));
      } else {
        push_array(chunks, handle(node2.left, state));
      }
      chunks.push(c(` ${node2.operator} `));
      if (needs_parens(node2.right, node2, true)) {
        chunks.push(c("("));
        push_array(chunks, handle(node2.right, state));
        chunks.push(c(")"));
      } else {
        push_array(chunks, handle(node2.right, state));
      }
      return chunks;
    },
    ConditionalExpression(node2, state) {
      const chunks = [];
      if (EXPRESSIONS_PRECEDENCE[node2.test.type] > EXPRESSIONS_PRECEDENCE.ConditionalExpression) {
        push_array(chunks, handle(node2.test, state));
      } else {
        chunks.push(c("("));
        push_array(chunks, handle(node2.test, state));
        chunks.push(c(")"));
      }
      const child_state = { ...state, indent: state.indent + "	" };
      const consequent = handle(node2.consequent, child_state);
      const alternate = handle(node2.alternate, child_state);
      const multiple_lines = has_newline(consequent) || has_newline(alternate) || get_length(chunks) + get_length(consequent) + get_length(alternate) > 50;
      if (multiple_lines) {
        chunks.push(c(`
${state.indent}? `));
        push_array(chunks, consequent);
        chunks.push(c(`
${state.indent}: `));
        push_array(chunks, alternate);
      } else {
        chunks.push(c(` ? `));
        push_array(chunks, consequent);
        chunks.push(c(` : `));
        push_array(chunks, alternate);
      }
      return chunks;
    },
    NewExpression(node2, state) {
      const chunks = [c("new ")];
      if (EXPRESSIONS_PRECEDENCE[node2.callee.type] < EXPRESSIONS_PRECEDENCE.CallExpression || has_call_expression(node2.callee)) {
        chunks.push(c("("));
        push_array(chunks, handle(node2.callee, state));
        chunks.push(c(")"));
      } else {
        push_array(chunks, handle(node2.callee, state));
      }
      const args = node2.arguments.map(
        (arg) => handle(arg, {
          ...state,
          indent: state.indent + "	"
        })
      );
      const separator = args.some(has_newline) ? c(",\n" + state.indent) : c(", ");
      chunks.push(c("("));
      push_array(chunks, join(args, separator));
      chunks.push(c(")"));
      return chunks;
    },
    ChainExpression(node2, state) {
      return handle(node2.expression, state);
    },
    CallExpression(node2, state) {
      const chunks = [];
      if (EXPRESSIONS_PRECEDENCE[node2.callee.type] < EXPRESSIONS_PRECEDENCE.CallExpression) {
        chunks.push(c("("));
        push_array(chunks, handle(node2.callee, state));
        chunks.push(c(")"));
      } else {
        push_array(chunks, handle(node2.callee, state));
      }
      if (
        /** @type {SimpleCallExpression} */
        node2.optional
      ) {
        chunks.push(c("?."));
      }
      const args = node2.arguments.map((arg) => handle(arg, state));
      const multiple_lines = args.slice(0, -1).some(has_newline);
      if (multiple_lines) {
        const args2 = node2.arguments.map(
          (arg) => handle(arg, {
            ...state,
            indent: `${state.indent}	`
          })
        );
        chunks.push(c(`(
${state.indent}	`));
        push_array(chunks, join(args2, c(`,
${state.indent}	`)));
        chunks.push(c(`
${state.indent})`));
      } else {
        chunks.push(c("("));
        push_array(chunks, join(args, c(", ")));
        chunks.push(c(")"));
      }
      return chunks;
    },
    MemberExpression(node2, state) {
      const chunks = [];
      if (EXPRESSIONS_PRECEDENCE[node2.object.type] < EXPRESSIONS_PRECEDENCE.MemberExpression) {
        chunks.push(c("("));
        push_array(chunks, handle(node2.object, state));
        chunks.push(c(")"));
      } else {
        push_array(chunks, handle(node2.object, state));
      }
      if (node2.computed) {
        if (node2.optional) {
          chunks.push(c("?."));
        }
        chunks.push(c("["));
        push_array(chunks, handle(node2.property, state));
        chunks.push(c("]"));
      } else {
        chunks.push(c(node2.optional ? "?." : "."));
        push_array(chunks, handle(node2.property, state));
      }
      return chunks;
    },
    MetaProperty(node2, state) {
      return [
        ...handle(node2.meta, state),
        c("."),
        ...handle(node2.property, state)
      ];
    },
    Identifier(node2, state) {
      let name2 = node2.name;
      if (name2[0] === "@") {
        name2 = state.getName(name2.slice(1));
      } else if (node2.name[0] === "#") {
        const owner = state.scope.find_owner(node2.name);
        if (!owner) {
          throw new Error(`Could not find owner for node`);
        }
        if (!state.deconflicted.has(owner)) {
          state.deconflicted.set(owner, /* @__PURE__ */ new Map());
        }
        const deconflict_map = state.deconflicted.get(owner);
        if (!deconflict_map.has(node2.name)) {
          deconflict_map.set(
            node2.name,
            deconflict(node2.name.slice(1), owner.references)
          );
        }
        name2 = deconflict_map.get(node2.name);
      }
      return [c(name2, node2)];
    },
    Literal(node2, state) {
      if (typeof node2.value === "string") {
        return [
          // TODO do we need to handle weird unicode characters somehow?
          // str.replace(/\\u(\d{4})/g, (m, n) => String.fromCharCode(+n))
          c(
            (node2.raw || JSON.stringify(node2.value)).replace(
              re,
              (_m, _i2, at3, hash2, name2) => {
                if (at3)
                  return "@" + name2;
                if (hash2)
                  return "#" + name2;
                throw new Error(`this shouldn't happen`);
              }
            ),
            node2
          )
        ];
      }
      return [c(node2.raw || String(node2.value), node2)];
    },
    PropertyDefinition(node2, state) {
      const chunks = [];
      if (node2.static) {
        chunks.push(c("static "));
      }
      if (node2.computed) {
        chunks.push(c("["), ...handle(node2.key, state), c("]"));
      } else {
        chunks.push(...handle(node2.key, state));
      }
      if (node2.value) {
        chunks.push(c(" = "));
        chunks.push(...handle(node2.value, state));
      }
      chunks.push(c(";"));
      return chunks;
    },
    StaticBlock(node2, state) {
      const chunks = [c("static ")];
      push_array(chunks, handlers.BlockStatement(node2, state));
      return chunks;
    },
    PrivateIdentifier(node2, state) {
      const chunks = [c("#")];
      push_array(chunks, [c(node2.name, node2)]);
      return chunks;
    }
  };
  handlers.ForOfStatement = handlers.ForInStatement;
  handlers.FunctionExpression = handlers.FunctionDeclaration;
  handlers.ClassExpression = handlers.ClassDeclaration;
  handlers.ClassBody = handlers.BlockStatement;
  handlers.SpreadElement = handlers.RestElement;
  handlers.ArrayPattern = handlers.ArrayExpression;
  handlers.LogicalExpression = handlers.BinaryExpression;
  handlers.AssignmentPattern = handlers.AssignmentExpression;
  var comma = ",".charCodeAt(0);
  var semicolon = ";".charCodeAt(0);
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var intToChar = new Uint8Array(64);
  var charToInt = new Uint8Array(128);
  for (let i = 0; i < chars.length; i++) {
    const c2 = chars.charCodeAt(i);
    intToChar[i] = c2;
    charToInt[c2] = i;
  }
  var td = typeof TextDecoder !== "undefined" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer !== "undefined" ? {
    decode(buf) {
      const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
      return out.toString();
    }
  } : {
    decode(buf) {
      let out = "";
      for (let i = 0; i < buf.length; i++) {
        out += String.fromCharCode(buf[i]);
      }
      return out;
    }
  };
  function encode(decoded) {
    const state = new Int32Array(5);
    const bufLength = 1024 * 16;
    const subLength = bufLength - 36;
    const buf = new Uint8Array(bufLength);
    const sub = buf.subarray(0, subLength);
    let pos = 0;
    let out = "";
    for (let i = 0; i < decoded.length; i++) {
      const line = decoded[i];
      if (i > 0) {
        if (pos === bufLength) {
          out += td.decode(buf);
          pos = 0;
        }
        buf[pos++] = semicolon;
      }
      if (line.length === 0)
        continue;
      state[0] = 0;
      for (let j = 0; j < line.length; j++) {
        const segment = line[j];
        if (pos > subLength) {
          out += td.decode(sub);
          buf.copyWithin(0, subLength, pos);
          pos -= subLength;
        }
        if (j > 0)
          buf[pos++] = comma;
        pos = encodeInteger(buf, pos, state, segment, 0);
        if (segment.length === 1)
          continue;
        pos = encodeInteger(buf, pos, state, segment, 1);
        pos = encodeInteger(buf, pos, state, segment, 2);
        pos = encodeInteger(buf, pos, state, segment, 3);
        if (segment.length === 4)
          continue;
        pos = encodeInteger(buf, pos, state, segment, 4);
      }
    }
    return out + td.decode(buf.subarray(0, pos));
  }
  function encodeInteger(buf, pos, state, segment, j) {
    const next = segment[j];
    let num = next - state[j];
    state[j] = next;
    num = num < 0 ? -num << 1 | 1 : num << 1;
    do {
      let clamped = num & 31;
      num >>>= 5;
      if (num > 0)
        clamped |= 32;
      buf[pos++] = intToChar[clamped];
    } while (num > 0);
    return pos;
  }
  var btoa$1 = () => {
    throw new Error(
      "Unsupported environment: `window.btoa` or `Buffer` should be supported."
    );
  };
  if (typeof window !== "undefined" && typeof window.btoa === "function") {
    btoa$1 = (str) => window.btoa(unescape(encodeURIComponent(str)));
  } else if (typeof Buffer === "function") {
    btoa$1 = (str) => Buffer.from(str, "utf-8").toString("base64");
  }
  function print(node2, opts = {}) {
    if (Array.isArray(node2)) {
      return print(
        {
          type: "Program",
          body: node2,
          sourceType: "module"
        },
        opts
      );
    }
    const {
      getName = (
        /** @param {string} x */
        (x2) => {
          throw new Error(`Unhandled sigil @${x2}`);
        }
      )
    } = opts;
    let { map: scope_map, scope } = analyze(node2);
    const deconflicted = /* @__PURE__ */ new WeakMap();
    const chunks = handle(node2, {
      indent: "",
      getName,
      scope,
      scope_map,
      deconflicted,
      comments: []
    });
    let code = "";
    let current_column = 0;
    let mappings = [];
    let current_line = [];
    for (let i = 0; i < chunks.length; i += 1) {
      const chunk = chunks[i];
      code += chunk.content;
      if (chunk.loc) {
        current_line.push([
          current_column,
          0,
          // source index is always zero
          chunk.loc.start.line - 1,
          chunk.loc.start.column
        ]);
      }
      for (let i2 = 0; i2 < chunk.content.length; i2 += 1) {
        if (chunk.content[i2] === "\n") {
          mappings.push(current_line);
          current_line = [];
          current_column = 0;
        } else {
          current_column += 1;
        }
      }
      if (chunk.loc) {
        current_line.push([
          current_column,
          0,
          // source index is always zero
          chunk.loc.end.line - 1,
          chunk.loc.end.column
        ]);
      }
    }
    mappings.push(current_line);
    const map = {
      version: 3,
      /** @type {string[]} */
      names: [],
      sources: [opts.sourceMapSource || null],
      sourcesContent: [opts.sourceMapContent || null],
      mappings: opts.sourceMapEncodeMappings == void 0 || opts.sourceMapEncodeMappings ? encode(mappings) : mappings
    };
    Object.defineProperties(map, {
      toString: {
        enumerable: false,
        value: function toString2() {
          return JSON.stringify(this);
        }
      },
      toUrl: {
        enumerable: false,
        value: function toUrl() {
          return "data:application/json;charset=utf-8;base64," + btoa$1(this.toString());
        }
      }
    });
    return {
      code,
      map
    };
  }
  var sigils = {
    "@": "AT",
    "#": "HASH"
  };
  var join$1 = (strings) => {
    let str = strings[0];
    for (let i = 1; i < strings.length; i += 1) {
      str += `_${id}_${i - 1}_${strings[i]}`;
    }
    return str.replace(
      /([@#])(\w+)/g,
      (_m, sigil, name2) => `_${id}_${sigils[sigil]}_${name2}`
    );
  };
  var flatten_body = (array, target) => {
    for (let i = 0; i < array.length; i += 1) {
      const statement = array[i];
      if (Array.isArray(statement)) {
        flatten_body(statement, target);
        continue;
      }
      if (statement.type === "ExpressionStatement") {
        if (statement.expression === EMPTY)
          continue;
        if (Array.isArray(statement.expression)) {
          let node2 = statement.expression[0];
          while (Array.isArray(node2))
            node2 = node2[0];
          if (node2)
            node2.leadingComments = statement.leadingComments;
          flatten_body(statement.expression, target);
          continue;
        }
        if (/(Expression|Literal)$/.test(statement.expression.type)) {
          target.push(statement);
          continue;
        }
        if (statement.leadingComments)
          statement.expression.leadingComments = statement.leadingComments;
        if (statement.trailingComments)
          statement.expression.trailingComments = statement.trailingComments;
        target.push(statement.expression);
        continue;
      }
      target.push(statement);
    }
    return target;
  };
  var flatten_properties = (array, target) => {
    for (let i = 0; i < array.length; i += 1) {
      const property = array[i];
      if (property.value === EMPTY)
        continue;
      if (property.key === property.value && Array.isArray(property.key)) {
        flatten_properties(property.key, target);
        continue;
      }
      target.push(property);
    }
    return target;
  };
  var flatten$1 = (nodes, target) => {
    for (let i = 0; i < nodes.length; i += 1) {
      const node2 = nodes[i];
      if (node2 === EMPTY)
        continue;
      if (Array.isArray(node2)) {
        flatten$1(node2, target);
        continue;
      }
      target.push(node2);
    }
    return target;
  };
  var EMPTY = { type: "Empty" };
  var acorn_opts = (comments, raw) => {
    const { onComment } = get_comment_handlers(comments, raw);
    return {
      ecmaVersion: 2022,
      sourceType: "module",
      allowAwaitOutsideFunction: true,
      allowImportExportEverywhere: true,
      allowReturnOutsideFunction: true,
      onComment
    };
  };
  var inject = (raw, node2, values, comments) => {
    comments.forEach((comment) => {
      comment.value = comment.value.replace(
        re,
        (m, i) => +i in values ? values[+i] : m
      );
    });
    const { enter, leave } = get_comment_handlers(comments, raw);
    return walk(node2, {
      enter,
      /** @param {any} node */
      leave(node3) {
        if (node3.type === "Identifier") {
          re.lastIndex = 0;
          const match = re.exec(node3.name);
          if (match) {
            if (match[1]) {
              if (+match[1] in values) {
                let value = values[+match[1]];
                if (typeof value === "string") {
                  value = {
                    type: "Identifier",
                    name: value,
                    leadingComments: node3.leadingComments,
                    trailingComments: node3.trailingComments
                  };
                } else if (typeof value === "number") {
                  value = {
                    type: "Literal",
                    value,
                    leadingComments: node3.leadingComments,
                    trailingComments: node3.trailingComments
                  };
                }
                this.replace(value || EMPTY);
              }
            } else {
              node3.name = `${match[2] ? `@` : `#`}${match[4]}`;
            }
          }
        }
        if (node3.type === "Literal") {
          if (typeof node3.value === "string") {
            re.lastIndex = 0;
            const new_value = (
              /** @type {string} */
              node3.value.replace(
                re,
                (m, i) => +i in values ? values[+i] : m
              )
            );
            const has_changed = new_value !== node3.value;
            node3.value = new_value;
            if (has_changed && node3.raw) {
              node3.raw = `${node3.raw[0]}${JSON.stringify(node3.value).slice(
                1,
                -1
              )}${node3.raw[node3.raw.length - 1]}`;
            }
          }
        }
        if (node3.type === "TemplateElement") {
          re.lastIndex = 0;
          node3.value.raw = /** @type {string} */
          node3.value.raw.replace(
            re,
            (m, i) => +i in values ? values[+i] : m
          );
        }
        if (node3.type === "Program" || node3.type === "BlockStatement") {
          node3.body = flatten_body(node3.body, []);
        }
        if (node3.type === "ObjectExpression" || node3.type === "ObjectPattern") {
          node3.properties = flatten_properties(node3.properties, []);
        }
        if (node3.type === "ArrayExpression" || node3.type === "ArrayPattern") {
          node3.elements = flatten$1(node3.elements, []);
        }
        if (node3.type === "FunctionExpression" || node3.type === "FunctionDeclaration" || node3.type === "ArrowFunctionExpression") {
          node3.params = flatten$1(node3.params, []);
        }
        if (node3.type === "CallExpression" || node3.type === "NewExpression") {
          node3.arguments = flatten$1(node3.arguments, []);
        }
        if (node3.type === "ImportDeclaration" || node3.type === "ExportNamedDeclaration") {
          node3.specifiers = flatten$1(node3.specifiers, []);
        }
        if (node3.type === "ForStatement") {
          node3.init = node3.init === EMPTY ? null : node3.init;
          node3.test = node3.test === EMPTY ? null : node3.test;
          node3.update = node3.update === EMPTY ? null : node3.update;
        }
        leave(node3);
      }
    });
  };
  function b(strings, ...values) {
    const str = join$1(strings);
    const comments = [];
    try {
      let ast = (
        /** @type {any} */
        parse3(str, acorn_opts(comments, str))
      );
      ast = inject(str, ast, values, comments);
      return ast.body;
    } catch (err) {
      handle_error(str, err);
    }
  }
  function x(strings, ...values) {
    const str = join$1(strings);
    const comments = [];
    try {
      let expression = (
        /** @type {Expression & { start: Number, end: number }} */
        parseExpressionAt2(str, 0, acorn_opts(comments, str))
      );
      const match = /\S+/.exec(str.slice(expression.end));
      if (match) {
        throw new Error(`Unexpected token '${match[0]}'`);
      }
      expression = /** @type {Expression & { start: Number, end: number }} */
      inject(str, expression, values, comments);
      return expression;
    } catch (err) {
      handle_error(str, err);
    }
  }
  function p(strings, ...values) {
    const str = `{${join$1(strings)}}`;
    const comments = [];
    try {
      let expression = (
        /** @type {any} */
        parseExpressionAt2(str, 0, acorn_opts(comments, str))
      );
      expression = inject(str, expression, values, comments);
      return expression.properties[0];
    } catch (err) {
      handle_error(str, err);
    }
  }
  function handle_error(str, err) {
    re.lastIndex = 0;
    str = str.replace(re, (m, i, at3, hash2, name2) => {
      if (at3)
        return `@${name2}`;
      if (hash2)
        return `#${name2}`;
      return "${...}";
    });
    console.log(`failed to parse:
${str}`);
    throw err;
  }
  var parse$1 = (source, opts) => {
    const comments = [];
    const { onComment, enter, leave } = get_comment_handlers(comments, source);
    const ast = (
      /** @type {any} */
      parse3(source, { onComment, ...opts })
    );
    walk(ast, { enter, leave });
    return ast;
  };
  var parseExpressionAt$1 = (source, index, opts) => {
    const comments = [];
    const { onComment, enter, leave } = get_comment_handlers(comments, source);
    const ast = (
      /** @type {any} */
      parseExpressionAt2(source, index, { onComment, ...opts })
    );
    walk(ast, { enter, leave });
    return ast;
  };
  var parse$2 = (source) => parse$1(source, {
    sourceType: "module",
    ecmaVersion: 13,
    locations: true
  });
  var parse_expression_at = (source, index) => parseExpressionAt$1(source, index, {
    sourceType: "module",
    ecmaVersion: 13,
    locations: true
  });
  function read_expression(parser) {
    try {
      const node2 = parse_expression_at(parser.template, parser.index);
      let num_parens = 0;
      for (let i = parser.index; i < node2.start; i += 1) {
        if (parser.template[i] === "(")
          num_parens += 1;
      }
      let index = node2.end;
      while (num_parens > 0) {
        const char = parser.template[index];
        if (char === ")") {
          num_parens -= 1;
        } else if (!regex_whitespace.test(char)) {
          parser.error(parser_errors.unexpected_token(")"), index);
        }
        index += 1;
      }
      parser.index = index;
      return node2;
    } catch (err) {
      parser.acorn_error(err);
    }
  }
  var regex_closing_script_tag = /<\/script\s*>/;
  var regex_starts_with_closing_script_tag = /^<\/script\s*>/;
  function get_context(parser, attributes, start) {
    const context = attributes.find((attribute) => attribute.name === "context");
    if (!context)
      return "default";
    if (context.value.length !== 1 || context.value[0].type !== "Text") {
      parser.error(parser_errors.invalid_script_context_attribute, start);
    }
    const value = context.value[0].data;
    if (value !== "module") {
      parser.error(parser_errors.invalid_script_context_value, context.start);
    }
    return value;
  }
  function read_script(parser, start, attributes) {
    const script_start = parser.index;
    const data2 = parser.read_until(regex_closing_script_tag, parser_errors.unclosed_script);
    if (parser.index >= parser.template.length) {
      parser.error(parser_errors.unclosed_script);
    }
    const source = parser.template.slice(0, script_start).replace(regex_not_newline_characters, " ") + data2;
    parser.read(regex_starts_with_closing_script_tag);
    let ast;
    try {
      ast = parse$2(source);
    } catch (err) {
      parser.acorn_error(err);
    }
    ast.start = script_start;
    return {
      type: "Script",
      start,
      end: parser.index,
      context: get_context(parser, attributes, start),
      content: ast
    };
  }
  var rs = Object.create;
  var tr = Object.defineProperty;
  var ns = Object.getOwnPropertyDescriptor;
  var os = Object.getOwnPropertyNames;
  var is = Object.getPrototypeOf;
  var as = Object.prototype.hasOwnProperty;
  var Oe = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
  var b$1 = (e, t) => {
    for (var r in t)
      tr(e, r, { get: t[r], enumerable: true });
  };
  var ss = (e, t, r, n2) => {
    if (t && typeof t == "object" || typeof t == "function")
      for (let o of os(t))
        !as.call(e, o) && o !== r && tr(e, o, { get: () => t[o], enumerable: !(n2 = ns(t, o)) || n2.enumerable });
    return e;
  };
  var ls = (e, t, r) => (r = e != null ? rs(is(e)) : {}, ss(t || !e || !e.__esModule ? tr(r, "default", { value: e, enumerable: true }) : r, e));
  var Jo = Oe((ur) => {
    var Zo = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    ur.encode = function(e) {
      if (0 <= e && e < Zo.length)
        return Zo[e];
      throw new TypeError("Must be between 0 and 63: " + e);
    };
    ur.decode = function(e) {
      var t = 65, r = 90, n2 = 97, o = 122, i = 48, s = 57, u = 43, c2 = 47, a = 26, l = 52;
      return t <= e && e <= r ? e - t : n2 <= e && e <= o ? e - n2 + a : i <= e && e <= s ? e - i + l : e == u ? 62 : e == c2 ? 63 : -1;
    };
  });
  var oi = Oe((hr) => {
    var ei = Jo(), pr = 5, ti = 1 << pr, ri = ti - 1, ni = ti;
    function ks(e) {
      return e < 0 ? (-e << 1) + 1 : (e << 1) + 0;
    }
    function ws(e) {
      var t = (e & 1) === 1, r = e >> 1;
      return t ? -r : r;
    }
    hr.encode = function(t) {
      var r = "", n2, o = ks(t);
      do
        n2 = o & ri, o >>>= pr, o > 0 && (n2 |= ni), r += ei.encode(n2);
      while (o > 0);
      return r;
    };
    hr.decode = function(t, r, n2) {
      var o = t.length, i = 0, s = 0, u, c2;
      do {
        if (r >= o)
          throw new Error("Expected more digits in base 64 VLQ value.");
        if (c2 = ei.decode(t.charCodeAt(r++)), c2 === -1)
          throw new Error("Invalid base64 digit: " + t.charAt(r - 1));
        u = !!(c2 & ni), c2 &= ri, i = i + (c2 << s), s += pr;
      } while (u);
      n2.value = ws(i), n2.rest = r;
    };
  });
  var Et = Oe((K) => {
    function vs(e, t, r) {
      if (t in e)
        return e[t];
      if (arguments.length === 3)
        return r;
      throw new Error('"' + t + '" is a required argument.');
    }
    K.getArg = vs;
    var ii = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/, Ss = /^data:.+\,.+$/;
    function nt(e) {
      var t = e.match(ii);
      return t ? { scheme: t[1], auth: t[2], host: t[3], port: t[4], path: t[5] } : null;
    }
    K.urlParse = nt;
    function qe(e) {
      var t = "";
      return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t;
    }
    K.urlGenerate = qe;
    var Cs = 32;
    function As(e) {
      var t = [];
      return function(r) {
        for (var n2 = 0; n2 < t.length; n2++)
          if (t[n2].input === r) {
            var o = t[0];
            return t[0] = t[n2], t[n2] = o, t[0].result;
          }
        var i = e(r);
        return t.unshift({ input: r, result: i }), t.length > Cs && t.pop(), i;
      };
    }
    var mr = As(function(t) {
      var r = t, n2 = nt(t);
      if (n2) {
        if (!n2.path)
          return t;
        r = n2.path;
      }
      for (var o = K.isAbsolute(r), i = [], s = 0, u = 0; ; )
        if (s = u, u = r.indexOf("/", s), u === -1) {
          i.push(r.slice(s));
          break;
        } else
          for (i.push(r.slice(s, u)); u < r.length && r[u] === "/"; )
            u++;
      for (var c2, a = 0, u = i.length - 1; u >= 0; u--)
        c2 = i[u], c2 === "." ? i.splice(u, 1) : c2 === ".." ? a++ : a > 0 && (c2 === "" ? (i.splice(u + 1, a), a = 0) : (i.splice(u, 2), a--));
      return r = i.join("/"), r === "" && (r = o ? "/" : "."), n2 ? (n2.path = r, qe(n2)) : r;
    });
    K.normalize = mr;
    function ai(e, t) {
      e === "" && (e = "."), t === "" && (t = ".");
      var r = nt(t), n2 = nt(e);
      if (n2 && (e = n2.path || "/"), r && !r.scheme)
        return n2 && (r.scheme = n2.scheme), qe(r);
      if (r || t.match(Ss))
        return t;
      if (n2 && !n2.host && !n2.path)
        return n2.host = t, qe(n2);
      var o = t.charAt(0) === "/" ? t : mr(e.replace(/\/+$/, "") + "/" + t);
      return n2 ? (n2.path = o, qe(n2)) : o;
    }
    K.join = ai;
    K.isAbsolute = function(e) {
      return e.charAt(0) === "/" || ii.test(e);
    };
    function Ts(e, t) {
      e === "" && (e = "."), e = e.replace(/\/$/, "");
      for (var r = 0; t.indexOf(e + "/") !== 0; ) {
        var n2 = e.lastIndexOf("/");
        if (n2 < 0 || (e = e.slice(0, n2), e.match(/^([^\/]+:\/)?\/*$/)))
          return t;
        ++r;
      }
      return Array(r + 1).join("../") + t.substr(e.length + 1);
    }
    K.relative = Ts;
    var si = function() {
      var e = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in e);
    }();
    function li(e) {
      return e;
    }
    function Es(e) {
      return ci(e) ? "$" + e : e;
    }
    K.toSetString = si ? li : Es;
    function Ls(e) {
      return ci(e) ? e.slice(1) : e;
    }
    K.fromSetString = si ? li : Ls;
    function ci(e) {
      if (!e)
        return false;
      var t = e.length;
      if (t < 9 || e.charCodeAt(t - 1) !== 95 || e.charCodeAt(t - 2) !== 95 || e.charCodeAt(t - 3) !== 111 || e.charCodeAt(t - 4) !== 116 || e.charCodeAt(t - 5) !== 111 || e.charCodeAt(t - 6) !== 114 || e.charCodeAt(t - 7) !== 112 || e.charCodeAt(t - 8) !== 95 || e.charCodeAt(t - 9) !== 95)
        return false;
      for (var r = t - 10; r >= 0; r--)
        if (e.charCodeAt(r) !== 36)
          return false;
      return true;
    }
    function Ps(e, t, r) {
      var n2 = be(e.source, t.source);
      return n2 !== 0 || (n2 = e.originalLine - t.originalLine, n2 !== 0) || (n2 = e.originalColumn - t.originalColumn, n2 !== 0 || r) || (n2 = e.generatedColumn - t.generatedColumn, n2 !== 0) || (n2 = e.generatedLine - t.generatedLine, n2 !== 0) ? n2 : be(e.name, t.name);
    }
    K.compareByOriginalPositions = Ps;
    function Is(e, t, r) {
      var n2;
      return n2 = e.originalLine - t.originalLine, n2 !== 0 || (n2 = e.originalColumn - t.originalColumn, n2 !== 0 || r) || (n2 = e.generatedColumn - t.generatedColumn, n2 !== 0) || (n2 = e.generatedLine - t.generatedLine, n2 !== 0) ? n2 : be(e.name, t.name);
    }
    K.compareByOriginalPositionsNoSource = Is;
    function Ds(e, t, r) {
      var n2 = e.generatedLine - t.generatedLine;
      return n2 !== 0 || (n2 = e.generatedColumn - t.generatedColumn, n2 !== 0 || r) || (n2 = be(e.source, t.source), n2 !== 0) || (n2 = e.originalLine - t.originalLine, n2 !== 0) || (n2 = e.originalColumn - t.originalColumn, n2 !== 0) ? n2 : be(e.name, t.name);
    }
    K.compareByGeneratedPositionsDeflated = Ds;
    function Os(e, t, r) {
      var n2 = e.generatedColumn - t.generatedColumn;
      return n2 !== 0 || r || (n2 = be(e.source, t.source), n2 !== 0) || (n2 = e.originalLine - t.originalLine, n2 !== 0) || (n2 = e.originalColumn - t.originalColumn, n2 !== 0) ? n2 : be(e.name, t.name);
    }
    K.compareByGeneratedPositionsDeflatedNoLine = Os;
    function be(e, t) {
      return e === t ? 0 : e === null ? 1 : t === null ? -1 : e > t ? 1 : -1;
    }
    function Ns(e, t) {
      var r = e.generatedLine - t.generatedLine;
      return r !== 0 || (r = e.generatedColumn - t.generatedColumn, r !== 0) || (r = be(e.source, t.source), r !== 0) || (r = e.originalLine - t.originalLine, r !== 0) || (r = e.originalColumn - t.originalColumn, r !== 0) ? r : be(e.name, t.name);
    }
    K.compareByGeneratedPositionsInflated = Ns;
    function zs(e) {
      return JSON.parse(e.replace(/^\)]}'[^\n]*\n/, ""));
    }
    K.parseSourceMapInput = zs;
    function Ms(e, t, r) {
      if (t = t || "", e && (e[e.length - 1] !== "/" && t[0] !== "/" && (e += "/"), t = e + t), r) {
        var n2 = nt(r);
        if (!n2)
          throw new Error("sourceMapURL could not be parsed");
        if (n2.path) {
          var o = n2.path.lastIndexOf("/");
          o >= 0 && (n2.path = n2.path.substring(0, o + 1));
        }
        t = ai(qe(n2), t);
      }
      return mr(t);
    }
    K.computeSourceURL = Ms;
  });
  var pi = Oe((ui) => {
    var fr = Et(), dr = Object.prototype.hasOwnProperty, Le = typeof Map < "u";
    function xe() {
      this._array = [], this._set = Le ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    xe.fromArray = function(t, r) {
      for (var n2 = new xe(), o = 0, i = t.length; o < i; o++)
        n2.add(t[o], r);
      return n2;
    };
    xe.prototype.size = function() {
      return Le ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    xe.prototype.add = function(t, r) {
      var n2 = Le ? t : fr.toSetString(t), o = Le ? this.has(t) : dr.call(this._set, n2), i = this._array.length;
      (!o || r) && this._array.push(t), o || (Le ? this._set.set(t, i) : this._set[n2] = i);
    };
    xe.prototype.has = function(t) {
      if (Le)
        return this._set.has(t);
      var r = fr.toSetString(t);
      return dr.call(this._set, r);
    };
    xe.prototype.indexOf = function(t) {
      if (Le) {
        var r = this._set.get(t);
        if (r >= 0)
          return r;
      } else {
        var n2 = fr.toSetString(t);
        if (dr.call(this._set, n2))
          return this._set[n2];
      }
      throw new Error('"' + t + '" is not in the set.');
    };
    xe.prototype.at = function(t) {
      if (t >= 0 && t < this._array.length)
        return this._array[t];
      throw new Error("No element indexed by " + t);
    };
    xe.prototype.toArray = function() {
      return this._array.slice();
    };
    ui.ArraySet = xe;
  });
  var fi = Oe((mi) => {
    var hi = Et();
    function Rs(e, t) {
      var r = e.generatedLine, n2 = t.generatedLine, o = e.generatedColumn, i = t.generatedColumn;
      return n2 > r || n2 == r && i >= o || hi.compareByGeneratedPositionsInflated(e, t) <= 0;
    }
    function Lt() {
      this._array = [], this._sorted = true, this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    Lt.prototype.unsortedForEach = function(t, r) {
      this._array.forEach(t, r);
    };
    Lt.prototype.add = function(t) {
      Rs(this._last, t) ? (this._last = t, this._array.push(t)) : (this._sorted = false, this._array.push(t));
    };
    Lt.prototype.toArray = function() {
      return this._sorted || (this._array.sort(hi.compareByGeneratedPositionsInflated), this._sorted = true), this._array;
    };
    mi.MappingList = Lt;
  });
  var gi = Oe((di) => {
    var ot = oi(), j = Et(), Pt = pi().ArraySet, Fs = fi().MappingList;
    function oe(e) {
      e || (e = {}), this._file = j.getArg(e, "file", null), this._sourceRoot = j.getArg(e, "sourceRoot", null), this._skipValidation = j.getArg(e, "skipValidation", false), this._sources = new Pt(), this._names = new Pt(), this._mappings = new Fs(), this._sourcesContents = null;
    }
    oe.prototype._version = 3;
    oe.fromSourceMap = function(t) {
      var r = t.sourceRoot, n2 = new oe({ file: t.file, sourceRoot: r });
      return t.eachMapping(function(o) {
        var i = { generated: { line: o.generatedLine, column: o.generatedColumn } };
        o.source != null && (i.source = o.source, r != null && (i.source = j.relative(r, i.source)), i.original = { line: o.originalLine, column: o.originalColumn }, o.name != null && (i.name = o.name)), n2.addMapping(i);
      }), t.sources.forEach(function(o) {
        var i = o;
        r !== null && (i = j.relative(r, o)), n2._sources.has(i) || n2._sources.add(i);
        var s = t.sourceContentFor(o);
        s != null && n2.setSourceContent(o, s);
      }), n2;
    };
    oe.prototype.addMapping = function(t) {
      var r = j.getArg(t, "generated"), n2 = j.getArg(t, "original", null), o = j.getArg(t, "source", null), i = j.getArg(t, "name", null);
      this._skipValidation || this._validateMapping(r, n2, o, i), o != null && (o = String(o), this._sources.has(o) || this._sources.add(o)), i != null && (i = String(i), this._names.has(i) || this._names.add(i)), this._mappings.add({ generatedLine: r.line, generatedColumn: r.column, originalLine: n2 != null && n2.line, originalColumn: n2 != null && n2.column, source: o, name: i });
    };
    oe.prototype.setSourceContent = function(t, r) {
      var n2 = t;
      this._sourceRoot != null && (n2 = j.relative(this._sourceRoot, n2)), r != null ? (this._sourcesContents || (this._sourcesContents = /* @__PURE__ */ Object.create(null)), this._sourcesContents[j.toSetString(n2)] = r) : this._sourcesContents && (delete this._sourcesContents[j.toSetString(n2)], Object.keys(this._sourcesContents).length === 0 && (this._sourcesContents = null));
    };
    oe.prototype.applySourceMap = function(t, r, n2) {
      var o = r;
      if (r == null) {
        if (t.file == null)
          throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
        o = t.file;
      }
      var i = this._sourceRoot;
      i != null && (o = j.relative(i, o));
      var s = new Pt(), u = new Pt();
      this._mappings.unsortedForEach(function(c2) {
        if (c2.source === o && c2.originalLine != null) {
          var a = t.originalPositionFor({ line: c2.originalLine, column: c2.originalColumn });
          a.source != null && (c2.source = a.source, n2 != null && (c2.source = j.join(n2, c2.source)), i != null && (c2.source = j.relative(i, c2.source)), c2.originalLine = a.line, c2.originalColumn = a.column, a.name != null && (c2.name = a.name));
        }
        var l = c2.source;
        l != null && !s.has(l) && s.add(l);
        var p2 = c2.name;
        p2 != null && !u.has(p2) && u.add(p2);
      }, this), this._sources = s, this._names = u, t.sources.forEach(function(c2) {
        var a = t.sourceContentFor(c2);
        a != null && (n2 != null && (c2 = j.join(n2, c2)), i != null && (c2 = j.relative(i, c2)), this.setSourceContent(c2, a));
      }, this);
    };
    oe.prototype._validateMapping = function(t, r, n2, o) {
      if (r && typeof r.line != "number" && typeof r.column != "number")
        throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
      if (!(t && "line" in t && "column" in t && t.line > 0 && t.column >= 0 && !r && !n2 && !o)) {
        if (t && "line" in t && "column" in t && r && "line" in r && "column" in r && t.line > 0 && t.column >= 0 && r.line > 0 && r.column >= 0 && n2)
          return;
        throw new Error("Invalid mapping: " + JSON.stringify({ generated: t, source: n2, original: r, name: o }));
      }
    };
    oe.prototype._serializeMappings = function() {
      for (var t = 0, r = 1, n2 = 0, o = 0, i = 0, s = 0, u = "", c2, a, l, p2, m = this._mappings.toArray(), f = 0, P = m.length; f < P; f++) {
        if (a = m[f], c2 = "", a.generatedLine !== r)
          for (t = 0; a.generatedLine !== r; )
            c2 += ";", r++;
        else if (f > 0) {
          if (!j.compareByGeneratedPositionsInflated(a, m[f - 1]))
            continue;
          c2 += ",";
        }
        c2 += ot.encode(a.generatedColumn - t), t = a.generatedColumn, a.source != null && (p2 = this._sources.indexOf(a.source), c2 += ot.encode(p2 - s), s = p2, c2 += ot.encode(a.originalLine - 1 - o), o = a.originalLine - 1, c2 += ot.encode(a.originalColumn - n2), n2 = a.originalColumn, a.name != null && (l = this._names.indexOf(a.name), c2 += ot.encode(l - i), i = l)), u += c2;
      }
      return u;
    };
    oe.prototype._generateSourcesContent = function(t, r) {
      return t.map(function(n2) {
        if (!this._sourcesContents)
          return null;
        r != null && (n2 = j.relative(r, n2));
        var o = j.toSetString(n2);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, o) ? this._sourcesContents[o] : null;
      }, this);
    };
    oe.prototype.toJSON = function() {
      var t = { version: this._version, sources: this._sources.toArray(), names: this._names.toArray(), mappings: this._serializeMappings() };
      return this._file != null && (t.file = this._file), this._sourceRoot != null && (t.sourceRoot = this._sourceRoot), this._sourcesContents && (t.sourcesContent = this._generateSourcesContent(t.sources, t.sourceRoot)), t;
    };
    oe.prototype.toString = function() {
      return JSON.stringify(this.toJSON());
    };
    di.SourceMapGenerator = oe;
  });
  var $e = {};
  b$1($e, { AtKeyword: () => I, BadString: () => Ae, BadUrl: () => Y, CDC: () => U, CDO: () => ue, Colon: () => O, Comma: () => G, Comment: () => E, Delim: () => g, Dimension: () => y, EOF: () => Xe, Function: () => x$1, Hash: () => v, Ident: () => h, LeftCurlyBracket: () => M, LeftParenthesis: () => T, LeftSquareBracket: () => q, Number: () => d, Percentage: () => A, RightCurlyBracket: () => H, RightParenthesis: () => w, RightSquareBracket: () => V, Semicolon: () => _, String: () => W, Url: () => F, WhiteSpace: () => k });
  var Xe = 0;
  var h = 1;
  var x$1 = 2;
  var I = 3;
  var v = 4;
  var W = 5;
  var Ae = 6;
  var F = 7;
  var Y = 8;
  var g = 9;
  var d = 10;
  var A = 11;
  var y = 12;
  var k = 13;
  var ue = 14;
  var U = 15;
  var O = 16;
  var _ = 17;
  var G = 18;
  var q = 19;
  var V = 20;
  var T = 21;
  var w = 22;
  var M = 23;
  var H = 24;
  var E = 25;
  function B(e) {
    return e >= 48 && e <= 57;
  }
  function ee(e) {
    return B(e) || e >= 65 && e <= 70 || e >= 97 && e <= 102;
  }
  function yt(e) {
    return e >= 65 && e <= 90;
  }
  function cs(e) {
    return e >= 97 && e <= 122;
  }
  function us(e) {
    return yt(e) || cs(e);
  }
  function ps(e) {
    return e >= 128;
  }
  function xt(e) {
    return us(e) || ps(e) || e === 95;
  }
  function Ne(e) {
    return xt(e) || B(e) || e === 45;
  }
  function hs(e) {
    return e >= 0 && e <= 8 || e === 11 || e >= 14 && e <= 31 || e === 127;
  }
  function Ze(e) {
    return e === 10 || e === 13 || e === 12;
  }
  function pe(e) {
    return Ze(e) || e === 32 || e === 9;
  }
  function $(e, t) {
    return !(e !== 92 || Ze(t) || t === 0);
  }
  function ze(e, t, r) {
    return e === 45 ? xt(t) || t === 45 || $(t, r) : xt(e) ? true : e === 92 ? $(e, t) : false;
  }
  function kt(e, t, r) {
    return e === 43 || e === 45 ? B(t) ? 2 : t === 46 && B(r) ? 3 : 0 : e === 46 ? B(t) ? 2 : 0 : B(e) ? 1 : 0;
  }
  function wt(e) {
    return e === 65279 || e === 65534 ? 1 : 0;
  }
  var rr = new Array(128);
  var ms = 128;
  var Je = 130;
  var nr = 131;
  var vt = 132;
  var or = 133;
  for (let e = 0; e < rr.length; e++)
    rr[e] = pe(e) && Je || B(e) && nr || xt(e) && vt || hs(e) && or || e || ms;
  function St(e) {
    return e < 128 ? rr[e] : vt;
  }
  function Me(e, t) {
    return t < e.length ? e.charCodeAt(t) : 0;
  }
  function Ct(e, t, r) {
    return r === 13 && Me(e, t + 1) === 10 ? 2 : 1;
  }
  function de(e, t, r) {
    let n2 = e.charCodeAt(t);
    return yt(n2) && (n2 = n2 | 32), n2 === r;
  }
  function ge(e, t, r, n2) {
    if (r - t !== n2.length || t < 0 || r > e.length)
      return false;
    for (let o = t; o < r; o++) {
      let i = n2.charCodeAt(o - t), s = e.charCodeAt(o);
      if (yt(s) && (s = s | 32), s !== i)
        return false;
    }
    return true;
  }
  function qo(e, t) {
    for (; t >= 0 && pe(e.charCodeAt(t)); t--)
      ;
    return t + 1;
  }
  function et(e, t) {
    for (; t < e.length && pe(e.charCodeAt(t)); t++)
      ;
    return t;
  }
  function ir(e, t) {
    for (; t < e.length && B(e.charCodeAt(t)); t++)
      ;
    return t;
  }
  function se(e, t) {
    if (t += 2, ee(Me(e, t - 1))) {
      for (let n2 = Math.min(e.length, t + 5); t < n2 && ee(Me(e, t)); t++)
        ;
      let r = Me(e, t);
      pe(r) && (t += Ct(e, t, r));
    }
    return t;
  }
  function tt(e, t) {
    for (; t < e.length; t++) {
      let r = e.charCodeAt(t);
      if (!Ne(r)) {
        if ($(r, Me(e, t + 1))) {
          t = se(e, t) - 1;
          continue;
        }
        break;
      }
    }
    return t;
  }
  function Te(e, t) {
    let r = e.charCodeAt(t);
    if ((r === 43 || r === 45) && (r = e.charCodeAt(t += 1)), B(r) && (t = ir(e, t + 1), r = e.charCodeAt(t)), r === 46 && B(e.charCodeAt(t + 1)) && (t += 2, t = ir(e, t)), de(e, t, 101)) {
      let n2 = 0;
      r = e.charCodeAt(t + 1), (r === 45 || r === 43) && (n2 = 1, r = e.charCodeAt(t + 2)), B(r) && (t = ir(e, t + 1 + n2 + 1));
    }
    return t;
  }
  function At(e, t) {
    for (; t < e.length; t++) {
      let r = e.charCodeAt(t);
      if (r === 41) {
        t++;
        break;
      }
      $(r, Me(e, t + 1)) && (t = se(e, t));
    }
    return t;
  }
  function Re(e) {
    if (e.length === 1 && !ee(e.charCodeAt(0)))
      return e[0];
    let t = parseInt(e, 16);
    return (t === 0 || t >= 55296 && t <= 57343 || t > 1114111) && (t = 65533), String.fromCodePoint(t);
  }
  var Fe = ["EOF-token", "ident-token", "function-token", "at-keyword-token", "hash-token", "string-token", "bad-string-token", "url-token", "bad-url-token", "delim-token", "number-token", "percentage-token", "dimension-token", "whitespace-token", "CDO-token", "CDC-token", "colon-token", "semicolon-token", "comma-token", "[-token", "]-token", "(-token", ")-token", "{-token", "}-token"];
  function Be(e = null, t) {
    return e === null || e.length < t ? new Uint32Array(Math.max(t + 1024, 16384)) : e;
  }
  var Uo = 10;
  var fs = 12;
  var jo = 13;
  function Wo(e) {
    let t = e.source, r = t.length, n2 = t.length > 0 ? wt(t.charCodeAt(0)) : 0, o = Be(e.lines, r), i = Be(e.columns, r), s = e.startLine, u = e.startColumn;
    for (let c2 = n2; c2 < r; c2++) {
      let a = t.charCodeAt(c2);
      o[c2] = s, i[c2] = u++, (a === Uo || a === jo || a === fs) && (a === jo && c2 + 1 < r && t.charCodeAt(c2 + 1) === Uo && (c2++, o[c2] = s, i[c2] = u), s++, u = 1);
    }
    o[r] = s, i[r] = u, e.lines = o, e.columns = i, e.computed = true;
  }
  var Tt = class {
    constructor() {
      this.lines = null, this.columns = null, this.computed = false;
    }
    setSource(t, r = 0, n2 = 1, o = 1) {
      this.source = t, this.startOffset = r, this.startLine = n2, this.startColumn = o, this.computed = false;
    }
    getLocation(t, r) {
      return this.computed || Wo(this), { source: r, offset: this.startOffset + t, line: this.lines[t], column: this.columns[t] };
    }
    getLocationRange(t, r, n2) {
      return this.computed || Wo(this), { source: n2, start: { offset: this.startOffset + t, line: this.lines[t], column: this.columns[t] }, end: { offset: this.startOffset + r, line: this.lines[r], column: this.columns[r] } };
    }
  };
  var ne = 16777215;
  var we = 24;
  var ds = /* @__PURE__ */ new Map([[2, 22], [21, 22], [19, 20], [23, 24]]);
  var rt = class {
    constructor(t, r) {
      this.setSource(t, r);
    }
    reset() {
      this.eof = false, this.tokenIndex = -1, this.tokenType = 0, this.tokenStart = this.firstCharOffset, this.tokenEnd = this.firstCharOffset;
    }
    setSource(t = "", r = () => {
    }) {
      t = String(t || "");
      let n2 = t.length, o = Be(this.offsetAndType, t.length + 1), i = Be(this.balance, t.length + 1), s = 0, u = 0, c2 = 0, a = -1;
      for (this.offsetAndType = null, this.balance = null, r(t, (l, p2, m) => {
        switch (l) {
          default:
            i[s] = n2;
            break;
          case u: {
            let f = c2 & ne;
            for (c2 = i[f], u = c2 >> we, i[s] = f, i[f++] = s; f < s; f++)
              i[f] === n2 && (i[f] = s);
            break;
          }
          case 21:
          case 2:
          case 19:
          case 23:
            i[s] = c2, u = ds.get(l), c2 = u << we | s;
            break;
        }
        o[s++] = l << we | m, a === -1 && (a = p2);
      }), o[s] = 0 << we | n2, i[s] = n2, i[n2] = n2; c2 !== 0; ) {
        let l = c2 & ne;
        c2 = i[l], i[l] = n2;
      }
      this.source = t, this.firstCharOffset = a === -1 ? 0 : a, this.tokenCount = s, this.offsetAndType = o, this.balance = i, this.reset(), this.next();
    }
    lookupType(t) {
      return t += this.tokenIndex, t < this.tokenCount ? this.offsetAndType[t] >> we : 0;
    }
    lookupOffset(t) {
      return t += this.tokenIndex, t < this.tokenCount ? this.offsetAndType[t - 1] & ne : this.source.length;
    }
    lookupValue(t, r) {
      return t += this.tokenIndex, t < this.tokenCount ? ge(this.source, this.offsetAndType[t - 1] & ne, this.offsetAndType[t] & ne, r) : false;
    }
    getTokenStart(t) {
      return t === this.tokenIndex ? this.tokenStart : t > 0 ? t < this.tokenCount ? this.offsetAndType[t - 1] & ne : this.offsetAndType[this.tokenCount] & ne : this.firstCharOffset;
    }
    substrToCursor(t) {
      return this.source.substring(t, this.tokenStart);
    }
    isBalanceEdge(t) {
      return this.balance[this.tokenIndex] < t;
    }
    isDelim(t, r) {
      return r ? this.lookupType(r) === 9 && this.source.charCodeAt(this.lookupOffset(r)) === t : this.tokenType === 9 && this.source.charCodeAt(this.tokenStart) === t;
    }
    skip(t) {
      let r = this.tokenIndex + t;
      r < this.tokenCount ? (this.tokenIndex = r, this.tokenStart = this.offsetAndType[r - 1] & ne, r = this.offsetAndType[r], this.tokenType = r >> we, this.tokenEnd = r & ne) : (this.tokenIndex = this.tokenCount, this.next());
    }
    next() {
      let t = this.tokenIndex + 1;
      t < this.tokenCount ? (this.tokenIndex = t, this.tokenStart = this.tokenEnd, t = this.offsetAndType[t], this.tokenType = t >> we, this.tokenEnd = t & ne) : (this.eof = true, this.tokenIndex = this.tokenCount, this.tokenType = 0, this.tokenStart = this.tokenEnd = this.source.length);
    }
    skipSC() {
      for (; this.tokenType === 13 || this.tokenType === 25; )
        this.next();
    }
    skipUntilBalanced(t, r) {
      let n2 = t, o, i;
      e:
        for (; n2 < this.tokenCount; n2++) {
          if (o = this.balance[n2], o < t)
            break e;
          switch (i = n2 > 0 ? this.offsetAndType[n2 - 1] & ne : this.firstCharOffset, r(this.source.charCodeAt(i))) {
            case 1:
              break e;
            case 2:
              n2++;
              break e;
            default:
              this.balance[o] === n2 && (n2 = o);
          }
        }
      this.skip(n2 - this.tokenIndex);
    }
    forEachToken(t) {
      for (let r = 0, n2 = this.firstCharOffset; r < this.tokenCount; r++) {
        let o = n2, i = this.offsetAndType[r], s = i & ne, u = i >> we;
        n2 = s, t(u, o, s, r);
      }
    }
    dump() {
      let t = new Array(this.tokenCount);
      return this.forEachToken((r, n2, o, i) => {
        t[i] = { idx: i, type: Fe[r], chunk: this.source.substring(n2, o), balance: this.balance[i] };
      }), t;
    }
  };
  function ve(e, t) {
    function r(p2) {
      return p2 < u ? e.charCodeAt(p2) : 0;
    }
    function n2() {
      if (a = Te(e, a), ze(r(a), r(a + 1), r(a + 2))) {
        l = 12, a = tt(e, a);
        return;
      }
      if (r(a) === 37) {
        l = 11, a++;
        return;
      }
      l = 10;
    }
    function o() {
      let p2 = a;
      if (a = tt(e, a), ge(e, p2, a, "url") && r(a) === 40) {
        if (a = et(e, a + 1), r(a) === 34 || r(a) === 39) {
          l = 2, a = p2 + 4;
          return;
        }
        s();
        return;
      }
      if (r(a) === 40) {
        l = 2, a++;
        return;
      }
      l = 1;
    }
    function i(p2) {
      for (p2 || (p2 = r(a++)), l = 5; a < e.length; a++) {
        let m = e.charCodeAt(a);
        switch (St(m)) {
          case p2:
            a++;
            return;
          case Je:
            if (Ze(m)) {
              a += Ct(e, a, m), l = 6;
              return;
            }
            break;
          case 92:
            if (a === e.length - 1)
              break;
            let f = r(a + 1);
            Ze(f) ? a += Ct(e, a + 1, f) : $(m, f) && (a = se(e, a) - 1);
            break;
        }
      }
    }
    function s() {
      for (l = 7, a = et(e, a); a < e.length; a++) {
        let p2 = e.charCodeAt(a);
        switch (St(p2)) {
          case 41:
            a++;
            return;
          case Je:
            if (a = et(e, a), r(a) === 41 || a >= e.length) {
              a < e.length && a++;
              return;
            }
            a = At(e, a), l = 8;
            return;
          case 34:
          case 39:
          case 40:
          case or:
            a = At(e, a), l = 8;
            return;
          case 92:
            if ($(p2, r(a + 1))) {
              a = se(e, a) - 1;
              break;
            }
            a = At(e, a), l = 8;
            return;
        }
      }
    }
    e = String(e || "");
    let u = e.length, c2 = wt(r(0)), a = c2, l;
    for (; a < u; ) {
      let p2 = e.charCodeAt(a);
      switch (St(p2)) {
        case Je:
          l = 13, a = et(e, a + 1);
          break;
        case 34:
          i();
          break;
        case 35:
          Ne(r(a + 1)) || $(r(a + 1), r(a + 2)) ? (l = 4, a = tt(e, a + 1)) : (l = 9, a++);
          break;
        case 39:
          i();
          break;
        case 40:
          l = 21, a++;
          break;
        case 41:
          l = 22, a++;
          break;
        case 43:
          kt(p2, r(a + 1), r(a + 2)) ? n2() : (l = 9, a++);
          break;
        case 44:
          l = 18, a++;
          break;
        case 45:
          kt(p2, r(a + 1), r(a + 2)) ? n2() : r(a + 1) === 45 && r(a + 2) === 62 ? (l = 15, a = a + 3) : ze(p2, r(a + 1), r(a + 2)) ? o() : (l = 9, a++);
          break;
        case 46:
          kt(p2, r(a + 1), r(a + 2)) ? n2() : (l = 9, a++);
          break;
        case 47:
          r(a + 1) === 42 ? (l = 25, a = e.indexOf("*/", a + 2), a = a === -1 ? e.length : a + 2) : (l = 9, a++);
          break;
        case 58:
          l = 16, a++;
          break;
        case 59:
          l = 17, a++;
          break;
        case 60:
          r(a + 1) === 33 && r(a + 2) === 45 && r(a + 3) === 45 ? (l = 14, a = a + 4) : (l = 9, a++);
          break;
        case 64:
          ze(r(a + 1), r(a + 2), r(a + 3)) ? (l = 3, a = tt(e, a + 1)) : (l = 9, a++);
          break;
        case 91:
          l = 19, a++;
          break;
        case 92:
          $(p2, r(a + 1)) ? o() : (l = 9, a++);
          break;
        case 93:
          l = 20, a++;
          break;
        case 123:
          l = 23, a++;
          break;
        case 125:
          l = 24, a++;
          break;
        case nr:
          n2();
          break;
        case vt:
          o();
          break;
        default:
          l = 9, a++;
      }
      t(l, c2, c2 = a);
    }
  }
  var _e = null;
  var D = class {
    static createItem(t) {
      return { prev: null, next: null, data: t };
    }
    constructor() {
      this.head = null, this.tail = null, this.cursor = null;
    }
    createItem(t) {
      return D.createItem(t);
    }
    allocateCursor(t, r) {
      let n2;
      return _e !== null ? (n2 = _e, _e = _e.cursor, n2.prev = t, n2.next = r, n2.cursor = this.cursor) : n2 = { prev: t, next: r, cursor: this.cursor }, this.cursor = n2, n2;
    }
    releaseCursor() {
      let { cursor: t } = this;
      this.cursor = t.cursor, t.prev = null, t.next = null, t.cursor = _e, _e = t;
    }
    updateCursors(t, r, n2, o) {
      let { cursor: i } = this;
      for (; i !== null; )
        i.prev === t && (i.prev = r), i.next === n2 && (i.next = o), i = i.cursor;
    }
    *[Symbol.iterator]() {
      for (let t = this.head; t !== null; t = t.next)
        yield t.data;
    }
    get size() {
      let t = 0;
      for (let r = this.head; r !== null; r = r.next)
        t++;
      return t;
    }
    get isEmpty() {
      return this.head === null;
    }
    get first() {
      return this.head && this.head.data;
    }
    get last() {
      return this.tail && this.tail.data;
    }
    fromArray(t) {
      let r = null;
      this.head = null;
      for (let n2 of t) {
        let o = D.createItem(n2);
        r !== null ? r.next = o : this.head = o, o.prev = r, r = o;
      }
      return this.tail = r, this;
    }
    toArray() {
      return [...this];
    }
    toJSON() {
      return [...this];
    }
    forEach(t, r = this) {
      let n2 = this.allocateCursor(null, this.head);
      for (; n2.next !== null; ) {
        let o = n2.next;
        n2.next = o.next, t.call(r, o.data, o, this);
      }
      this.releaseCursor();
    }
    forEachRight(t, r = this) {
      let n2 = this.allocateCursor(this.tail, null);
      for (; n2.prev !== null; ) {
        let o = n2.prev;
        n2.prev = o.prev, t.call(r, o.data, o, this);
      }
      this.releaseCursor();
    }
    reduce(t, r, n2 = this) {
      let o = this.allocateCursor(null, this.head), i = r, s;
      for (; o.next !== null; )
        s = o.next, o.next = s.next, i = t.call(n2, i, s.data, s, this);
      return this.releaseCursor(), i;
    }
    reduceRight(t, r, n2 = this) {
      let o = this.allocateCursor(this.tail, null), i = r, s;
      for (; o.prev !== null; )
        s = o.prev, o.prev = s.prev, i = t.call(n2, i, s.data, s, this);
      return this.releaseCursor(), i;
    }
    some(t, r = this) {
      for (let n2 = this.head; n2 !== null; n2 = n2.next)
        if (t.call(r, n2.data, n2, this))
          return true;
      return false;
    }
    map(t, r = this) {
      let n2 = new D();
      for (let o = this.head; o !== null; o = o.next)
        n2.appendData(t.call(r, o.data, o, this));
      return n2;
    }
    filter(t, r = this) {
      let n2 = new D();
      for (let o = this.head; o !== null; o = o.next)
        t.call(r, o.data, o, this) && n2.appendData(o.data);
      return n2;
    }
    nextUntil(t, r, n2 = this) {
      if (t === null)
        return;
      let o = this.allocateCursor(null, t);
      for (; o.next !== null; ) {
        let i = o.next;
        if (o.next = i.next, r.call(n2, i.data, i, this))
          break;
      }
      this.releaseCursor();
    }
    prevUntil(t, r, n2 = this) {
      if (t === null)
        return;
      let o = this.allocateCursor(t, null);
      for (; o.prev !== null; ) {
        let i = o.prev;
        if (o.prev = i.prev, r.call(n2, i.data, i, this))
          break;
      }
      this.releaseCursor();
    }
    clear() {
      this.head = null, this.tail = null;
    }
    copy() {
      let t = new D();
      for (let r of this)
        t.appendData(r);
      return t;
    }
    prepend(t) {
      return this.updateCursors(null, t, this.head, t), this.head !== null ? (this.head.prev = t, t.next = this.head) : this.tail = t, this.head = t, this;
    }
    prependData(t) {
      return this.prepend(D.createItem(t));
    }
    append(t) {
      return this.insert(t);
    }
    appendData(t) {
      return this.insert(D.createItem(t));
    }
    insert(t, r = null) {
      if (r !== null)
        if (this.updateCursors(r.prev, t, r, t), r.prev === null) {
          if (this.head !== r)
            throw new Error("before doesn't belong to list");
          this.head = t, r.prev = t, t.next = r, this.updateCursors(null, t);
        } else
          r.prev.next = t, t.prev = r.prev, r.prev = t, t.next = r;
      else
        this.updateCursors(this.tail, t, null, t), this.tail !== null ? (this.tail.next = t, t.prev = this.tail) : this.head = t, this.tail = t;
      return this;
    }
    insertData(t, r) {
      return this.insert(D.createItem(t), r);
    }
    remove(t) {
      if (this.updateCursors(t, t.prev, t, t.next), t.prev !== null)
        t.prev.next = t.next;
      else {
        if (this.head !== t)
          throw new Error("item doesn't belong to list");
        this.head = t.next;
      }
      if (t.next !== null)
        t.next.prev = t.prev;
      else {
        if (this.tail !== t)
          throw new Error("item doesn't belong to list");
        this.tail = t.prev;
      }
      return t.prev = null, t.next = null, t;
    }
    push(t) {
      this.insert(D.createItem(t));
    }
    pop() {
      return this.tail !== null ? this.remove(this.tail) : null;
    }
    unshift(t) {
      this.prepend(D.createItem(t));
    }
    shift() {
      return this.head !== null ? this.remove(this.head) : null;
    }
    prependList(t) {
      return this.insertList(t, this.head);
    }
    appendList(t) {
      return this.insertList(t);
    }
    insertList(t, r) {
      return t.head === null ? this : (r != null ? (this.updateCursors(r.prev, t.tail, r, t.head), r.prev !== null ? (r.prev.next = t.head, t.head.prev = r.prev) : this.head = t.head, r.prev = t.tail, t.tail.next = r) : (this.updateCursors(this.tail, t.tail, null, t.head), this.tail !== null ? (this.tail.next = t.head, t.head.prev = this.tail) : this.head = t.head, this.tail = t.tail), t.head = null, t.tail = null, this);
    }
    replace(t, r) {
      "head" in r ? this.insertList(r, t) : this.insert(r, t), this.remove(t);
    }
  };
  function Ee(e, t) {
    let r = Object.create(SyntaxError.prototype), n2 = new Error();
    return Object.assign(r, { name: e, message: t, get stack() {
      return (n2.stack || "").replace(/^(.+\n){1,3}/, `${e}: ${t}
`);
    } });
  }
  var ar = 100;
  var Ho = 60;
  var Yo = "    ";
  function Go({ source: e, line: t, column: r }, n2) {
    function o(l, p2) {
      return i.slice(l, p2).map((m, f) => String(l + f + 1).padStart(c2) + " |" + m).join(`
`);
    }
    let i = e.split(/\r\n?|\n|\f/), s = Math.max(1, t - n2) - 1, u = Math.min(t + n2, i.length + 1), c2 = Math.max(4, String(u).length) + 1, a = 0;
    r += (Yo.length - 1) * (i[t - 1].substr(0, r - 1).match(/\t/g) || []).length, r > ar && (a = r - Ho + 3, r = Ho - 2);
    for (let l = s; l <= u; l++)
      l >= 0 && l < i.length && (i[l] = i[l].replace(/\t/g, Yo), i[l] = (a > 0 && i[l].length > a ? "\u2026" : "") + i[l].substr(a, ar - 2) + (i[l].length > a + ar - 1 ? "\u2026" : ""));
    return [o(s, t), new Array(r + c2 + 2).join("-") + "^", o(t, u)].filter(Boolean).join(`
`);
  }
  function sr(e, t, r, n2, o) {
    return Object.assign(Ee("SyntaxError", e), { source: t, offset: r, line: n2, column: o, sourceFragment(s) {
      return Go({ source: t, line: n2, column: o }, isNaN(s) ? 0 : s);
    }, get formattedMessage() {
      return `Parse error: ${e}
` + Go({ source: t, line: n2, column: o }, 2);
    } });
  }
  function Vo(e) {
    let t = this.createList(), r = false, n2 = { recognizer: e };
    for (; !this.eof; ) {
      switch (this.tokenType) {
        case 25:
          this.next();
          continue;
        case 13:
          r = true, this.next();
          continue;
      }
      let o = e.getNode.call(this, n2);
      if (o === void 0)
        break;
      r && (e.onWhiteSpace && e.onWhiteSpace.call(this, o, t, n2), r = false), t.push(o);
    }
    return r && e.onWhiteSpace && e.onWhiteSpace.call(this, null, t, n2), t;
  }
  var Ko = () => {
  };
  var gs = 33;
  var bs = 35;
  var lr = 59;
  var Qo = 123;
  var Xo = 0;
  function xs(e) {
    return function() {
      return this[e]();
    };
  }
  function cr(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let r in e) {
      let n2 = e[r], o = n2.parse || n2;
      o && (t[r] = o);
    }
    return t;
  }
  function ys(e) {
    let t = { context: /* @__PURE__ */ Object.create(null), scope: Object.assign(/* @__PURE__ */ Object.create(null), e.scope), atrule: cr(e.atrule), pseudo: cr(e.pseudo), node: cr(e.node) };
    for (let r in e.parseContext)
      switch (typeof e.parseContext[r]) {
        case "function":
          t.context[r] = e.parseContext[r];
          break;
        case "string":
          t.context[r] = xs(e.parseContext[r]);
          break;
      }
    return { config: t, ...t, ...t.node };
  }
  function $o(e) {
    let t = "", r = "<unknown>", n2 = false, o = Ko, i = false, s = new Tt(), u = Object.assign(new rt(), ys(e || {}), { parseAtrulePrelude: true, parseRulePrelude: true, parseValue: true, parseCustomProperty: false, readSequence: Vo, consumeUntilBalanceEnd: () => 0, consumeUntilLeftCurlyBracket(a) {
      return a === Qo ? 1 : 0;
    }, consumeUntilLeftCurlyBracketOrSemicolon(a) {
      return a === Qo || a === lr ? 1 : 0;
    }, consumeUntilExclamationMarkOrSemicolon(a) {
      return a === gs || a === lr ? 1 : 0;
    }, consumeUntilSemicolonIncluded(a) {
      return a === lr ? 2 : 0;
    }, createList() {
      return new D();
    }, createSingleNodeList(a) {
      return new D().appendData(a);
    }, getFirstListNode(a) {
      return a && a.first;
    }, getLastListNode(a) {
      return a && a.last;
    }, parseWithFallback(a, l) {
      let p2 = this.tokenIndex;
      try {
        return a.call(this);
      } catch (m) {
        if (i)
          throw m;
        let f = l.call(this, p2);
        return i = true, o(m, f), i = false, f;
      }
    }, lookupNonWSType(a) {
      let l;
      do
        if (l = this.lookupType(a++), l !== 13)
          return l;
      while (l !== Xo);
      return Xo;
    }, charCodeAt(a) {
      return a >= 0 && a < t.length ? t.charCodeAt(a) : 0;
    }, substring(a, l) {
      return t.substring(a, l);
    }, substrToCursor(a) {
      return this.source.substring(a, this.tokenStart);
    }, cmpChar(a, l) {
      return de(t, a, l);
    }, cmpStr(a, l, p2) {
      return ge(t, a, l, p2);
    }, consume(a) {
      let l = this.tokenStart;
      return this.eat(a), this.substrToCursor(l);
    }, consumeFunctionName() {
      let a = t.substring(this.tokenStart, this.tokenEnd - 1);
      return this.eat(2), a;
    }, consumeNumber(a) {
      let l = t.substring(this.tokenStart, Te(t, this.tokenStart));
      return this.eat(a), l;
    }, eat(a) {
      if (this.tokenType !== a) {
        let l = Fe[a].slice(0, -6).replace(/-/g, " ").replace(/^./, (f) => f.toUpperCase()), p2 = `${/[[\](){}]/.test(l) ? `"${l}"` : l} is expected`, m = this.tokenStart;
        switch (a) {
          case 1:
            this.tokenType === 2 || this.tokenType === 7 ? (m = this.tokenEnd - 1, p2 = "Identifier is expected but function found") : p2 = "Identifier is expected";
            break;
          case 4:
            this.isDelim(bs) && (this.next(), m++, p2 = "Name is expected");
            break;
          case 11:
            this.tokenType === 10 && (m = this.tokenEnd, p2 = "Percent sign is expected");
            break;
        }
        this.error(p2, m);
      }
      this.next();
    }, eatIdent(a) {
      (this.tokenType !== 1 || this.lookupValue(0, a) === false) && this.error(`Identifier "${a}" is expected`), this.next();
    }, eatDelim(a) {
      this.isDelim(a) || this.error(`Delim "${String.fromCharCode(a)}" is expected`), this.next();
    }, getLocation(a, l) {
      return n2 ? s.getLocationRange(a, l, r) : null;
    }, getLocationFromList(a) {
      if (n2) {
        let l = this.getFirstListNode(a), p2 = this.getLastListNode(a);
        return s.getLocationRange(l !== null ? l.loc.start.offset - s.startOffset : this.tokenStart, p2 !== null ? p2.loc.end.offset - s.startOffset : this.tokenStart, r);
      }
      return null;
    }, error(a, l) {
      let p2 = typeof l < "u" && l < t.length ? s.getLocation(l) : this.eof ? s.getLocation(qo(t, t.length - 1)) : s.getLocation(this.tokenStart);
      throw new sr(a || "Unexpected input", t, p2.offset, p2.line, p2.column);
    } });
    return Object.assign(function(a, l) {
      t = a, l = l || {}, u.setSource(t, ve), s.setSource(t, l.offset, l.line, l.column), r = l.filename || "<unknown>", n2 = Boolean(l.positions), o = typeof l.onParseError == "function" ? l.onParseError : Ko, i = false, u.parseAtrulePrelude = "parseAtrulePrelude" in l ? Boolean(l.parseAtrulePrelude) : true, u.parseRulePrelude = "parseRulePrelude" in l ? Boolean(l.parseRulePrelude) : true, u.parseValue = "parseValue" in l ? Boolean(l.parseValue) : true, u.parseCustomProperty = "parseCustomProperty" in l ? Boolean(l.parseCustomProperty) : false;
      let { context: p2 = "default", onComment: m } = l;
      if (!(p2 in u.context))
        throw new Error("Unknown context `" + p2 + "`");
      typeof m == "function" && u.forEachToken((P, te, X) => {
        if (P === 25) {
          let S = u.getLocation(te, X), R = ge(t, X - 2, X, "*/") ? t.slice(te + 2, X - 2) : t.slice(te + 2, X);
          m(R, S);
        }
      });
      let f = u.context[p2].call(u, l);
      return u.eof || u.error(), f;
    }, { SyntaxError: sr, config: u.config });
  }
  var xi = ls(gi(), 1);
  var bi = /* @__PURE__ */ new Set(["Atrule", "Selector", "Declaration"]);
  function yi(e) {
    let t = new xi.SourceMapGenerator(), r = { line: 1, column: 0 }, n2 = { line: 0, column: 0 }, o = { line: 1, column: 0 }, i = { generated: o }, s = 1, u = 0, c2 = false, a = e.node;
    e.node = function(m) {
      if (m.loc && m.loc.start && bi.has(m.type)) {
        let f = m.loc.start.line, P = m.loc.start.column - 1;
        (n2.line !== f || n2.column !== P) && (n2.line = f, n2.column = P, r.line = s, r.column = u, c2 && (c2 = false, (r.line !== o.line || r.column !== o.column) && t.addMapping(i)), c2 = true, t.addMapping({ source: m.loc.source, original: n2, generated: r }));
      }
      a.call(this, m), c2 && bi.has(m.type) && (o.line = s, o.column = u);
    };
    let l = e.emit;
    e.emit = function(m, f, P) {
      for (let te = 0; te < m.length; te++)
        m.charCodeAt(te) === 10 ? (s++, u = 0) : u++;
      l(m, f, P);
    };
    let p2 = e.result;
    return e.result = function() {
      return c2 && t.addMapping(i), { css: p2(), map: t };
    }, e;
  }
  var It = {};
  b$1(It, { safe: () => br, spec: () => Us });
  var Bs = 43;
  var _s = 45;
  var gr = (e, t) => {
    if (e === 9 && (e = t), typeof e == "string") {
      let r = e.charCodeAt(0);
      return r > 127 ? 32768 : r << 8;
    }
    return e;
  };
  var ki = [[1, 1], [1, 2], [1, 7], [1, 8], [1, "-"], [1, 10], [1, 11], [1, 12], [1, 15], [1, 21], [3, 1], [3, 2], [3, 7], [3, 8], [3, "-"], [3, 10], [3, 11], [3, 12], [3, 15], [4, 1], [4, 2], [4, 7], [4, 8], [4, "-"], [4, 10], [4, 11], [4, 12], [4, 15], [12, 1], [12, 2], [12, 7], [12, 8], [12, "-"], [12, 10], [12, 11], [12, 12], [12, 15], ["#", 1], ["#", 2], ["#", 7], ["#", 8], ["#", "-"], ["#", 10], ["#", 11], ["#", 12], ["#", 15], ["-", 1], ["-", 2], ["-", 7], ["-", 8], ["-", "-"], ["-", 10], ["-", 11], ["-", 12], ["-", 15], [10, 1], [10, 2], [10, 7], [10, 8], [10, 10], [10, 11], [10, 12], [10, "%"], [10, 15], ["@", 1], ["@", 2], ["@", 7], ["@", 8], ["@", "-"], ["@", 15], [".", 10], [".", 11], [".", 12], ["+", 10], ["+", 11], ["+", 12], ["/", "*"]];
  var qs = ki.concat([[1, 4], [12, 4], [4, 4], [3, 21], [3, 5], [3, 16], [11, 11], [11, 12], [11, 2], [11, "-"], [22, 1], [22, 2], [22, 11], [22, 12], [22, 4], [22, "-"]]);
  function wi(e) {
    let t = new Set(e.map(([r, n2]) => gr(r) << 16 | gr(n2)));
    return function(r, n2, o) {
      let i = gr(n2, o), s = o.charCodeAt(0);
      return (s === _s && n2 !== 1 && n2 !== 2 && n2 !== 15 || s === Bs ? t.has(r << 16 | s << 8) : t.has(r << 16 | i)) && this.emit(" ", 13, true), i;
    };
  }
  var Us = wi(ki);
  var br = wi(qs);
  var js = 92;
  function Ws(e, t) {
    if (typeof t == "function") {
      let r = null;
      e.children.forEach((n2) => {
        r !== null && t.call(this, r), this.node(n2), r = n2;
      });
      return;
    }
    e.children.forEach(this.node, this);
  }
  function Hs(e) {
    ve(e, (t, r, n2) => {
      this.token(t, e.slice(r, n2));
    });
  }
  function vi(e) {
    let t = /* @__PURE__ */ new Map();
    for (let r in e.node) {
      let n2 = e.node[r];
      typeof (n2.generate || n2) == "function" && t.set(r, n2.generate || n2);
    }
    return function(r, n2) {
      let o = "", i = 0, s = { node(c2) {
        if (t.has(c2.type))
          t.get(c2.type).call(u, c2);
        else
          throw new Error("Unknown node type: " + c2.type);
      }, tokenBefore: br, token(c2, a) {
        i = this.tokenBefore(i, c2, a), this.emit(a, c2, false), c2 === 9 && a.charCodeAt(0) === js && this.emit(`
`, 13, true);
      }, emit(c2) {
        o += c2;
      }, result() {
        return o;
      } };
      n2 && (typeof n2.decorator == "function" && (s = n2.decorator(s)), n2.sourceMap && (s = yi(s)), n2.mode in It && (s.tokenBefore = It[n2.mode]));
      let u = { node: (c2) => s.node(c2), children: Ws, token: (c2, a) => s.token(c2, a), tokenize: Hs };
      return s.node(r), s.result();
    };
  }
  function Si(e) {
    return { fromPlainObject(t) {
      return e(t, { enter(r) {
        r.children && !(r.children instanceof D) && (r.children = new D().fromArray(r.children));
      } }), t;
    }, toPlainObject(t) {
      return e(t, { leave(r) {
        r.children && r.children instanceof D && (r.children = r.children.toArray());
      } }), t;
    } };
  }
  var { hasOwnProperty: xr } = Object.prototype;
  var it = function() {
  };
  function Ci(e) {
    return typeof e == "function" ? e : it;
  }
  function Ai(e, t) {
    return function(r, n2, o) {
      r.type === t && e.call(this, r, n2, o);
    };
  }
  function Ys(e, t) {
    let r = t.structure, n2 = [];
    for (let o in r) {
      if (xr.call(r, o) === false)
        continue;
      let i = r[o], s = { name: o, type: false, nullable: false };
      Array.isArray(i) || (i = [i]);
      for (let u of i)
        u === null ? s.nullable = true : typeof u == "string" ? s.type = "node" : Array.isArray(u) && (s.type = "list");
      s.type && n2.push(s);
    }
    return n2.length ? { context: t.walkContext, fields: n2 } : null;
  }
  function Gs(e) {
    let t = {};
    for (let r in e.node)
      if (xr.call(e.node, r)) {
        let n2 = e.node[r];
        if (!n2.structure)
          throw new Error("Missed `structure` field in `" + r + "` node type definition");
        t[r] = Ys(r, n2);
      }
    return t;
  }
  function Ti(e, t) {
    let r = e.fields.slice(), n2 = e.context, o = typeof n2 == "string";
    return t && r.reverse(), function(i, s, u, c2) {
      let a;
      o && (a = s[n2], s[n2] = i);
      for (let l of r) {
        let p2 = i[l.name];
        if (!l.nullable || p2) {
          if (l.type === "list") {
            if (t ? p2.reduceRight(c2, false) : p2.reduce(c2, false))
              return true;
          } else if (u(p2))
            return true;
        }
      }
      o && (s[n2] = a);
    };
  }
  function Ei({ StyleSheet: e, Atrule: t, Rule: r, Block: n2, DeclarationList: o }) {
    return { Atrule: { StyleSheet: e, Atrule: t, Rule: r, Block: n2 }, Rule: { StyleSheet: e, Atrule: t, Rule: r, Block: n2 }, Declaration: { StyleSheet: e, Atrule: t, Rule: r, Block: n2, DeclarationList: o } };
  }
  function Li(e) {
    let t = Gs(e), r = {}, n2 = {}, o = Symbol("break-walk"), i = Symbol("skip-node");
    for (let a in t)
      xr.call(t, a) && t[a] !== null && (r[a] = Ti(t[a], false), n2[a] = Ti(t[a], true));
    let s = Ei(r), u = Ei(n2), c2 = function(a, l) {
      function p2(S, R, ke) {
        let z = m.call(X, S, R, ke);
        return z === o ? true : z === i ? false : !!(P.hasOwnProperty(S.type) && P[S.type](S, X, p2, te) || f.call(X, S, R, ke) === o);
      }
      let m = it, f = it, P = r, te = (S, R, ke, z) => S || p2(R, ke, z), X = { break: o, skip: i, root: a, stylesheet: null, atrule: null, atrulePrelude: null, rule: null, selector: null, block: null, declaration: null, function: null };
      if (typeof l == "function")
        m = l;
      else if (l && (m = Ci(l.enter), f = Ci(l.leave), l.reverse && (P = n2), l.visit)) {
        if (s.hasOwnProperty(l.visit))
          P = l.reverse ? u[l.visit] : s[l.visit];
        else if (!t.hasOwnProperty(l.visit))
          throw new Error("Bad value `" + l.visit + "` for `visit` option (should be: " + Object.keys(t).sort().join(", ") + ")");
        m = Ai(m, l.visit), f = Ai(f, l.visit);
      }
      if (m === it && f === it)
        throw new Error("Neither `enter` nor `leave` walker handler is set or both aren't a function");
      p2(a);
    };
    return c2.break = o, c2.skip = i, c2.find = function(a, l) {
      let p2 = null;
      return c2(a, function(m, f, P) {
        if (l.call(this, m, f, P))
          return p2 = m, o;
      }), p2;
    }, c2.findLast = function(a, l) {
      let p2 = null;
      return c2(a, { reverse: true, enter(m, f, P) {
        if (l.call(this, m, f, P))
          return p2 = m, o;
      } }), p2;
    }, c2.findAll = function(a, l) {
      let p2 = [];
      return c2(a, function(m, f, P) {
        l.call(this, m, f, P) && p2.push(m);
      }), p2;
    }, c2;
  }
  function Vs(e) {
    return e;
  }
  function Ks(e) {
    let { min: t, max: r, comma: n2 } = e;
    return t === 0 && r === 0 ? n2 ? "#?" : "*" : t === 0 && r === 1 ? "?" : t === 1 && r === 0 ? n2 ? "#" : "+" : t === 1 && r === 1 ? "" : (n2 ? "#" : "") + (t === r ? "{" + t + "}" : "{" + t + "," + (r !== 0 ? r : "") + "}");
  }
  function Qs(e) {
    switch (e.type) {
      case "Range":
        return " [" + (e.min === null ? "-\u221E" : e.min) + "," + (e.max === null ? "\u221E" : e.max) + "]";
      default:
        throw new Error("Unknown node type `" + e.type + "`");
    }
  }
  function Xs(e, t, r, n2) {
    let o = e.combinator === " " || n2 ? e.combinator : " " + e.combinator + " ", i = e.terms.map((s) => yr(s, t, r, n2)).join(o);
    return e.explicit || r ? (n2 || i[0] === "," ? "[" : "[ ") + i + (n2 ? "]" : " ]") : i;
  }
  function yr(e, t, r, n2) {
    let o;
    switch (e.type) {
      case "Group":
        o = Xs(e, t, r, n2) + (e.disallowEmpty ? "!" : "");
        break;
      case "Multiplier":
        return yr(e.term, t, r, n2) + t(Ks(e), e);
      case "Type":
        o = "<" + e.name + (e.opts ? t(Qs(e.opts), e.opts) : "") + ">";
        break;
      case "Property":
        o = "<'" + e.name + "'>";
        break;
      case "Keyword":
        o = e.name;
        break;
      case "AtKeyword":
        o = "@" + e.name;
        break;
      case "Function":
        o = e.name + "(";
        break;
      case "String":
      case "Token":
        o = e.value;
        break;
      case "Comma":
        o = ",";
        break;
      default:
        throw new Error("Unknown node type `" + e.type + "`");
    }
    return t(o, e);
  }
  function Pe(e, t) {
    let r = Vs, n2 = false, o = false;
    return typeof t == "function" ? r = t : t && (n2 = Boolean(t.forceBraces), o = Boolean(t.compact), typeof t.decorate == "function" && (r = t.decorate)), yr(e, r, n2, o);
  }
  var Pi = { offset: 0, line: 1, column: 1 };
  function $s(e, t) {
    let r = e.tokens, n2 = e.longestMatch, o = n2 < r.length && r[n2].node || null, i = o !== t ? o : null, s = 0, u = 0, c2 = 0, a = "", l, p2;
    for (let m = 0; m < r.length; m++) {
      let f = r[m].value;
      m === n2 && (u = f.length, s = a.length), i !== null && r[m].node === i && (m <= n2 ? c2++ : c2 = 0), a += f;
    }
    return n2 === r.length || c2 > 1 ? (l = Dt(i || t, "end") || at2(Pi, a), p2 = at2(l)) : (l = Dt(i, "start") || at2(Dt(t, "start") || Pi, a.slice(0, s)), p2 = Dt(i, "end") || at2(l, a.substr(s, u))), { css: a, mismatchOffset: s, mismatchLength: u, start: l, end: p2 };
  }
  function Dt(e, t) {
    let r = e && e.loc && e.loc[t];
    return r ? "line" in r ? at2(r) : r : null;
  }
  function at2({ offset: e, line: t, column: r }, n2) {
    let o = { offset: e, line: t, column: r };
    if (n2) {
      let i = n2.split(/\n|\r\n?|\f/);
      o.offset += n2.length, o.line += i.length - 1, o.column = i.length === 1 ? o.column + n2.length : i.pop().length + 1;
    }
    return o;
  }
  var Ue = function(e, t) {
    let r = Ee("SyntaxReferenceError", e + (t ? " `" + t + "`" : ""));
    return r.reference = t, r;
  };
  var Ii = function(e, t, r, n2) {
    let o = Ee("SyntaxMatchError", e), { css: i, mismatchOffset: s, mismatchLength: u, start: c2, end: a } = $s(n2, r);
    return o.rawMessage = e, o.syntax = t ? Pe(t) : "<generic>", o.css = i, o.mismatchOffset = s, o.mismatchLength = u, o.message = e + `
  syntax: ` + o.syntax + `
   value: ` + (i || "<empty string>") + `
  --------` + new Array(o.mismatchOffset + 1).join("-") + "^", Object.assign(o, c2), o.loc = { source: r && r.loc && r.loc.source || "<unknown>", start: c2, end: a }, o;
  };
  var Ot = /* @__PURE__ */ new Map();
  var je = /* @__PURE__ */ new Map();
  var Nt = 45;
  var zt = Zs;
  var kr = Js;
  function Mt(e, t) {
    return t = t || 0, e.length - t >= 2 && e.charCodeAt(t) === Nt && e.charCodeAt(t + 1) === Nt;
  }
  function wr(e, t) {
    if (t = t || 0, e.length - t >= 3 && e.charCodeAt(t) === Nt && e.charCodeAt(t + 1) !== Nt) {
      let r = e.indexOf("-", t + 2);
      if (r !== -1)
        return e.substring(t, r + 1);
    }
    return "";
  }
  function Zs(e) {
    if (Ot.has(e))
      return Ot.get(e);
    let t = e.toLowerCase(), r = Ot.get(t);
    if (r === void 0) {
      let n2 = Mt(t, 0), o = n2 ? "" : wr(t, 0);
      r = Object.freeze({ basename: t.substr(o.length), name: t, prefix: o, vendor: o, custom: n2 });
    }
    return Ot.set(e, r), r;
  }
  function Js(e) {
    if (je.has(e))
      return je.get(e);
    let t = e, r = e[0];
    r === "/" ? r = e[1] === "/" ? "//" : "/" : r !== "_" && r !== "*" && r !== "$" && r !== "#" && r !== "+" && r !== "&" && (r = "");
    let n2 = Mt(t, r.length);
    if (!n2 && (t = t.toLowerCase(), je.has(t))) {
      let u = je.get(t);
      return je.set(e, u), u;
    }
    let o = n2 ? "" : wr(t, r.length), i = t.substr(0, r.length + o.length), s = Object.freeze({ basename: t.substr(i.length), name: t.substr(r.length), hack: r, vendor: o, prefix: i, custom: n2 });
    return je.set(e, s), s;
  }
  var Rt = ["initial", "inherit", "unset", "revert", "revert-layer"];
  var lt = 43;
  var he = 45;
  var vr = 110;
  var We = true;
  var tl = false;
  function Cr(e, t) {
    return e !== null && e.type === 9 && e.value.charCodeAt(0) === t;
  }
  function st(e, t, r) {
    for (; e !== null && (e.type === 13 || e.type === 25); )
      e = r(++t);
    return t;
  }
  function Se(e, t, r, n2) {
    if (!e)
      return 0;
    let o = e.value.charCodeAt(t);
    if (o === lt || o === he) {
      if (r)
        return 0;
      t++;
    }
    for (; t < e.value.length; t++)
      if (!B(e.value.charCodeAt(t)))
        return 0;
    return n2 + 1;
  }
  function Sr(e, t, r) {
    let n2 = false, o = st(e, t, r);
    if (e = r(o), e === null)
      return t;
    if (e.type !== 10)
      if (Cr(e, lt) || Cr(e, he)) {
        if (n2 = true, o = st(r(++o), o, r), e = r(o), e === null || e.type !== 10)
          return 0;
      } else
        return t;
    if (!n2) {
      let i = e.value.charCodeAt(0);
      if (i !== lt && i !== he)
        return 0;
    }
    return Se(e, n2 ? 0 : 1, n2, o);
  }
  function Ar(e, t) {
    let r = 0;
    if (!e)
      return 0;
    if (e.type === 10)
      return Se(e, 0, tl, r);
    if (e.type === 1 && e.value.charCodeAt(0) === he) {
      if (!de(e.value, 1, vr))
        return 0;
      switch (e.value.length) {
        case 2:
          return Sr(t(++r), r, t);
        case 3:
          return e.value.charCodeAt(2) !== he ? 0 : (r = st(t(++r), r, t), e = t(r), Se(e, 0, We, r));
        default:
          return e.value.charCodeAt(2) !== he ? 0 : Se(e, 3, We, r);
      }
    } else if (e.type === 1 || Cr(e, lt) && t(r + 1).type === 1) {
      if (e.type !== 1 && (e = t(++r)), e === null || !de(e.value, 0, vr))
        return 0;
      switch (e.value.length) {
        case 1:
          return Sr(t(++r), r, t);
        case 2:
          return e.value.charCodeAt(1) !== he ? 0 : (r = st(t(++r), r, t), e = t(r), Se(e, 0, We, r));
        default:
          return e.value.charCodeAt(1) !== he ? 0 : Se(e, 2, We, r);
      }
    } else if (e.type === 12) {
      let n2 = e.value.charCodeAt(0), o = n2 === lt || n2 === he ? 1 : 0, i = o;
      for (; i < e.value.length && B(e.value.charCodeAt(i)); i++)
        ;
      return i === o || !de(e.value, i, vr) ? 0 : i + 1 === e.value.length ? Sr(t(++r), r, t) : e.value.charCodeAt(i + 1) !== he ? 0 : i + 2 === e.value.length ? (r = st(t(++r), r, t), e = t(r), Se(e, 0, We, r)) : Se(e, i + 2, We, r);
    }
    return 0;
  }
  var rl = 43;
  var Di = 45;
  var Oi = 63;
  var nl = 117;
  function Tr(e, t) {
    return e !== null && e.type === 9 && e.value.charCodeAt(0) === t;
  }
  function ol(e, t) {
    return e.value.charCodeAt(0) === t;
  }
  function ct(e, t, r) {
    let n2 = 0;
    for (let o = t; o < e.value.length; o++) {
      let i = e.value.charCodeAt(o);
      if (i === Di && r && n2 !== 0)
        return ct(e, t + n2 + 1, false), 6;
      if (!ee(i) || ++n2 > 6)
        return 0;
    }
    return n2;
  }
  function Ft(e, t, r) {
    if (!e)
      return 0;
    for (; Tr(r(t), Oi); ) {
      if (++e > 6)
        return 0;
      t++;
    }
    return t;
  }
  function Er(e, t) {
    let r = 0;
    if (e === null || e.type !== 1 || !de(e.value, 0, nl) || (e = t(++r), e === null))
      return 0;
    if (Tr(e, rl))
      return e = t(++r), e === null ? 0 : e.type === 1 ? Ft(ct(e, 0, true), ++r, t) : Tr(e, Oi) ? Ft(1, ++r, t) : 0;
    if (e.type === 10) {
      let n2 = ct(e, 1, true);
      return n2 === 0 ? 0 : (e = t(++r), e === null ? r : e.type === 12 || e.type === 10 ? !ol(e, Di) || !ct(e, 1, false) ? 0 : r + 1 : Ft(n2, r, t));
    }
    return e.type === 12 ? Ft(ct(e, 1, true), ++r, t) : 0;
  }
  var il = ["calc(", "-moz-calc(", "-webkit-calc("];
  var Lr = /* @__PURE__ */ new Map([[2, 22], [21, 22], [19, 20], [23, 24]]);
  function le(e, t) {
    return t < e.length ? e.charCodeAt(t) : 0;
  }
  function Ni(e, t) {
    return ge(e, 0, e.length, t);
  }
  function zi(e, t) {
    for (let r = 0; r < t.length; r++)
      if (Ni(e, t[r]))
        return true;
    return false;
  }
  function Mi(e, t) {
    return t !== e.length - 2 ? false : le(e, t) === 92 && B(le(e, t + 1));
  }
  function Bt(e, t, r) {
    if (e && e.type === "Range") {
      let n2 = Number(r !== void 0 && r !== t.length ? t.substr(0, r) : t);
      if (isNaN(n2) || e.min !== null && n2 < e.min && typeof e.min != "string" || e.max !== null && n2 > e.max && typeof e.max != "string")
        return true;
    }
    return false;
  }
  function al(e, t) {
    let r = 0, n2 = [], o = 0;
    e:
      do {
        switch (e.type) {
          case 24:
          case 22:
          case 20:
            if (e.type !== r)
              break e;
            if (r = n2.pop(), n2.length === 0) {
              o++;
              break e;
            }
            break;
          case 2:
          case 21:
          case 19:
          case 23:
            n2.push(r), r = Lr.get(e.type);
            break;
        }
        o++;
      } while (e = t(o));
    return o;
  }
  function ie(e) {
    return function(t, r, n2) {
      return t === null ? 0 : t.type === 2 && zi(t.value, il) ? al(t, r) : e(t, r, n2);
    };
  }
  function N(e) {
    return function(t) {
      return t === null || t.type !== e ? 0 : 1;
    };
  }
  function sl(e) {
    if (e === null || e.type !== 1)
      return 0;
    let t = e.value.toLowerCase();
    return zi(t, Rt) || Ni(t, "default") ? 0 : 1;
  }
  function ll(e) {
    return e === null || e.type !== 1 || le(e.value, 0) !== 45 || le(e.value, 1) !== 45 ? 0 : 1;
  }
  function cl(e) {
    if (e === null || e.type !== 4)
      return 0;
    let t = e.value.length;
    if (t !== 4 && t !== 5 && t !== 7 && t !== 9)
      return 0;
    for (let r = 1; r < t; r++)
      if (!ee(le(e.value, r)))
        return 0;
    return 1;
  }
  function ul(e) {
    return e === null || e.type !== 4 || !ze(le(e.value, 1), le(e.value, 2), le(e.value, 3)) ? 0 : 1;
  }
  function pl(e, t) {
    if (!e)
      return 0;
    let r = 0, n2 = [], o = 0;
    e:
      do {
        switch (e.type) {
          case 6:
          case 8:
            break e;
          case 24:
          case 22:
          case 20:
            if (e.type !== r)
              break e;
            r = n2.pop();
            break;
          case 17:
            if (r === 0)
              break e;
            break;
          case 9:
            if (r === 0 && e.value === "!")
              break e;
            break;
          case 2:
          case 21:
          case 19:
          case 23:
            n2.push(r), r = Lr.get(e.type);
            break;
        }
        o++;
      } while (e = t(o));
    return o;
  }
  function hl(e, t) {
    if (!e)
      return 0;
    let r = 0, n2 = [], o = 0;
    e:
      do {
        switch (e.type) {
          case 6:
          case 8:
            break e;
          case 24:
          case 22:
          case 20:
            if (e.type !== r)
              break e;
            r = n2.pop();
            break;
          case 2:
          case 21:
          case 19:
          case 23:
            n2.push(r), r = Lr.get(e.type);
            break;
        }
        o++;
      } while (e = t(o));
    return o;
  }
  function ye(e) {
    return e && (e = new Set(e)), function(t, r, n2) {
      if (t === null || t.type !== 12)
        return 0;
      let o = Te(t.value, 0);
      if (e !== null) {
        let i = t.value.indexOf("\\", o), s = i === -1 || !Mi(t.value, i) ? t.value.substr(o) : t.value.substring(o, i);
        if (e.has(s.toLowerCase()) === false)
          return 0;
      }
      return Bt(n2, t.value, o) ? 0 : 1;
    };
  }
  function ml(e, t, r) {
    return e === null || e.type !== 11 || Bt(r, e.value, e.value.length - 1) ? 0 : 1;
  }
  function Ri(e) {
    return typeof e != "function" && (e = function() {
      return 0;
    }), function(t, r, n2) {
      return t !== null && t.type === 10 && Number(t.value) === 0 ? 1 : e(t, r, n2);
    };
  }
  function fl(e, t, r) {
    if (e === null)
      return 0;
    let n2 = Te(e.value, 0);
    return !(n2 === e.value.length) && !Mi(e.value, n2) || Bt(r, e.value, n2) ? 0 : 1;
  }
  function dl(e, t, r) {
    if (e === null || e.type !== 10)
      return 0;
    let n2 = le(e.value, 0) === 43 || le(e.value, 0) === 45 ? 1 : 0;
    for (; n2 < e.value.length; n2++)
      if (!B(le(e.value, n2)))
        return 0;
    return Bt(r, e.value, n2) ? 0 : 1;
  }
  var gl = { "ident-token": N(1), "function-token": N(2), "at-keyword-token": N(3), "hash-token": N(4), "string-token": N(5), "bad-string-token": N(6), "url-token": N(7), "bad-url-token": N(8), "delim-token": N(9), "number-token": N(10), "percentage-token": N(11), "dimension-token": N(12), "whitespace-token": N(13), "CDO-token": N(14), "CDC-token": N(15), "colon-token": N(16), "semicolon-token": N(17), "comma-token": N(18), "[-token": N(19), "]-token": N(20), "(-token": N(21), ")-token": N(22), "{-token": N(23), "}-token": N(24) };
  var bl = { string: N(5), ident: N(1), percentage: ie(ml), zero: Ri(), number: ie(fl), integer: ie(dl), "custom-ident": sl, "custom-property-name": ll, "hex-color": cl, "id-selector": ul, "an-plus-b": Ar, urange: Er, "declaration-value": pl, "any-value": hl };
  function xl(e) {
    let { angle: t, decibel: r, frequency: n2, flex: o, length: i, resolution: s, semitones: u, time: c2 } = e || {};
    return { dimension: ie(ye(null)), angle: ie(ye(t)), decibel: ie(ye(r)), frequency: ie(ye(n2)), flex: ie(ye(o)), length: ie(Ri(ye(i))), resolution: ie(ye(s)), semitones: ie(ye(u)), time: ie(ye(c2)) };
  }
  function Fi(e) {
    return { ...gl, ...bl, ...xl(e) };
  }
  var _t = {};
  b$1(_t, { angle: () => kl, decibel: () => Al, flex: () => Cl, frequency: () => vl, length: () => yl, resolution: () => Sl, semitones: () => Tl, time: () => wl });
  var yl = ["cm", "mm", "q", "in", "pt", "pc", "px", "em", "rem", "ex", "rex", "cap", "rcap", "ch", "rch", "ic", "ric", "lh", "rlh", "vw", "svw", "lvw", "dvw", "vh", "svh", "lvh", "dvh", "vi", "svi", "lvi", "dvi", "vb", "svb", "lvb", "dvb", "vmin", "svmin", "lvmin", "dvmin", "vmax", "svmax", "lvmax", "dvmax", "cqw", "cqh", "cqi", "cqb", "cqmin", "cqmax"];
  var kl = ["deg", "grad", "rad", "turn"];
  var wl = ["s", "ms"];
  var vl = ["hz", "khz"];
  var Sl = ["dpi", "dpcm", "dppx", "x"];
  var Cl = ["fr"];
  var Al = ["db"];
  var Tl = ["st"];
  var $i = {};
  b$1($i, { SyntaxError: () => qt, generate: () => Pe, parse: () => Ge, walk: () => Vt });
  function qt(e, t, r) {
    return Object.assign(Ee("SyntaxError", e), { input: t, offset: r, rawMessage: e, message: e + `
  ` + t + `
--` + new Array((r || t.length) + 1).join("-") + "^" });
  }
  var El = 9;
  var Ll = 10;
  var Pl = 12;
  var Il = 13;
  var Dl = 32;
  var Ut = class {
    constructor(t) {
      this.str = t, this.pos = 0;
    }
    charCodeAt(t) {
      return t < this.str.length ? this.str.charCodeAt(t) : 0;
    }
    charCode() {
      return this.charCodeAt(this.pos);
    }
    nextCharCode() {
      return this.charCodeAt(this.pos + 1);
    }
    nextNonWsCode(t) {
      return this.charCodeAt(this.findWsEnd(t));
    }
    findWsEnd(t) {
      for (; t < this.str.length; t++) {
        let r = this.str.charCodeAt(t);
        if (r !== Il && r !== Ll && r !== Pl && r !== Dl && r !== El)
          break;
      }
      return t;
    }
    substringToPos(t) {
      return this.str.substring(this.pos, this.pos = t);
    }
    eat(t) {
      this.charCode() !== t && this.error("Expect `" + String.fromCharCode(t) + "`"), this.pos++;
    }
    peek() {
      return this.pos < this.str.length ? this.str.charAt(this.pos++) : "";
    }
    error(t) {
      throw new qt(t, this.str, this.pos);
    }
  };
  var Ol = 9;
  var Nl = 10;
  var zl = 12;
  var Ml = 13;
  var Rl = 32;
  var Yi = 33;
  var Dr = 35;
  var Bi = 38;
  var jt = 39;
  var Gi = 40;
  var Fl = 41;
  var Vi = 42;
  var Or = 43;
  var Nr = 44;
  var _i = 45;
  var zr = 60;
  var Ki = 62;
  var Ir = 63;
  var Bl = 64;
  var Gt = 91;
  var Mr = 93;
  var Wt = 123;
  var qi = 124;
  var Ui = 125;
  var ji = 8734;
  var ut = new Uint8Array(128).map((e, t) => /[a-zA-Z0-9\-]/.test(String.fromCharCode(t)) ? 1 : 0);
  var Wi = { " ": 1, "&&": 2, "||": 3, "|": 4 };
  function Ht(e) {
    return e.substringToPos(e.findWsEnd(e.pos));
  }
  function He(e) {
    let t = e.pos;
    for (; t < e.str.length; t++) {
      let r = e.str.charCodeAt(t);
      if (r >= 128 || ut[r] === 0)
        break;
    }
    return e.pos === t && e.error("Expect a keyword"), e.substringToPos(t);
  }
  function Yt(e) {
    let t = e.pos;
    for (; t < e.str.length; t++) {
      let r = e.str.charCodeAt(t);
      if (r < 48 || r > 57)
        break;
    }
    return e.pos === t && e.error("Expect a number"), e.substringToPos(t);
  }
  function _l(e) {
    let t = e.str.indexOf("'", e.pos + 1);
    return t === -1 && (e.pos = e.str.length, e.error("Expect an apostrophe")), e.substringToPos(t + 1);
  }
  function Hi(e) {
    let t = null, r = null;
    return e.eat(Wt), t = Yt(e), e.charCode() === Nr ? (e.pos++, e.charCode() !== Ui && (r = Yt(e))) : r = t, e.eat(Ui), { min: Number(t), max: r ? Number(r) : 0 };
  }
  function ql(e) {
    let t = null, r = false;
    switch (e.charCode()) {
      case Vi:
        e.pos++, t = { min: 0, max: 0 };
        break;
      case Or:
        e.pos++, t = { min: 1, max: 0 };
        break;
      case Ir:
        e.pos++, t = { min: 0, max: 1 };
        break;
      case Dr:
        e.pos++, r = true, e.charCode() === Wt ? t = Hi(e) : e.charCode() === Ir ? (e.pos++, t = { min: 0, max: 0 }) : t = { min: 1, max: 0 };
        break;
      case Wt:
        t = Hi(e);
        break;
      default:
        return null;
    }
    return { type: "Multiplier", comma: r, min: t.min, max: t.max, term: null };
  }
  function Ye(e, t) {
    let r = ql(e);
    return r !== null ? (r.term = t, e.charCode() === Dr && e.charCodeAt(e.pos - 1) === Or ? Ye(e, r) : r) : t;
  }
  function Pr(e) {
    let t = e.peek();
    return t === "" ? null : { type: "Token", value: t };
  }
  function Ul(e) {
    let t;
    return e.eat(zr), e.eat(jt), t = He(e), e.eat(jt), e.eat(Ki), Ye(e, { type: "Property", name: t });
  }
  function jl(e) {
    let t = null, r = null, n2 = 1;
    return e.eat(Gt), e.charCode() === _i && (e.peek(), n2 = -1), n2 == -1 && e.charCode() === ji ? e.peek() : (t = n2 * Number(Yt(e)), ut[e.charCode()] !== 0 && (t += He(e))), Ht(e), e.eat(Nr), Ht(e), e.charCode() === ji ? e.peek() : (n2 = 1, e.charCode() === _i && (e.peek(), n2 = -1), r = n2 * Number(Yt(e)), ut[e.charCode()] !== 0 && (r += He(e))), e.eat(Mr), { type: "Range", min: t, max: r };
  }
  function Wl(e) {
    let t, r = null;
    return e.eat(zr), t = He(e), e.charCode() === Gi && e.nextCharCode() === Fl && (e.pos += 2, t += "()"), e.charCodeAt(e.findWsEnd(e.pos)) === Gt && (Ht(e), r = jl(e)), e.eat(Ki), Ye(e, { type: "Type", name: t, opts: r });
  }
  function Hl(e) {
    let t = He(e);
    return e.charCode() === Gi ? (e.pos++, { type: "Function", name: t }) : Ye(e, { type: "Keyword", name: t });
  }
  function Yl(e, t) {
    function r(o, i) {
      return { type: "Group", terms: o, combinator: i, disallowEmpty: false, explicit: false };
    }
    let n2;
    for (t = Object.keys(t).sort((o, i) => Wi[o] - Wi[i]); t.length > 0; ) {
      n2 = t.shift();
      let o = 0, i = 0;
      for (; o < e.length; o++) {
        let s = e[o];
        s.type === "Combinator" && (s.value === n2 ? (i === -1 && (i = o - 1), e.splice(o, 1), o--) : (i !== -1 && o - i > 1 && (e.splice(i, o - i, r(e.slice(i, o), n2)), o = i + 1), i = -1));
      }
      i !== -1 && t.length && e.splice(i, o - i, r(e.slice(i, o), n2));
    }
    return n2;
  }
  function Qi(e) {
    let t = [], r = {}, n2, o = null, i = e.pos;
    for (; n2 = Vl(e); )
      n2.type !== "Spaces" && (n2.type === "Combinator" ? ((o === null || o.type === "Combinator") && (e.pos = i, e.error("Unexpected combinator")), r[n2.value] = true) : o !== null && o.type !== "Combinator" && (r[" "] = true, t.push({ type: "Combinator", value: " " })), t.push(n2), o = n2, i = e.pos);
    return o !== null && o.type === "Combinator" && (e.pos -= i, e.error("Unexpected combinator")), { type: "Group", terms: t, combinator: Yl(t, r) || " ", disallowEmpty: false, explicit: false };
  }
  function Gl(e) {
    let t;
    return e.eat(Gt), t = Qi(e), e.eat(Mr), t.explicit = true, e.charCode() === Yi && (e.pos++, t.disallowEmpty = true), t;
  }
  function Vl(e) {
    let t = e.charCode();
    if (t < 128 && ut[t] === 1)
      return Hl(e);
    switch (t) {
      case Mr:
        break;
      case Gt:
        return Ye(e, Gl(e));
      case zr:
        return e.nextCharCode() === jt ? Ul(e) : Wl(e);
      case qi:
        return { type: "Combinator", value: e.substringToPos(e.pos + (e.nextCharCode() === qi ? 2 : 1)) };
      case Bi:
        return e.pos++, e.eat(Bi), { type: "Combinator", value: "&&" };
      case Nr:
        return e.pos++, { type: "Comma" };
      case jt:
        return Ye(e, { type: "String", value: _l(e) });
      case Rl:
      case Ol:
      case Nl:
      case Ml:
      case zl:
        return { type: "Spaces", value: Ht(e) };
      case Bl:
        return t = e.nextCharCode(), t < 128 && ut[t] === 1 ? (e.pos++, { type: "AtKeyword", name: He(e) }) : Pr(e);
      case Vi:
      case Or:
      case Ir:
      case Dr:
      case Yi:
        break;
      case Wt:
        if (t = e.nextCharCode(), t < 48 || t > 57)
          return Pr(e);
        break;
      default:
        return Pr(e);
    }
  }
  function Ge(e) {
    let t = new Ut(e), r = Qi(t);
    return t.pos !== e.length && t.error("Unexpected input"), r.terms.length === 1 && r.terms[0].type === "Group" ? r.terms[0] : r;
  }
  var pt = function() {
  };
  function Xi(e) {
    return typeof e == "function" ? e : pt;
  }
  function Vt(e, t, r) {
    function n2(s) {
      switch (o.call(r, s), s.type) {
        case "Group":
          s.terms.forEach(n2);
          break;
        case "Multiplier":
          n2(s.term);
          break;
        case "Type":
        case "Property":
        case "Keyword":
        case "AtKeyword":
        case "Function":
        case "String":
        case "Token":
        case "Comma":
          break;
        default:
          throw new Error("Unknown type: " + s.type);
      }
      i.call(r, s);
    }
    let o = pt, i = pt;
    if (typeof t == "function" ? o = t : t && (o = Xi(t.enter), i = Xi(t.leave)), o === pt && i === pt)
      throw new Error("Neither `enter` nor `leave` walker handler is set or both aren't a function");
    n2(e);
  }
  var Kl = { decorator(e) {
    let t = [], r = null;
    return { ...e, node(n2) {
      let o = r;
      r = n2, e.node.call(this, n2), r = o;
    }, emit(n2, o, i) {
      t.push({ type: o, value: n2, node: i ? null : r });
    }, result() {
      return t;
    } };
  } };
  function Ql(e) {
    let t = [];
    return ve(e, (r, n2, o) => t.push({ type: r, value: e.slice(n2, o), node: null })), t;
  }
  function Zi(e, t) {
    return typeof e == "string" ? Ql(e) : t.generate(e, Kl);
  }
  var C = { type: "Match" };
  var L = { type: "Mismatch" };
  var Kt = { type: "DisallowEmpty" };
  var Xl = 40;
  var $l = 41;
  function Z(e, t, r) {
    return t === C && r === L || e === C && t === C && r === C ? e : (e.type === "If" && e.else === L && t === C && (t = e.then, e = e.match), { type: "If", match: e, then: t, else: r });
  }
  function ea(e) {
    return e.length > 2 && e.charCodeAt(e.length - 2) === Xl && e.charCodeAt(e.length - 1) === $l;
  }
  function Ji(e) {
    return e.type === "Keyword" || e.type === "AtKeyword" || e.type === "Function" || e.type === "Type" && ea(e.name);
  }
  function Rr(e, t, r) {
    switch (e) {
      case " ": {
        let n2 = C;
        for (let o = t.length - 1; o >= 0; o--) {
          let i = t[o];
          n2 = Z(i, n2, L);
        }
        return n2;
      }
      case "|": {
        let n2 = L, o = null;
        for (let i = t.length - 1; i >= 0; i--) {
          let s = t[i];
          if (Ji(s) && (o === null && i > 0 && Ji(t[i - 1]) && (o = /* @__PURE__ */ Object.create(null), n2 = Z({ type: "Enum", map: o }, C, n2)), o !== null)) {
            let u = (ea(s.name) ? s.name.slice(0, -1) : s.name).toLowerCase();
            if (!(u in o)) {
              o[u] = s;
              continue;
            }
          }
          o = null, n2 = Z(s, C, n2);
        }
        return n2;
      }
      case "&&": {
        if (t.length > 5)
          return { type: "MatchOnce", terms: t, all: true };
        let n2 = L;
        for (let o = t.length - 1; o >= 0; o--) {
          let i = t[o], s;
          t.length > 1 ? s = Rr(e, t.filter(function(u) {
            return u !== i;
          }), false) : s = C, n2 = Z(i, s, n2);
        }
        return n2;
      }
      case "||": {
        if (t.length > 5)
          return { type: "MatchOnce", terms: t, all: false };
        let n2 = r ? C : L;
        for (let o = t.length - 1; o >= 0; o--) {
          let i = t[o], s;
          t.length > 1 ? s = Rr(e, t.filter(function(u) {
            return u !== i;
          }), true) : s = C, n2 = Z(i, s, n2);
        }
        return n2;
      }
    }
  }
  function Zl(e) {
    let t = C, r = Fr(e.term);
    if (e.max === 0)
      r = Z(r, Kt, L), t = Z(r, null, L), t.then = Z(C, C, t), e.comma && (t.then.else = Z({ type: "Comma", syntax: e }, t, L));
    else
      for (let n2 = e.min || 1; n2 <= e.max; n2++)
        e.comma && t !== C && (t = Z({ type: "Comma", syntax: e }, t, L)), t = Z(r, Z(C, C, t), L);
    if (e.min === 0)
      t = Z(C, C, t);
    else
      for (let n2 = 0; n2 < e.min - 1; n2++)
        e.comma && t !== C && (t = Z({ type: "Comma", syntax: e }, t, L)), t = Z(r, t, L);
    return t;
  }
  function Fr(e) {
    if (typeof e == "function")
      return { type: "Generic", fn: e };
    switch (e.type) {
      case "Group": {
        let t = Rr(e.combinator, e.terms.map(Fr), false);
        return e.disallowEmpty && (t = Z(t, Kt, L)), t;
      }
      case "Multiplier":
        return Zl(e);
      case "Type":
      case "Property":
        return { type: e.type, name: e.name, syntax: e };
      case "Keyword":
        return { type: e.type, name: e.name.toLowerCase(), syntax: e };
      case "AtKeyword":
        return { type: e.type, name: "@" + e.name.toLowerCase(), syntax: e };
      case "Function":
        return { type: e.type, name: e.name.toLowerCase() + "(", syntax: e };
      case "String":
        return e.value.length === 3 ? { type: "Token", value: e.value.charAt(1), syntax: e } : { type: e.type, value: e.value.substr(1, e.value.length - 2).replace(/\\'/g, "'"), syntax: e };
      case "Token":
        return { type: e.type, value: e.value, syntax: e };
      case "Comma":
        return { type: e.type, syntax: e };
      default:
        throw new Error("Unknown node type:", e.type);
    }
  }
  function Qt(e, t) {
    return typeof e == "string" && (e = Ge(e)), { type: "MatchGraph", match: Fr(e), syntax: t || null, source: e };
  }
  var { hasOwnProperty: ta } = Object.prototype;
  var Jl = 0;
  var ec = 1;
  var _r = 2;
  var aa = 3;
  var ra = "Match";
  var tc = "Mismatch";
  var rc = "Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)";
  var na = 15e3;
  function oc(e) {
    let t = null, r = null, n2 = e;
    for (; n2 !== null; )
      r = n2.prev, n2.prev = t, t = n2, n2 = r;
    return t;
  }
  function Br(e, t) {
    if (e.length !== t.length)
      return false;
    for (let r = 0; r < e.length; r++) {
      let n2 = t.charCodeAt(r), o = e.charCodeAt(r);
      if (o >= 65 && o <= 90 && (o = o | 32), o !== n2)
        return false;
    }
    return true;
  }
  function ic(e) {
    return e.type !== 9 ? false : e.value !== "?";
  }
  function oa(e) {
    return e === null ? true : e.type === 18 || e.type === 2 || e.type === 21 || e.type === 19 || e.type === 23 || ic(e);
  }
  function ia(e) {
    return e === null ? true : e.type === 22 || e.type === 20 || e.type === 24 || e.type === 9 && e.value === "/";
  }
  function ac(e, t, r) {
    function n2() {
      do
        R++, S = R < e.length ? e[R] : null;
      while (S !== null && (S.type === 13 || S.type === 25));
    }
    function o(ae) {
      let fe = R + ae;
      return fe < e.length ? e[fe] : null;
    }
    function i(ae, fe) {
      return { nextState: ae, matchStack: z, syntaxStack: p2, thenStack: m, tokenIndex: R, prev: fe };
    }
    function s(ae) {
      m = { nextState: ae, matchStack: z, syntaxStack: p2, prev: m };
    }
    function u(ae) {
      f = i(ae, f);
    }
    function c2() {
      z = { type: ec, syntax: t.syntax, token: S, prev: z }, n2(), P = null, R > ke && (ke = R);
    }
    function a() {
      p2 = { syntax: t.syntax, opts: t.syntax.opts || p2 !== null && p2.opts || null, prev: p2 }, z = { type: _r, syntax: t.syntax, token: z.token, prev: z };
    }
    function l() {
      z.type === _r ? z = z.prev : z = { type: aa, syntax: p2.syntax, token: z.token, prev: z }, p2 = p2.prev;
    }
    let p2 = null, m = null, f = null, P = null, te = 0, X = null, S = null, R = -1, ke = 0, z = { type: Jl, syntax: null, token: null, prev: null };
    for (n2(); X === null && ++te < na; )
      switch (t.type) {
        case "Match":
          if (m === null) {
            if (S !== null && (R !== e.length - 1 || S.value !== "\\0" && S.value !== "\\9")) {
              t = L;
              break;
            }
            X = ra;
            break;
          }
          if (t = m.nextState, t === Kt)
            if (m.matchStack === z) {
              t = L;
              break;
            } else
              t = C;
          for (; m.syntaxStack !== p2; )
            l();
          m = m.prev;
          break;
        case "Mismatch":
          if (P !== null && P !== false)
            (f === null || R > f.tokenIndex) && (f = P, P = false);
          else if (f === null) {
            X = tc;
            break;
          }
          t = f.nextState, m = f.thenStack, p2 = f.syntaxStack, z = f.matchStack, R = f.tokenIndex, S = R < e.length ? e[R] : null, f = f.prev;
          break;
        case "MatchGraph":
          t = t.match;
          break;
        case "If":
          t.else !== L && u(t.else), t.then !== C && s(t.then), t = t.match;
          break;
        case "MatchOnce":
          t = { type: "MatchOnceBuffer", syntax: t, index: 0, mask: 0 };
          break;
        case "MatchOnceBuffer": {
          let Q = t.syntax.terms;
          if (t.index === Q.length) {
            if (t.mask === 0 || t.syntax.all) {
              t = L;
              break;
            }
            t = C;
            break;
          }
          if (t.mask === (1 << Q.length) - 1) {
            t = C;
            break;
          }
          for (; t.index < Q.length; t.index++) {
            let J = 1 << t.index;
            if ((t.mask & J) === 0) {
              u(t), s({ type: "AddMatchOnce", syntax: t.syntax, mask: t.mask | J }), t = Q[t.index++];
              break;
            }
          }
          break;
        }
        case "AddMatchOnce":
          t = { type: "MatchOnceBuffer", syntax: t.syntax, index: 0, mask: t.mask };
          break;
        case "Enum":
          if (S !== null) {
            let Q = S.value.toLowerCase();
            if (Q.indexOf("\\") !== -1 && (Q = Q.replace(/\\[09].*$/, "")), ta.call(t.map, Q)) {
              t = t.map[Q];
              break;
            }
          }
          t = L;
          break;
        case "Generic": {
          let Q = p2 !== null ? p2.opts : null, J = R + Math.floor(t.fn(S, o, Q));
          if (!isNaN(J) && J > R) {
            for (; R < J; )
              c2();
            t = C;
          } else
            t = L;
          break;
        }
        case "Type":
        case "Property": {
          let Q = t.type === "Type" ? "types" : "properties", J = ta.call(r, Q) ? r[Q][t.name] : null;
          if (!J || !J.match)
            throw new Error("Bad syntax reference: " + (t.type === "Type" ? "<" + t.name + ">" : "<'" + t.name + "'>"));
          if (P !== false && S !== null && t.type === "Type" && (t.name === "custom-ident" && S.type === 1 || t.name === "length" && S.value === "0")) {
            P === null && (P = i(t, f)), t = L;
            break;
          }
          a(), t = J.match;
          break;
        }
        case "Keyword": {
          let Q = t.name;
          if (S !== null) {
            let J = S.value;
            if (J.indexOf("\\") !== -1 && (J = J.replace(/\\[09].*$/, "")), Br(J, Q)) {
              c2(), t = C;
              break;
            }
          }
          t = L;
          break;
        }
        case "AtKeyword":
        case "Function":
          if (S !== null && Br(S.value, t.name)) {
            c2(), t = C;
            break;
          }
          t = L;
          break;
        case "Token":
          if (S !== null && S.value === t.value) {
            c2(), t = C;
            break;
          }
          t = L;
          break;
        case "Comma":
          S !== null && S.type === 18 ? oa(z.token) ? t = L : (c2(), t = ia(S) ? L : C) : t = oa(z.token) || ia(S) ? C : L;
          break;
        case "String":
          let ae = "", fe = R;
          for (; fe < e.length && ae.length < t.value.length; fe++)
            ae += e[fe].value;
          if (Br(ae, t.value)) {
            for (; R < fe; )
              c2();
            t = C;
          } else
            t = L;
          break;
        default:
          throw new Error("Unknown node type: " + t.type);
      }
    switch (X) {
      case null:
        console.warn("[csstree-match] BREAK after " + na + " iterations"), X = rc, z = null;
        break;
      case ra:
        for (; p2 !== null; )
          l();
        break;
      default:
        z = null;
    }
    return { tokens: e, reason: X, iterations: te, match: z, longestMatch: ke };
  }
  function qr(e, t, r) {
    let n2 = ac(e, t, r || {});
    if (n2.match === null)
      return n2;
    let o = n2.match, i = n2.match = { syntax: t.syntax || null, match: [] }, s = [i];
    for (o = oc(o).prev; o !== null; ) {
      switch (o.type) {
        case _r:
          i.match.push(i = { syntax: o.syntax, match: [] }), s.push(i);
          break;
        case aa:
          s.pop(), i = s[s.length - 1];
          break;
        default:
          i.match.push({ syntax: o.syntax || null, token: o.token.value, node: o.token.node });
      }
      o = o.prev;
    }
    return n2;
  }
  var jr = {};
  b$1(jr, { getTrace: () => sa, isKeyword: () => cc, isProperty: () => lc, isType: () => sc });
  function sa(e) {
    function t(o) {
      return o === null ? false : o.type === "Type" || o.type === "Property" || o.type === "Keyword";
    }
    function r(o) {
      if (Array.isArray(o.match)) {
        for (let i = 0; i < o.match.length; i++)
          if (r(o.match[i]))
            return t(o.syntax) && n2.unshift(o.syntax), true;
      } else if (o.node === e)
        return n2 = t(o.syntax) ? [o.syntax] : [], true;
      return false;
    }
    let n2 = null;
    return this.matched !== null && r(this.matched), n2;
  }
  function sc(e, t) {
    return Ur(this, e, (r) => r.type === "Type" && r.name === t);
  }
  function lc(e, t) {
    return Ur(this, e, (r) => r.type === "Property" && r.name === t);
  }
  function cc(e) {
    return Ur(this, e, (t) => t.type === "Keyword");
  }
  function Ur(e, t, r) {
    let n2 = sa.call(e, t);
    return n2 === null ? false : n2.some(r);
  }
  function la(e) {
    return "node" in e ? e.node : la(e.match[0]);
  }
  function ca(e) {
    return "node" in e ? e.node : ca(e.match[e.match.length - 1]);
  }
  function Wr(e, t, r, n2, o) {
    function i(u) {
      if (u.syntax !== null && u.syntax.type === n2 && u.syntax.name === o) {
        let c2 = la(u), a = ca(u);
        e.syntax.walk(t, function(l, p2, m) {
          if (l === c2) {
            let f = new D();
            do {
              if (f.appendData(p2.data), p2.data === a)
                break;
              p2 = p2.next;
            } while (p2 !== null);
            s.push({ parent: m, nodes: f });
          }
        });
      }
      Array.isArray(u.match) && u.match.forEach(i);
    }
    let s = [];
    return r.matched !== null && i(r.matched), s;
  }
  var { hasOwnProperty: ht } = Object.prototype;
  function Hr(e) {
    return typeof e == "number" && isFinite(e) && Math.floor(e) === e && e >= 0;
  }
  function ua(e) {
    return Boolean(e) && Hr(e.offset) && Hr(e.line) && Hr(e.column);
  }
  function uc(e, t) {
    return function(n2, o) {
      if (!n2 || n2.constructor !== Object)
        return o(n2, "Type of node should be an Object");
      for (let i in n2) {
        let s = true;
        if (ht.call(n2, i) !== false) {
          if (i === "type")
            n2.type !== e && o(n2, "Wrong node type `" + n2.type + "`, expected `" + e + "`");
          else if (i === "loc") {
            if (n2.loc === null)
              continue;
            if (n2.loc && n2.loc.constructor === Object)
              if (typeof n2.loc.source != "string")
                i += ".source";
              else if (!ua(n2.loc.start))
                i += ".start";
              else if (!ua(n2.loc.end))
                i += ".end";
              else
                continue;
            s = false;
          } else if (t.hasOwnProperty(i)) {
            s = false;
            for (let u = 0; !s && u < t[i].length; u++) {
              let c2 = t[i][u];
              switch (c2) {
                case String:
                  s = typeof n2[i] == "string";
                  break;
                case Boolean:
                  s = typeof n2[i] == "boolean";
                  break;
                case null:
                  s = n2[i] === null;
                  break;
                default:
                  typeof c2 == "string" ? s = n2[i] && n2[i].type === c2 : Array.isArray(c2) && (s = n2[i] instanceof D);
              }
            }
          } else
            o(n2, "Unknown field `" + i + "` for " + e + " node type");
          s || o(n2, "Bad value for `" + e + "." + i + "`");
        }
      }
      for (let i in t)
        ht.call(t, i) && ht.call(n2, i) === false && o(n2, "Field `" + e + "." + i + "` is missed");
    };
  }
  function pc(e, t) {
    let r = t.structure, n2 = { type: String, loc: true }, o = { type: '"' + e + '"' };
    for (let i in r) {
      if (ht.call(r, i) === false)
        continue;
      let s = [], u = n2[i] = Array.isArray(r[i]) ? r[i].slice() : [r[i]];
      for (let c2 = 0; c2 < u.length; c2++) {
        let a = u[c2];
        if (a === String || a === Boolean)
          s.push(a.name);
        else if (a === null)
          s.push("null");
        else if (typeof a == "string")
          s.push("<" + a + ">");
        else if (Array.isArray(a))
          s.push("List");
        else
          throw new Error("Wrong value `" + a + "` in `" + e + "." + i + "` structure definition");
      }
      o[i] = s.join(" | ");
    }
    return { docs: o, check: uc(e, n2) };
  }
  function pa(e) {
    let t = {};
    if (e.node) {
      for (let r in e.node)
        if (ht.call(e.node, r)) {
          let n2 = e.node[r];
          if (n2.structure)
            t[r] = pc(r, n2);
          else
            throw new Error("Missed `structure` field in `" + r + "` node type definition");
        }
    }
    return t;
  }
  var hc = Qt(Rt.join(" | "));
  function Yr(e, t, r) {
    let n2 = {};
    for (let o in e)
      e[o].syntax && (n2[o] = r ? e[o].syntax : Pe(e[o].syntax, { compact: t }));
    return n2;
  }
  function mc(e, t, r) {
    let n2 = {};
    for (let [o, i] of Object.entries(e))
      n2[o] = { prelude: i.prelude && (r ? i.prelude.syntax : Pe(i.prelude.syntax, { compact: t })), descriptors: i.descriptors && Yr(i.descriptors, t, r) };
    return n2;
  }
  function fc(e) {
    for (let t = 0; t < e.length; t++)
      if (e[t].value.toLowerCase() === "var(")
        return true;
    return false;
  }
  function ce(e, t, r) {
    return { matched: e, iterations: r, error: t, ...jr };
  }
  function Ve(e, t, r, n2) {
    let o = Zi(r, e.syntax), i;
    return fc(o) ? ce(null, new Error("Matching for a tree with var() is not supported")) : (n2 && (i = qr(o, e.cssWideKeywordsSyntax, e)), (!n2 || !i.match) && (i = qr(o, t.match, e), !i.match) ? ce(null, new Ii(i.reason, t.syntax, r, i), i.iterations) : ce(i.match, null, i.iterations));
  }
  var Ke = class {
    constructor(t, r, n2) {
      if (this.cssWideKeywordsSyntax = hc, this.syntax = r, this.generic = false, this.units = { ..._t }, this.atrules = /* @__PURE__ */ Object.create(null), this.properties = /* @__PURE__ */ Object.create(null), this.types = /* @__PURE__ */ Object.create(null), this.structure = n2 || pa(t), t) {
        if (t.units)
          for (let o of Object.keys(_t))
            Array.isArray(t.units[o]) && (this.units[o] = t.units[o]);
        if (t.types)
          for (let o in t.types)
            this.addType_(o, t.types[o]);
        if (t.generic) {
          this.generic = true;
          for (let [o, i] of Object.entries(Fi(this.units)))
            this.addType_(o, i);
        }
        if (t.atrules)
          for (let o in t.atrules)
            this.addAtrule_(o, t.atrules[o]);
        if (t.properties)
          for (let o in t.properties)
            this.addProperty_(o, t.properties[o]);
      }
    }
    checkStructure(t) {
      function r(i, s) {
        o.push({ node: i, message: s });
      }
      let n2 = this.structure, o = [];
      return this.syntax.walk(t, function(i) {
        n2.hasOwnProperty(i.type) ? n2[i.type].check(i, r) : r(i, "Unknown node type `" + i.type + "`");
      }), o.length ? o : false;
    }
    createDescriptor(t, r, n2, o = null) {
      let i = { type: r, name: n2 }, s = { type: r, name: n2, parent: o, serializable: typeof t == "string" || t && typeof t.type == "string", syntax: null, match: null };
      return typeof t == "function" ? s.match = Qt(t, i) : (typeof t == "string" ? Object.defineProperty(s, "syntax", { get() {
        return Object.defineProperty(s, "syntax", { value: Ge(t) }), s.syntax;
      } }) : s.syntax = t, Object.defineProperty(s, "match", { get() {
        return Object.defineProperty(s, "match", { value: Qt(s.syntax, i) }), s.match;
      } })), s;
    }
    addAtrule_(t, r) {
      !r || (this.atrules[t] = { type: "Atrule", name: t, prelude: r.prelude ? this.createDescriptor(r.prelude, "AtrulePrelude", t) : null, descriptors: r.descriptors ? Object.keys(r.descriptors).reduce((n2, o) => (n2[o] = this.createDescriptor(r.descriptors[o], "AtruleDescriptor", o, t), n2), /* @__PURE__ */ Object.create(null)) : null });
    }
    addProperty_(t, r) {
      !r || (this.properties[t] = this.createDescriptor(r, "Property", t));
    }
    addType_(t, r) {
      !r || (this.types[t] = this.createDescriptor(r, "Type", t));
    }
    checkAtruleName(t) {
      if (!this.getAtrule(t))
        return new Ue("Unknown at-rule", "@" + t);
    }
    checkAtrulePrelude(t, r) {
      let n2 = this.checkAtruleName(t);
      if (n2)
        return n2;
      let o = this.getAtrule(t);
      if (!o.prelude && r)
        return new SyntaxError("At-rule `@" + t + "` should not contain a prelude");
      if (o.prelude && !r && !Ve(this, o.prelude, "", false).matched)
        return new SyntaxError("At-rule `@" + t + "` should contain a prelude");
    }
    checkAtruleDescriptorName(t, r) {
      let n2 = this.checkAtruleName(t);
      if (n2)
        return n2;
      let o = this.getAtrule(t), i = zt(r);
      if (!o.descriptors)
        return new SyntaxError("At-rule `@" + t + "` has no known descriptors");
      if (!o.descriptors[i.name] && !o.descriptors[i.basename])
        return new Ue("Unknown at-rule descriptor", r);
    }
    checkPropertyName(t) {
      if (!this.getProperty(t))
        return new Ue("Unknown property", t);
    }
    matchAtrulePrelude(t, r) {
      let n2 = this.checkAtrulePrelude(t, r);
      if (n2)
        return ce(null, n2);
      let o = this.getAtrule(t);
      return o.prelude ? Ve(this, o.prelude, r || "", false) : ce(null, null);
    }
    matchAtruleDescriptor(t, r, n2) {
      let o = this.checkAtruleDescriptorName(t, r);
      if (o)
        return ce(null, o);
      let i = this.getAtrule(t), s = zt(r);
      return Ve(this, i.descriptors[s.name] || i.descriptors[s.basename], n2, false);
    }
    matchDeclaration(t) {
      return t.type !== "Declaration" ? ce(null, new Error("Not a Declaration node")) : this.matchProperty(t.property, t.value);
    }
    matchProperty(t, r) {
      if (kr(t).custom)
        return ce(null, new Error("Lexer matching doesn't applicable for custom properties"));
      let n2 = this.checkPropertyName(t);
      return n2 ? ce(null, n2) : Ve(this, this.getProperty(t), r, true);
    }
    matchType(t, r) {
      let n2 = this.getType(t);
      return n2 ? Ve(this, n2, r, false) : ce(null, new Ue("Unknown type", t));
    }
    match(t, r) {
      return typeof t != "string" && (!t || !t.type) ? ce(null, new Ue("Bad syntax")) : ((typeof t == "string" || !t.match) && (t = this.createDescriptor(t, "Type", "anonymous")), Ve(this, t, r, false));
    }
    findValueFragments(t, r, n2, o) {
      return Wr(this, r, this.matchProperty(t, r), n2, o);
    }
    findDeclarationValueFragments(t, r, n2) {
      return Wr(this, t.value, this.matchDeclaration(t), r, n2);
    }
    findAllFragments(t, r, n2) {
      let o = [];
      return this.syntax.walk(t, { visit: "Declaration", enter: (i) => {
        o.push.apply(o, this.findDeclarationValueFragments(i, r, n2));
      } }), o;
    }
    getAtrule(t, r = true) {
      let n2 = zt(t);
      return (n2.vendor && r ? this.atrules[n2.name] || this.atrules[n2.basename] : this.atrules[n2.name]) || null;
    }
    getAtrulePrelude(t, r = true) {
      let n2 = this.getAtrule(t, r);
      return n2 && n2.prelude || null;
    }
    getAtruleDescriptor(t, r) {
      return this.atrules.hasOwnProperty(t) && this.atrules.declarators && this.atrules[t].declarators[r] || null;
    }
    getProperty(t, r = true) {
      let n2 = kr(t);
      return (n2.vendor && r ? this.properties[n2.name] || this.properties[n2.basename] : this.properties[n2.name]) || null;
    }
    getType(t) {
      return hasOwnProperty.call(this.types, t) ? this.types[t] : null;
    }
    validate() {
      function t(o, i, s, u) {
        if (s.has(i))
          return s.get(i);
        s.set(i, false), u.syntax !== null && Vt(u.syntax, function(c2) {
          if (c2.type !== "Type" && c2.type !== "Property")
            return;
          let a = c2.type === "Type" ? o.types : o.properties, l = c2.type === "Type" ? r : n2;
          (!hasOwnProperty.call(a, c2.name) || t(o, c2.name, l, a[c2.name])) && s.set(i, true);
        }, this);
      }
      let r = /* @__PURE__ */ new Map(), n2 = /* @__PURE__ */ new Map();
      for (let o in this.types)
        t(this, o, r, this.types[o]);
      for (let o in this.properties)
        t(this, o, n2, this.properties[o]);
      return r = [...r.keys()].filter((o) => r.get(o)), n2 = [...n2.keys()].filter((o) => n2.get(o)), r.length || n2.length ? { types: r, properties: n2 } : null;
    }
    dump(t, r) {
      return { generic: this.generic, units: this.units, types: Yr(this.types, !r, t), properties: Yr(this.properties, !r, t), atrules: mc(this.atrules, !r, t) };
    }
    toString() {
      return JSON.stringify(this.dump());
    }
  };
  function Gr(e, t) {
    return typeof t == "string" && /^\s*\|/.test(t) ? typeof e == "string" ? e + t : t.replace(/^\s*\|\s*/, "") : t || null;
  }
  function ha(e, t) {
    let r = /* @__PURE__ */ Object.create(null);
    for (let [n2, o] of Object.entries(e))
      if (o) {
        r[n2] = {};
        for (let i of Object.keys(o))
          t.includes(i) && (r[n2][i] = o[i]);
      }
    return r;
  }
  function mt(e, t) {
    let r = { ...e };
    for (let [n2, o] of Object.entries(t))
      switch (n2) {
        case "generic":
          r[n2] = Boolean(o);
          break;
        case "units":
          r[n2] = { ...e[n2] };
          for (let [i, s] of Object.entries(o))
            r[n2][i] = Array.isArray(s) ? s : [];
          break;
        case "atrules":
          r[n2] = { ...e[n2] };
          for (let [i, s] of Object.entries(o)) {
            let u = r[n2][i] || {}, c2 = r[n2][i] = { prelude: u.prelude || null, descriptors: { ...u.descriptors } };
            if (!!s) {
              c2.prelude = s.prelude ? Gr(c2.prelude, s.prelude) : c2.prelude || null;
              for (let [a, l] of Object.entries(s.descriptors || {}))
                c2.descriptors[a] = l ? Gr(c2.descriptors[a], l) : null;
              Object.keys(c2.descriptors).length || (c2.descriptors = null);
            }
          }
          break;
        case "types":
        case "properties":
          r[n2] = { ...e[n2] };
          for (let [i, s] of Object.entries(o))
            r[n2][i] = Gr(r[n2][i], s);
          break;
        case "scope":
          r[n2] = { ...e[n2] };
          for (let [i, s] of Object.entries(o))
            r[n2][i] = { ...r[n2][i], ...s };
          break;
        case "parseContext":
          r[n2] = { ...e[n2], ...o };
          break;
        case "atrule":
        case "pseudo":
          r[n2] = { ...e[n2], ...ha(o, ["parse"]) };
          break;
        case "node":
          r[n2] = { ...e[n2], ...ha(o, ["name", "structure", "parse", "generate", "walkContext"]) };
          break;
      }
    return r;
  }
  function ma(e) {
    let t = $o(e), r = Li(e), n2 = vi(e), { fromPlainObject: o, toPlainObject: i } = Si(r), s = { lexer: null, createLexer: (u) => new Ke(u, s, s.lexer.structure), tokenize: ve, parse: t, generate: n2, walk: r, find: r.find, findLast: r.findLast, findAll: r.findAll, fromPlainObject: o, toPlainObject: i, fork(u) {
      let c2 = mt({}, e);
      return ma(typeof u == "function" ? u(c2, Object.assign) : mt(c2, u));
    } };
    return s.lexer = new Ke({ generic: true, units: e.units, types: e.types, atrules: e.atrules, properties: e.properties, node: e.node }, s), s;
  }
  var Vr = (e) => ma(mt({}, e));
  var fa = { generic: true, units: { angle: ["deg", "grad", "rad", "turn"], decibel: ["db"], flex: ["fr"], frequency: ["hz", "khz"], length: ["cm", "mm", "q", "in", "pt", "pc", "px", "em", "rem", "ex", "rex", "cap", "rcap", "ch", "rch", "ic", "ric", "lh", "rlh", "vw", "svw", "lvw", "dvw", "vh", "svh", "lvh", "dvh", "vi", "svi", "lvi", "dvi", "vb", "svb", "lvb", "dvb", "vmin", "svmin", "lvmin", "dvmin", "vmax", "svmax", "lvmax", "dvmax", "cqw", "cqh", "cqi", "cqb", "cqmin", "cqmax"], resolution: ["dpi", "dpcm", "dppx", "x"], semitones: ["st"], time: ["s", "ms"] }, types: { "abs()": "abs( <calc-sum> )", "absolute-size": "xx-small|x-small|small|medium|large|x-large|xx-large|xxx-large", "acos()": "acos( <calc-sum> )", "alpha-value": "<number>|<percentage>", "angle-percentage": "<angle>|<percentage>", "angular-color-hint": "<angle-percentage>", "angular-color-stop": "<color>&&<color-stop-angle>?", "angular-color-stop-list": "[<angular-color-stop> [, <angular-color-hint>]?]# , <angular-color-stop>", "animateable-feature": "scroll-position|contents|<custom-ident>", "asin()": "asin( <calc-sum> )", "atan()": "atan( <calc-sum> )", "atan2()": "atan2( <calc-sum> , <calc-sum> )", attachment: "scroll|fixed|local", "attr()": "attr( <attr-name> <type-or-unit>? [, <attr-fallback>]? )", "attr-matcher": "['~'|'|'|'^'|'$'|'*']? '='", "attr-modifier": "i|s", "attribute-selector": "'[' <wq-name> ']'|'[' <wq-name> <attr-matcher> [<string-token>|<ident-token>] <attr-modifier>? ']'", "auto-repeat": "repeat( [auto-fill|auto-fit] , [<line-names>? <fixed-size>]+ <line-names>? )", "auto-track-list": "[<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>? <auto-repeat> [<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>?", axis: "block|inline|vertical|horizontal", "baseline-position": "[first|last]? baseline", "basic-shape": "<inset()>|<circle()>|<ellipse()>|<polygon()>|<path()>", "bg-image": "none|<image>", "bg-layer": "<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>", "bg-position": "[[left|center|right|top|bottom|<length-percentage>]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]|[center|[left|right] <length-percentage>?]&&[center|[top|bottom] <length-percentage>?]]", "bg-size": "[<length-percentage>|auto]{1,2}|cover|contain", "blur()": "blur( <length> )", "blend-mode": "normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|hard-light|soft-light|difference|exclusion|hue|saturation|color|luminosity", box: "border-box|padding-box|content-box", "brightness()": "brightness( <number-percentage> )", "calc()": "calc( <calc-sum> )", "calc-sum": "<calc-product> [['+'|'-'] <calc-product>]*", "calc-product": "<calc-value> ['*' <calc-value>|'/' <number>]*", "calc-value": "<number>|<dimension>|<percentage>|<calc-constant>|( <calc-sum> )", "calc-constant": "e|pi|infinity|-infinity|NaN", "cf-final-image": "<image>|<color>", "cf-mixing-image": "<percentage>?&&<image>", "circle()": "circle( [<shape-radius>]? [at <position>]? )", "clamp()": "clamp( <calc-sum>#{3} )", "class-selector": "'.' <ident-token>", "clip-source": "<url>", color: "<rgb()>|<rgba()>|<hsl()>|<hsla()>|<hwb()>|<lab()>|<lch()>|<hex-color>|<named-color>|currentcolor|<deprecated-system-color>", "color-stop": "<color-stop-length>|<color-stop-angle>", "color-stop-angle": "<angle-percentage>{1,2}", "color-stop-length": "<length-percentage>{1,2}", "color-stop-list": "[<linear-color-stop> [, <linear-color-hint>]?]# , <linear-color-stop>", combinator: "'>'|'+'|'~'|['||']", "common-lig-values": "[common-ligatures|no-common-ligatures]", "compat-auto": "searchfield|textarea|push-button|slider-horizontal|checkbox|radio|square-button|menulist|listbox|meter|progress-bar|button", "composite-style": "clear|copy|source-over|source-in|source-out|source-atop|destination-over|destination-in|destination-out|destination-atop|xor", "compositing-operator": "add|subtract|intersect|exclude", "compound-selector": "[<type-selector>? <subclass-selector>* [<pseudo-element-selector> <pseudo-class-selector>*]*]!", "compound-selector-list": "<compound-selector>#", "complex-selector": "<compound-selector> [<combinator>? <compound-selector>]*", "complex-selector-list": "<complex-selector>#", "conic-gradient()": "conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )", "contextual-alt-values": "[contextual|no-contextual]", "content-distribution": "space-between|space-around|space-evenly|stretch", "content-list": "[<string>|contents|<image>|<counter>|<quote>|<target>|<leader()>|<attr()>]+", "content-position": "center|start|end|flex-start|flex-end", "content-replacement": "<image>", "contrast()": "contrast( [<number-percentage>] )", "cos()": "cos( <calc-sum> )", counter: "<counter()>|<counters()>", "counter()": "counter( <counter-name> , <counter-style>? )", "counter-name": "<custom-ident>", "counter-style": "<counter-style-name>|symbols( )", "counter-style-name": "<custom-ident>", "counters()": "counters( <counter-name> , <string> , <counter-style>? )", "cross-fade()": "cross-fade( <cf-mixing-image> , <cf-final-image>? )", "cubic-bezier-timing-function": "ease|ease-in|ease-out|ease-in-out|cubic-bezier( <number [0,1]> , <number> , <number [0,1]> , <number> )", "deprecated-system-color": "ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText", "discretionary-lig-values": "[discretionary-ligatures|no-discretionary-ligatures]", "display-box": "contents|none", "display-inside": "flow|flow-root|table|flex|grid|ruby", "display-internal": "table-row-group|table-header-group|table-footer-group|table-row|table-cell|table-column-group|table-column|table-caption|ruby-base|ruby-text|ruby-base-container|ruby-text-container", "display-legacy": "inline-block|inline-list-item|inline-table|inline-flex|inline-grid", "display-listitem": "<display-outside>?&&[flow|flow-root]?&&list-item", "display-outside": "block|inline|run-in", "drop-shadow()": "drop-shadow( <length>{2,3} <color>? )", "east-asian-variant-values": "[jis78|jis83|jis90|jis04|simplified|traditional]", "east-asian-width-values": "[full-width|proportional-width]", "element()": "element( <custom-ident> , [first|start|last|first-except]? )|element( <id-selector> )", "ellipse()": "ellipse( [<shape-radius>{2}]? [at <position>]? )", "ending-shape": "circle|ellipse", "env()": "env( <custom-ident> , <declaration-value>? )", "exp()": "exp( <calc-sum> )", "explicit-track-list": "[<line-names>? <track-size>]+ <line-names>?", "family-name": "<string>|<custom-ident>+", "feature-tag-value": "<string> [<integer>|on|off]?", "feature-type": "@stylistic|@historical-forms|@styleset|@character-variant|@swash|@ornaments|@annotation", "feature-value-block": "<feature-type> '{' <feature-value-declaration-list> '}'", "feature-value-block-list": "<feature-value-block>+", "feature-value-declaration": "<custom-ident> : <integer>+ ;", "feature-value-declaration-list": "<feature-value-declaration>", "feature-value-name": "<custom-ident>", "fill-rule": "nonzero|evenodd", "filter-function": "<blur()>|<brightness()>|<contrast()>|<drop-shadow()>|<grayscale()>|<hue-rotate()>|<invert()>|<opacity()>|<saturate()>|<sepia()>", "filter-function-list": "[<filter-function>|<url>]+", "final-bg-layer": "<'background-color'>||<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>", "fixed-breadth": "<length-percentage>", "fixed-repeat": "repeat( [<integer [1,\u221E]>] , [<line-names>? <fixed-size>]+ <line-names>? )", "fixed-size": "<fixed-breadth>|minmax( <fixed-breadth> , <track-breadth> )|minmax( <inflexible-breadth> , <fixed-breadth> )", "font-stretch-absolute": "normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded|<percentage>", "font-variant-css21": "[normal|small-caps]", "font-weight-absolute": "normal|bold|<number [1,1000]>", "frequency-percentage": "<frequency>|<percentage>", "general-enclosed": "[<function-token> <any-value> )]|( <ident> <any-value> )", "generic-family": "serif|sans-serif|cursive|fantasy|monospace|-apple-system", "generic-name": "serif|sans-serif|cursive|fantasy|monospace", "geometry-box": "<shape-box>|fill-box|stroke-box|view-box", gradient: "<linear-gradient()>|<repeating-linear-gradient()>|<radial-gradient()>|<repeating-radial-gradient()>|<conic-gradient()>|<repeating-conic-gradient()>|<-legacy-gradient>", "grayscale()": "grayscale( <number-percentage> )", "grid-line": "auto|<custom-ident>|[<integer>&&<custom-ident>?]|[span&&[<integer>||<custom-ident>]]", "historical-lig-values": "[historical-ligatures|no-historical-ligatures]", "hsl()": "hsl( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsl( <hue> , <percentage> , <percentage> , <alpha-value>? )", "hsla()": "hsla( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsla( <hue> , <percentage> , <percentage> , <alpha-value>? )", hue: "<number>|<angle>", "hue-rotate()": "hue-rotate( <angle> )", "hwb()": "hwb( [<hue>|none] [<percentage>|none] [<percentage>|none] [/ [<alpha-value>|none]]? )", "hypot()": "hypot( <calc-sum># )", image: "<url>|<image()>|<image-set()>|<element()>|<paint()>|<cross-fade()>|<gradient>", "image()": "image( <image-tags>? [<image-src>? , <color>?]! )", "image-set()": "image-set( <image-set-option># )", "image-set-option": "[<image>|<string>] [<resolution>||type( <string> )]", "image-src": "<url>|<string>", "image-tags": "ltr|rtl", "inflexible-breadth": "<length-percentage>|min-content|max-content|auto", "inset()": "inset( <length-percentage>{1,4} [round <'border-radius'>]? )", "invert()": "invert( <number-percentage> )", "keyframes-name": "<custom-ident>|<string>", "keyframe-block": "<keyframe-selector># { <declaration-list> }", "keyframe-block-list": "<keyframe-block>+", "keyframe-selector": "from|to|<percentage>", "lab()": "lab( [<percentage>|<number>|none] [<percentage>|<number>|none] [<percentage>|<number>|none] [/ [<alpha-value>|none]]? )", "layer()": "layer( <layer-name> )", "layer-name": "<ident> ['.' <ident>]*", "lch()": "lch( [<percentage>|<number>|none] [<percentage>|<number>|none] [<hue>|none] [/ [<alpha-value>|none]]? )", "leader()": "leader( <leader-type> )", "leader-type": "dotted|solid|space|<string>", "length-percentage": "<length>|<percentage>", "line-names": "'[' <custom-ident>* ']'", "line-name-list": "[<line-names>|<name-repeat>]+", "line-style": "none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset", "line-width": "<length>|thin|medium|thick", "linear-color-hint": "<length-percentage>", "linear-color-stop": "<color> <color-stop-length>?", "linear-gradient()": "linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )", "log()": "log( <calc-sum> , <calc-sum>? )", "mask-layer": "<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||<geometry-box>||[<geometry-box>|no-clip]||<compositing-operator>||<masking-mode>", "mask-position": "[<length-percentage>|left|center|right] [<length-percentage>|top|center|bottom]?", "mask-reference": "none|<image>|<mask-source>", "mask-source": "<url>", "masking-mode": "alpha|luminance|match-source", "matrix()": "matrix( <number>#{6} )", "matrix3d()": "matrix3d( <number>#{16} )", "max()": "max( <calc-sum># )", "media-and": "<media-in-parens> [and <media-in-parens>]+", "media-condition": "<media-not>|<media-and>|<media-or>|<media-in-parens>", "media-condition-without-or": "<media-not>|<media-and>|<media-in-parens>", "media-feature": "( [<mf-plain>|<mf-boolean>|<mf-range>] )", "media-in-parens": "( <media-condition> )|<media-feature>|<general-enclosed>", "media-not": "not <media-in-parens>", "media-or": "<media-in-parens> [or <media-in-parens>]+", "media-query": "<media-condition>|[not|only]? <media-type> [and <media-condition-without-or>]?", "media-query-list": "<media-query>#", "media-type": "<ident>", "mf-boolean": "<mf-name>", "mf-name": "<ident>", "mf-plain": "<mf-name> : <mf-value>", "mf-range": "<mf-name> ['<'|'>']? '='? <mf-value>|<mf-value> ['<'|'>']? '='? <mf-name>|<mf-value> '<' '='? <mf-name> '<' '='? <mf-value>|<mf-value> '>' '='? <mf-name> '>' '='? <mf-value>", "mf-value": "<number>|<dimension>|<ident>|<ratio>", "min()": "min( <calc-sum># )", "minmax()": "minmax( [<length-percentage>|min-content|max-content|auto] , [<length-percentage>|<flex>|min-content|max-content|auto] )", "mod()": "mod( <calc-sum> , <calc-sum> )", "name-repeat": "repeat( [<integer [1,\u221E]>|auto-fill] , <line-names>+ )", "named-color": "transparent|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|<-non-standard-color>", "namespace-prefix": "<ident>", "ns-prefix": "[<ident-token>|'*']? '|'", "number-percentage": "<number>|<percentage>", "numeric-figure-values": "[lining-nums|oldstyle-nums]", "numeric-fraction-values": "[diagonal-fractions|stacked-fractions]", "numeric-spacing-values": "[proportional-nums|tabular-nums]", nth: "<an-plus-b>|even|odd", "opacity()": "opacity( [<number-percentage>] )", "overflow-position": "unsafe|safe", "outline-radius": "<length>|<percentage>", "page-body": "<declaration>? [; <page-body>]?|<page-margin-box> <page-body>", "page-margin-box": "<page-margin-box-type> '{' <declaration-list> '}'", "page-margin-box-type": "@top-left-corner|@top-left|@top-center|@top-right|@top-right-corner|@bottom-left-corner|@bottom-left|@bottom-center|@bottom-right|@bottom-right-corner|@left-top|@left-middle|@left-bottom|@right-top|@right-middle|@right-bottom", "page-selector-list": "[<page-selector>#]?", "page-selector": "<pseudo-page>+|<ident> <pseudo-page>*", "page-size": "A5|A4|A3|B5|B4|JIS-B5|JIS-B4|letter|legal|ledger", "path()": "path( [<fill-rule> ,]? <string> )", "paint()": "paint( <ident> , <declaration-value>? )", "perspective()": "perspective( [<length [0,\u221E]>|none] )", "polygon()": "polygon( <fill-rule>? , [<length-percentage> <length-percentage>]# )", position: "[[left|center|right]||[top|center|bottom]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]?|[[left|right] <length-percentage>]&&[[top|bottom] <length-percentage>]]", "pow()": "pow( <calc-sum> , <calc-sum> )", "pseudo-class-selector": "':' <ident-token>|':' <function-token> <any-value> ')'", "pseudo-element-selector": "':' <pseudo-class-selector>", "pseudo-page": ": [left|right|first|blank]", quote: "open-quote|close-quote|no-open-quote|no-close-quote", "radial-gradient()": "radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )", ratio: "<number [0,\u221E]> [/ <number [0,\u221E]>]?", "relative-selector": "<combinator>? <complex-selector>", "relative-selector-list": "<relative-selector>#", "relative-size": "larger|smaller", "rem()": "rem( <calc-sum> , <calc-sum> )", "repeat-style": "repeat-x|repeat-y|[repeat|space|round|no-repeat]{1,2}", "repeating-conic-gradient()": "repeating-conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )", "repeating-linear-gradient()": "repeating-linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )", "repeating-radial-gradient()": "repeating-radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )", "reversed-counter-name": "reversed( <counter-name> )", "rgb()": "rgb( <percentage>{3} [/ <alpha-value>]? )|rgb( <number>{3} [/ <alpha-value>]? )|rgb( <percentage>#{3} , <alpha-value>? )|rgb( <number>#{3} , <alpha-value>? )", "rgba()": "rgba( <percentage>{3} [/ <alpha-value>]? )|rgba( <number>{3} [/ <alpha-value>]? )|rgba( <percentage>#{3} , <alpha-value>? )|rgba( <number>#{3} , <alpha-value>? )", "rotate()": "rotate( [<angle>|<zero>] )", "rotate3d()": "rotate3d( <number> , <number> , <number> , [<angle>|<zero>] )", "rotateX()": "rotateX( [<angle>|<zero>] )", "rotateY()": "rotateY( [<angle>|<zero>] )", "rotateZ()": "rotateZ( [<angle>|<zero>] )", "round()": "round( <rounding-strategy>? , <calc-sum> , <calc-sum> )", "rounding-strategy": "nearest|up|down|to-zero", "saturate()": "saturate( <number-percentage> )", "scale()": "scale( [<number>|<percentage>]#{1,2} )", "scale3d()": "scale3d( [<number>|<percentage>]#{3} )", "scaleX()": "scaleX( [<number>|<percentage>] )", "scaleY()": "scaleY( [<number>|<percentage>] )", "scaleZ()": "scaleZ( [<number>|<percentage>] )", scroller: "root|nearest", "self-position": "center|start|end|self-start|self-end|flex-start|flex-end", "shape-radius": "<length-percentage>|closest-side|farthest-side", "sign()": "sign( <calc-sum> )", "skew()": "skew( [<angle>|<zero>] , [<angle>|<zero>]? )", "skewX()": "skewX( [<angle>|<zero>] )", "skewY()": "skewY( [<angle>|<zero>] )", "sepia()": "sepia( <number-percentage> )", shadow: "inset?&&<length>{2,4}&&<color>?", "shadow-t": "[<length>{2,3}&&<color>?]", shape: "rect( <top> , <right> , <bottom> , <left> )|rect( <top> <right> <bottom> <left> )", "shape-box": "<box>|margin-box", "side-or-corner": "[left|right]||[top|bottom]", "sin()": "sin( <calc-sum> )", "single-animation": "<time>||<easing-function>||<time>||<single-animation-iteration-count>||<single-animation-direction>||<single-animation-fill-mode>||<single-animation-play-state>||[none|<keyframes-name>]", "single-animation-direction": "normal|reverse|alternate|alternate-reverse", "single-animation-fill-mode": "none|forwards|backwards|both", "single-animation-iteration-count": "infinite|<number>", "single-animation-play-state": "running|paused", "single-animation-timeline": "auto|none|<timeline-name>|scroll( <axis>? <scroller>? )", "single-transition": "[none|<single-transition-property>]||<time>||<easing-function>||<time>", "single-transition-property": "all|<custom-ident>", size: "closest-side|farthest-side|closest-corner|farthest-corner|<length>|<length-percentage>{2}", "sqrt()": "sqrt( <calc-sum> )", "step-position": "jump-start|jump-end|jump-none|jump-both|start|end", "step-timing-function": "step-start|step-end|steps( <integer> [, <step-position>]? )", "subclass-selector": "<id-selector>|<class-selector>|<attribute-selector>|<pseudo-class-selector>", "supports-condition": "not <supports-in-parens>|<supports-in-parens> [and <supports-in-parens>]*|<supports-in-parens> [or <supports-in-parens>]*", "supports-in-parens": "( <supports-condition> )|<supports-feature>|<general-enclosed>", "supports-feature": "<supports-decl>|<supports-selector-fn>", "supports-decl": "( <declaration> )", "supports-selector-fn": "selector( <complex-selector> )", symbol: "<string>|<image>|<custom-ident>", "tan()": "tan( <calc-sum> )", target: "<target-counter()>|<target-counters()>|<target-text()>", "target-counter()": "target-counter( [<string>|<url>] , <custom-ident> , <counter-style>? )", "target-counters()": "target-counters( [<string>|<url>] , <custom-ident> , <string> , <counter-style>? )", "target-text()": "target-text( [<string>|<url>] , [content|before|after|first-letter]? )", "time-percentage": "<time>|<percentage>", "timeline-name": "<custom-ident>|<string>", "easing-function": "linear|<cubic-bezier-timing-function>|<step-timing-function>", "track-breadth": "<length-percentage>|<flex>|min-content|max-content|auto", "track-list": "[<line-names>? [<track-size>|<track-repeat>]]+ <line-names>?", "track-repeat": "repeat( [<integer [1,\u221E]>] , [<line-names>? <track-size>]+ <line-names>? )", "track-size": "<track-breadth>|minmax( <inflexible-breadth> , <track-breadth> )|fit-content( <length-percentage> )", "transform-function": "<matrix()>|<translate()>|<translateX()>|<translateY()>|<scale()>|<scaleX()>|<scaleY()>|<rotate()>|<skew()>|<skewX()>|<skewY()>|<matrix3d()>|<translate3d()>|<translateZ()>|<scale3d()>|<scaleZ()>|<rotate3d()>|<rotateX()>|<rotateY()>|<rotateZ()>|<perspective()>", "transform-list": "<transform-function>+", "translate()": "translate( <length-percentage> , <length-percentage>? )", "translate3d()": "translate3d( <length-percentage> , <length-percentage> , <length> )", "translateX()": "translateX( <length-percentage> )", "translateY()": "translateY( <length-percentage> )", "translateZ()": "translateZ( <length> )", "type-or-unit": "string|color|url|integer|number|length|angle|time|frequency|cap|ch|em|ex|ic|lh|rlh|rem|vb|vi|vw|vh|vmin|vmax|mm|Q|cm|in|pt|pc|px|deg|grad|rad|turn|ms|s|Hz|kHz|%", "type-selector": "<wq-name>|<ns-prefix>? '*'", "var()": "var( <custom-property-name> , <declaration-value>? )", "viewport-length": "auto|<length-percentage>", "visual-box": "content-box|padding-box|border-box", "wq-name": "<ns-prefix>? <ident-token>", "-legacy-gradient": "<-webkit-gradient()>|<-legacy-linear-gradient>|<-legacy-repeating-linear-gradient>|<-legacy-radial-gradient>|<-legacy-repeating-radial-gradient>", "-legacy-linear-gradient": "-moz-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-linear-gradient( <-legacy-linear-gradient-arguments> )", "-legacy-repeating-linear-gradient": "-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )", "-legacy-linear-gradient-arguments": "[<angle>|<side-or-corner>]? , <color-stop-list>", "-legacy-radial-gradient": "-moz-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-radial-gradient( <-legacy-radial-gradient-arguments> )", "-legacy-repeating-radial-gradient": "-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )", "-legacy-radial-gradient-arguments": "[<position> ,]? [[[<-legacy-radial-gradient-shape>||<-legacy-radial-gradient-size>]|[<length>|<percentage>]{2}] ,]? <color-stop-list>", "-legacy-radial-gradient-size": "closest-side|closest-corner|farthest-side|farthest-corner|contain|cover", "-legacy-radial-gradient-shape": "circle|ellipse", "-non-standard-font": "-apple-system-body|-apple-system-headline|-apple-system-subheadline|-apple-system-caption1|-apple-system-caption2|-apple-system-footnote|-apple-system-short-body|-apple-system-short-headline|-apple-system-short-subheadline|-apple-system-short-caption1|-apple-system-short-footnote|-apple-system-tall-body", "-non-standard-color": "-moz-ButtonDefault|-moz-ButtonHoverFace|-moz-ButtonHoverText|-moz-CellHighlight|-moz-CellHighlightText|-moz-Combobox|-moz-ComboboxText|-moz-Dialog|-moz-DialogText|-moz-dragtargetzone|-moz-EvenTreeRow|-moz-Field|-moz-FieldText|-moz-html-CellHighlight|-moz-html-CellHighlightText|-moz-mac-accentdarkestshadow|-moz-mac-accentdarkshadow|-moz-mac-accentface|-moz-mac-accentlightesthighlight|-moz-mac-accentlightshadow|-moz-mac-accentregularhighlight|-moz-mac-accentregularshadow|-moz-mac-chrome-active|-moz-mac-chrome-inactive|-moz-mac-focusring|-moz-mac-menuselect|-moz-mac-menushadow|-moz-mac-menutextselect|-moz-MenuHover|-moz-MenuHoverText|-moz-MenuBarText|-moz-MenuBarHoverText|-moz-nativehyperlinktext|-moz-OddTreeRow|-moz-win-communicationstext|-moz-win-mediatext|-moz-activehyperlinktext|-moz-default-background-color|-moz-default-color|-moz-hyperlinktext|-moz-visitedhyperlinktext|-webkit-activelink|-webkit-focus-ring-color|-webkit-link|-webkit-text", "-non-standard-image-rendering": "optimize-contrast|-moz-crisp-edges|-o-crisp-edges|-webkit-optimize-contrast", "-non-standard-overflow": "-moz-scrollbars-none|-moz-scrollbars-horizontal|-moz-scrollbars-vertical|-moz-hidden-unscrollable", "-non-standard-width": "fill-available|min-intrinsic|intrinsic|-moz-available|-moz-fit-content|-moz-min-content|-moz-max-content|-webkit-min-content|-webkit-max-content", "-webkit-gradient()": "-webkit-gradient( <-webkit-gradient-type> , <-webkit-gradient-point> [, <-webkit-gradient-point>|, <-webkit-gradient-radius> , <-webkit-gradient-point>] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )", "-webkit-gradient-color-stop": "from( <color> )|color-stop( [<number-zero-one>|<percentage>] , <color> )|to( <color> )", "-webkit-gradient-point": "[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]", "-webkit-gradient-radius": "<length>|<percentage>", "-webkit-gradient-type": "linear|radial", "-webkit-mask-box-repeat": "repeat|stretch|round", "-webkit-mask-clip-style": "border|border-box|padding|padding-box|content|content-box|text", "-ms-filter-function-list": "<-ms-filter-function>+", "-ms-filter-function": "<-ms-filter-function-progid>|<-ms-filter-function-legacy>", "-ms-filter-function-progid": "'progid:' [<ident-token> '.']* [<ident-token>|<function-token> <any-value>? )]", "-ms-filter-function-legacy": "<ident-token>|<function-token> <any-value>? )", "-ms-filter": "<string>", age: "child|young|old", "attr-name": "<wq-name>", "attr-fallback": "<any-value>", "bg-clip": "<box>|border|text", bottom: "<length>|auto", "container-name": "<custom-ident>", "container-condition": "not <query-in-parens>|<query-in-parens> [[and <query-in-parens>]*|[or <query-in-parens>]*]", "generic-voice": "[<age>? <gender> <integer>?]", gender: "male|female|neutral", left: "<length>|auto", "mask-image": "<mask-reference>#", paint: "none|<color>|<url> [none|<color>]?|context-fill|context-stroke", right: "<length>|auto", "scroll-timeline-axis": "block|inline|vertical|horizontal", "scroll-timeline-name": "none|<custom-ident>", "single-animation-composition": "replace|add|accumulate", "svg-length": "<percentage>|<length>|<number>", "svg-writing-mode": "lr-tb|rl-tb|tb-rl|lr|rl|tb", top: "<length>|auto", x: "<number>", y: "<number>", declaration: "<ident-token> : <declaration-value>? ['!' important]?", "declaration-list": "[<declaration>? ';']* <declaration>?", url: "url( <string> <url-modifier>* )|<url-token>", "url-modifier": "<ident>|<function-token> <any-value> )", "number-zero-one": "<number [0,1]>", "number-one-or-greater": "<number [1,\u221E]>", "query-in-parens": "( <container-condition> )|( <size-feature> )|style( <style-query> )|<general-enclosed>", "size-feature": "<mf-plain>|<mf-boolean>|<mf-range>", "style-feature": "<declaration>", "style-query": "<style-condition>|<style-feature>", "style-condition": "not <style-in-parens>|<style-in-parens> [[and <style-in-parens>]*|[or <style-in-parens>]*]", "style-in-parens": "( <style-condition> )|( <style-feature> )|<general-enclosed>", "-non-standard-display": "-ms-inline-flexbox|-ms-grid|-ms-inline-grid|-webkit-flex|-webkit-inline-flex|-webkit-box|-webkit-inline-box|-moz-inline-stack|-moz-box|-moz-inline-box" }, properties: { "--*": "<declaration-value>", "-ms-accelerator": "false|true", "-ms-block-progression": "tb|rl|bt|lr", "-ms-content-zoom-chaining": "none|chained", "-ms-content-zooming": "none|zoom", "-ms-content-zoom-limit": "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>", "-ms-content-zoom-limit-max": "<percentage>", "-ms-content-zoom-limit-min": "<percentage>", "-ms-content-zoom-snap": "<'-ms-content-zoom-snap-type'>||<'-ms-content-zoom-snap-points'>", "-ms-content-zoom-snap-points": "snapInterval( <percentage> , <percentage> )|snapList( <percentage># )", "-ms-content-zoom-snap-type": "none|proximity|mandatory", "-ms-filter": "<string>", "-ms-flow-from": "[none|<custom-ident>]#", "-ms-flow-into": "[none|<custom-ident>]#", "-ms-grid-columns": "none|<track-list>|<auto-track-list>", "-ms-grid-rows": "none|<track-list>|<auto-track-list>", "-ms-high-contrast-adjust": "auto|none", "-ms-hyphenate-limit-chars": "auto|<integer>{1,3}", "-ms-hyphenate-limit-lines": "no-limit|<integer>", "-ms-hyphenate-limit-zone": "<percentage>|<length>", "-ms-ime-align": "auto|after", "-ms-overflow-style": "auto|none|scrollbar|-ms-autohiding-scrollbar", "-ms-scrollbar-3dlight-color": "<color>", "-ms-scrollbar-arrow-color": "<color>", "-ms-scrollbar-base-color": "<color>", "-ms-scrollbar-darkshadow-color": "<color>", "-ms-scrollbar-face-color": "<color>", "-ms-scrollbar-highlight-color": "<color>", "-ms-scrollbar-shadow-color": "<color>", "-ms-scrollbar-track-color": "<color>", "-ms-scroll-chaining": "chained|none", "-ms-scroll-limit": "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>", "-ms-scroll-limit-x-max": "auto|<length>", "-ms-scroll-limit-x-min": "<length>", "-ms-scroll-limit-y-max": "auto|<length>", "-ms-scroll-limit-y-min": "<length>", "-ms-scroll-rails": "none|railed", "-ms-scroll-snap-points-x": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )", "-ms-scroll-snap-points-y": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )", "-ms-scroll-snap-type": "none|proximity|mandatory", "-ms-scroll-snap-x": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>", "-ms-scroll-snap-y": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>", "-ms-scroll-translation": "none|vertical-to-horizontal", "-ms-text-autospace": "none|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space", "-ms-touch-select": "grippers|none", "-ms-user-select": "none|element|text", "-ms-wrap-flow": "auto|both|start|end|maximum|clear", "-ms-wrap-margin": "<length>", "-ms-wrap-through": "wrap|none", "-moz-appearance": "none|button|button-arrow-down|button-arrow-next|button-arrow-previous|button-arrow-up|button-bevel|button-focus|caret|checkbox|checkbox-container|checkbox-label|checkmenuitem|dualbutton|groupbox|listbox|listitem|menuarrow|menubar|menucheckbox|menuimage|menuitem|menuitemtext|menulist|menulist-button|menulist-text|menulist-textfield|menupopup|menuradio|menuseparator|meterbar|meterchunk|progressbar|progressbar-vertical|progresschunk|progresschunk-vertical|radio|radio-container|radio-label|radiomenuitem|range|range-thumb|resizer|resizerpanel|scale-horizontal|scalethumbend|scalethumb-horizontal|scalethumbstart|scalethumbtick|scalethumb-vertical|scale-vertical|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|separator|sheet|spinner|spinner-downbutton|spinner-textfield|spinner-upbutton|splitter|statusbar|statusbarpanel|tab|tabpanel|tabpanels|tab-scroll-arrow-back|tab-scroll-arrow-forward|textfield|textfield-multiline|toolbar|toolbarbutton|toolbarbutton-dropdown|toolbargripper|toolbox|tooltip|treeheader|treeheadercell|treeheadersortarrow|treeitem|treeline|treetwisty|treetwistyopen|treeview|-moz-mac-unified-toolbar|-moz-win-borderless-glass|-moz-win-browsertabbar-toolbox|-moz-win-communicationstext|-moz-win-communications-toolbox|-moz-win-exclude-glass|-moz-win-glass|-moz-win-mediatext|-moz-win-media-toolbox|-moz-window-button-box|-moz-window-button-box-maximized|-moz-window-button-close|-moz-window-button-maximize|-moz-window-button-minimize|-moz-window-button-restore|-moz-window-frame-bottom|-moz-window-frame-left|-moz-window-frame-right|-moz-window-titlebar|-moz-window-titlebar-maximized", "-moz-binding": "<url>|none", "-moz-border-bottom-colors": "<color>+|none", "-moz-border-left-colors": "<color>+|none", "-moz-border-right-colors": "<color>+|none", "-moz-border-top-colors": "<color>+|none", "-moz-context-properties": "none|[fill|fill-opacity|stroke|stroke-opacity]#", "-moz-float-edge": "border-box|content-box|margin-box|padding-box", "-moz-force-broken-image-icon": "0|1", "-moz-image-region": "<shape>|auto", "-moz-orient": "inline|block|horizontal|vertical", "-moz-outline-radius": "<outline-radius>{1,4} [/ <outline-radius>{1,4}]?", "-moz-outline-radius-bottomleft": "<outline-radius>", "-moz-outline-radius-bottomright": "<outline-radius>", "-moz-outline-radius-topleft": "<outline-radius>", "-moz-outline-radius-topright": "<outline-radius>", "-moz-stack-sizing": "ignore|stretch-to-fit", "-moz-text-blink": "none|blink", "-moz-user-focus": "ignore|normal|select-after|select-before|select-menu|select-same|select-all|none", "-moz-user-input": "auto|none|enabled|disabled", "-moz-user-modify": "read-only|read-write|write-only", "-moz-window-dragging": "drag|no-drag", "-moz-window-shadow": "default|menu|tooltip|sheet|none", "-webkit-appearance": "none|button|button-bevel|caps-lock-indicator|caret|checkbox|default-button|inner-spin-button|listbox|listitem|media-controls-background|media-controls-fullscreen-background|media-current-time-display|media-enter-fullscreen-button|media-exit-fullscreen-button|media-fullscreen-button|media-mute-button|media-overlay-play-button|media-play-button|media-seek-back-button|media-seek-forward-button|media-slider|media-sliderthumb|media-time-remaining-display|media-toggle-closed-captions-button|media-volume-slider|media-volume-slider-container|media-volume-sliderthumb|menulist|menulist-button|menulist-text|menulist-textfield|meter|progress-bar|progress-bar-value|push-button|radio|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbargripper-horizontal|scrollbargripper-vertical|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|searchfield-cancel-button|searchfield-decoration|searchfield-results-button|searchfield-results-decoration|slider-horizontal|slider-vertical|sliderthumb-horizontal|sliderthumb-vertical|square-button|textarea|textfield|-apple-pay-button", "-webkit-border-before": "<'border-width'>||<'border-style'>||<color>", "-webkit-border-before-color": "<color>", "-webkit-border-before-style": "<'border-style'>", "-webkit-border-before-width": "<'border-width'>", "-webkit-box-reflect": "[above|below|right|left]? <length>? <image>?", "-webkit-line-clamp": "none|<integer>", "-webkit-mask": "[<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||[<box>|border|padding|content|text]||[<box>|border|padding|content]]#", "-webkit-mask-attachment": "<attachment>#", "-webkit-mask-clip": "[<box>|border|padding|content|text]#", "-webkit-mask-composite": "<composite-style>#", "-webkit-mask-image": "<mask-reference>#", "-webkit-mask-origin": "[<box>|border|padding|content]#", "-webkit-mask-position": "<position>#", "-webkit-mask-position-x": "[<length-percentage>|left|center|right]#", "-webkit-mask-position-y": "[<length-percentage>|top|center|bottom]#", "-webkit-mask-repeat": "<repeat-style>#", "-webkit-mask-repeat-x": "repeat|no-repeat|space|round", "-webkit-mask-repeat-y": "repeat|no-repeat|space|round", "-webkit-mask-size": "<bg-size>#", "-webkit-overflow-scrolling": "auto|touch", "-webkit-tap-highlight-color": "<color>", "-webkit-text-fill-color": "<color>", "-webkit-text-stroke": "<length>||<color>", "-webkit-text-stroke-color": "<color>", "-webkit-text-stroke-width": "<length>", "-webkit-touch-callout": "default|none", "-webkit-user-modify": "read-only|read-write|read-write-plaintext-only", "accent-color": "auto|<color>", "align-content": "normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>", "align-items": "normal|stretch|<baseline-position>|[<overflow-position>? <self-position>]", "align-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? <self-position>", "align-tracks": "[normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>]#", all: "initial|inherit|unset|revert|revert-layer", animation: "<single-animation>#", "animation-composition": "<single-animation-composition>#", "animation-delay": "<time>#", "animation-direction": "<single-animation-direction>#", "animation-duration": "<time>#", "animation-fill-mode": "<single-animation-fill-mode>#", "animation-iteration-count": "<single-animation-iteration-count>#", "animation-name": "[none|<keyframes-name>]#", "animation-play-state": "<single-animation-play-state>#", "animation-timing-function": "<easing-function>#", "animation-timeline": "<single-animation-timeline>#", appearance: "none|auto|textfield|menulist-button|<compat-auto>", "aspect-ratio": "auto|<ratio>", azimuth: "<angle>|[[left-side|far-left|left|center-left|center|center-right|right|far-right|right-side]||behind]|leftwards|rightwards", "backdrop-filter": "none|<filter-function-list>", "backface-visibility": "visible|hidden", background: "[<bg-layer> ,]* <final-bg-layer>", "background-attachment": "<attachment>#", "background-blend-mode": "<blend-mode>#", "background-clip": "<bg-clip>#", "background-color": "<color>", "background-image": "<bg-image>#", "background-origin": "<box>#", "background-position": "<bg-position>#", "background-position-x": "[center|[[left|right|x-start|x-end]? <length-percentage>?]!]#", "background-position-y": "[center|[[top|bottom|y-start|y-end]? <length-percentage>?]!]#", "background-repeat": "<repeat-style>#", "background-size": "<bg-size>#", "block-overflow": "clip|ellipsis|<string>", "block-size": "<'width'>", border: "<line-width>||<line-style>||<color>", "border-block": "<'border-top-width'>||<'border-top-style'>||<color>", "border-block-color": "<'border-top-color'>{1,2}", "border-block-style": "<'border-top-style'>", "border-block-width": "<'border-top-width'>", "border-block-end": "<'border-top-width'>||<'border-top-style'>||<color>", "border-block-end-color": "<'border-top-color'>", "border-block-end-style": "<'border-top-style'>", "border-block-end-width": "<'border-top-width'>", "border-block-start": "<'border-top-width'>||<'border-top-style'>||<color>", "border-block-start-color": "<'border-top-color'>", "border-block-start-style": "<'border-top-style'>", "border-block-start-width": "<'border-top-width'>", "border-bottom": "<line-width>||<line-style>||<color>", "border-bottom-color": "<'border-top-color'>", "border-bottom-left-radius": "<length-percentage>{1,2}", "border-bottom-right-radius": "<length-percentage>{1,2}", "border-bottom-style": "<line-style>", "border-bottom-width": "<line-width>", "border-collapse": "collapse|separate", "border-color": "<color>{1,4}", "border-end-end-radius": "<length-percentage>{1,2}", "border-end-start-radius": "<length-percentage>{1,2}", "border-image": "<'border-image-source'>||<'border-image-slice'> [/ <'border-image-width'>|/ <'border-image-width'>? / <'border-image-outset'>]?||<'border-image-repeat'>", "border-image-outset": "[<length>|<number>]{1,4}", "border-image-repeat": "[stretch|repeat|round|space]{1,2}", "border-image-slice": "<number-percentage>{1,4}&&fill?", "border-image-source": "none|<image>", "border-image-width": "[<length-percentage>|<number>|auto]{1,4}", "border-inline": "<'border-top-width'>||<'border-top-style'>||<color>", "border-inline-end": "<'border-top-width'>||<'border-top-style'>||<color>", "border-inline-color": "<'border-top-color'>{1,2}", "border-inline-style": "<'border-top-style'>", "border-inline-width": "<'border-top-width'>", "border-inline-end-color": "<'border-top-color'>", "border-inline-end-style": "<'border-top-style'>", "border-inline-end-width": "<'border-top-width'>", "border-inline-start": "<'border-top-width'>||<'border-top-style'>||<color>", "border-inline-start-color": "<'border-top-color'>", "border-inline-start-style": "<'border-top-style'>", "border-inline-start-width": "<'border-top-width'>", "border-left": "<line-width>||<line-style>||<color>", "border-left-color": "<color>", "border-left-style": "<line-style>", "border-left-width": "<line-width>", "border-radius": "<length-percentage>{1,4} [/ <length-percentage>{1,4}]?", "border-right": "<line-width>||<line-style>||<color>", "border-right-color": "<color>", "border-right-style": "<line-style>", "border-right-width": "<line-width>", "border-spacing": "<length> <length>?", "border-start-end-radius": "<length-percentage>{1,2}", "border-start-start-radius": "<length-percentage>{1,2}", "border-style": "<line-style>{1,4}", "border-top": "<line-width>||<line-style>||<color>", "border-top-color": "<color>", "border-top-left-radius": "<length-percentage>{1,2}", "border-top-right-radius": "<length-percentage>{1,2}", "border-top-style": "<line-style>", "border-top-width": "<line-width>", "border-width": "<line-width>{1,4}", bottom: "<length>|<percentage>|auto", "box-align": "start|center|end|baseline|stretch", "box-decoration-break": "slice|clone", "box-direction": "normal|reverse|inherit", "box-flex": "<number>", "box-flex-group": "<integer>", "box-lines": "single|multiple", "box-ordinal-group": "<integer>", "box-orient": "horizontal|vertical|inline-axis|block-axis|inherit", "box-pack": "start|center|end|justify", "box-shadow": "none|<shadow>#", "box-sizing": "content-box|border-box", "break-after": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region", "break-before": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region", "break-inside": "auto|avoid|avoid-page|avoid-column|avoid-region", "caption-side": "top|bottom|block-start|block-end|inline-start|inline-end", caret: "<'caret-color'>||<'caret-shape'>", "caret-color": "auto|<color>", "caret-shape": "auto|bar|block|underscore", clear: "none|left|right|both|inline-start|inline-end", clip: "<shape>|auto", "clip-path": "<clip-source>|[<basic-shape>||<geometry-box>]|none", color: "<color>", "print-color-adjust": "economy|exact", "color-scheme": "normal|[light|dark|<custom-ident>]+&&only?", "column-count": "<integer>|auto", "column-fill": "auto|balance|balance-all", "column-gap": "normal|<length-percentage>", "column-rule": "<'column-rule-width'>||<'column-rule-style'>||<'column-rule-color'>", "column-rule-color": "<color>", "column-rule-style": "<'border-style'>", "column-rule-width": "<'border-width'>", "column-span": "none|all", "column-width": "<length>|auto", columns: "<'column-width'>||<'column-count'>", contain: "none|strict|content|[[size||inline-size]||layout||style||paint]", "contain-intrinsic-size": "[none|<length>|auto <length>]{1,2}", "contain-intrinsic-block-size": "none|<length>|auto <length>", "contain-intrinsic-height": "none|<length>|auto <length>", "contain-intrinsic-inline-size": "none|<length>|auto <length>", "contain-intrinsic-width": "none|<length>|auto <length>", content: "normal|none|[<content-replacement>|<content-list>] [/ [<string>|<counter>]+]?", "content-visibility": "visible|auto|hidden", "counter-increment": "[<counter-name> <integer>?]+|none", "counter-reset": "[<counter-name> <integer>?|<reversed-counter-name> <integer>?]+|none", "counter-set": "[<counter-name> <integer>?]+|none", cursor: "[[<url> [<x> <y>]? ,]* [auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out|grab|grabbing|hand|-webkit-grab|-webkit-grabbing|-webkit-zoom-in|-webkit-zoom-out|-moz-grab|-moz-grabbing|-moz-zoom-in|-moz-zoom-out]]", direction: "ltr|rtl", display: "[<display-outside>||<display-inside>]|<display-listitem>|<display-internal>|<display-box>|<display-legacy>|<-non-standard-display>", "empty-cells": "show|hide", filter: "none|<filter-function-list>|<-ms-filter-function-list>", flex: "none|[<'flex-grow'> <'flex-shrink'>?||<'flex-basis'>]", "flex-basis": "content|<'width'>", "flex-direction": "row|row-reverse|column|column-reverse", "flex-flow": "<'flex-direction'>||<'flex-wrap'>", "flex-grow": "<number>", "flex-shrink": "<number>", "flex-wrap": "nowrap|wrap|wrap-reverse", float: "left|right|none|inline-start|inline-end", font: "[[<'font-style'>||<font-variant-css21>||<'font-weight'>||<'font-stretch'>]? <'font-size'> [/ <'line-height'>]? <'font-family'>]|caption|icon|menu|message-box|small-caption|status-bar", "font-family": "[<family-name>|<generic-family>]#", "font-feature-settings": "normal|<feature-tag-value>#", "font-kerning": "auto|normal|none", "font-language-override": "normal|<string>", "font-optical-sizing": "auto|none", "font-variation-settings": "normal|[<string> <number>]#", "font-size": "<absolute-size>|<relative-size>|<length-percentage>", "font-size-adjust": "none|[ex-height|cap-height|ch-width|ic-width|ic-height]? [from-font|<number>]", "font-smooth": "auto|never|always|<absolute-size>|<length>", "font-stretch": "<font-stretch-absolute>", "font-style": "normal|italic|oblique <angle>?", "font-synthesis": "none|[weight||style||small-caps]", "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]", "font-variant-alternates": "normal|[stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )]", "font-variant-caps": "normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps", "font-variant-east-asian": "normal|[<east-asian-variant-values>||<east-asian-width-values>||ruby]", "font-variant-ligatures": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>]", "font-variant-numeric": "normal|[<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero]", "font-variant-position": "normal|sub|super", "font-weight": "<font-weight-absolute>|bolder|lighter", "forced-color-adjust": "auto|none", gap: "<'row-gap'> <'column-gap'>?", grid: "<'grid-template'>|<'grid-template-rows'> / [auto-flow&&dense?] <'grid-auto-columns'>?|[auto-flow&&dense?] <'grid-auto-rows'>? / <'grid-template-columns'>", "grid-area": "<grid-line> [/ <grid-line>]{0,3}", "grid-auto-columns": "<track-size>+", "grid-auto-flow": "[row|column]||dense", "grid-auto-rows": "<track-size>+", "grid-column": "<grid-line> [/ <grid-line>]?", "grid-column-end": "<grid-line>", "grid-column-gap": "<length-percentage>", "grid-column-start": "<grid-line>", "grid-gap": "<'grid-row-gap'> <'grid-column-gap'>?", "grid-row": "<grid-line> [/ <grid-line>]?", "grid-row-end": "<grid-line>", "grid-row-gap": "<length-percentage>", "grid-row-start": "<grid-line>", "grid-template": "none|[<'grid-template-rows'> / <'grid-template-columns'>]|[<line-names>? <string> <track-size>? <line-names>?]+ [/ <explicit-track-list>]?", "grid-template-areas": "none|<string>+", "grid-template-columns": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?", "grid-template-rows": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?", "hanging-punctuation": "none|[first||[force-end|allow-end]||last]", height: "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )", "hyphenate-character": "auto|<string>", hyphens: "none|manual|auto", "image-orientation": "from-image|<angle>|[<angle>? flip]", "image-rendering": "auto|crisp-edges|pixelated|optimizeSpeed|optimizeQuality|<-non-standard-image-rendering>", "image-resolution": "[from-image||<resolution>]&&snap?", "ime-mode": "auto|normal|active|inactive|disabled", "initial-letter": "normal|[<number> <integer>?]", "initial-letter-align": "[auto|alphabetic|hanging|ideographic]", "inline-size": "<'width'>", "input-security": "auto|none", inset: "<'top'>{1,4}", "inset-block": "<'top'>{1,2}", "inset-block-end": "<'top'>", "inset-block-start": "<'top'>", "inset-inline": "<'top'>{1,2}", "inset-inline-end": "<'top'>", "inset-inline-start": "<'top'>", isolation: "auto|isolate", "justify-content": "normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]", "justify-items": "normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]|legacy|legacy&&[left|right|center]", "justify-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]", "justify-tracks": "[normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]]#", left: "<length>|<percentage>|auto", "letter-spacing": "normal|<length-percentage>", "line-break": "auto|loose|normal|strict|anywhere", "line-clamp": "none|<integer>", "line-height": "normal|<number>|<length>|<percentage>", "line-height-step": "<length>", "list-style": "<'list-style-type'>||<'list-style-position'>||<'list-style-image'>", "list-style-image": "<image>|none", "list-style-position": "inside|outside", "list-style-type": "<counter-style>|<string>|none", margin: "[<length>|<percentage>|auto]{1,4}", "margin-block": "<'margin-left'>{1,2}", "margin-block-end": "<'margin-left'>", "margin-block-start": "<'margin-left'>", "margin-bottom": "<length>|<percentage>|auto", "margin-inline": "<'margin-left'>{1,2}", "margin-inline-end": "<'margin-left'>", "margin-inline-start": "<'margin-left'>", "margin-left": "<length>|<percentage>|auto", "margin-right": "<length>|<percentage>|auto", "margin-top": "<length>|<percentage>|auto", "margin-trim": "none|in-flow|all", mask: "<mask-layer>#", "mask-border": "<'mask-border-source'>||<'mask-border-slice'> [/ <'mask-border-width'>? [/ <'mask-border-outset'>]?]?||<'mask-border-repeat'>||<'mask-border-mode'>", "mask-border-mode": "luminance|alpha", "mask-border-outset": "[<length>|<number>]{1,4}", "mask-border-repeat": "[stretch|repeat|round|space]{1,2}", "mask-border-slice": "<number-percentage>{1,4} fill?", "mask-border-source": "none|<image>", "mask-border-width": "[<length-percentage>|<number>|auto]{1,4}", "mask-clip": "[<geometry-box>|no-clip]#", "mask-composite": "<compositing-operator>#", "mask-image": "<mask-reference>#", "mask-mode": "<masking-mode>#", "mask-origin": "<geometry-box>#", "mask-position": "<position>#", "mask-repeat": "<repeat-style>#", "mask-size": "<bg-size>#", "mask-type": "luminance|alpha", "masonry-auto-flow": "[pack|next]||[definite-first|ordered]", "math-depth": "auto-add|add( <integer> )|<integer>", "math-shift": "normal|compact", "math-style": "normal|compact", "max-block-size": "<'max-width'>", "max-height": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )", "max-inline-size": "<'max-width'>", "max-lines": "none|<integer>", "max-width": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>", "min-block-size": "<'min-width'>", "min-height": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )", "min-inline-size": "<'min-width'>", "min-width": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>", "mix-blend-mode": "<blend-mode>|plus-lighter", "object-fit": "fill|contain|cover|none|scale-down", "object-position": "<position>", offset: "[<'offset-position'>? [<'offset-path'> [<'offset-distance'>||<'offset-rotate'>]?]?]! [/ <'offset-anchor'>]?", "offset-anchor": "auto|<position>", "offset-distance": "<length-percentage>", "offset-path": "none|ray( [<angle>&&<size>&&contain?] )|<path()>|<url>|[<basic-shape>||<geometry-box>]", "offset-position": "auto|<position>", "offset-rotate": "[auto|reverse]||<angle>", opacity: "<alpha-value>", order: "<integer>", orphans: "<integer>", outline: "[<'outline-color'>||<'outline-style'>||<'outline-width'>]", "outline-color": "<color>|invert", "outline-offset": "<length>", "outline-style": "auto|<'border-style'>", "outline-width": "<line-width>", overflow: "[visible|hidden|clip|scroll|auto]{1,2}|<-non-standard-overflow>", "overflow-anchor": "auto|none", "overflow-block": "visible|hidden|clip|scroll|auto", "overflow-clip-box": "padding-box|content-box", "overflow-clip-margin": "<visual-box>||<length [0,\u221E]>", "overflow-inline": "visible|hidden|clip|scroll|auto", "overflow-wrap": "normal|break-word|anywhere", "overflow-x": "visible|hidden|clip|scroll|auto", "overflow-y": "visible|hidden|clip|scroll|auto", "overscroll-behavior": "[contain|none|auto]{1,2}", "overscroll-behavior-block": "contain|none|auto", "overscroll-behavior-inline": "contain|none|auto", "overscroll-behavior-x": "contain|none|auto", "overscroll-behavior-y": "contain|none|auto", padding: "[<length>|<percentage>]{1,4}", "padding-block": "<'padding-left'>{1,2}", "padding-block-end": "<'padding-left'>", "padding-block-start": "<'padding-left'>", "padding-bottom": "<length>|<percentage>", "padding-inline": "<'padding-left'>{1,2}", "padding-inline-end": "<'padding-left'>", "padding-inline-start": "<'padding-left'>", "padding-left": "<length>|<percentage>", "padding-right": "<length>|<percentage>", "padding-top": "<length>|<percentage>", "page-break-after": "auto|always|avoid|left|right|recto|verso", "page-break-before": "auto|always|avoid|left|right|recto|verso", "page-break-inside": "auto|avoid", "paint-order": "normal|[fill||stroke||markers]", perspective: "none|<length>", "perspective-origin": "<position>", "place-content": "<'align-content'> <'justify-content'>?", "place-items": "<'align-items'> <'justify-items'>?", "place-self": "<'align-self'> <'justify-self'>?", "pointer-events": "auto|none|visiblePainted|visibleFill|visibleStroke|visible|painted|fill|stroke|all|inherit", position: "static|relative|absolute|sticky|fixed|-webkit-sticky", quotes: "none|auto|[<string> <string>]+", resize: "none|both|horizontal|vertical|block|inline", right: "<length>|<percentage>|auto", rotate: "none|<angle>|[x|y|z|<number>{3}]&&<angle>", "row-gap": "normal|<length-percentage>", "ruby-align": "start|center|space-between|space-around", "ruby-merge": "separate|collapse|auto", "ruby-position": "[alternate||[over|under]]|inter-character", scale: "none|<number>{1,3}", "scrollbar-color": "auto|<color>{2}", "scrollbar-gutter": "auto|stable&&both-edges?", "scrollbar-width": "auto|thin|none", "scroll-behavior": "auto|smooth", "scroll-margin": "<length>{1,4}", "scroll-margin-block": "<length>{1,2}", "scroll-margin-block-start": "<length>", "scroll-margin-block-end": "<length>", "scroll-margin-bottom": "<length>", "scroll-margin-inline": "<length>{1,2}", "scroll-margin-inline-start": "<length>", "scroll-margin-inline-end": "<length>", "scroll-margin-left": "<length>", "scroll-margin-right": "<length>", "scroll-margin-top": "<length>", "scroll-padding": "[auto|<length-percentage>]{1,4}", "scroll-padding-block": "[auto|<length-percentage>]{1,2}", "scroll-padding-block-start": "auto|<length-percentage>", "scroll-padding-block-end": "auto|<length-percentage>", "scroll-padding-bottom": "auto|<length-percentage>", "scroll-padding-inline": "[auto|<length-percentage>]{1,2}", "scroll-padding-inline-start": "auto|<length-percentage>", "scroll-padding-inline-end": "auto|<length-percentage>", "scroll-padding-left": "auto|<length-percentage>", "scroll-padding-right": "auto|<length-percentage>", "scroll-padding-top": "auto|<length-percentage>", "scroll-snap-align": "[none|start|end|center]{1,2}", "scroll-snap-coordinate": "none|<position>#", "scroll-snap-destination": "<position>", "scroll-snap-points-x": "none|repeat( <length-percentage> )", "scroll-snap-points-y": "none|repeat( <length-percentage> )", "scroll-snap-stop": "normal|always", "scroll-snap-type": "none|[x|y|block|inline|both] [mandatory|proximity]?", "scroll-snap-type-x": "none|mandatory|proximity", "scroll-snap-type-y": "none|mandatory|proximity", "scroll-timeline": "<scroll-timeline-name>||<scroll-timeline-axis>", "scroll-timeline-axis": "block|inline|vertical|horizontal", "scroll-timeline-name": "none|<custom-ident>", "shape-image-threshold": "<alpha-value>", "shape-margin": "<length-percentage>", "shape-outside": "none|[<shape-box>||<basic-shape>]|<image>", "tab-size": "<integer>|<length>", "table-layout": "auto|fixed", "text-align": "start|end|left|right|center|justify|match-parent", "text-align-last": "auto|start|end|left|right|center|justify", "text-combine-upright": "none|all|[digits <integer>?]", "text-decoration": "<'text-decoration-line'>||<'text-decoration-style'>||<'text-decoration-color'>||<'text-decoration-thickness'>", "text-decoration-color": "<color>", "text-decoration-line": "none|[underline||overline||line-through||blink]|spelling-error|grammar-error", "text-decoration-skip": "none|[objects||[spaces|[leading-spaces||trailing-spaces]]||edges||box-decoration]", "text-decoration-skip-ink": "auto|all|none", "text-decoration-style": "solid|double|dotted|dashed|wavy", "text-decoration-thickness": "auto|from-font|<length>|<percentage>", "text-emphasis": "<'text-emphasis-style'>||<'text-emphasis-color'>", "text-emphasis-color": "<color>", "text-emphasis-position": "[over|under]&&[right|left]", "text-emphasis-style": "none|[[filled|open]||[dot|circle|double-circle|triangle|sesame]]|<string>", "text-indent": "<length-percentage>&&hanging?&&each-line?", "text-justify": "auto|inter-character|inter-word|none", "text-orientation": "mixed|upright|sideways", "text-overflow": "[clip|ellipsis|<string>]{1,2}", "text-rendering": "auto|optimizeSpeed|optimizeLegibility|geometricPrecision", "text-shadow": "none|<shadow-t>#", "text-size-adjust": "none|auto|<percentage>", "text-transform": "none|capitalize|uppercase|lowercase|full-width|full-size-kana", "text-underline-offset": "auto|<length>|<percentage>", "text-underline-position": "auto|from-font|[under||[left|right]]", top: "<length>|<percentage>|auto", "touch-action": "auto|none|[[pan-x|pan-left|pan-right]||[pan-y|pan-up|pan-down]||pinch-zoom]|manipulation", transform: "none|<transform-list>", "transform-box": "content-box|border-box|fill-box|stroke-box|view-box", "transform-origin": "[<length-percentage>|left|center|right|top|bottom]|[[<length-percentage>|left|center|right]&&[<length-percentage>|top|center|bottom]] <length>?", "transform-style": "flat|preserve-3d", transition: "<single-transition>#", "transition-delay": "<time>#", "transition-duration": "<time>#", "transition-property": "none|<single-transition-property>#", "transition-timing-function": "<easing-function>#", translate: "none|<length-percentage> [<length-percentage> <length>?]?", "unicode-bidi": "normal|embed|isolate|bidi-override|isolate-override|plaintext|-moz-isolate|-moz-isolate-override|-moz-plaintext|-webkit-isolate|-webkit-isolate-override|-webkit-plaintext", "user-select": "auto|text|none|contain|all", "vertical-align": "baseline|sub|super|text-top|text-bottom|middle|top|bottom|<percentage>|<length>", visibility: "visible|hidden|collapse", "white-space": "normal|pre|nowrap|pre-wrap|pre-line|break-spaces", widows: "<integer>", width: "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|fill|stretch|intrinsic|-moz-max-content|-webkit-max-content|-moz-fit-content|-webkit-fit-content", "will-change": "auto|<animateable-feature>#", "word-break": "normal|break-all|keep-all|break-word", "word-spacing": "normal|<length>", "word-wrap": "normal|break-word", "writing-mode": "horizontal-tb|vertical-rl|vertical-lr|sideways-rl|sideways-lr|<svg-writing-mode>", "z-index": "auto|<integer>", zoom: "normal|reset|<number>|<percentage>", "-moz-background-clip": "padding|border", "-moz-border-radius-bottomleft": "<'border-bottom-left-radius'>", "-moz-border-radius-bottomright": "<'border-bottom-right-radius'>", "-moz-border-radius-topleft": "<'border-top-left-radius'>", "-moz-border-radius-topright": "<'border-bottom-right-radius'>", "-moz-control-character-visibility": "visible|hidden", "-moz-osx-font-smoothing": "auto|grayscale", "-moz-user-select": "none|text|all|-moz-none", "-ms-flex-align": "start|end|center|baseline|stretch", "-ms-flex-item-align": "auto|start|end|center|baseline|stretch", "-ms-flex-line-pack": "start|end|center|justify|distribute|stretch", "-ms-flex-negative": "<'flex-shrink'>", "-ms-flex-pack": "start|end|center|justify|distribute", "-ms-flex-order": "<integer>", "-ms-flex-positive": "<'flex-grow'>", "-ms-flex-preferred-size": "<'flex-basis'>", "-ms-interpolation-mode": "nearest-neighbor|bicubic", "-ms-grid-column-align": "start|end|center|stretch", "-ms-grid-row-align": "start|end|center|stretch", "-ms-hyphenate-limit-last": "none|always|column|page|spread", "-webkit-background-clip": "[<box>|border|padding|content|text]#", "-webkit-column-break-after": "always|auto|avoid", "-webkit-column-break-before": "always|auto|avoid", "-webkit-column-break-inside": "always|auto|avoid", "-webkit-font-smoothing": "auto|none|antialiased|subpixel-antialiased", "-webkit-mask-box-image": "[<url>|<gradient>|none] [<length-percentage>{4} <-webkit-mask-box-repeat>{2}]?", "-webkit-print-color-adjust": "economy|exact", "-webkit-text-security": "none|circle|disc|square", "-webkit-user-drag": "none|element|auto", "-webkit-user-select": "auto|none|text|all", "alignment-baseline": "auto|baseline|before-edge|text-before-edge|middle|central|after-edge|text-after-edge|ideographic|alphabetic|hanging|mathematical", "baseline-shift": "baseline|sub|super|<svg-length>", behavior: "<url>+", "clip-rule": "nonzero|evenodd", container: "<'container-name'> [/ <'container-type'>]?", "container-name": "none|<custom-ident>+", "container-type": "normal||[size|inline-size]", cue: "<'cue-before'> <'cue-after'>?", "cue-after": "<url> <decibel>?|none", "cue-before": "<url> <decibel>?|none", "dominant-baseline": "auto|use-script|no-change|reset-size|ideographic|alphabetic|hanging|mathematical|central|middle|text-after-edge|text-before-edge", fill: "<paint>", "fill-opacity": "<number-zero-one>", "fill-rule": "nonzero|evenodd", "glyph-orientation-horizontal": "<angle>", "glyph-orientation-vertical": "<angle>", kerning: "auto|<svg-length>", marker: "none|<url>", "marker-end": "none|<url>", "marker-mid": "none|<url>", "marker-start": "none|<url>", pause: "<'pause-before'> <'pause-after'>?", "pause-after": "<time>|none|x-weak|weak|medium|strong|x-strong", "pause-before": "<time>|none|x-weak|weak|medium|strong|x-strong", rest: "<'rest-before'> <'rest-after'>?", "rest-after": "<time>|none|x-weak|weak|medium|strong|x-strong", "rest-before": "<time>|none|x-weak|weak|medium|strong|x-strong", "shape-rendering": "auto|optimizeSpeed|crispEdges|geometricPrecision", src: "[<url> [format( <string># )]?|local( <family-name> )]#", speak: "auto|none|normal", "speak-as": "normal|spell-out||digits||[literal-punctuation|no-punctuation]", stroke: "<paint>", "stroke-dasharray": "none|[<svg-length>+]#", "stroke-dashoffset": "<svg-length>", "stroke-linecap": "butt|round|square", "stroke-linejoin": "miter|round|bevel", "stroke-miterlimit": "<number-one-or-greater>", "stroke-opacity": "<number-zero-one>", "stroke-width": "<svg-length>", "text-anchor": "start|middle|end", "unicode-range": "<urange>#", "voice-balance": "<number>|left|center|right|leftwards|rightwards", "voice-duration": "auto|<time>", "voice-family": "[[<family-name>|<generic-voice>] ,]* [<family-name>|<generic-voice>]|preserve", "voice-pitch": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]", "voice-range": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]", "voice-rate": "[normal|x-slow|slow|medium|fast|x-fast]||<percentage>", "voice-stress": "normal|strong|moderate|none|reduced", "voice-volume": "silent|[[x-soft|soft|medium|loud|x-loud]||<decibel>]" }, atrules: { charset: { prelude: "<string>", descriptors: null }, "counter-style": { prelude: "<counter-style-name>", descriptors: { "additive-symbols": "[<integer>&&<symbol>]#", fallback: "<counter-style-name>", negative: "<symbol> <symbol>?", pad: "<integer>&&<symbol>", prefix: "<symbol>", range: "[[<integer>|infinite]{2}]#|auto", "speak-as": "auto|bullets|numbers|words|spell-out|<counter-style-name>", suffix: "<symbol>", symbols: "<symbol>+", system: "cyclic|numeric|alphabetic|symbolic|additive|[fixed <integer>?]|[extends <counter-style-name>]" } }, document: { prelude: "[<url>|url-prefix( <string> )|domain( <string> )|media-document( <string> )|regexp( <string> )]#", descriptors: null }, "font-face": { prelude: null, descriptors: { "ascent-override": "normal|<percentage>", "descent-override": "normal|<percentage>", "font-display": "[auto|block|swap|fallback|optional]", "font-family": "<family-name>", "font-feature-settings": "normal|<feature-tag-value>#", "font-variation-settings": "normal|[<string> <number>]#", "font-stretch": "<font-stretch-absolute>{1,2}", "font-style": "normal|italic|oblique <angle>{0,2}", "font-weight": "<font-weight-absolute>{1,2}", "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]", "line-gap-override": "normal|<percentage>", "size-adjust": "<percentage>", src: "[<url> [format( <string># )]?|local( <family-name> )]#", "unicode-range": "<urange>#" } }, "font-feature-values": { prelude: "<family-name>#", descriptors: null }, import: { prelude: "[<string>|<url>] [layer|layer( <layer-name> )]? [supports( [<supports-condition>|<declaration>] )]? <media-query-list>?", descriptors: null }, keyframes: { prelude: "<keyframes-name>", descriptors: null }, layer: { prelude: "[<layer-name>#|<layer-name>?]", descriptors: null }, media: { prelude: "<media-query-list>", descriptors: null }, namespace: { prelude: "<namespace-prefix>? [<string>|<url>]", descriptors: null }, page: { prelude: "<page-selector-list>", descriptors: { bleed: "auto|<length>", marks: "none|[crop||cross]", size: "<length>{1,2}|auto|[<page-size>||[portrait|landscape]]" } }, property: { prelude: "<custom-property-name>", descriptors: { syntax: "<string>", inherits: "true|false", "initial-value": "<string>" } }, "scroll-timeline": { prelude: "<timeline-name>", descriptors: null }, supports: { prelude: "<supports-condition>", descriptors: null }, viewport: { prelude: null, descriptors: { height: "<viewport-length>{1,2}", "max-height": "<viewport-length>", "max-width": "<viewport-length>", "max-zoom": "auto|<number>|<percentage>", "min-height": "<viewport-length>", "min-width": "<viewport-length>", "min-zoom": "auto|<number>|<percentage>", orientation: "auto|portrait|landscape", "user-zoom": "zoom|fixed", "viewport-fit": "auto|contain|cover", width: "<viewport-length>{1,2}", zoom: "auto|<number>|<percentage>" } }, container: { prelude: "[<container-name>]? <container-condition>", descriptors: null }, nest: { prelude: "<complex-selector-list>", descriptors: null } } };
  var gt = {};
  b$1(gt, { AnPlusB: () => Xr, Atrule: () => Zr, AtrulePrelude: () => en, AttributeSelector: () => nn, Block: () => an, Brackets: () => ln, CDC: () => un, CDO: () => hn, ClassSelector: () => fn, Combinator: () => gn, Comment: () => xn, Declaration: () => kn, DeclarationList: () => Sn, Dimension: () => An, Function: () => En, Hash: () => Pn, IdSelector: () => Nn, Identifier: () => Dn, MediaFeature: () => Mn, MediaQuery: () => Fn, MediaQueryList: () => _n, NestingSelector: () => Un, Nth: () => Wn, Number: () => Yn, Operator: () => Vn, Parentheses: () => Qn, Percentage: () => $n, PseudoClassSelector: () => Jn, PseudoElementSelector: () => to, Ratio: () => no, Raw: () => io, Rule: () => so, Selector: () => co, SelectorList: () => po, String: () => bo, StyleSheet: () => yo, TypeSelector: () => vo, UnicodeRange: () => Ao, Url: () => Do, Value: () => No, WhiteSpace: () => Mo });
  var Xr = {};
  b$1(Xr, { generate: () => xc, name: () => gc, parse: () => Qr, structure: () => bc });
  var me = 43;
  var re$1 = 45;
  var Xt = 110;
  var Ie = true;
  var dc = false;
  function $t(e, t) {
    let r = this.tokenStart + e, n2 = this.charCodeAt(r);
    for ((n2 === me || n2 === re$1) && (t && this.error("Number sign is not allowed"), r++); r < this.tokenEnd; r++)
      B(this.charCodeAt(r)) || this.error("Integer is expected", r);
  }
  function Qe(e) {
    return $t.call(this, 0, e);
  }
  function Ce(e, t) {
    if (!this.cmpChar(this.tokenStart + e, t)) {
      let r = "";
      switch (t) {
        case Xt:
          r = "N is expected";
          break;
        case re$1:
          r = "HyphenMinus is expected";
          break;
      }
      this.error(r, this.tokenStart + e);
    }
  }
  function Kr() {
    let e = 0, t = 0, r = this.tokenType;
    for (; r === 13 || r === 25; )
      r = this.lookupType(++e);
    if (r !== 10)
      if (this.isDelim(me, e) || this.isDelim(re$1, e)) {
        t = this.isDelim(me, e) ? me : re$1;
        do
          r = this.lookupType(++e);
        while (r === 13 || r === 25);
        r !== 10 && (this.skip(e), Qe.call(this, Ie));
      } else
        return null;
    return e > 0 && this.skip(e), t === 0 && (r = this.charCodeAt(this.tokenStart), r !== me && r !== re$1 && this.error("Number sign is expected")), Qe.call(this, t !== 0), t === re$1 ? "-" + this.consume(10) : this.consume(10);
  }
  var gc = "AnPlusB";
  var bc = { a: [String, null], b: [String, null] };
  function Qr() {
    let e = this.tokenStart, t = null, r = null;
    if (this.tokenType === 10)
      Qe.call(this, dc), r = this.consume(10);
    else if (this.tokenType === 1 && this.cmpChar(this.tokenStart, re$1))
      switch (t = "-1", Ce.call(this, 1, Xt), this.tokenEnd - this.tokenStart) {
        case 2:
          this.next(), r = Kr.call(this);
          break;
        case 3:
          Ce.call(this, 2, re$1), this.next(), this.skipSC(), Qe.call(this, Ie), r = "-" + this.consume(10);
          break;
        default:
          Ce.call(this, 2, re$1), $t.call(this, 3, Ie), this.next(), r = this.substrToCursor(e + 2);
      }
    else if (this.tokenType === 1 || this.isDelim(me) && this.lookupType(1) === 1) {
      let n2 = 0;
      switch (t = "1", this.isDelim(me) && (n2 = 1, this.next()), Ce.call(this, 0, Xt), this.tokenEnd - this.tokenStart) {
        case 1:
          this.next(), r = Kr.call(this);
          break;
        case 2:
          Ce.call(this, 1, re$1), this.next(), this.skipSC(), Qe.call(this, Ie), r = "-" + this.consume(10);
          break;
        default:
          Ce.call(this, 1, re$1), $t.call(this, 2, Ie), this.next(), r = this.substrToCursor(e + n2 + 1);
      }
    } else if (this.tokenType === 12) {
      let n2 = this.charCodeAt(this.tokenStart), o = n2 === me || n2 === re$1, i = this.tokenStart + o;
      for (; i < this.tokenEnd && B(this.charCodeAt(i)); i++)
        ;
      i === this.tokenStart + o && this.error("Integer is expected", this.tokenStart + o), Ce.call(this, i - this.tokenStart, Xt), t = this.substring(e, i), i + 1 === this.tokenEnd ? (this.next(), r = Kr.call(this)) : (Ce.call(this, i - this.tokenStart + 1, re$1), i + 2 === this.tokenEnd ? (this.next(), this.skipSC(), Qe.call(this, Ie), r = "-" + this.consume(10)) : ($t.call(this, i - this.tokenStart + 2, Ie), this.next(), r = this.substrToCursor(i + 1)));
    } else
      this.error();
    return t !== null && t.charCodeAt(0) === me && (t = t.substr(1)), r !== null && r.charCodeAt(0) === me && (r = r.substr(1)), { type: "AnPlusB", loc: this.getLocation(e, this.tokenStart), a: t, b: r };
  }
  function xc(e) {
    if (e.a) {
      let t = e.a === "+1" && "n" || e.a === "1" && "n" || e.a === "-1" && "-n" || e.a + "n";
      if (e.b) {
        let r = e.b[0] === "-" || e.b[0] === "+" ? e.b : "+" + e.b;
        this.tokenize(t + r);
      } else
        this.tokenize(t);
    } else
      this.tokenize(e.b);
  }
  var Zr = {};
  b$1(Zr, { generate: () => Sc, name: () => kc, parse: () => $r, structure: () => vc, walkContext: () => wc });
  function da(e) {
    return this.Raw(e, this.consumeUntilLeftCurlyBracketOrSemicolon, true);
  }
  function yc() {
    for (let e = 1, t; t = this.lookupType(e); e++) {
      if (t === 24)
        return true;
      if (t === 23 || t === 3)
        return false;
    }
    return false;
  }
  var kc = "Atrule";
  var wc = "atrule";
  var vc = { name: String, prelude: ["AtrulePrelude", "Raw", null], block: ["Block", null] };
  function $r(e = false) {
    let t = this.tokenStart, r, n2, o = null, i = null;
    switch (this.eat(3), r = this.substrToCursor(t + 1), n2 = r.toLowerCase(), this.skipSC(), this.eof === false && this.tokenType !== 23 && this.tokenType !== 17 && (this.parseAtrulePrelude ? o = this.parseWithFallback(this.AtrulePrelude.bind(this, r, e), da) : o = da.call(this, this.tokenIndex), this.skipSC()), this.tokenType) {
      case 17:
        this.next();
        break;
      case 23:
        hasOwnProperty.call(this.atrule, n2) && typeof this.atrule[n2].block == "function" ? i = this.atrule[n2].block.call(this, e) : i = this.Block(yc.call(this));
        break;
    }
    return { type: "Atrule", loc: this.getLocation(t, this.tokenStart), name: r, prelude: o, block: i };
  }
  function Sc(e) {
    this.token(3, "@" + e.name), e.prelude !== null && this.node(e.prelude), e.block ? this.node(e.block) : this.token(17, ";");
  }
  var en = {};
  b$1(en, { generate: () => Ec, name: () => Cc, parse: () => Jr, structure: () => Tc, walkContext: () => Ac });
  var Cc = "AtrulePrelude";
  var Ac = "atrulePrelude";
  var Tc = { children: [[]] };
  function Jr(e) {
    let t = null;
    return e !== null && (e = e.toLowerCase()), this.skipSC(), hasOwnProperty.call(this.atrule, e) && typeof this.atrule[e].prelude == "function" ? t = this.atrule[e].prelude.call(this) : t = this.readSequence(this.scope.AtrulePrelude), this.skipSC(), this.eof !== true && this.tokenType !== 23 && this.tokenType !== 17 && this.error("Semicolon or block is expected"), { type: "AtrulePrelude", loc: this.getLocationFromList(t), children: t };
  }
  function Ec(e) {
    this.children(e);
  }
  var nn = {};
  b$1(nn, { generate: () => Mc, name: () => Nc, parse: () => rn, structure: () => zc });
  var Lc = 36;
  var ga = 42;
  var Zt = 61;
  var Pc = 94;
  var tn = 124;
  var Ic = 126;
  function Dc() {
    this.eof && this.error("Unexpected end of input");
    let e = this.tokenStart, t = false;
    return this.isDelim(ga) ? (t = true, this.next()) : this.isDelim(tn) || this.eat(1), this.isDelim(tn) ? this.charCodeAt(this.tokenStart + 1) !== Zt ? (this.next(), this.eat(1)) : t && this.error("Identifier is expected", this.tokenEnd) : t && this.error("Vertical line is expected"), { type: "Identifier", loc: this.getLocation(e, this.tokenStart), name: this.substrToCursor(e) };
  }
  function Oc() {
    let e = this.tokenStart, t = this.charCodeAt(e);
    return t !== Zt && t !== Ic && t !== Pc && t !== Lc && t !== ga && t !== tn && this.error("Attribute selector (=, ~=, ^=, $=, *=, |=) is expected"), this.next(), t !== Zt && (this.isDelim(Zt) || this.error("Equal sign is expected"), this.next()), this.substrToCursor(e);
  }
  var Nc = "AttributeSelector";
  var zc = { name: "Identifier", matcher: [String, null], value: ["String", "Identifier", null], flags: [String, null] };
  function rn() {
    let e = this.tokenStart, t, r = null, n2 = null, o = null;
    return this.eat(19), this.skipSC(), t = Dc.call(this), this.skipSC(), this.tokenType !== 20 && (this.tokenType !== 1 && (r = Oc.call(this), this.skipSC(), n2 = this.tokenType === 5 ? this.String() : this.Identifier(), this.skipSC()), this.tokenType === 1 && (o = this.consume(1), this.skipSC())), this.eat(20), { type: "AttributeSelector", loc: this.getLocation(e, this.tokenStart), name: t, matcher: r, value: n2, flags: o };
  }
  function Mc(e) {
    this.token(9, "["), this.node(e.name), e.matcher !== null && (this.tokenize(e.matcher), this.node(e.value)), e.flags !== null && this.token(1, e.flags), this.token(9, "]");
  }
  var an = {};
  b$1(an, { generate: () => Uc, name: () => Bc, parse: () => on, structure: () => qc, walkContext: () => _c });
  var Rc = 38;
  function ya(e) {
    return this.Raw(e, null, true);
  }
  function ba() {
    return this.parseWithFallback(this.Rule, ya);
  }
  function xa(e) {
    return this.Raw(e, this.consumeUntilSemicolonIncluded, true);
  }
  function Fc() {
    if (this.tokenType === 17)
      return xa.call(this, this.tokenIndex);
    let e = this.parseWithFallback(this.Declaration, xa);
    return this.tokenType === 17 && this.next(), e;
  }
  var Bc = "Block";
  var _c = "block";
  var qc = { children: [["Atrule", "Rule", "Declaration"]] };
  function on(e) {
    let t = e ? Fc : ba, r = this.tokenStart, n2 = this.createList();
    this.eat(23);
    e:
      for (; !this.eof; )
        switch (this.tokenType) {
          case 24:
            break e;
          case 13:
          case 25:
            this.next();
            break;
          case 3:
            n2.push(this.parseWithFallback(this.Atrule.bind(this, e), ya));
            break;
          default:
            e && this.isDelim(Rc) ? n2.push(ba.call(this)) : n2.push(t.call(this));
        }
    return this.eof || this.eat(24), { type: "Block", loc: this.getLocation(r, this.tokenStart), children: n2 };
  }
  function Uc(e) {
    this.token(23, "{"), this.children(e, (t) => {
      t.type === "Declaration" && this.token(17, ";");
    }), this.token(24, "}");
  }
  var ln = {};
  b$1(ln, { generate: () => Hc, name: () => jc, parse: () => sn, structure: () => Wc });
  var jc = "Brackets";
  var Wc = { children: [[]] };
  function sn(e, t) {
    let r = this.tokenStart, n2 = null;
    return this.eat(19), n2 = e.call(this, t), this.eof || this.eat(20), { type: "Brackets", loc: this.getLocation(r, this.tokenStart), children: n2 };
  }
  function Hc(e) {
    this.token(9, "["), this.children(e), this.token(9, "]");
  }
  var un = {};
  b$1(un, { generate: () => Vc, name: () => Yc, parse: () => cn, structure: () => Gc });
  var Yc = "CDC";
  var Gc = [];
  function cn() {
    let e = this.tokenStart;
    return this.eat(15), { type: "CDC", loc: this.getLocation(e, this.tokenStart) };
  }
  function Vc() {
    this.token(15, "-->");
  }
  var hn = {};
  b$1(hn, { generate: () => Xc, name: () => Kc, parse: () => pn, structure: () => Qc });
  var Kc = "CDO";
  var Qc = [];
  function pn() {
    let e = this.tokenStart;
    return this.eat(14), { type: "CDO", loc: this.getLocation(e, this.tokenStart) };
  }
  function Xc() {
    this.token(14, "<!--");
  }
  var fn = {};
  b$1(fn, { generate: () => eu, name: () => Zc, parse: () => mn, structure: () => Jc });
  var $c = 46;
  var Zc = "ClassSelector";
  var Jc = { name: String };
  function mn() {
    return this.eatDelim($c), { type: "ClassSelector", loc: this.getLocation(this.tokenStart - 1, this.tokenEnd), name: this.consume(1) };
  }
  function eu(e) {
    this.token(9, "."), this.token(1, e.name);
  }
  var gn = {};
  b$1(gn, { generate: () => au, name: () => ou, parse: () => dn, structure: () => iu });
  var tu = 43;
  var ka = 47;
  var ru = 62;
  var nu = 126;
  var ou = "Combinator";
  var iu = { name: String };
  function dn() {
    let e = this.tokenStart, t;
    switch (this.tokenType) {
      case 13:
        t = " ";
        break;
      case 9:
        switch (this.charCodeAt(this.tokenStart)) {
          case ru:
          case tu:
          case nu:
            this.next();
            break;
          case ka:
            this.next(), this.eatIdent("deep"), this.eatDelim(ka);
            break;
          default:
            this.error("Combinator is expected");
        }
        t = this.substrToCursor(e);
        break;
    }
    return { type: "Combinator", loc: this.getLocation(e, this.tokenStart), name: t };
  }
  function au(e) {
    this.tokenize(e.name);
  }
  var xn = {};
  b$1(xn, { generate: () => pu, name: () => cu, parse: () => bn, structure: () => uu });
  var su = 42;
  var lu = 47;
  var cu = "Comment";
  var uu = { value: String };
  function bn() {
    let e = this.tokenStart, t = this.tokenEnd;
    return this.eat(25), t - e + 2 >= 2 && this.charCodeAt(t - 2) === su && this.charCodeAt(t - 1) === lu && (t -= 2), { type: "Comment", loc: this.getLocation(e, this.tokenStart), value: this.substring(e + 2, t) };
  }
  function pu(e) {
    this.token(25, "/*" + e.value + "*/");
  }
  var kn = {};
  b$1(kn, { generate: () => Su, name: () => ku, parse: () => yn, structure: () => vu, walkContext: () => wu });
  var va = 33;
  var hu = 35;
  var mu = 36;
  var fu = 38;
  var du = 42;
  var gu = 43;
  var wa = 47;
  function bu(e) {
    return this.Raw(e, this.consumeUntilExclamationMarkOrSemicolon, true);
  }
  function xu(e) {
    return this.Raw(e, this.consumeUntilExclamationMarkOrSemicolon, false);
  }
  function yu() {
    let e = this.tokenIndex, t = this.Value();
    return t.type !== "Raw" && this.eof === false && this.tokenType !== 17 && this.isDelim(va) === false && this.isBalanceEdge(e) === false && this.error(), t;
  }
  var ku = "Declaration";
  var wu = "declaration";
  var vu = { important: [Boolean, String], property: String, value: ["Value", "Raw"] };
  function yn() {
    let e = this.tokenStart, t = this.tokenIndex, r = Cu.call(this), n2 = Mt(r), o = n2 ? this.parseCustomProperty : this.parseValue, i = n2 ? xu : bu, s = false, u;
    this.skipSC(), this.eat(16);
    let c2 = this.tokenIndex;
    if (n2 || this.skipSC(), o ? u = this.parseWithFallback(yu, i) : u = i.call(this, this.tokenIndex), n2 && u.type === "Value" && u.children.isEmpty) {
      for (let a = c2 - this.tokenIndex; a <= 0; a++)
        if (this.lookupType(a) === 13) {
          u.children.appendData({ type: "WhiteSpace", loc: null, value: " " });
          break;
        }
    }
    return this.isDelim(va) && (s = Au.call(this), this.skipSC()), this.eof === false && this.tokenType !== 17 && this.isBalanceEdge(t) === false && this.error(), { type: "Declaration", loc: this.getLocation(e, this.tokenStart), important: s, property: r, value: u };
  }
  function Su(e) {
    this.token(1, e.property), this.token(16, ":"), this.node(e.value), e.important && (this.token(9, "!"), this.token(1, e.important === true ? "important" : e.important));
  }
  function Cu() {
    let e = this.tokenStart;
    if (this.tokenType === 9)
      switch (this.charCodeAt(this.tokenStart)) {
        case du:
        case mu:
        case gu:
        case hu:
        case fu:
          this.next();
          break;
        case wa:
          this.next(), this.isDelim(wa) && this.next();
          break;
      }
    return this.tokenType === 4 ? this.eat(4) : this.eat(1), this.substrToCursor(e);
  }
  function Au() {
    this.eat(9), this.skipSC();
    let e = this.consume(1);
    return e === "important" ? true : e;
  }
  var Sn = {};
  b$1(Sn, { generate: () => Pu, name: () => Eu, parse: () => vn, structure: () => Lu });
  var Tu = 38;
  function wn(e) {
    return this.Raw(e, this.consumeUntilSemicolonIncluded, true);
  }
  var Eu = "DeclarationList";
  var Lu = { children: [["Declaration", "Atrule", "Rule"]] };
  function vn() {
    let e = this.createList();
    for (; !this.eof; )
      switch (this.tokenType) {
        case 13:
        case 25:
        case 17:
          this.next();
          break;
        case 3:
          e.push(this.parseWithFallback(this.Atrule.bind(this, true), wn));
          break;
        default:
          this.isDelim(Tu) ? e.push(this.parseWithFallback(this.Rule, wn)) : e.push(this.parseWithFallback(this.Declaration, wn));
      }
    return { type: "DeclarationList", loc: this.getLocationFromList(e), children: e };
  }
  function Pu(e) {
    this.children(e, (t) => {
      t.type === "Declaration" && this.token(17, ";");
    });
  }
  var An = {};
  b$1(An, { generate: () => Ou, name: () => Iu, parse: () => Cn, structure: () => Du });
  var Iu = "Dimension";
  var Du = { value: String, unit: String };
  function Cn() {
    let e = this.tokenStart, t = this.consumeNumber(12);
    return { type: "Dimension", loc: this.getLocation(e, this.tokenStart), value: t, unit: this.substring(e + t.length, this.tokenStart) };
  }
  function Ou(e) {
    this.token(12, e.value + e.unit);
  }
  var En = {};
  b$1(En, { generate: () => Ru, name: () => Nu, parse: () => Tn, structure: () => Mu, walkContext: () => zu });
  var Nu = "Function";
  var zu = "function";
  var Mu = { name: String, children: [[]] };
  function Tn(e, t) {
    let r = this.tokenStart, n2 = this.consumeFunctionName(), o = n2.toLowerCase(), i;
    return i = t.hasOwnProperty(o) ? t[o].call(this, t) : e.call(this, t), this.eof || this.eat(22), { type: "Function", loc: this.getLocation(r, this.tokenStart), name: n2, children: i };
  }
  function Ru(e) {
    this.token(2, e.name + "("), this.children(e), this.token(22, ")");
  }
  var Pn = {};
  b$1(Pn, { generate: () => qu, name: () => Bu, parse: () => Ln, structure: () => _u, xxx: () => Fu });
  var Fu = "XXX";
  var Bu = "Hash";
  var _u = { value: String };
  function Ln() {
    let e = this.tokenStart;
    return this.eat(4), { type: "Hash", loc: this.getLocation(e, this.tokenStart), value: this.substrToCursor(e + 1) };
  }
  function qu(e) {
    this.token(4, "#" + e.value);
  }
  var Dn = {};
  b$1(Dn, { generate: () => Wu, name: () => Uu, parse: () => In, structure: () => ju });
  var Uu = "Identifier";
  var ju = { name: String };
  function In() {
    return { type: "Identifier", loc: this.getLocation(this.tokenStart, this.tokenEnd), name: this.consume(1) };
  }
  function Wu(e) {
    this.token(1, e.name);
  }
  var Nn = {};
  b$1(Nn, { generate: () => Gu, name: () => Hu, parse: () => On, structure: () => Yu });
  var Hu = "IdSelector";
  var Yu = { name: String };
  function On() {
    let e = this.tokenStart;
    return this.eat(4), { type: "IdSelector", loc: this.getLocation(e, this.tokenStart), name: this.substrToCursor(e + 1) };
  }
  function Gu(e) {
    this.token(9, "#" + e.name);
  }
  var Mn = {};
  b$1(Mn, { generate: () => Qu, name: () => Vu, parse: () => zn, structure: () => Ku });
  var Vu = "MediaFeature";
  var Ku = { name: String, value: ["Identifier", "Number", "Dimension", "Ratio", null] };
  function zn() {
    let e = this.tokenStart, t, r = null;
    if (this.eat(21), this.skipSC(), t = this.consume(1), this.skipSC(), this.tokenType !== 22) {
      switch (this.eat(16), this.skipSC(), this.tokenType) {
        case 10:
          this.lookupNonWSType(1) === 9 ? r = this.Ratio() : r = this.Number();
          break;
        case 12:
          r = this.Dimension();
          break;
        case 1:
          r = this.Identifier();
          break;
        default:
          this.error("Number, dimension, ratio or identifier is expected");
      }
      this.skipSC();
    }
    return this.eat(22), { type: "MediaFeature", loc: this.getLocation(e, this.tokenStart), name: t, value: r };
  }
  function Qu(e) {
    this.token(21, "("), this.token(1, e.name), e.value !== null && (this.token(16, ":"), this.node(e.value)), this.token(22, ")");
  }
  var Fn = {};
  b$1(Fn, { generate: () => Zu, name: () => Xu, parse: () => Rn, structure: () => $u });
  var Xu = "MediaQuery";
  var $u = { children: [["Identifier", "MediaFeature", "WhiteSpace"]] };
  function Rn() {
    let e = this.createList(), t = null;
    this.skipSC();
    e:
      for (; !this.eof; ) {
        switch (this.tokenType) {
          case 25:
          case 13:
            this.next();
            continue;
          case 1:
            t = this.Identifier();
            break;
          case 21:
            t = this.MediaFeature();
            break;
          default:
            break e;
        }
        e.push(t);
      }
    return t === null && this.error("Identifier or parenthesis is expected"), { type: "MediaQuery", loc: this.getLocationFromList(e), children: e };
  }
  function Zu(e) {
    this.children(e);
  }
  var _n = {};
  b$1(_n, { generate: () => tp, name: () => Ju, parse: () => Bn, structure: () => ep });
  var Ju = "MediaQueryList";
  var ep = { children: [["MediaQuery"]] };
  function Bn() {
    let e = this.createList();
    for (this.skipSC(); !this.eof && (e.push(this.MediaQuery()), this.tokenType === 18); )
      this.next();
    return { type: "MediaQueryList", loc: this.getLocationFromList(e), children: e };
  }
  function tp(e) {
    this.children(e, () => this.token(18, ","));
  }
  var Un = {};
  b$1(Un, { generate: () => ip, name: () => np, parse: () => qn, structure: () => op });
  var rp = 38;
  var np = "NestingSelector";
  var op = {};
  function qn() {
    let e = this.tokenStart;
    return this.eatDelim(rp), { type: "NestingSelector", loc: this.getLocation(e, this.tokenStart) };
  }
  function ip() {
    this.token(9, "&");
  }
  var Wn = {};
  b$1(Wn, { generate: () => lp, name: () => ap, parse: () => jn, structure: () => sp });
  var ap = "Nth";
  var sp = { nth: ["AnPlusB", "Identifier"], selector: ["SelectorList", null] };
  function jn() {
    this.skipSC();
    let e = this.tokenStart, t = e, r = null, n2;
    return this.lookupValue(0, "odd") || this.lookupValue(0, "even") ? n2 = this.Identifier() : n2 = this.AnPlusB(), t = this.tokenStart, this.skipSC(), this.lookupValue(0, "of") && (this.next(), r = this.SelectorList(), t = this.tokenStart), { type: "Nth", loc: this.getLocation(e, t), nth: n2, selector: r };
  }
  function lp(e) {
    this.node(e.nth), e.selector !== null && (this.token(1, "of"), this.node(e.selector));
  }
  var Yn = {};
  b$1(Yn, { generate: () => pp$a, name: () => cp, parse: () => Hn, structure: () => up });
  var cp = "Number";
  var up = { value: String };
  function Hn() {
    return { type: "Number", loc: this.getLocation(this.tokenStart, this.tokenEnd), value: this.consume(10) };
  }
  function pp$a(e) {
    this.token(10, e.value);
  }
  var Vn = {};
  b$1(Vn, { generate: () => fp, name: () => hp, parse: () => Gn, structure: () => mp });
  var hp = "Operator";
  var mp = { value: String };
  function Gn() {
    let e = this.tokenStart;
    return this.next(), { type: "Operator", loc: this.getLocation(e, this.tokenStart), value: this.substrToCursor(e) };
  }
  function fp(e) {
    this.tokenize(e.value);
  }
  var Qn = {};
  b$1(Qn, { generate: () => bp, name: () => dp, parse: () => Kn, structure: () => gp });
  var dp = "Parentheses";
  var gp = { children: [[]] };
  function Kn(e, t) {
    let r = this.tokenStart, n2 = null;
    return this.eat(21), n2 = e.call(this, t), this.eof || this.eat(22), { type: "Parentheses", loc: this.getLocation(r, this.tokenStart), children: n2 };
  }
  function bp(e) {
    this.token(21, "("), this.children(e), this.token(22, ")");
  }
  var $n = {};
  b$1($n, { generate: () => kp, name: () => xp, parse: () => Xn, structure: () => yp });
  var xp = "Percentage";
  var yp = { value: String };
  function Xn() {
    return { type: "Percentage", loc: this.getLocation(this.tokenStart, this.tokenEnd), value: this.consumeNumber(11) };
  }
  function kp(e) {
    this.token(11, e.value + "%");
  }
  var Jn = {};
  b$1(Jn, { generate: () => Cp, name: () => wp, parse: () => Zn, structure: () => Sp, walkContext: () => vp });
  var wp = "PseudoClassSelector";
  var vp = "function";
  var Sp = { name: String, children: [["Raw"], null] };
  function Zn() {
    let e = this.tokenStart, t = null, r, n2;
    return this.eat(16), this.tokenType === 2 ? (r = this.consumeFunctionName(), n2 = r.toLowerCase(), hasOwnProperty.call(this.pseudo, n2) ? (this.skipSC(), t = this.pseudo[n2].call(this), this.skipSC()) : (t = this.createList(), t.push(this.Raw(this.tokenIndex, null, false))), this.eat(22)) : r = this.consume(1), { type: "PseudoClassSelector", loc: this.getLocation(e, this.tokenStart), name: r, children: t };
  }
  function Cp(e) {
    this.token(16, ":"), e.children === null ? this.token(1, e.name) : (this.token(2, e.name + "("), this.children(e), this.token(22, ")"));
  }
  var to = {};
  b$1(to, { generate: () => Lp, name: () => Ap, parse: () => eo, structure: () => Ep, walkContext: () => Tp });
  var Ap = "PseudoElementSelector";
  var Tp = "function";
  var Ep = { name: String, children: [["Raw"], null] };
  function eo() {
    let e = this.tokenStart, t = null, r, n2;
    return this.eat(16), this.eat(16), this.tokenType === 2 ? (r = this.consumeFunctionName(), n2 = r.toLowerCase(), hasOwnProperty.call(this.pseudo, n2) ? (this.skipSC(), t = this.pseudo[n2].call(this), this.skipSC()) : (t = this.createList(), t.push(this.Raw(this.tokenIndex, null, false))), this.eat(22)) : r = this.consume(1), { type: "PseudoElementSelector", loc: this.getLocation(e, this.tokenStart), name: r, children: t };
  }
  function Lp(e) {
    this.token(16, ":"), this.token(16, ":"), e.children === null ? this.token(1, e.name) : (this.token(2, e.name + "("), this.children(e), this.token(22, ")"));
  }
  var no = {};
  b$1(no, { generate: () => Np, name: () => Dp, parse: () => ro, structure: () => Op });
  var Pp = 47;
  var Ip = 46;
  function Sa() {
    this.skipSC();
    let e = this.consume(10);
    for (let t = 0; t < e.length; t++) {
      let r = e.charCodeAt(t);
      !B(r) && r !== Ip && this.error("Unsigned number is expected", this.tokenStart - e.length + t);
    }
    return Number(e) === 0 && this.error("Zero number is not allowed", this.tokenStart - e.length), e;
  }
  var Dp = "Ratio";
  var Op = { left: String, right: String };
  function ro() {
    let e = this.tokenStart, t = Sa.call(this), r;
    return this.skipSC(), this.eatDelim(Pp), r = Sa.call(this), { type: "Ratio", loc: this.getLocation(e, this.tokenStart), left: t, right: r };
  }
  function Np(e) {
    this.token(10, e.left), this.token(9, "/"), this.token(10, e.right);
  }
  var io = {};
  b$1(io, { generate: () => Fp, name: () => Mp, parse: () => oo, structure: () => Rp });
  function zp() {
    return this.tokenIndex > 0 && this.lookupType(-1) === 13 ? this.tokenIndex > 1 ? this.getTokenStart(this.tokenIndex - 1) : this.firstCharOffset : this.tokenStart;
  }
  var Mp = "Raw";
  var Rp = { value: String };
  function oo(e, t, r) {
    let n2 = this.getTokenStart(e), o;
    return this.skipUntilBalanced(e, t || this.consumeUntilBalanceEnd), r && this.tokenStart > n2 ? o = zp.call(this) : o = this.tokenStart, { type: "Raw", loc: this.getLocation(n2, o), value: this.substring(n2, o) };
  }
  function Fp(e) {
    this.tokenize(e.value);
  }
  var so = {};
  b$1(so, { generate: () => jp, name: () => _p, parse: () => ao, structure: () => Up, walkContext: () => qp });
  function Ca(e) {
    return this.Raw(e, this.consumeUntilLeftCurlyBracket, true);
  }
  function Bp() {
    let e = this.SelectorList();
    return e.type !== "Raw" && this.eof === false && this.tokenType !== 23 && this.error(), e;
  }
  var _p = "Rule";
  var qp = "rule";
  var Up = { prelude: ["SelectorList", "Raw"], block: ["Block"] };
  function ao() {
    let e = this.tokenIndex, t = this.tokenStart, r, n2;
    return this.parseRulePrelude ? r = this.parseWithFallback(Bp, Ca) : r = Ca.call(this, e), n2 = this.Block(true), { type: "Rule", loc: this.getLocation(t, this.tokenStart), prelude: r, block: n2 };
  }
  function jp(e) {
    this.node(e.prelude), this.node(e.block);
  }
  var co = {};
  b$1(co, { generate: () => Yp, name: () => Wp, parse: () => lo, structure: () => Hp });
  var Wp = "Selector";
  var Hp = { children: [["TypeSelector", "IdSelector", "ClassSelector", "AttributeSelector", "PseudoClassSelector", "PseudoElementSelector", "Combinator", "WhiteSpace"]] };
  function lo() {
    let e = this.readSequence(this.scope.Selector);
    return this.getFirstListNode(e) === null && this.error("Selector is expected"), { type: "Selector", loc: this.getLocationFromList(e), children: e };
  }
  function Yp(e) {
    this.children(e);
  }
  var po = {};
  b$1(po, { generate: () => Qp, name: () => Gp, parse: () => uo, structure: () => Kp, walkContext: () => Vp });
  var Gp = "SelectorList";
  var Vp = "selector";
  var Kp = { children: [["Selector", "Raw"]] };
  function uo() {
    let e = this.createList();
    for (; !this.eof; ) {
      if (e.push(this.Selector()), this.tokenType === 18) {
        this.next();
        continue;
      }
      break;
    }
    return { type: "SelectorList", loc: this.getLocationFromList(e), children: e };
  }
  function Qp(e) {
    this.children(e, () => this.token(18, ","));
  }
  var bo = {};
  b$1(bo, { generate: () => Zp, name: () => Xp, parse: () => go, structure: () => $p });
  var fo = {};
  b$1(fo, { decode: () => ft, encode: () => mo });
  var ho = 92;
  var Aa = 34;
  var Ta = 39;
  function ft(e) {
    let t = e.length, r = e.charCodeAt(0), n2 = r === Aa || r === Ta ? 1 : 0, o = n2 === 1 && t > 1 && e.charCodeAt(t - 1) === r ? t - 2 : t - 1, i = "";
    for (let s = n2; s <= o; s++) {
      let u = e.charCodeAt(s);
      if (u === ho) {
        if (s === o) {
          s !== t - 1 && (i = e.substr(s + 1));
          break;
        }
        if (u = e.charCodeAt(++s), $(ho, u)) {
          let c2 = s - 1, a = se(e, c2);
          s = a - 1, i += Re(e.substring(c2 + 1, a));
        } else
          u === 13 && e.charCodeAt(s + 1) === 10 && s++;
      } else
        i += e[s];
    }
    return i;
  }
  function mo(e, t) {
    let r = t ? "'" : '"', n2 = t ? Ta : Aa, o = "", i = false;
    for (let s = 0; s < e.length; s++) {
      let u = e.charCodeAt(s);
      if (u === 0) {
        o += "\uFFFD";
        continue;
      }
      if (u <= 31 || u === 127) {
        o += "\\" + u.toString(16), i = true;
        continue;
      }
      u === n2 || u === ho ? (o += "\\" + e.charAt(s), i = false) : (i && (ee(u) || pe(u)) && (o += " "), o += e.charAt(s), i = false);
    }
    return r + o + r;
  }
  var Xp = "String";
  var $p = { value: String };
  function go() {
    return { type: "String", loc: this.getLocation(this.tokenStart, this.tokenEnd), value: ft(this.consume(5)) };
  }
  function Zp(e) {
    this.token(5, mo(e.value));
  }
  var yo = {};
  b$1(yo, { generate: () => nh, name: () => eh, parse: () => xo, structure: () => rh, walkContext: () => th });
  var Jp = 33;
  function Ea(e) {
    return this.Raw(e, null, false);
  }
  var eh = "StyleSheet";
  var th = "stylesheet";
  var rh = { children: [["Comment", "CDO", "CDC", "Atrule", "Rule", "Raw"]] };
  function xo() {
    let e = this.tokenStart, t = this.createList(), r;
    for (; !this.eof; ) {
      switch (this.tokenType) {
        case 13:
          this.next();
          continue;
        case 25:
          if (this.charCodeAt(this.tokenStart + 2) !== Jp) {
            this.next();
            continue;
          }
          r = this.Comment();
          break;
        case 14:
          r = this.CDO();
          break;
        case 15:
          r = this.CDC();
          break;
        case 3:
          r = this.parseWithFallback(this.Atrule, Ea);
          break;
        default:
          r = this.parseWithFallback(this.Rule, Ea);
      }
      t.push(r);
    }
    return { type: "StyleSheet", loc: this.getLocation(e, this.tokenStart), children: t };
  }
  function nh(e) {
    this.children(e);
  }
  var vo = {};
  b$1(vo, { generate: () => sh, name: () => ih, parse: () => wo, structure: () => ah });
  var oh = 42;
  var La = 124;
  function ko() {
    this.tokenType !== 1 && this.isDelim(oh) === false && this.error("Identifier or asterisk is expected"), this.next();
  }
  var ih = "TypeSelector";
  var ah = { name: String };
  function wo() {
    let e = this.tokenStart;
    return this.isDelim(La) ? (this.next(), ko.call(this)) : (ko.call(this), this.isDelim(La) && (this.next(), ko.call(this))), { type: "TypeSelector", loc: this.getLocation(e, this.tokenStart), name: this.substrToCursor(e) };
  }
  function sh(e) {
    this.tokenize(e.name);
  }
  var Ao = {};
  b$1(Ao, { generate: () => hh, name: () => uh, parse: () => Co, structure: () => ph });
  var Pa = 43;
  var Ia = 45;
  var So = 63;
  function dt(e, t) {
    let r = 0;
    for (let n2 = this.tokenStart + e; n2 < this.tokenEnd; n2++) {
      let o = this.charCodeAt(n2);
      if (o === Ia && t && r !== 0)
        return dt.call(this, e + r + 1, false), -1;
      ee(o) || this.error(t && r !== 0 ? "Hyphen minus" + (r < 6 ? " or hex digit" : "") + " is expected" : r < 6 ? "Hex digit is expected" : "Unexpected input", n2), ++r > 6 && this.error("Too many hex digits", n2);
    }
    return this.next(), r;
  }
  function Jt(e) {
    let t = 0;
    for (; this.isDelim(So); )
      ++t > e && this.error("Too many question marks"), this.next();
  }
  function lh(e) {
    this.charCodeAt(this.tokenStart) !== e && this.error((e === Pa ? "Plus sign" : "Hyphen minus") + " is expected");
  }
  function ch() {
    let e = 0;
    switch (this.tokenType) {
      case 10:
        if (e = dt.call(this, 1, true), this.isDelim(So)) {
          Jt.call(this, 6 - e);
          break;
        }
        if (this.tokenType === 12 || this.tokenType === 10) {
          lh.call(this, Ia), dt.call(this, 1, false);
          break;
        }
        break;
      case 12:
        e = dt.call(this, 1, true), e > 0 && Jt.call(this, 6 - e);
        break;
      default:
        if (this.eatDelim(Pa), this.tokenType === 1) {
          e = dt.call(this, 0, true), e > 0 && Jt.call(this, 6 - e);
          break;
        }
        if (this.isDelim(So)) {
          this.next(), Jt.call(this, 5);
          break;
        }
        this.error("Hex digit or question mark is expected");
    }
  }
  var uh = "UnicodeRange";
  var ph = { value: String };
  function Co() {
    let e = this.tokenStart;
    return this.eatIdent("u"), ch.call(this), { type: "UnicodeRange", loc: this.getLocation(e, this.tokenStart), value: this.substrToCursor(e) };
  }
  function hh(e) {
    this.tokenize(e.value);
  }
  var Do = {};
  b$1(Do, { generate: () => yh, name: () => bh, parse: () => Io, structure: () => xh });
  var Po = {};
  b$1(Po, { decode: () => Eo, encode: () => Lo });
  var mh = 32;
  var To = 92;
  var fh = 34;
  var dh = 39;
  var gh = 40;
  var Da = 41;
  function Eo(e) {
    let t = e.length, r = 4, n2 = e.charCodeAt(t - 1) === Da ? t - 2 : t - 1, o = "";
    for (; r < n2 && pe(e.charCodeAt(r)); )
      r++;
    for (; r < n2 && pe(e.charCodeAt(n2)); )
      n2--;
    for (let i = r; i <= n2; i++) {
      let s = e.charCodeAt(i);
      if (s === To) {
        if (i === n2) {
          i !== t - 1 && (o = e.substr(i + 1));
          break;
        }
        if (s = e.charCodeAt(++i), $(To, s)) {
          let u = i - 1, c2 = se(e, u);
          i = c2 - 1, o += Re(e.substring(u + 1, c2));
        } else
          s === 13 && e.charCodeAt(i + 1) === 10 && i++;
      } else
        o += e[i];
    }
    return o;
  }
  function Lo(e) {
    let t = "", r = false;
    for (let n2 = 0; n2 < e.length; n2++) {
      let o = e.charCodeAt(n2);
      if (o === 0) {
        t += "\uFFFD";
        continue;
      }
      if (o <= 31 || o === 127) {
        t += "\\" + o.toString(16), r = true;
        continue;
      }
      o === mh || o === To || o === fh || o === dh || o === gh || o === Da ? (t += "\\" + e.charAt(n2), r = false) : (r && ee(o) && (t += " "), t += e.charAt(n2), r = false);
    }
    return "url(" + t + ")";
  }
  var bh = "Url";
  var xh = { value: String };
  function Io() {
    let e = this.tokenStart, t;
    switch (this.tokenType) {
      case 7:
        t = Eo(this.consume(7));
        break;
      case 2:
        this.cmpStr(this.tokenStart, this.tokenEnd, "url(") || this.error("Function name must be `url`"), this.eat(2), this.skipSC(), t = ft(this.consume(5)), this.skipSC(), this.eof || this.eat(22);
        break;
      default:
        this.error("Url or Function is expected");
    }
    return { type: "Url", loc: this.getLocation(e, this.tokenStart), value: t };
  }
  function yh(e) {
    this.token(7, Lo(e.value));
  }
  var No = {};
  b$1(No, { generate: () => vh, name: () => kh, parse: () => Oo, structure: () => wh });
  var kh = "Value";
  var wh = { children: [[]] };
  function Oo() {
    let e = this.tokenStart, t = this.readSequence(this.scope.Value);
    return { type: "Value", loc: this.getLocation(e, this.tokenStart), children: t };
  }
  function vh(e) {
    this.children(e);
  }
  var Mo = {};
  b$1(Mo, { generate: () => Th, name: () => Ch, parse: () => zo, structure: () => Ah });
  var Sh = Object.freeze({ type: "WhiteSpace", loc: null, value: " " });
  var Ch = "WhiteSpace";
  var Ah = { value: String };
  function zo() {
    return this.eat(13), Sh;
  }
  function Th(e) {
    this.token(13, e.value);
  }
  var Oa = { generic: true, ...fa, node: gt };
  var Ro = {};
  b$1(Ro, { AtrulePrelude: () => za, Selector: () => Ra, Value: () => qa });
  var Eh = 35;
  var Lh = 42;
  var Na = 43;
  var Ph = 45;
  var Ih = 47;
  var Dh = 117;
  function bt(e) {
    switch (this.tokenType) {
      case 4:
        return this.Hash();
      case 18:
        return this.Operator();
      case 21:
        return this.Parentheses(this.readSequence, e.recognizer);
      case 19:
        return this.Brackets(this.readSequence, e.recognizer);
      case 5:
        return this.String();
      case 12:
        return this.Dimension();
      case 11:
        return this.Percentage();
      case 10:
        return this.Number();
      case 2:
        return this.cmpStr(this.tokenStart, this.tokenEnd, "url(") ? this.Url() : this.Function(this.readSequence, e.recognizer);
      case 7:
        return this.Url();
      case 1:
        return this.cmpChar(this.tokenStart, Dh) && this.cmpChar(this.tokenStart + 1, Na) ? this.UnicodeRange() : this.Identifier();
      case 9: {
        let t = this.charCodeAt(this.tokenStart);
        if (t === Ih || t === Lh || t === Na || t === Ph)
          return this.Operator();
        t === Eh && this.error("Hex or identifier is expected", this.tokenStart + 1);
        break;
      }
    }
  }
  var za = { getNode: bt };
  var Oh = 35;
  var Nh = 38;
  var zh = 42;
  var Mh = 43;
  var Rh = 47;
  var Ma = 46;
  var Fh = 62;
  var Bh = 124;
  var _h = 126;
  function qh(e, t) {
    t.last !== null && t.last.type !== "Combinator" && e !== null && e.type !== "Combinator" && t.push({ type: "Combinator", loc: null, name: " " });
  }
  function Uh() {
    switch (this.tokenType) {
      case 19:
        return this.AttributeSelector();
      case 4:
        return this.IdSelector();
      case 16:
        return this.lookupType(1) === 16 ? this.PseudoElementSelector() : this.PseudoClassSelector();
      case 1:
        return this.TypeSelector();
      case 10:
      case 11:
        return this.Percentage();
      case 12:
        this.charCodeAt(this.tokenStart) === Ma && this.error("Identifier is expected", this.tokenStart + 1);
        break;
      case 9: {
        switch (this.charCodeAt(this.tokenStart)) {
          case Mh:
          case Fh:
          case _h:
          case Rh:
            return this.Combinator();
          case Ma:
            return this.ClassSelector();
          case zh:
          case Bh:
            return this.TypeSelector();
          case Oh:
            return this.IdSelector();
          case Nh:
            return this.NestingSelector();
        }
        break;
      }
    }
  }
  var Ra = { onWhiteSpace: qh, getNode: Uh };
  function Fa() {
    return this.createSingleNodeList(this.Raw(this.tokenIndex, null, false));
  }
  function Ba() {
    let e = this.createList();
    if (this.skipSC(), e.push(this.Identifier()), this.skipSC(), this.tokenType === 18) {
      e.push(this.Operator());
      let t = this.tokenIndex, r = this.parseCustomProperty ? this.Value(null) : this.Raw(this.tokenIndex, this.consumeUntilExclamationMarkOrSemicolon, false);
      if (r.type === "Value" && r.children.isEmpty) {
        for (let n2 = t - this.tokenIndex; n2 <= 0; n2++)
          if (this.lookupType(n2) === 13) {
            r.children.appendData({ type: "WhiteSpace", loc: null, value: " " });
            break;
          }
      }
      e.push(r);
    }
    return e;
  }
  function _a(e) {
    return e !== null && e.type === "Operator" && (e.value[e.value.length - 1] === "-" || e.value[e.value.length - 1] === "+");
  }
  var qa = { getNode: bt, onWhiteSpace(e, t) {
    _a(e) && (e.value = " " + e.value), _a(t.last) && (t.last.value += " ");
  }, expression: Fa, var: Ba };
  var Ua = { parse: { prelude: null, block() {
    return this.Block(true);
  } } };
  var ja = { parse: { prelude() {
    let e = this.createList();
    switch (this.skipSC(), this.tokenType) {
      case 5:
        e.push(this.String());
        break;
      case 7:
      case 2:
        e.push(this.Url());
        break;
      default:
        this.error("String or url() is expected");
    }
    return (this.lookupNonWSType(0) === 1 || this.lookupNonWSType(0) === 21) && e.push(this.MediaQueryList()), e;
  }, block: null } };
  var Wa = { parse: { prelude() {
    return this.createSingleNodeList(this.MediaQueryList());
  }, block(e = false) {
    return this.Block(e);
  } } };
  var Ha = { parse: { prelude() {
    return this.createSingleNodeList(this.SelectorList());
  }, block() {
    return this.Block(true);
  } } };
  var Ya = { parse: { prelude() {
    return this.createSingleNodeList(this.SelectorList());
  }, block() {
    return this.Block(true);
  } } };
  function jh() {
    return this.createSingleNodeList(this.Raw(this.tokenIndex, null, false));
  }
  function Wh() {
    return this.skipSC(), this.tokenType === 1 && this.lookupNonWSType(1) === 16 ? this.createSingleNodeList(this.Declaration()) : Ga.call(this);
  }
  function Ga() {
    let e = this.createList(), t;
    this.skipSC();
    e:
      for (; !this.eof; ) {
        switch (this.tokenType) {
          case 25:
          case 13:
            this.next();
            continue;
          case 2:
            t = this.Function(jh, this.scope.AtrulePrelude);
            break;
          case 1:
            t = this.Identifier();
            break;
          case 21:
            t = this.Parentheses(Wh, this.scope.AtrulePrelude);
            break;
          default:
            break e;
        }
        e.push(t);
      }
    return e;
  }
  var Va = { parse: { prelude() {
    let e = Ga.call(this);
    return this.getFirstListNode(e) === null && this.error("Condition is expected"), e;
  }, block(e = false) {
    return this.Block(e);
  } } };
  var Ka = { "font-face": Ua, import: ja, media: Wa, nest: Ha, page: Ya, supports: Va };
  var De = { parse() {
    return this.createSingleNodeList(this.SelectorList());
  } };
  var Fo = { parse() {
    return this.createSingleNodeList(this.Selector());
  } };
  var Qa = { parse() {
    return this.createSingleNodeList(this.Identifier());
  } };
  var er = { parse() {
    return this.createSingleNodeList(this.Nth());
  } };
  var Xa = { dir: Qa, has: De, lang: Qa, matches: De, is: De, "-moz-any": De, "-webkit-any": De, where: De, not: De, "nth-child": er, "nth-last-child": er, "nth-last-of-type": er, "nth-of-type": er, slotted: Fo, host: Fo, "host-context": Fo };
  var Bo = {};
  b$1(Bo, { AnPlusB: () => Qr, Atrule: () => $r, AtrulePrelude: () => Jr, AttributeSelector: () => rn, Block: () => on, Brackets: () => sn, CDC: () => cn, CDO: () => pn, ClassSelector: () => mn, Combinator: () => dn, Comment: () => bn, Declaration: () => yn, DeclarationList: () => vn, Dimension: () => Cn, Function: () => Tn, Hash: () => Ln, IdSelector: () => On, Identifier: () => In, MediaFeature: () => zn, MediaQuery: () => Rn, MediaQueryList: () => Bn, NestingSelector: () => qn, Nth: () => jn, Number: () => Hn, Operator: () => Gn, Parentheses: () => Kn, Percentage: () => Xn, PseudoClassSelector: () => Zn, PseudoElementSelector: () => eo, Ratio: () => ro, Raw: () => oo, Rule: () => ao, Selector: () => lo, SelectorList: () => uo, String: () => go, StyleSheet: () => xo, TypeSelector: () => wo, UnicodeRange: () => Co, Url: () => Io, Value: () => Oo, WhiteSpace: () => zo });
  var $a = { parseContext: { default: "StyleSheet", stylesheet: "StyleSheet", atrule: "Atrule", atrulePrelude(e) {
    return this.AtrulePrelude(e.atrule ? String(e.atrule) : null);
  }, mediaQueryList: "MediaQueryList", mediaQuery: "MediaQuery", rule: "Rule", selectorList: "SelectorList", selector: "Selector", block() {
    return this.Block(true);
  }, declarationList: "DeclarationList", declaration: "Declaration", value: "Value" }, scope: Ro, atrule: Ka, pseudo: Xa, node: Bo };
  var Za = { node: gt };
  var Ja = Vr({ ...Oa, ...$a, ...Za });
  var ts = {};
  b$1(ts, { decode: () => Hh, encode: () => Yh });
  var es = 92;
  function Hh(e) {
    let t = e.length - 1, r = "";
    for (let n2 = 0; n2 < e.length; n2++) {
      let o = e.charCodeAt(n2);
      if (o === es) {
        if (n2 === t)
          break;
        if (o = e.charCodeAt(++n2), $(es, o)) {
          let i = n2 - 1, s = se(e, i);
          n2 = s - 1, r += Re(e.substring(i + 1, s));
        } else
          o === 13 && e.charCodeAt(n2 + 1) === 10 && n2++;
      } else
        r += e[n2];
    }
    return r;
  }
  function Yh(e) {
    let t = "";
    if (e.length === 1 && e.charCodeAt(0) === 45)
      return "\\-";
    for (let r = 0; r < e.length; r++) {
      let n2 = e.charCodeAt(r);
      if (n2 === 0) {
        t += "\uFFFD";
        continue;
      }
      if (n2 <= 31 || n2 === 127 || n2 >= 48 && n2 <= 57 && (r === 0 || r === 1 && e.charCodeAt(0) === 45)) {
        t += "\\" + n2.toString(16) + " ";
        continue;
      }
      Ne(n2) ? t += e.charAt(r) : t += "\\" + e.charAt(r);
    }
    return t;
  }
  var { tokenize: fb, parse: db, generate: gb, lexer: bb, createLexer: xb, walk: yb, find: kb, findLast: wb, findAll: vb, toPlainObject: Sb, fromPlainObject: Cb, fork: Ab } = Ja;
  var EOF = 0;
  var Ident = 1;
  var Function$1 = 2;
  var Delim = 9;
  var Number$1 = 10;
  var Dimension = 12;
  var WhiteSpace = 13;
  var Colon = 16;
  var LeftParenthesis = 21;
  var RightParenthesis = 22;
  var LeftCurlyBracket = 23;
  var Comment = 25;
  function isDigit(code) {
    return code >= 48 && code <= 57;
  }
  function isUppercaseLetter(code) {
    return code >= 65 && code <= 90;
  }
  function isLowercaseLetter(code) {
    return code >= 97 && code <= 122;
  }
  function isLetter(code) {
    return isUppercaseLetter(code) || isLowercaseLetter(code);
  }
  function isNonAscii(code) {
    return code >= 128;
  }
  function isNameStart(code) {
    return isLetter(code) || isNonAscii(code) || code === 95;
  }
  function isNonPrintable(code) {
    return code >= 0 && code <= 8 || code === 11 || code >= 14 && code <= 31 || code === 127;
  }
  function isNewline(code) {
    return code === 10 || code === 13 || code === 12;
  }
  function isWhiteSpace(code) {
    return isNewline(code) || code === 32 || code === 9;
  }
  var CATEGORY = new Array(128);
  var EofCategory = 128;
  var WhiteSpaceCategory = 130;
  var DigitCategory = 131;
  var NameStartCategory = 132;
  var NonPrintableCategory = 133;
  for (let i = 0; i < CATEGORY.length; i++) {
    CATEGORY[i] = isWhiteSpace(i) && WhiteSpaceCategory || isDigit(i) && DigitCategory || isNameStart(i) && NameStartCategory || isNonPrintable(i) && NonPrintableCategory || i || EofCategory;
  }
  var name = "Comparison";
  var structure = {
    value: String
  };
  function parse$3() {
    const start = this.tokenStart;
    const char1 = this.consume(Delim);
    if (char1 !== "<" && char1 !== ">" && char1 !== "=") {
      this.error("Malformed comparison operator");
    }
    let char2;
    if (this.tokenType === Delim) {
      char2 = this.consume(Delim);
      if (char2 !== "=") {
        this.error("Malformed comparison operator");
      }
    }
    if (this.tokenType === Delim) {
      this.error("Malformed comparison operator");
    }
    const value = char2 ? `${char1}${char2}` : char1;
    return {
      type: "Comparison",
      loc: this.getLocation(start, this.tokenStart),
      value
    };
  }
  function generate(node2) {
    for (let index = 0; index < node2.value.length; index++) {
      this.token(Delim, node2.value.charAt(index));
    }
  }
  var comparison = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    name,
    structure,
    parse: parse$3,
    generate
  });
  var name$1 = "ContainerFeatureStyle";
  var structure$1 = {
    name: String,
    value: ["Function", "Identifier", "Number", "Dimension", "QueryCSSFunction", "Ratio", null]
  };
  function parse$4() {
    const start = this.tokenStart;
    let value = null;
    const function_name = this.consumeFunctionName();
    if (function_name !== "style") {
      this.error('Unknown container style query identifier; "style" is expected');
    }
    this.skipSC();
    const name2 = this.consume(Ident);
    this.skipSC();
    if (this.tokenType !== RightParenthesis) {
      this.eat(Colon);
      this.skipSC();
      switch (this.tokenType) {
        case Number$1:
          if (this.lookupNonWSType(1) === Delim) {
            value = this.Ratio();
          } else {
            value = this.Number();
          }
          break;
        case Dimension:
          value = this.Dimension();
          break;
        case Function$1:
          value = this.QueryCSSFunction();
          break;
        case Ident:
          value = this.Identifier();
          break;
        default:
          this.error("Number, dimension, ratio, function or identifier is expected");
          break;
      }
      this.skipSC();
    }
    this.eat(RightParenthesis);
    return {
      type: "ContainerFeatureStyle",
      loc: this.getLocation(start, this.tokenStart),
      name: name2,
      value
    };
  }
  function generate$1(node2) {
    this.token(Function$1, "style(");
    this.token(Ident, node2.name);
    if (node2.value !== null) {
      this.token(Colon, ":");
      this.node(node2.value);
    }
    this.token(RightParenthesis, ")");
  }
  var container_feature_style = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    name: name$1,
    structure: structure$1,
    parse: parse$4,
    generate: generate$1
  });
  function lookahead_is_range() {
    let type;
    let offset2 = 0;
    let count = 0;
    let delim_found = false;
    let no_colon = true;
    do {
      type = this.lookupNonWSType(offset2++);
      if (type !== WhiteSpace) {
        count++;
      }
      if (type === Delim) {
        delim_found = true;
      }
      if (type === Colon) {
        no_colon = false;
      }
      if (type === LeftCurlyBracket || type === RightParenthesis) {
        break;
      }
    } while (type !== EOF && count <= 6);
    return delim_found && no_colon;
  }
  var CONTAINER_QUERY_KEYWORDS = /* @__PURE__ */ new Set(["none", "and", "not", "or"]);
  var name$2 = "ContainerQuery";
  var structure$2 = {
    name: "Identifier",
    children: [[
      "Identifier",
      "QueryFeature",
      "QueryFeatureRange",
      "ContainerFeatureStyle",
      "WhiteSpace"
    ]]
  };
  function parse$5() {
    const start = this.tokenStart;
    const children = this.createList();
    let child = null;
    let name2 = null;
    if (this.tokenType === Ident) {
      const container_name = this.substring(this.tokenStart, this.tokenEnd);
      if (!CONTAINER_QUERY_KEYWORDS.has(container_name.toLowerCase())) {
        name2 = container_name;
        this.eatIdent(container_name);
      }
    }
    this.skipSC();
    scan:
      while (!this.eof) {
        switch (this.tokenType) {
          case Comment:
          case WhiteSpace:
            this.next();
            continue;
          case Ident:
            child = this.Identifier();
            break;
          case Function$1:
            child = this.ContainerFeatureStyle();
            break;
          case LeftParenthesis:
            child = lookahead_is_range.call(this) ? this.QueryFeatureRange() : this.QueryFeature();
            break;
          default:
            break scan;
        }
        children.push(child);
      }
    if (child === null) {
      this.error("Identifier or parenthesis is expected");
    }
    return {
      type: "ContainerQuery",
      loc: this.getLocation(start, this.tokenStart - 1),
      name: name2,
      children
    };
  }
  function generate$2(node2) {
    if (typeof node2.name === "string") {
      this.token(Ident, node2.name);
    }
    this.children(node2);
  }
  var container_query = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    name: name$2,
    structure: structure$2,
    parse: parse$5,
    generate: generate$2
  });
  var name$3 = "MediaQuery";
  var structure$3 = {
    children: [[
      "Identifier",
      "QueryFeature",
      "QueryFeatureRange",
      "WhiteSpace"
    ]]
  };
  function parse$6() {
    const children = this.createList();
    let child = null;
    this.skipSC();
    scan:
      while (!this.eof) {
        switch (this.tokenType) {
          case Comment:
          case WhiteSpace:
            this.next();
            continue;
          case Ident:
            child = this.Identifier();
            break;
          case LeftParenthesis:
            child = lookahead_is_range.call(this) ? this.QueryFeatureRange() : this.QueryFeature();
            break;
          default:
            break scan;
        }
        children.push(child);
      }
    if (child === null) {
      this.error("Identifier or parenthesis is expected");
    }
    return {
      type: "MediaQuery",
      loc: this.getLocationFromList(children),
      children
    };
  }
  function generate$3(node2) {
    this.children(node2);
  }
  var media_query = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    name: name$3,
    structure: structure$3,
    parse: parse$6,
    generate: generate$3
  });
  var name$4 = "QueryFeature";
  var structure$4 = {
    name: String,
    value: ["Identifier", "Number", "Dimension", "QueryCSSFunction", "Ratio", null]
  };
  function parse$7() {
    const start = this.tokenStart;
    let value = null;
    this.eat(LeftParenthesis);
    this.skipSC();
    const name2 = this.consume(Ident);
    this.skipSC();
    if (this.tokenType !== RightParenthesis) {
      this.eat(Colon);
      this.skipSC();
      switch (this.tokenType) {
        case Number$1:
          if (this.lookupNonWSType(1) === Delim) {
            value = this.Ratio();
          } else {
            value = this.Number();
          }
          break;
        case Dimension:
          value = this.Dimension();
          break;
        case Function$1:
          value = this.QueryCSSFunction();
          break;
        case Ident:
          value = this.Identifier();
          break;
        default:
          this.error("Number, dimension, ratio, function, or identifier is expected");
          break;
      }
      this.skipSC();
    }
    this.eat(RightParenthesis);
    return {
      type: "QueryFeature",
      loc: this.getLocation(start, this.tokenStart),
      name: name2,
      value
    };
  }
  function generate$4(node2) {
    this.token(LeftParenthesis, "(");
    this.token(Ident, node2.name);
    if (node2.value !== null) {
      this.token(Colon, ":");
      this.node(node2.value);
    }
    this.token(RightParenthesis, ")");
  }
  var query_feature = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    name: name$4,
    structure: structure$4,
    parse: parse$7,
    generate: generate$4
  });
  var name$5 = "QueryFeatureRange";
  var structure$5 = {
    name: String,
    value: ["Identifier", "Number", "Comparison", "Dimension", "QueryCSSFunction", "Ratio", null]
  };
  function lookup_non_WS_type_and_value(offset2, type, referenceStr) {
    let current_type;
    do {
      current_type = this.lookupType(offset2++);
      if (current_type !== WhiteSpace) {
        break;
      }
    } while (current_type !== 0);
    return current_type === type ? this.lookupValue(offset2 - 1, referenceStr) : false;
  }
  function parse$8() {
    const start = this.tokenStart;
    const children = this.createList();
    let child = null;
    this.eat(LeftParenthesis);
    this.skipSC();
    while (!this.eof && this.tokenType !== RightParenthesis) {
      switch (this.tokenType) {
        case Number$1:
          if (lookup_non_WS_type_and_value.call(this, 1, Delim, "/")) {
            child = this.Ratio();
          } else {
            child = this.Number();
          }
          break;
        case Delim:
          child = this.Comparison();
          break;
        case Dimension:
          child = this.Dimension();
          break;
        case Function$1:
          child = this.QueryCSSFunction();
          break;
        case Ident:
          child = this.Identifier();
          break;
        default:
          this.error("Number, dimension, comparison, ratio, function, or identifier is expected");
          break;
      }
      children.push(child);
      this.skipSC();
    }
    this.eat(RightParenthesis);
    return {
      type: "QueryFeatureRange",
      loc: this.getLocation(start, this.tokenStart),
      children
    };
  }
  function generate$5(node2) {
    this.children(node2);
  }
  var query_feature_range = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    name: name$5,
    structure: structure$5,
    parse: parse$8,
    generate: generate$5
  });
  var QUERY_CSS_FUNCTIONS = /* @__PURE__ */ new Set(["calc", "clamp", "min", "max"]);
  var name$6 = "QueryCSSFunction";
  var structure$6 = {
    name: String,
    expression: String
  };
  function parse$9() {
    const start = this.tokenStart;
    const name2 = this.consumeFunctionName();
    if (!QUERY_CSS_FUNCTIONS.has(name2)) {
      this.error('Unknown query single value function; expected: "calc", "clamp", "max", min"');
    }
    const body = this.Raw(this.tokenIndex, null, false);
    this.eat(RightParenthesis);
    return {
      type: "QueryCSSFunction",
      loc: this.getLocation(start, this.tokenStart),
      name: name2,
      expression: body.value
    };
  }
  function generate$6(node2) {
    this.token(Function, `${node2.name}(`);
    this.node(node2.expression);
    this.token(RightParenthesis, ")");
  }
  var query_css_function = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    name: name$6,
    structure: structure$6,
    parse: parse$9,
    generate: generate$6
  });
  var node = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    Comparison: comparison,
    ContainerFeatureStyle: container_feature_style,
    ContainerQuery: container_query,
    MediaQuery: media_query,
    QueryFeature: query_feature,
    QueryFeatureRange: query_feature_range,
    QueryCSSFunction: query_css_function
  });
  var cqSyntax = Ab({
    atrule: {
      container: {
        parse: {
          prelude() {
            return this.createSingleNodeList(this.ContainerQuery());
          },
          block(isStyleBlock = false) {
            return this.Block(isStyleBlock);
          }
        }
      }
    },
    node
  });
  var parse$a = cqSyntax.parse;
  var regex_closing_style_tag = /<\/style\s*>/;
  var regex_starts_with_closing_style_tag = /^<\/style\s*>/;
  function read_style(parser, start, attributes) {
    const content_start = parser.index;
    const styles = parser.read_until(regex_closing_style_tag, parser_errors.unclosed_style);
    if (parser.index >= parser.template.length) {
      parser.error(parser_errors.unclosed_style);
    }
    const content_end = parser.index;
    if (parser.css_mode === "none") {
      parser.read(regex_starts_with_closing_style_tag);
      return null;
    }
    let ast;
    try {
      ast = parse$a(styles, {
        positions: true,
        offset: content_start,
        onParseError(error2) {
          throw error2;
        }
      });
    } catch (err) {
      if (err.name === "SyntaxError") {
        parser.error(parser_errors.css_syntax_error(err.message), err.offset);
      } else {
        throw err;
      }
    }
    ast = JSON.parse(JSON.stringify(ast));
    walk(ast, {
      enter: (node2) => {
        if (node2.type === "Selector") {
          for (let i = 0; i < node2.children.length; i += 1) {
            const a = node2.children[i];
            const b2 = node2.children[i + 1];
            if (is_ref_selector(a, b2)) {
              parser.error(parser_errors.invalid_ref_selector, a.loc.start.offset);
            }
          }
        }
        if (node2.type === "Declaration" && node2.value.type === "Value" && node2.value.children.length === 0) {
          parser.error(parser_errors.invalid_declaration, node2.start);
        }
        if (node2.type === "PseudoClassSelector" && node2.name === "global" && node2.children === null) {
          parser.error(parser_errors.empty_global_selector, node2.loc.start.offset);
        }
        if (node2.loc) {
          node2.start = node2.loc.start.offset;
          node2.end = node2.loc.end.offset;
          delete node2.loc;
        }
      }
    });
    parser.read(regex_starts_with_closing_style_tag);
    const end = parser.index;
    return {
      type: "Style",
      start,
      end,
      attributes,
      children: ast.children,
      content: {
        start: content_start,
        end: content_end,
        styles
      }
    };
  }
  function is_ref_selector(a, b2) {
    if (!b2)
      return false;
    return a.type === "TypeSelector" && a.name === "ref" && b2.type === "PseudoClassSelector";
  }
  var entities = {
    "CounterClockwiseContourIntegral;": 8755,
    "ClockwiseContourIntegral;": 8754,
    "DoubleLongLeftRightArrow;": 10234,
    "NotNestedGreaterGreater;": 10914,
    "DiacriticalDoubleAcute;": 733,
    "NotSquareSupersetEqual;": 8931,
    "CloseCurlyDoubleQuote;": 8221,
    "DoubleContourIntegral;": 8751,
    "FilledVerySmallSquare;": 9642,
    "NegativeVeryThinSpace;": 8203,
    "NotPrecedesSlantEqual;": 8928,
    "NotRightTriangleEqual;": 8941,
    "NotSucceedsSlantEqual;": 8929,
    "CapitalDifferentialD;": 8517,
    "DoubleLeftRightArrow;": 8660,
    "DoubleLongRightArrow;": 10233,
    "EmptyVerySmallSquare;": 9643,
    "NestedGreaterGreater;": 8811,
    "NotDoubleVerticalBar;": 8742,
    "NotGreaterSlantEqual;": 10878,
    "NotLeftTriangleEqual;": 8940,
    "NotSquareSubsetEqual;": 8930,
    "OpenCurlyDoubleQuote;": 8220,
    "ReverseUpEquilibrium;": 10607,
    "DoubleLongLeftArrow;": 10232,
    "DownLeftRightVector;": 10576,
    "LeftArrowRightArrow;": 8646,
    "NegativeMediumSpace;": 8203,
    "NotGreaterFullEqual;": 8807,
    "NotRightTriangleBar;": 10704,
    "RightArrowLeftArrow;": 8644,
    "SquareSupersetEqual;": 8850,
    "leftrightsquigarrow;": 8621,
    "DownRightTeeVector;": 10591,
    "DownRightVectorBar;": 10583,
    "LongLeftRightArrow;": 10231,
    "Longleftrightarrow;": 10234,
    "NegativeThickSpace;": 8203,
    "NotLeftTriangleBar;": 10703,
    "PrecedesSlantEqual;": 8828,
    "ReverseEquilibrium;": 8651,
    "RightDoubleBracket;": 10215,
    "RightDownTeeVector;": 10589,
    "RightDownVectorBar;": 10581,
    "RightTriangleEqual;": 8885,
    "SquareIntersection;": 8851,
    "SucceedsSlantEqual;": 8829,
    "blacktriangleright;": 9656,
    "longleftrightarrow;": 10231,
    "DoubleUpDownArrow;": 8661,
    "DoubleVerticalBar;": 8741,
    "DownLeftTeeVector;": 10590,
    "DownLeftVectorBar;": 10582,
    "FilledSmallSquare;": 9724,
    "GreaterSlantEqual;": 10878,
    "LeftDoubleBracket;": 10214,
    "LeftDownTeeVector;": 10593,
    "LeftDownVectorBar;": 10585,
    "LeftTriangleEqual;": 8884,
    "NegativeThinSpace;": 8203,
    "NotGreaterGreater;": 8811,
    "NotLessSlantEqual;": 10877,
    "NotNestedLessLess;": 10913,
    "NotReverseElement;": 8716,
    "NotSquareSuperset;": 8848,
    "NotTildeFullEqual;": 8775,
    "RightAngleBracket;": 10217,
    "RightUpDownVector;": 10575,
    "SquareSubsetEqual;": 8849,
    "VerticalSeparator;": 10072,
    "blacktriangledown;": 9662,
    "blacktriangleleft;": 9666,
    "leftrightharpoons;": 8651,
    "rightleftharpoons;": 8652,
    "twoheadrightarrow;": 8608,
    "DiacriticalAcute;": 180,
    "DiacriticalGrave;": 96,
    "DiacriticalTilde;": 732,
    "DoubleRightArrow;": 8658,
    "DownArrowUpArrow;": 8693,
    "EmptySmallSquare;": 9723,
    "GreaterEqualLess;": 8923,
    "GreaterFullEqual;": 8807,
    "LeftAngleBracket;": 10216,
    "LeftUpDownVector;": 10577,
    "LessEqualGreater;": 8922,
    "NonBreakingSpace;": 160,
    "NotPrecedesEqual;": 10927,
    "NotRightTriangle;": 8939,
    "NotSucceedsEqual;": 10928,
    "NotSucceedsTilde;": 8831,
    "NotSupersetEqual;": 8841,
    "RightTriangleBar;": 10704,
    "RightUpTeeVector;": 10588,
    "RightUpVectorBar;": 10580,
    "UnderParenthesis;": 9181,
    "UpArrowDownArrow;": 8645,
    "circlearrowright;": 8635,
    "downharpoonright;": 8642,
    "ntrianglerighteq;": 8941,
    "rightharpoondown;": 8641,
    "rightrightarrows;": 8649,
    "twoheadleftarrow;": 8606,
    "vartriangleright;": 8883,
    "CloseCurlyQuote;": 8217,
    "ContourIntegral;": 8750,
    "DoubleDownArrow;": 8659,
    "DoubleLeftArrow;": 8656,
    "DownRightVector;": 8641,
    "LeftRightVector;": 10574,
    "LeftTriangleBar;": 10703,
    "LeftUpTeeVector;": 10592,
    "LeftUpVectorBar;": 10584,
    "LowerRightArrow;": 8600,
    "NotGreaterEqual;": 8817,
    "NotGreaterTilde;": 8821,
    "NotHumpDownHump;": 8782,
    "NotLeftTriangle;": 8938,
    "NotSquareSubset;": 8847,
    "OverParenthesis;": 9180,
    "RightDownVector;": 8642,
    "ShortRightArrow;": 8594,
    "UpperRightArrow;": 8599,
    "bigtriangledown;": 9661,
    "circlearrowleft;": 8634,
    "curvearrowright;": 8631,
    "downharpoonleft;": 8643,
    "leftharpoondown;": 8637,
    "leftrightarrows;": 8646,
    "nLeftrightarrow;": 8654,
    "nleftrightarrow;": 8622,
    "ntrianglelefteq;": 8940,
    "rightleftarrows;": 8644,
    "rightsquigarrow;": 8605,
    "rightthreetimes;": 8908,
    "straightepsilon;": 1013,
    "trianglerighteq;": 8885,
    "vartriangleleft;": 8882,
    "DiacriticalDot;": 729,
    "DoubleRightTee;": 8872,
    "DownLeftVector;": 8637,
    "GreaterGreater;": 10914,
    "HorizontalLine;": 9472,
    "InvisibleComma;": 8291,
    "InvisibleTimes;": 8290,
    "LeftDownVector;": 8643,
    "LeftRightArrow;": 8596,
    "Leftrightarrow;": 8660,
    "LessSlantEqual;": 10877,
    "LongRightArrow;": 10230,
    "Longrightarrow;": 10233,
    "LowerLeftArrow;": 8601,
    "NestedLessLess;": 8810,
    "NotGreaterLess;": 8825,
    "NotLessGreater;": 8824,
    "NotSubsetEqual;": 8840,
    "NotVerticalBar;": 8740,
    "OpenCurlyQuote;": 8216,
    "ReverseElement;": 8715,
    "RightTeeVector;": 10587,
    "RightVectorBar;": 10579,
    "ShortDownArrow;": 8595,
    "ShortLeftArrow;": 8592,
    "SquareSuperset;": 8848,
    "TildeFullEqual;": 8773,
    "UpperLeftArrow;": 8598,
    "ZeroWidthSpace;": 8203,
    "curvearrowleft;": 8630,
    "doublebarwedge;": 8966,
    "downdownarrows;": 8650,
    "hookrightarrow;": 8618,
    "leftleftarrows;": 8647,
    "leftrightarrow;": 8596,
    "leftthreetimes;": 8907,
    "longrightarrow;": 10230,
    "looparrowright;": 8620,
    "nshortparallel;": 8742,
    "ntriangleright;": 8939,
    "rightarrowtail;": 8611,
    "rightharpoonup;": 8640,
    "trianglelefteq;": 8884,
    "upharpoonright;": 8638,
    "ApplyFunction;": 8289,
    "DifferentialD;": 8518,
    "DoubleLeftTee;": 10980,
    "DoubleUpArrow;": 8657,
    "LeftTeeVector;": 10586,
    "LeftVectorBar;": 10578,
    "LessFullEqual;": 8806,
    "LongLeftArrow;": 10229,
    "Longleftarrow;": 10232,
    "NotEqualTilde;": 8770,
    "NotTildeEqual;": 8772,
    "NotTildeTilde;": 8777,
    "Poincareplane;": 8460,
    "PrecedesEqual;": 10927,
    "PrecedesTilde;": 8830,
    "RightArrowBar;": 8677,
    "RightTeeArrow;": 8614,
    "RightTriangle;": 8883,
    "RightUpVector;": 8638,
    "SucceedsEqual;": 10928,
    "SucceedsTilde;": 8831,
    "SupersetEqual;": 8839,
    "UpEquilibrium;": 10606,
    "VerticalTilde;": 8768,
    "VeryThinSpace;": 8202,
    "bigtriangleup;": 9651,
    "blacktriangle;": 9652,
    "divideontimes;": 8903,
    "fallingdotseq;": 8786,
    "hookleftarrow;": 8617,
    "leftarrowtail;": 8610,
    "leftharpoonup;": 8636,
    "longleftarrow;": 10229,
    "looparrowleft;": 8619,
    "measuredangle;": 8737,
    "ntriangleleft;": 8938,
    "shortparallel;": 8741,
    "smallsetminus;": 8726,
    "triangleright;": 9657,
    "upharpoonleft;": 8639,
    "varsubsetneqq;": 10955,
    "varsupsetneqq;": 10956,
    "DownArrowBar;": 10515,
    "DownTeeArrow;": 8615,
    "ExponentialE;": 8519,
    "GreaterEqual;": 8805,
    "GreaterTilde;": 8819,
    "HilbertSpace;": 8459,
    "HumpDownHump;": 8782,
    "Intersection;": 8898,
    "LeftArrowBar;": 8676,
    "LeftTeeArrow;": 8612,
    "LeftTriangle;": 8882,
    "LeftUpVector;": 8639,
    "NotCongruent;": 8802,
    "NotHumpEqual;": 8783,
    "NotLessEqual;": 8816,
    "NotLessTilde;": 8820,
    "Proportional;": 8733,
    "RightCeiling;": 8969,
    "RoundImplies;": 10608,
    "ShortUpArrow;": 8593,
    "SquareSubset;": 8847,
    "UnderBracket;": 9141,
    "VerticalLine;": 124,
    "blacklozenge;": 10731,
    "exponentiale;": 8519,
    "risingdotseq;": 8787,
    "triangledown;": 9663,
    "triangleleft;": 9667,
    "varsubsetneq;": 8842,
    "varsupsetneq;": 8843,
    "CircleMinus;": 8854,
    "CircleTimes;": 8855,
    "Equilibrium;": 8652,
    "GreaterLess;": 8823,
    "LeftCeiling;": 8968,
    "LessGreater;": 8822,
    "MediumSpace;": 8287,
    "NotLessLess;": 8810,
    "NotPrecedes;": 8832,
    "NotSucceeds;": 8833,
    "NotSuperset;": 8835,
    "OverBracket;": 9140,
    "RightVector;": 8640,
    "Rrightarrow;": 8667,
    "RuleDelayed;": 10740,
    "SmallCircle;": 8728,
    "SquareUnion;": 8852,
    "SubsetEqual;": 8838,
    "UpDownArrow;": 8597,
    "Updownarrow;": 8661,
    "VerticalBar;": 8739,
    "backepsilon;": 1014,
    "blacksquare;": 9642,
    "circledcirc;": 8858,
    "circleddash;": 8861,
    "curlyeqprec;": 8926,
    "curlyeqsucc;": 8927,
    "diamondsuit;": 9830,
    "eqslantless;": 10901,
    "expectation;": 8496,
    "nRightarrow;": 8655,
    "nrightarrow;": 8603,
    "preccurlyeq;": 8828,
    "precnapprox;": 10937,
    "quaternions;": 8461,
    "straightphi;": 981,
    "succcurlyeq;": 8829,
    "succnapprox;": 10938,
    "thickapprox;": 8776,
    "updownarrow;": 8597,
    "Bernoullis;": 8492,
    "CirclePlus;": 8853,
    "EqualTilde;": 8770,
    "Fouriertrf;": 8497,
    "ImaginaryI;": 8520,
    "Laplacetrf;": 8466,
    "LeftVector;": 8636,
    "Lleftarrow;": 8666,
    "NotElement;": 8713,
    "NotGreater;": 8815,
    "Proportion;": 8759,
    "RightArrow;": 8594,
    "RightFloor;": 8971,
    "Rightarrow;": 8658,
    "ThickSpace;": 8287,
    "TildeEqual;": 8771,
    "TildeTilde;": 8776,
    "UnderBrace;": 9183,
    "UpArrowBar;": 10514,
    "UpTeeArrow;": 8613,
    "circledast;": 8859,
    "complement;": 8705,
    "curlywedge;": 8911,
    "eqslantgtr;": 10902,
    "gtreqqless;": 10892,
    "lessapprox;": 10885,
    "lesseqqgtr;": 10891,
    "lmoustache;": 9136,
    "longmapsto;": 10236,
    "mapstodown;": 8615,
    "mapstoleft;": 8612,
    "nLeftarrow;": 8653,
    "nleftarrow;": 8602,
    "nsubseteqq;": 10949,
    "nsupseteqq;": 10950,
    "precapprox;": 10935,
    "rightarrow;": 8594,
    "rmoustache;": 9137,
    "sqsubseteq;": 8849,
    "sqsupseteq;": 8850,
    "subsetneqq;": 10955,
    "succapprox;": 10936,
    "supsetneqq;": 10956,
    "upuparrows;": 8648,
    "varepsilon;": 1013,
    "varnothing;": 8709,
    "Backslash;": 8726,
    "CenterDot;": 183,
    "CircleDot;": 8857,
    "Congruent;": 8801,
    "Coproduct;": 8720,
    "DoubleDot;": 168,
    "DownArrow;": 8595,
    "DownBreve;": 785,
    "Downarrow;": 8659,
    "HumpEqual;": 8783,
    "LeftArrow;": 8592,
    "LeftFloor;": 8970,
    "Leftarrow;": 8656,
    "LessTilde;": 8818,
    "Mellintrf;": 8499,
    "MinusPlus;": 8723,
    "NotCupCap;": 8813,
    "NotExists;": 8708,
    "NotSubset;": 8834,
    "OverBrace;": 9182,
    "PlusMinus;": 177,
    "Therefore;": 8756,
    "ThinSpace;": 8201,
    "TripleDot;": 8411,
    "UnionPlus;": 8846,
    "backprime;": 8245,
    "backsimeq;": 8909,
    "bigotimes;": 10754,
    "centerdot;": 183,
    "checkmark;": 10003,
    "complexes;": 8450,
    "dotsquare;": 8865,
    "downarrow;": 8595,
    "gtrapprox;": 10886,
    "gtreqless;": 8923,
    "gvertneqq;": 8809,
    "heartsuit;": 9829,
    "leftarrow;": 8592,
    "lesseqgtr;": 8922,
    "lvertneqq;": 8808,
    "ngeqslant;": 10878,
    "nleqslant;": 10877,
    "nparallel;": 8742,
    "nshortmid;": 8740,
    "nsubseteq;": 8840,
    "nsupseteq;": 8841,
    "pitchfork;": 8916,
    "rationals;": 8474,
    "spadesuit;": 9824,
    "subseteqq;": 10949,
    "subsetneq;": 8842,
    "supseteqq;": 10950,
    "supsetneq;": 8843,
    "therefore;": 8756,
    "triangleq;": 8796,
    "varpropto;": 8733,
    "DDotrahd;": 10513,
    "DotEqual;": 8784,
    "Integral;": 8747,
    "LessLess;": 10913,
    "NotEqual;": 8800,
    "NotTilde;": 8769,
    "PartialD;": 8706,
    "Precedes;": 8826,
    "RightTee;": 8866,
    "Succeeds;": 8827,
    "SuchThat;": 8715,
    "Superset;": 8835,
    "Uarrocir;": 10569,
    "UnderBar;": 95,
    "andslope;": 10840,
    "angmsdaa;": 10664,
    "angmsdab;": 10665,
    "angmsdac;": 10666,
    "angmsdad;": 10667,
    "angmsdae;": 10668,
    "angmsdaf;": 10669,
    "angmsdag;": 10670,
    "angmsdah;": 10671,
    "angrtvbd;": 10653,
    "approxeq;": 8778,
    "awconint;": 8755,
    "backcong;": 8780,
    "barwedge;": 8965,
    "bbrktbrk;": 9142,
    "bigoplus;": 10753,
    "bigsqcup;": 10758,
    "biguplus;": 10756,
    "bigwedge;": 8896,
    "boxminus;": 8863,
    "boxtimes;": 8864,
    "bsolhsub;": 10184,
    "capbrcup;": 10825,
    "circledR;": 174,
    "circledS;": 9416,
    "cirfnint;": 10768,
    "clubsuit;": 9827,
    "cupbrcap;": 10824,
    "curlyvee;": 8910,
    "cwconint;": 8754,
    "doteqdot;": 8785,
    "dotminus;": 8760,
    "drbkarow;": 10512,
    "dzigrarr;": 10239,
    "elinters;": 9191,
    "emptyset;": 8709,
    "eqvparsl;": 10725,
    "fpartint;": 10765,
    "geqslant;": 10878,
    "gesdotol;": 10884,
    "gnapprox;": 10890,
    "hksearow;": 10533,
    "hkswarow;": 10534,
    "imagline;": 8464,
    "imagpart;": 8465,
    "infintie;": 10717,
    "integers;": 8484,
    "intercal;": 8890,
    "intlarhk;": 10775,
    "laemptyv;": 10676,
    "ldrushar;": 10571,
    "leqslant;": 10877,
    "lesdotor;": 10883,
    "llcorner;": 8990,
    "lnapprox;": 10889,
    "lrcorner;": 8991,
    "lurdshar;": 10570,
    "mapstoup;": 8613,
    "multimap;": 8888,
    "naturals;": 8469,
    "ncongdot;": 10861,
    "notindot;": 8949,
    "otimesas;": 10806,
    "parallel;": 8741,
    "plusacir;": 10787,
    "pointint;": 10773,
    "precneqq;": 10933,
    "precnsim;": 8936,
    "profalar;": 9006,
    "profline;": 8978,
    "profsurf;": 8979,
    "raemptyv;": 10675,
    "realpart;": 8476,
    "rppolint;": 10770,
    "rtriltri;": 10702,
    "scpolint;": 10771,
    "setminus;": 8726,
    "shortmid;": 8739,
    "smeparsl;": 10724,
    "sqsubset;": 8847,
    "sqsupset;": 8848,
    "subseteq;": 8838,
    "succneqq;": 10934,
    "succnsim;": 8937,
    "supseteq;": 8839,
    "thetasym;": 977,
    "thicksim;": 8764,
    "timesbar;": 10801,
    "triangle;": 9653,
    "triminus;": 10810,
    "trpezium;": 9186,
    "ulcorner;": 8988,
    "urcorner;": 8989,
    "varkappa;": 1008,
    "varsigma;": 962,
    "vartheta;": 977,
    "Because;": 8757,
    "Cayleys;": 8493,
    "Cconint;": 8752,
    "Cedilla;": 184,
    "Diamond;": 8900,
    "DownTee;": 8868,
    "Element;": 8712,
    "Epsilon;": 917,
    "Implies;": 8658,
    "LeftTee;": 8867,
    "NewLine;": 10,
    "NoBreak;": 8288,
    "NotLess;": 8814,
    "Omicron;": 927,
    "OverBar;": 8254,
    "Product;": 8719,
    "UpArrow;": 8593,
    "Uparrow;": 8657,
    "Upsilon;": 933,
    "alefsym;": 8501,
    "angrtvb;": 8894,
    "angzarr;": 9084,
    "asympeq;": 8781,
    "backsim;": 8765,
    "because;": 8757,
    "bemptyv;": 10672,
    "between;": 8812,
    "bigcirc;": 9711,
    "bigodot;": 10752,
    "bigstar;": 9733,
    "bnequiv;": 8801,
    "boxplus;": 8862,
    "ccupssm;": 10832,
    "cemptyv;": 10674,
    "cirscir;": 10690,
    "coloneq;": 8788,
    "congdot;": 10861,
    "cudarrl;": 10552,
    "cudarrr;": 10549,
    "cularrp;": 10557,
    "curarrm;": 10556,
    "dbkarow;": 10511,
    "ddagger;": 8225,
    "ddotseq;": 10871,
    "demptyv;": 10673,
    "diamond;": 8900,
    "digamma;": 989,
    "dotplus;": 8724,
    "dwangle;": 10662,
    "epsilon;": 949,
    "eqcolon;": 8789,
    "equivDD;": 10872,
    "gesdoto;": 10882,
    "gtquest;": 10876,
    "gtrless;": 8823,
    "harrcir;": 10568,
    "intprod;": 10812,
    "isindot;": 8949,
    "larrbfs;": 10527,
    "larrsim;": 10611,
    "lbrksld;": 10639,
    "lbrkslu;": 10637,
    "ldrdhar;": 10599,
    "lesdoto;": 10881,
    "lessdot;": 8918,
    "lessgtr;": 8822,
    "lesssim;": 8818,
    "lotimes;": 10804,
    "lozenge;": 9674,
    "ltquest;": 10875,
    "luruhar;": 10598,
    "maltese;": 10016,
    "minusdu;": 10794,
    "napprox;": 8777,
    "natural;": 9838,
    "nearrow;": 8599,
    "nexists;": 8708,
    "notinva;": 8713,
    "notinvb;": 8951,
    "notinvc;": 8950,
    "notniva;": 8716,
    "notnivb;": 8958,
    "notnivc;": 8957,
    "npolint;": 10772,
    "npreceq;": 10927,
    "nsqsube;": 8930,
    "nsqsupe;": 8931,
    "nsubset;": 8834,
    "nsucceq;": 10928,
    "nsupset;": 8835,
    "nvinfin;": 10718,
    "nvltrie;": 8884,
    "nvrtrie;": 8885,
    "nwarrow;": 8598,
    "olcross;": 10683,
    "omicron;": 959,
    "orderof;": 8500,
    "orslope;": 10839,
    "pertenk;": 8241,
    "planckh;": 8462,
    "pluscir;": 10786,
    "plussim;": 10790,
    "plustwo;": 10791,
    "precsim;": 8830,
    "quatint;": 10774,
    "questeq;": 8799,
    "rarrbfs;": 10528,
    "rarrsim;": 10612,
    "rbrksld;": 10638,
    "rbrkslu;": 10640,
    "rdldhar;": 10601,
    "realine;": 8475,
    "rotimes;": 10805,
    "ruluhar;": 10600,
    "searrow;": 8600,
    "simplus;": 10788,
    "simrarr;": 10610,
    "subedot;": 10947,
    "submult;": 10945,
    "subplus;": 10943,
    "subrarr;": 10617,
    "succsim;": 8831,
    "supdsub;": 10968,
    "supedot;": 10948,
    "suphsol;": 10185,
    "suphsub;": 10967,
    "suplarr;": 10619,
    "supmult;": 10946,
    "supplus;": 10944,
    "swarrow;": 8601,
    "topfork;": 10970,
    "triplus;": 10809,
    "tritime;": 10811,
    "uparrow;": 8593,
    "upsilon;": 965,
    "uwangle;": 10663,
    "vzigzag;": 10650,
    "zigrarr;": 8669,
    "Aacute;": 193,
    "Abreve;": 258,
    "Agrave;": 192,
    "Assign;": 8788,
    "Atilde;": 195,
    "Barwed;": 8966,
    "Bumpeq;": 8782,
    "Cacute;": 262,
    "Ccaron;": 268,
    "Ccedil;": 199,
    "Colone;": 10868,
    "Conint;": 8751,
    "CupCap;": 8781,
    "Dagger;": 8225,
    "Dcaron;": 270,
    "DotDot;": 8412,
    "Dstrok;": 272,
    "Eacute;": 201,
    "Ecaron;": 282,
    "Egrave;": 200,
    "Exists;": 8707,
    "ForAll;": 8704,
    "Gammad;": 988,
    "Gbreve;": 286,
    "Gcedil;": 290,
    "HARDcy;": 1066,
    "Hstrok;": 294,
    "Iacute;": 205,
    "Igrave;": 204,
    "Itilde;": 296,
    "Jsercy;": 1032,
    "Kcedil;": 310,
    "Lacute;": 313,
    "Lambda;": 923,
    "Lcaron;": 317,
    "Lcedil;": 315,
    "Lmidot;": 319,
    "Lstrok;": 321,
    "Nacute;": 323,
    "Ncaron;": 327,
    "Ncedil;": 325,
    "Ntilde;": 209,
    "Oacute;": 211,
    "Odblac;": 336,
    "Ograve;": 210,
    "Oslash;": 216,
    "Otilde;": 213,
    "Otimes;": 10807,
    "Racute;": 340,
    "Rarrtl;": 10518,
    "Rcaron;": 344,
    "Rcedil;": 342,
    "SHCHcy;": 1065,
    "SOFTcy;": 1068,
    "Sacute;": 346,
    "Scaron;": 352,
    "Scedil;": 350,
    "Square;": 9633,
    "Subset;": 8912,
    "Supset;": 8913,
    "Tcaron;": 356,
    "Tcedil;": 354,
    "Tstrok;": 358,
    "Uacute;": 218,
    "Ubreve;": 364,
    "Udblac;": 368,
    "Ugrave;": 217,
    "Utilde;": 360,
    "Vdashl;": 10982,
    "Verbar;": 8214,
    "Vvdash;": 8874,
    "Yacute;": 221,
    "Zacute;": 377,
    "Zcaron;": 381,
    "aacute;": 225,
    "abreve;": 259,
    "agrave;": 224,
    "andand;": 10837,
    "angmsd;": 8737,
    "angsph;": 8738,
    "apacir;": 10863,
    "approx;": 8776,
    "atilde;": 227,
    "barvee;": 8893,
    "barwed;": 8965,
    "becaus;": 8757,
    "bernou;": 8492,
    "bigcap;": 8898,
    "bigcup;": 8899,
    "bigvee;": 8897,
    "bkarow;": 10509,
    "bottom;": 8869,
    "bowtie;": 8904,
    "boxbox;": 10697,
    "bprime;": 8245,
    "brvbar;": 166,
    "bullet;": 8226,
    "bumpeq;": 8783,
    "cacute;": 263,
    "capand;": 10820,
    "capcap;": 10827,
    "capcup;": 10823,
    "capdot;": 10816,
    "ccaron;": 269,
    "ccedil;": 231,
    "circeq;": 8791,
    "cirmid;": 10991,
    "colone;": 8788,
    "commat;": 64,
    "compfn;": 8728,
    "conint;": 8750,
    "coprod;": 8720,
    "copysr;": 8471,
    "cularr;": 8630,
    "cupcap;": 10822,
    "cupcup;": 10826,
    "cupdot;": 8845,
    "curarr;": 8631,
    "curren;": 164,
    "cylcty;": 9005,
    "dagger;": 8224,
    "daleth;": 8504,
    "dcaron;": 271,
    "dfisht;": 10623,
    "divide;": 247,
    "divonx;": 8903,
    "dlcorn;": 8990,
    "dlcrop;": 8973,
    "dollar;": 36,
    "drcorn;": 8991,
    "drcrop;": 8972,
    "dstrok;": 273,
    "eacute;": 233,
    "easter;": 10862,
    "ecaron;": 283,
    "ecolon;": 8789,
    "egrave;": 232,
    "egsdot;": 10904,
    "elsdot;": 10903,
    "emptyv;": 8709,
    "emsp13;": 8196,
    "emsp14;": 8197,
    "eparsl;": 10723,
    "eqcirc;": 8790,
    "equals;": 61,
    "equest;": 8799,
    "female;": 9792,
    "ffilig;": 64259,
    "ffllig;": 64260,
    "forall;": 8704,
    "frac12;": 189,
    "frac13;": 8531,
    "frac14;": 188,
    "frac15;": 8533,
    "frac16;": 8537,
    "frac18;": 8539,
    "frac23;": 8532,
    "frac25;": 8534,
    "frac34;": 190,
    "frac35;": 8535,
    "frac38;": 8540,
    "frac45;": 8536,
    "frac56;": 8538,
    "frac58;": 8541,
    "frac78;": 8542,
    "gacute;": 501,
    "gammad;": 989,
    "gbreve;": 287,
    "gesdot;": 10880,
    "gesles;": 10900,
    "gtlPar;": 10645,
    "gtrarr;": 10616,
    "gtrdot;": 8919,
    "gtrsim;": 8819,
    "hairsp;": 8202,
    "hamilt;": 8459,
    "hardcy;": 1098,
    "hearts;": 9829,
    "hellip;": 8230,
    "hercon;": 8889,
    "homtht;": 8763,
    "horbar;": 8213,
    "hslash;": 8463,
    "hstrok;": 295,
    "hybull;": 8259,
    "hyphen;": 8208,
    "iacute;": 237,
    "igrave;": 236,
    "iiiint;": 10764,
    "iinfin;": 10716,
    "incare;": 8453,
    "inodot;": 305,
    "intcal;": 8890,
    "iquest;": 191,
    "isinsv;": 8947,
    "itilde;": 297,
    "jsercy;": 1112,
    "kappav;": 1008,
    "kcedil;": 311,
    "kgreen;": 312,
    "lAtail;": 10523,
    "lacute;": 314,
    "lagran;": 8466,
    "lambda;": 955,
    "langle;": 10216,
    "larrfs;": 10525,
    "larrhk;": 8617,
    "larrlp;": 8619,
    "larrpl;": 10553,
    "larrtl;": 8610,
    "latail;": 10521,
    "lbrace;": 123,
    "lbrack;": 91,
    "lcaron;": 318,
    "lcedil;": 316,
    "ldquor;": 8222,
    "lesdot;": 10879,
    "lesges;": 10899,
    "lfisht;": 10620,
    "lfloor;": 8970,
    "lharul;": 10602,
    "llhard;": 10603,
    "lmidot;": 320,
    "lmoust;": 9136,
    "loplus;": 10797,
    "lowast;": 8727,
    "lowbar;": 95,
    "lparlt;": 10643,
    "lrhard;": 10605,
    "lsaquo;": 8249,
    "lsquor;": 8218,
    "lstrok;": 322,
    "lthree;": 8907,
    "ltimes;": 8905,
    "ltlarr;": 10614,
    "ltrPar;": 10646,
    "mapsto;": 8614,
    "marker;": 9646,
    "mcomma;": 10793,
    "midast;": 42,
    "midcir;": 10992,
    "middot;": 183,
    "minusb;": 8863,
    "minusd;": 8760,
    "mnplus;": 8723,
    "models;": 8871,
    "mstpos;": 8766,
    "nVDash;": 8879,
    "nVdash;": 8878,
    "nacute;": 324,
    "nbumpe;": 8783,
    "ncaron;": 328,
    "ncedil;": 326,
    "nearhk;": 10532,
    "nequiv;": 8802,
    "nesear;": 10536,
    "nexist;": 8708,
    "nltrie;": 8940,
    "notinE;": 8953,
    "nparsl;": 11005,
    "nprcue;": 8928,
    "nrarrc;": 10547,
    "nrarrw;": 8605,
    "nrtrie;": 8941,
    "nsccue;": 8929,
    "nsimeq;": 8772,
    "ntilde;": 241,
    "numero;": 8470,
    "nvDash;": 8877,
    "nvHarr;": 10500,
    "nvdash;": 8876,
    "nvlArr;": 10498,
    "nvrArr;": 10499,
    "nwarhk;": 10531,
    "nwnear;": 10535,
    "oacute;": 243,
    "odblac;": 337,
    "odsold;": 10684,
    "ograve;": 242,
    "ominus;": 8854,
    "origof;": 8886,
    "oslash;": 248,
    "otilde;": 245,
    "otimes;": 8855,
    "parsim;": 10995,
    "percnt;": 37,
    "period;": 46,
    "permil;": 8240,
    "phmmat;": 8499,
    "planck;": 8463,
    "plankv;": 8463,
    "plusdo;": 8724,
    "plusdu;": 10789,
    "plusmn;": 177,
    "preceq;": 10927,
    "primes;": 8473,
    "prnsim;": 8936,
    "propto;": 8733,
    "prurel;": 8880,
    "puncsp;": 8200,
    "qprime;": 8279,
    "rAtail;": 10524,
    "racute;": 341,
    "rangle;": 10217,
    "rarrap;": 10613,
    "rarrfs;": 10526,
    "rarrhk;": 8618,
    "rarrlp;": 8620,
    "rarrpl;": 10565,
    "rarrtl;": 8611,
    "ratail;": 10522,
    "rbrace;": 125,
    "rbrack;": 93,
    "rcaron;": 345,
    "rcedil;": 343,
    "rdquor;": 8221,
    "rfisht;": 10621,
    "rfloor;": 8971,
    "rharul;": 10604,
    "rmoust;": 9137,
    "roplus;": 10798,
    "rpargt;": 10644,
    "rsaquo;": 8250,
    "rsquor;": 8217,
    "rthree;": 8908,
    "rtimes;": 8906,
    "sacute;": 347,
    "scaron;": 353,
    "scedil;": 351,
    "scnsim;": 8937,
    "searhk;": 10533,
    "seswar;": 10537,
    "sfrown;": 8994,
    "shchcy;": 1097,
    "sigmaf;": 962,
    "sigmav;": 962,
    "simdot;": 10858,
    "smashp;": 10803,
    "softcy;": 1100,
    "solbar;": 9023,
    "spades;": 9824,
    "sqcaps;": 8851,
    "sqcups;": 8852,
    "sqsube;": 8849,
    "sqsupe;": 8850,
    "square;": 9633,
    "squarf;": 9642,
    "ssetmn;": 8726,
    "ssmile;": 8995,
    "sstarf;": 8902,
    "subdot;": 10941,
    "subset;": 8834,
    "subsim;": 10951,
    "subsub;": 10965,
    "subsup;": 10963,
    "succeq;": 10928,
    "supdot;": 10942,
    "supset;": 8835,
    "supsim;": 10952,
    "supsub;": 10964,
    "supsup;": 10966,
    "swarhk;": 10534,
    "swnwar;": 10538,
    "target;": 8982,
    "tcaron;": 357,
    "tcedil;": 355,
    "telrec;": 8981,
    "there4;": 8756,
    "thetav;": 977,
    "thinsp;": 8201,
    "thksim;": 8764,
    "timesb;": 8864,
    "timesd;": 10800,
    "topbot;": 9014,
    "topcir;": 10993,
    "tprime;": 8244,
    "tridot;": 9708,
    "tstrok;": 359,
    "uacute;": 250,
    "ubreve;": 365,
    "udblac;": 369,
    "ufisht;": 10622,
    "ugrave;": 249,
    "ulcorn;": 8988,
    "ulcrop;": 8975,
    "urcorn;": 8989,
    "urcrop;": 8974,
    "utilde;": 361,
    "vangrt;": 10652,
    "varphi;": 981,
    "varrho;": 1009,
    "veebar;": 8891,
    "vellip;": 8942,
    "verbar;": 124,
    "vsubnE;": 10955,
    "vsubne;": 8842,
    "vsupnE;": 10956,
    "vsupne;": 8843,
    "wedbar;": 10847,
    "wedgeq;": 8793,
    "weierp;": 8472,
    "wreath;": 8768,
    "xoplus;": 10753,
    "xotime;": 10754,
    "xsqcup;": 10758,
    "xuplus;": 10756,
    "xwedge;": 8896,
    "yacute;": 253,
    "zacute;": 378,
    "zcaron;": 382,
    "zeetrf;": 8488,
    "AElig;": 198,
    Aacute: 193,
    "Acirc;": 194,
    Agrave: 192,
    "Alpha;": 913,
    "Amacr;": 256,
    "Aogon;": 260,
    "Aring;": 197,
    Atilde: 195,
    "Breve;": 728,
    Ccedil: 199,
    "Ccirc;": 264,
    "Colon;": 8759,
    "Cross;": 10799,
    "Dashv;": 10980,
    "Delta;": 916,
    Eacute: 201,
    "Ecirc;": 202,
    Egrave: 200,
    "Emacr;": 274,
    "Eogon;": 280,
    "Equal;": 10869,
    "Gamma;": 915,
    "Gcirc;": 284,
    "Hacek;": 711,
    "Hcirc;": 292,
    "IJlig;": 306,
    Iacute: 205,
    "Icirc;": 206,
    Igrave: 204,
    "Imacr;": 298,
    "Iogon;": 302,
    "Iukcy;": 1030,
    "Jcirc;": 308,
    "Jukcy;": 1028,
    "Kappa;": 922,
    Ntilde: 209,
    "OElig;": 338,
    Oacute: 211,
    "Ocirc;": 212,
    Ograve: 210,
    "Omacr;": 332,
    "Omega;": 937,
    Oslash: 216,
    Otilde: 213,
    "Prime;": 8243,
    "RBarr;": 10512,
    "Scirc;": 348,
    "Sigma;": 931,
    "THORN;": 222,
    "TRADE;": 8482,
    "TSHcy;": 1035,
    "Theta;": 920,
    "Tilde;": 8764,
    Uacute: 218,
    "Ubrcy;": 1038,
    "Ucirc;": 219,
    Ugrave: 217,
    "Umacr;": 362,
    "Union;": 8899,
    "Uogon;": 370,
    "UpTee;": 8869,
    "Uring;": 366,
    "VDash;": 8875,
    "Vdash;": 8873,
    "Wcirc;": 372,
    "Wedge;": 8896,
    Yacute: 221,
    "Ycirc;": 374,
    aacute: 225,
    "acirc;": 226,
    "acute;": 180,
    "aelig;": 230,
    agrave: 224,
    "aleph;": 8501,
    "alpha;": 945,
    "amacr;": 257,
    "amalg;": 10815,
    "angle;": 8736,
    "angrt;": 8735,
    "angst;": 197,
    "aogon;": 261,
    "aring;": 229,
    "asymp;": 8776,
    atilde: 227,
    "awint;": 10769,
    "bcong;": 8780,
    "bdquo;": 8222,
    "bepsi;": 1014,
    "blank;": 9251,
    "blk12;": 9618,
    "blk14;": 9617,
    "blk34;": 9619,
    "block;": 9608,
    "boxDL;": 9559,
    "boxDR;": 9556,
    "boxDl;": 9558,
    "boxDr;": 9555,
    "boxHD;": 9574,
    "boxHU;": 9577,
    "boxHd;": 9572,
    "boxHu;": 9575,
    "boxUL;": 9565,
    "boxUR;": 9562,
    "boxUl;": 9564,
    "boxUr;": 9561,
    "boxVH;": 9580,
    "boxVL;": 9571,
    "boxVR;": 9568,
    "boxVh;": 9579,
    "boxVl;": 9570,
    "boxVr;": 9567,
    "boxdL;": 9557,
    "boxdR;": 9554,
    "boxdl;": 9488,
    "boxdr;": 9484,
    "boxhD;": 9573,
    "boxhU;": 9576,
    "boxhd;": 9516,
    "boxhu;": 9524,
    "boxuL;": 9563,
    "boxuR;": 9560,
    "boxul;": 9496,
    "boxur;": 9492,
    "boxvH;": 9578,
    "boxvL;": 9569,
    "boxvR;": 9566,
    "boxvh;": 9532,
    "boxvl;": 9508,
    "boxvr;": 9500,
    "breve;": 728,
    brvbar: 166,
    "bsemi;": 8271,
    "bsime;": 8909,
    "bsolb;": 10693,
    "bumpE;": 10926,
    "bumpe;": 8783,
    "caret;": 8257,
    "caron;": 711,
    "ccaps;": 10829,
    ccedil: 231,
    "ccirc;": 265,
    "ccups;": 10828,
    "cedil;": 184,
    "check;": 10003,
    "clubs;": 9827,
    "colon;": 58,
    "comma;": 44,
    "crarr;": 8629,
    "cross;": 10007,
    "csube;": 10961,
    "csupe;": 10962,
    "ctdot;": 8943,
    "cuepr;": 8926,
    "cuesc;": 8927,
    "cupor;": 10821,
    curren: 164,
    "cuvee;": 8910,
    "cuwed;": 8911,
    "cwint;": 8753,
    "dashv;": 8867,
    "dblac;": 733,
    "ddarr;": 8650,
    "delta;": 948,
    "dharl;": 8643,
    "dharr;": 8642,
    "diams;": 9830,
    "disin;": 8946,
    divide: 247,
    "doteq;": 8784,
    "dtdot;": 8945,
    "dtrif;": 9662,
    "duarr;": 8693,
    "duhar;": 10607,
    "eDDot;": 10871,
    eacute: 233,
    "ecirc;": 234,
    "efDot;": 8786,
    egrave: 232,
    "emacr;": 275,
    "empty;": 8709,
    "eogon;": 281,
    "eplus;": 10865,
    "epsiv;": 1013,
    "eqsim;": 8770,
    "equiv;": 8801,
    "erDot;": 8787,
    "erarr;": 10609,
    "esdot;": 8784,
    "exist;": 8707,
    "fflig;": 64256,
    "filig;": 64257,
    "fjlig;": 102,
    "fllig;": 64258,
    "fltns;": 9649,
    "forkv;": 10969,
    frac12: 189,
    frac14: 188,
    frac34: 190,
    "frasl;": 8260,
    "frown;": 8994,
    "gamma;": 947,
    "gcirc;": 285,
    "gescc;": 10921,
    "gimel;": 8503,
    "gneqq;": 8809,
    "gnsim;": 8935,
    "grave;": 96,
    "gsime;": 10894,
    "gsiml;": 10896,
    "gtcir;": 10874,
    "gtdot;": 8919,
    "harrw;": 8621,
    "hcirc;": 293,
    "hoarr;": 8703,
    iacute: 237,
    "icirc;": 238,
    "iexcl;": 161,
    igrave: 236,
    "iiint;": 8749,
    "iiota;": 8489,
    "ijlig;": 307,
    "imacr;": 299,
    "image;": 8465,
    "imath;": 305,
    "imped;": 437,
    "infin;": 8734,
    "iogon;": 303,
    "iprod;": 10812,
    iquest: 191,
    "isinE;": 8953,
    "isins;": 8948,
    "isinv;": 8712,
    "iukcy;": 1110,
    "jcirc;": 309,
    "jmath;": 567,
    "jukcy;": 1108,
    "kappa;": 954,
    "lAarr;": 8666,
    "lBarr;": 10510,
    "langd;": 10641,
    "laquo;": 171,
    "larrb;": 8676,
    "lates;": 10925,
    "lbarr;": 10508,
    "lbbrk;": 10098,
    "lbrke;": 10635,
    "lceil;": 8968,
    "ldquo;": 8220,
    "lescc;": 10920,
    "lhard;": 8637,
    "lharu;": 8636,
    "lhblk;": 9604,
    "llarr;": 8647,
    "lltri;": 9722,
    "lneqq;": 8808,
    "lnsim;": 8934,
    "loang;": 10220,
    "loarr;": 8701,
    "lobrk;": 10214,
    "lopar;": 10629,
    "lrarr;": 8646,
    "lrhar;": 8651,
    "lrtri;": 8895,
    "lsime;": 10893,
    "lsimg;": 10895,
    "lsquo;": 8216,
    "ltcir;": 10873,
    "ltdot;": 8918,
    "ltrie;": 8884,
    "ltrif;": 9666,
    "mDDot;": 8762,
    "mdash;": 8212,
    "micro;": 181,
    middot: 183,
    "minus;": 8722,
    "mumap;": 8888,
    "nabla;": 8711,
    "napid;": 8779,
    "napos;": 329,
    "natur;": 9838,
    "nbump;": 8782,
    "ncong;": 8775,
    "ndash;": 8211,
    "neArr;": 8663,
    "nearr;": 8599,
    "nedot;": 8784,
    "nesim;": 8770,
    "ngeqq;": 8807,
    "ngsim;": 8821,
    "nhArr;": 8654,
    "nharr;": 8622,
    "nhpar;": 10994,
    "nlArr;": 8653,
    "nlarr;": 8602,
    "nleqq;": 8806,
    "nless;": 8814,
    "nlsim;": 8820,
    "nltri;": 8938,
    "notin;": 8713,
    "notni;": 8716,
    "npart;": 8706,
    "nprec;": 8832,
    "nrArr;": 8655,
    "nrarr;": 8603,
    "nrtri;": 8939,
    "nsime;": 8772,
    "nsmid;": 8740,
    "nspar;": 8742,
    "nsubE;": 10949,
    "nsube;": 8840,
    "nsucc;": 8833,
    "nsupE;": 10950,
    "nsupe;": 8841,
    ntilde: 241,
    "numsp;": 8199,
    "nvsim;": 8764,
    "nwArr;": 8662,
    "nwarr;": 8598,
    oacute: 243,
    "ocirc;": 244,
    "odash;": 8861,
    "oelig;": 339,
    "ofcir;": 10687,
    ograve: 242,
    "ohbar;": 10677,
    "olarr;": 8634,
    "olcir;": 10686,
    "oline;": 8254,
    "omacr;": 333,
    "omega;": 969,
    "operp;": 10681,
    "oplus;": 8853,
    "orarr;": 8635,
    "order;": 8500,
    oslash: 248,
    otilde: 245,
    "ovbar;": 9021,
    "parsl;": 11005,
    "phone;": 9742,
    "plusb;": 8862,
    "pluse;": 10866,
    plusmn: 177,
    "pound;": 163,
    "prcue;": 8828,
    "prime;": 8242,
    "prnap;": 10937,
    "prsim;": 8830,
    "quest;": 63,
    "rAarr;": 8667,
    "rBarr;": 10511,
    "radic;": 8730,
    "rangd;": 10642,
    "range;": 10661,
    "raquo;": 187,
    "rarrb;": 8677,
    "rarrc;": 10547,
    "rarrw;": 8605,
    "ratio;": 8758,
    "rbarr;": 10509,
    "rbbrk;": 10099,
    "rbrke;": 10636,
    "rceil;": 8969,
    "rdquo;": 8221,
    "reals;": 8477,
    "rhard;": 8641,
    "rharu;": 8640,
    "rlarr;": 8644,
    "rlhar;": 8652,
    "rnmid;": 10990,
    "roang;": 10221,
    "roarr;": 8702,
    "robrk;": 10215,
    "ropar;": 10630,
    "rrarr;": 8649,
    "rsquo;": 8217,
    "rtrie;": 8885,
    "rtrif;": 9656,
    "sbquo;": 8218,
    "sccue;": 8829,
    "scirc;": 349,
    "scnap;": 10938,
    "scsim;": 8831,
    "sdotb;": 8865,
    "sdote;": 10854,
    "seArr;": 8664,
    "searr;": 8600,
    "setmn;": 8726,
    "sharp;": 9839,
    "sigma;": 963,
    "simeq;": 8771,
    "simgE;": 10912,
    "simlE;": 10911,
    "simne;": 8774,
    "slarr;": 8592,
    "smile;": 8995,
    "smtes;": 10924,
    "sqcap;": 8851,
    "sqcup;": 8852,
    "sqsub;": 8847,
    "sqsup;": 8848,
    "srarr;": 8594,
    "starf;": 9733,
    "strns;": 175,
    "subnE;": 10955,
    "subne;": 8842,
    "supnE;": 10956,
    "supne;": 8843,
    "swArr;": 8665,
    "swarr;": 8601,
    "szlig;": 223,
    "theta;": 952,
    "thkap;": 8776,
    "thorn;": 254,
    "tilde;": 732,
    "times;": 215,
    "trade;": 8482,
    "trisb;": 10701,
    "tshcy;": 1115,
    "twixt;": 8812,
    uacute: 250,
    "ubrcy;": 1118,
    "ucirc;": 251,
    "udarr;": 8645,
    "udhar;": 10606,
    ugrave: 249,
    "uharl;": 8639,
    "uharr;": 8638,
    "uhblk;": 9600,
    "ultri;": 9720,
    "umacr;": 363,
    "uogon;": 371,
    "uplus;": 8846,
    "upsih;": 978,
    "uring;": 367,
    "urtri;": 9721,
    "utdot;": 8944,
    "utrif;": 9652,
    "uuarr;": 8648,
    "vBarv;": 10985,
    "vDash;": 8872,
    "varpi;": 982,
    "vdash;": 8866,
    "veeeq;": 8794,
    "vltri;": 8882,
    "vnsub;": 8834,
    "vnsup;": 8835,
    "vprop;": 8733,
    "vrtri;": 8883,
    "wcirc;": 373,
    "wedge;": 8743,
    "xcirc;": 9711,
    "xdtri;": 9661,
    "xhArr;": 10234,
    "xharr;": 10231,
    "xlArr;": 10232,
    "xlarr;": 10229,
    "xodot;": 10752,
    "xrArr;": 10233,
    "xrarr;": 10230,
    "xutri;": 9651,
    yacute: 253,
    "ycirc;": 375,
    AElig: 198,
    Acirc: 194,
    "Aopf;": 120120,
    Aring: 197,
    "Ascr;": 119964,
    "Auml;": 196,
    "Barv;": 10983,
    "Beta;": 914,
    "Bopf;": 120121,
    "Bscr;": 8492,
    "CHcy;": 1063,
    "COPY;": 169,
    "Cdot;": 266,
    "Copf;": 8450,
    "Cscr;": 119966,
    "DJcy;": 1026,
    "DScy;": 1029,
    "DZcy;": 1039,
    "Darr;": 8609,
    "Dopf;": 120123,
    "Dscr;": 119967,
    Ecirc: 202,
    "Edot;": 278,
    "Eopf;": 120124,
    "Escr;": 8496,
    "Esim;": 10867,
    "Euml;": 203,
    "Fopf;": 120125,
    "Fscr;": 8497,
    "GJcy;": 1027,
    "Gdot;": 288,
    "Gopf;": 120126,
    "Gscr;": 119970,
    "Hopf;": 8461,
    "Hscr;": 8459,
    "IEcy;": 1045,
    "IOcy;": 1025,
    Icirc: 206,
    "Idot;": 304,
    "Iopf;": 120128,
    "Iota;": 921,
    "Iscr;": 8464,
    "Iuml;": 207,
    "Jopf;": 120129,
    "Jscr;": 119973,
    "KHcy;": 1061,
    "KJcy;": 1036,
    "Kopf;": 120130,
    "Kscr;": 119974,
    "LJcy;": 1033,
    "Lang;": 10218,
    "Larr;": 8606,
    "Lopf;": 120131,
    "Lscr;": 8466,
    "Mopf;": 120132,
    "Mscr;": 8499,
    "NJcy;": 1034,
    "Nopf;": 8469,
    "Nscr;": 119977,
    Ocirc: 212,
    "Oopf;": 120134,
    "Oscr;": 119978,
    "Ouml;": 214,
    "Popf;": 8473,
    "Pscr;": 119979,
    "QUOT;": 34,
    "Qopf;": 8474,
    "Qscr;": 119980,
    "Rang;": 10219,
    "Rarr;": 8608,
    "Ropf;": 8477,
    "Rscr;": 8475,
    "SHcy;": 1064,
    "Sopf;": 120138,
    "Sqrt;": 8730,
    "Sscr;": 119982,
    "Star;": 8902,
    THORN: 222,
    "TScy;": 1062,
    "Topf;": 120139,
    "Tscr;": 119983,
    "Uarr;": 8607,
    Ucirc: 219,
    "Uopf;": 120140,
    "Upsi;": 978,
    "Uscr;": 119984,
    "Uuml;": 220,
    "Vbar;": 10987,
    "Vert;": 8214,
    "Vopf;": 120141,
    "Vscr;": 119985,
    "Wopf;": 120142,
    "Wscr;": 119986,
    "Xopf;": 120143,
    "Xscr;": 119987,
    "YAcy;": 1071,
    "YIcy;": 1031,
    "YUcy;": 1070,
    "Yopf;": 120144,
    "Yscr;": 119988,
    "Yuml;": 376,
    "ZHcy;": 1046,
    "Zdot;": 379,
    "Zeta;": 918,
    "Zopf;": 8484,
    "Zscr;": 119989,
    acirc: 226,
    acute: 180,
    aelig: 230,
    "andd;": 10844,
    "andv;": 10842,
    "ange;": 10660,
    "aopf;": 120146,
    "apid;": 8779,
    "apos;": 39,
    aring: 229,
    "ascr;": 119990,
    "auml;": 228,
    "bNot;": 10989,
    "bbrk;": 9141,
    "beta;": 946,
    "beth;": 8502,
    "bnot;": 8976,
    "bopf;": 120147,
    "boxH;": 9552,
    "boxV;": 9553,
    "boxh;": 9472,
    "boxv;": 9474,
    "bscr;": 119991,
    "bsim;": 8765,
    "bsol;": 92,
    "bull;": 8226,
    "bump;": 8782,
    "caps;": 8745,
    "cdot;": 267,
    cedil: 184,
    "cent;": 162,
    "chcy;": 1095,
    "cirE;": 10691,
    "circ;": 710,
    "cire;": 8791,
    "comp;": 8705,
    "cong;": 8773,
    "copf;": 120148,
    "copy;": 169,
    "cscr;": 119992,
    "csub;": 10959,
    "csup;": 10960,
    "cups;": 8746,
    "dArr;": 8659,
    "dHar;": 10597,
    "darr;": 8595,
    "dash;": 8208,
    "diam;": 8900,
    "djcy;": 1106,
    "dopf;": 120149,
    "dscr;": 119993,
    "dscy;": 1109,
    "dsol;": 10742,
    "dtri;": 9663,
    "dzcy;": 1119,
    "eDot;": 8785,
    "ecir;": 8790,
    ecirc: 234,
    "edot;": 279,
    "emsp;": 8195,
    "ensp;": 8194,
    "eopf;": 120150,
    "epar;": 8917,
    "epsi;": 949,
    "escr;": 8495,
    "esim;": 8770,
    "euml;": 235,
    "euro;": 8364,
    "excl;": 33,
    "flat;": 9837,
    "fnof;": 402,
    "fopf;": 120151,
    "fork;": 8916,
    "fscr;": 119995,
    "gdot;": 289,
    "geqq;": 8807,
    "gesl;": 8923,
    "gjcy;": 1107,
    "gnap;": 10890,
    "gneq;": 10888,
    "gopf;": 120152,
    "gscr;": 8458,
    "gsim;": 8819,
    "gtcc;": 10919,
    "gvnE;": 8809,
    "hArr;": 8660,
    "half;": 189,
    "harr;": 8596,
    "hbar;": 8463,
    "hopf;": 120153,
    "hscr;": 119997,
    icirc: 238,
    "iecy;": 1077,
    iexcl: 161,
    "imof;": 8887,
    "iocy;": 1105,
    "iopf;": 120154,
    "iota;": 953,
    "iscr;": 119998,
    "isin;": 8712,
    "iuml;": 239,
    "jopf;": 120155,
    "jscr;": 119999,
    "khcy;": 1093,
    "kjcy;": 1116,
    "kopf;": 120156,
    "kscr;": 12e4,
    "lArr;": 8656,
    "lHar;": 10594,
    "lang;": 10216,
    laquo: 171,
    "larr;": 8592,
    "late;": 10925,
    "lcub;": 123,
    "ldca;": 10550,
    "ldsh;": 8626,
    "leqq;": 8806,
    "lesg;": 8922,
    "ljcy;": 1113,
    "lnap;": 10889,
    "lneq;": 10887,
    "lopf;": 120157,
    "lozf;": 10731,
    "lpar;": 40,
    "lscr;": 120001,
    "lsim;": 8818,
    "lsqb;": 91,
    "ltcc;": 10918,
    "ltri;": 9667,
    "lvnE;": 8808,
    "macr;": 175,
    "male;": 9794,
    "malt;": 10016,
    micro: 181,
    "mlcp;": 10971,
    "mldr;": 8230,
    "mopf;": 120158,
    "mscr;": 120002,
    "nGtv;": 8811,
    "nLtv;": 8810,
    "nang;": 8736,
    "napE;": 10864,
    "nbsp;": 160,
    "ncap;": 10819,
    "ncup;": 10818,
    "ngeq;": 8817,
    "nges;": 10878,
    "ngtr;": 8815,
    "nisd;": 8954,
    "njcy;": 1114,
    "nldr;": 8229,
    "nleq;": 8816,
    "nles;": 10877,
    "nmid;": 8740,
    "nopf;": 120159,
    "npar;": 8742,
    "npre;": 10927,
    "nsce;": 10928,
    "nscr;": 120003,
    "nsim;": 8769,
    "nsub;": 8836,
    "nsup;": 8837,
    "ntgl;": 8825,
    "ntlg;": 8824,
    "nvap;": 8781,
    "nvge;": 8805,
    "nvgt;": 62,
    "nvle;": 8804,
    "nvlt;": 60,
    "oast;": 8859,
    "ocir;": 8858,
    ocirc: 244,
    "odiv;": 10808,
    "odot;": 8857,
    "ogon;": 731,
    "oint;": 8750,
    "omid;": 10678,
    "oopf;": 120160,
    "opar;": 10679,
    "ordf;": 170,
    "ordm;": 186,
    "oror;": 10838,
    "oscr;": 8500,
    "osol;": 8856,
    "ouml;": 246,
    "para;": 182,
    "part;": 8706,
    "perp;": 8869,
    "phiv;": 981,
    "plus;": 43,
    "popf;": 120161,
    pound: 163,
    "prap;": 10935,
    "prec;": 8826,
    "prnE;": 10933,
    "prod;": 8719,
    "prop;": 8733,
    "pscr;": 120005,
    "qint;": 10764,
    "qopf;": 120162,
    "qscr;": 120006,
    "quot;": 34,
    "rArr;": 8658,
    "rHar;": 10596,
    "race;": 8765,
    "rang;": 10217,
    raquo: 187,
    "rarr;": 8594,
    "rcub;": 125,
    "rdca;": 10551,
    "rdsh;": 8627,
    "real;": 8476,
    "rect;": 9645,
    "rhov;": 1009,
    "ring;": 730,
    "ropf;": 120163,
    "rpar;": 41,
    "rscr;": 120007,
    "rsqb;": 93,
    "rtri;": 9657,
    "scap;": 10936,
    "scnE;": 10934,
    "sdot;": 8901,
    "sect;": 167,
    "semi;": 59,
    "sext;": 10038,
    "shcy;": 1096,
    "sime;": 8771,
    "simg;": 10910,
    "siml;": 10909,
    "smid;": 8739,
    "smte;": 10924,
    "solb;": 10692,
    "sopf;": 120164,
    "spar;": 8741,
    "squf;": 9642,
    "sscr;": 120008,
    "star;": 9734,
    "subE;": 10949,
    "sube;": 8838,
    "succ;": 8827,
    "sung;": 9834,
    "sup1;": 185,
    "sup2;": 178,
    "sup3;": 179,
    "supE;": 10950,
    "supe;": 8839,
    szlig: 223,
    "tbrk;": 9140,
    "tdot;": 8411,
    thorn: 254,
    times: 215,
    "tint;": 8749,
    "toea;": 10536,
    "topf;": 120165,
    "tosa;": 10537,
    "trie;": 8796,
    "tscr;": 120009,
    "tscy;": 1094,
    "uArr;": 8657,
    "uHar;": 10595,
    "uarr;": 8593,
    ucirc: 251,
    "uopf;": 120166,
    "upsi;": 965,
    "uscr;": 120010,
    "utri;": 9653,
    "uuml;": 252,
    "vArr;": 8661,
    "vBar;": 10984,
    "varr;": 8597,
    "vert;": 124,
    "vopf;": 120167,
    "vscr;": 120011,
    "wopf;": 120168,
    "wscr;": 120012,
    "xcap;": 8898,
    "xcup;": 8899,
    "xmap;": 10236,
    "xnis;": 8955,
    "xopf;": 120169,
    "xscr;": 120013,
    "xvee;": 8897,
    "yacy;": 1103,
    "yicy;": 1111,
    "yopf;": 120170,
    "yscr;": 120014,
    "yucy;": 1102,
    "yuml;": 255,
    "zdot;": 380,
    "zeta;": 950,
    "zhcy;": 1078,
    "zopf;": 120171,
    "zscr;": 120015,
    "zwnj;": 8204,
    "AMP;": 38,
    "Acy;": 1040,
    "Afr;": 120068,
    "And;": 10835,
    Auml: 196,
    "Bcy;": 1041,
    "Bfr;": 120069,
    COPY: 169,
    "Cap;": 8914,
    "Cfr;": 8493,
    "Chi;": 935,
    "Cup;": 8915,
    "Dcy;": 1044,
    "Del;": 8711,
    "Dfr;": 120071,
    "Dot;": 168,
    "ENG;": 330,
    "ETH;": 208,
    "Ecy;": 1069,
    "Efr;": 120072,
    "Eta;": 919,
    Euml: 203,
    "Fcy;": 1060,
    "Ffr;": 120073,
    "Gcy;": 1043,
    "Gfr;": 120074,
    "Hat;": 94,
    "Hfr;": 8460,
    "Icy;": 1048,
    "Ifr;": 8465,
    "Int;": 8748,
    Iuml: 207,
    "Jcy;": 1049,
    "Jfr;": 120077,
    "Kcy;": 1050,
    "Kfr;": 120078,
    "Lcy;": 1051,
    "Lfr;": 120079,
    "Lsh;": 8624,
    "Map;": 10501,
    "Mcy;": 1052,
    "Mfr;": 120080,
    "Ncy;": 1053,
    "Nfr;": 120081,
    "Not;": 10988,
    "Ocy;": 1054,
    "Ofr;": 120082,
    Ouml: 214,
    "Pcy;": 1055,
    "Pfr;": 120083,
    "Phi;": 934,
    "Psi;": 936,
    QUOT: 34,
    "Qfr;": 120084,
    "REG;": 174,
    "Rcy;": 1056,
    "Rfr;": 8476,
    "Rho;": 929,
    "Rsh;": 8625,
    "Scy;": 1057,
    "Sfr;": 120086,
    "Sub;": 8912,
    "Sum;": 8721,
    "Sup;": 8913,
    "Tab;": 9,
    "Tau;": 932,
    "Tcy;": 1058,
    "Tfr;": 120087,
    "Ucy;": 1059,
    "Ufr;": 120088,
    Uuml: 220,
    "Vcy;": 1042,
    "Vee;": 8897,
    "Vfr;": 120089,
    "Wfr;": 120090,
    "Xfr;": 120091,
    "Ycy;": 1067,
    "Yfr;": 120092,
    "Zcy;": 1047,
    "Zfr;": 8488,
    "acE;": 8766,
    "acd;": 8767,
    "acy;": 1072,
    "afr;": 120094,
    "amp;": 38,
    "and;": 8743,
    "ang;": 8736,
    "apE;": 10864,
    "ape;": 8778,
    "ast;": 42,
    auml: 228,
    "bcy;": 1073,
    "bfr;": 120095,
    "bne;": 61,
    "bot;": 8869,
    "cap;": 8745,
    cent: 162,
    "cfr;": 120096,
    "chi;": 967,
    "cir;": 9675,
    copy: 169,
    "cup;": 8746,
    "dcy;": 1076,
    "deg;": 176,
    "dfr;": 120097,
    "die;": 168,
    "div;": 247,
    "dot;": 729,
    "ecy;": 1101,
    "efr;": 120098,
    "egs;": 10902,
    "ell;": 8467,
    "els;": 10901,
    "eng;": 331,
    "eta;": 951,
    "eth;": 240,
    euml: 235,
    "fcy;": 1092,
    "ffr;": 120099,
    "gEl;": 10892,
    "gap;": 10886,
    "gcy;": 1075,
    "gel;": 8923,
    "geq;": 8805,
    "ges;": 10878,
    "gfr;": 120100,
    "ggg;": 8921,
    "glE;": 10898,
    "gla;": 10917,
    "glj;": 10916,
    "gnE;": 8809,
    "gne;": 10888,
    "hfr;": 120101,
    "icy;": 1080,
    "iff;": 8660,
    "ifr;": 120102,
    "int;": 8747,
    iuml: 239,
    "jcy;": 1081,
    "jfr;": 120103,
    "kcy;": 1082,
    "kfr;": 120104,
    "lEg;": 10891,
    "lap;": 10885,
    "lat;": 10923,
    "lcy;": 1083,
    "leg;": 8922,
    "leq;": 8804,
    "les;": 10877,
    "lfr;": 120105,
    "lgE;": 10897,
    "lnE;": 8808,
    "lne;": 10887,
    "loz;": 9674,
    "lrm;": 8206,
    "lsh;": 8624,
    macr: 175,
    "map;": 8614,
    "mcy;": 1084,
    "mfr;": 120106,
    "mho;": 8487,
    "mid;": 8739,
    "nGg;": 8921,
    "nGt;": 8811,
    "nLl;": 8920,
    "nLt;": 8810,
    "nap;": 8777,
    nbsp: 160,
    "ncy;": 1085,
    "nfr;": 120107,
    "ngE;": 8807,
    "nge;": 8817,
    "ngt;": 8815,
    "nis;": 8956,
    "niv;": 8715,
    "nlE;": 8806,
    "nle;": 8816,
    "nlt;": 8814,
    "not;": 172,
    "npr;": 8832,
    "nsc;": 8833,
    "num;": 35,
    "ocy;": 1086,
    "ofr;": 120108,
    "ogt;": 10689,
    "ohm;": 937,
    "olt;": 10688,
    "ord;": 10845,
    ordf: 170,
    ordm: 186,
    "orv;": 10843,
    ouml: 246,
    "par;": 8741,
    para: 182,
    "pcy;": 1087,
    "pfr;": 120109,
    "phi;": 966,
    "piv;": 982,
    "prE;": 10931,
    "pre;": 10927,
    "psi;": 968,
    "qfr;": 120110,
    quot: 34,
    "rcy;": 1088,
    "reg;": 174,
    "rfr;": 120111,
    "rho;": 961,
    "rlm;": 8207,
    "rsh;": 8625,
    "scE;": 10932,
    "sce;": 10928,
    "scy;": 1089,
    sect: 167,
    "sfr;": 120112,
    "shy;": 173,
    "sim;": 8764,
    "smt;": 10922,
    "sol;": 47,
    "squ;": 9633,
    "sub;": 8834,
    "sum;": 8721,
    sup1: 185,
    sup2: 178,
    sup3: 179,
    "sup;": 8835,
    "tau;": 964,
    "tcy;": 1090,
    "tfr;": 120113,
    "top;": 8868,
    "ucy;": 1091,
    "ufr;": 120114,
    "uml;": 168,
    uuml: 252,
    "vcy;": 1074,
    "vee;": 8744,
    "vfr;": 120115,
    "wfr;": 120116,
    "xfr;": 120117,
    "ycy;": 1099,
    "yen;": 165,
    "yfr;": 120118,
    yuml: 255,
    "zcy;": 1079,
    "zfr;": 120119,
    "zwj;": 8205,
    AMP: 38,
    "DD;": 8517,
    ETH: 208,
    "GT;": 62,
    "Gg;": 8921,
    "Gt;": 8811,
    "Im;": 8465,
    "LT;": 60,
    "Ll;": 8920,
    "Lt;": 8810,
    "Mu;": 924,
    "Nu;": 925,
    "Or;": 10836,
    "Pi;": 928,
    "Pr;": 10939,
    REG: 174,
    "Re;": 8476,
    "Sc;": 10940,
    "Xi;": 926,
    "ac;": 8766,
    "af;": 8289,
    amp: 38,
    "ap;": 8776,
    "dd;": 8518,
    deg: 176,
    "ee;": 8519,
    "eg;": 10906,
    "el;": 10905,
    eth: 240,
    "gE;": 8807,
    "ge;": 8805,
    "gg;": 8811,
    "gl;": 8823,
    "gt;": 62,
    "ic;": 8291,
    "ii;": 8520,
    "in;": 8712,
    "it;": 8290,
    "lE;": 8806,
    "le;": 8804,
    "lg;": 8822,
    "ll;": 8810,
    "lt;": 60,
    "mp;": 8723,
    "mu;": 956,
    "ne;": 8800,
    "ni;": 8715,
    not: 172,
    "nu;": 957,
    "oS;": 9416,
    "or;": 8744,
    "pi;": 960,
    "pm;": 177,
    "pr;": 8826,
    reg: 174,
    "rx;": 8478,
    "sc;": 8827,
    shy: 173,
    uml: 168,
    "wp;": 8472,
    "wr;": 8768,
    "xi;": 958,
    yen: 165,
    GT: 62,
    LT: 60,
    gt: 62,
    lt: 60
  };
  var windows_1252 = [
    8364,
    129,
    8218,
    402,
    8222,
    8230,
    8224,
    8225,
    710,
    8240,
    352,
    8249,
    338,
    141,
    381,
    143,
    144,
    8216,
    8217,
    8220,
    8221,
    8226,
    8211,
    8212,
    732,
    8482,
    353,
    8250,
    339,
    157,
    382,
    376
  ];
  function reg_exp_entity(entity_name, is_attribute_value) {
    if (is_attribute_value && !entity_name.endsWith(";")) {
      return `${entity_name}\\b(?!=)`;
    }
    return entity_name;
  }
  function get_entity_pattern(is_attribute_value) {
    const reg_exp_num = "#(?:x[a-fA-F\\d]+|\\d+)(?:;)?";
    const reg_exp_entities = Object.keys(entities).map((entity_name) => reg_exp_entity(entity_name, is_attribute_value));
    const entity_pattern = new RegExp(`&(${reg_exp_num}|${reg_exp_entities.join("|")})`, "g");
    return entity_pattern;
  }
  var entity_pattern_content = get_entity_pattern(false);
  var entity_pattern_attr_value = get_entity_pattern(true);
  function decode_character_references(html2, is_attribute_value) {
    const entity_pattern = is_attribute_value ? entity_pattern_attr_value : entity_pattern_content;
    return html2.replace(entity_pattern, (match, entity) => {
      let code;
      if (entity[0] !== "#") {
        code = entities[entity];
      } else if (entity[1] === "x") {
        code = parseInt(entity.substring(2), 16);
      } else {
        code = parseInt(entity.substring(1), 10);
      }
      if (!code) {
        return match;
      }
      return String.fromCodePoint(validate_code(code));
    });
  }
  var NUL = 0;
  function validate_code(code) {
    if (code === 10) {
      return 32;
    }
    if (code < 128) {
      return code;
    }
    if (code <= 159) {
      return windows_1252[code - 128];
    }
    if (code < 55296) {
      return code;
    }
    if (code <= 57343) {
      return NUL;
    }
    if (code <= 65535) {
      return code;
    }
    if (code >= 65536 && code <= 131071) {
      return code;
    }
    if (code >= 131072 && code <= 196607) {
      return code;
    }
    return NUL;
  }
  var disallowed_contents = /* @__PURE__ */ new Map([
    ["li", /* @__PURE__ */ new Set(["li"])],
    ["dt", /* @__PURE__ */ new Set(["dt", "dd"])],
    ["dd", /* @__PURE__ */ new Set(["dt", "dd"])],
    [
      "p",
      new Set("address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul".split(" "))
    ],
    ["rt", /* @__PURE__ */ new Set(["rt", "rp"])],
    ["rp", /* @__PURE__ */ new Set(["rt", "rp"])],
    ["optgroup", /* @__PURE__ */ new Set(["optgroup"])],
    ["option", /* @__PURE__ */ new Set(["option", "optgroup"])],
    ["thead", /* @__PURE__ */ new Set(["tbody", "tfoot"])],
    ["tbody", /* @__PURE__ */ new Set(["tbody", "tfoot"])],
    ["tfoot", /* @__PURE__ */ new Set(["tbody"])],
    ["tr", /* @__PURE__ */ new Set(["tr", "tbody"])],
    ["td", /* @__PURE__ */ new Set(["td", "th", "tr"])],
    ["th", /* @__PURE__ */ new Set(["td", "th", "tr"])]
  ]);
  function closing_tag_omitted(current2, next) {
    if (disallowed_contents.has(current2)) {
      if (!next || disallowed_contents.get(current2).has(next)) {
        return true;
      }
    }
    return false;
  }
  var valid_tag_name = /^\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\-]*/;
  var regex_starts_with_invalid_attr_value = /^(\/>|[\s"'=<>`])/;
  var meta_tags = /* @__PURE__ */ new Map([
    ["svelte:head", "Head"],
    ["svelte:options", "Options"],
    ["svelte:window", "Window"],
    ["svelte:document", "Document"],
    ["svelte:body", "Body"]
  ]);
  var valid_meta_tags = Array.from(meta_tags.keys()).concat("svelte:self", "svelte:component", "svelte:fragment", "svelte:element");
  var specials = /* @__PURE__ */ new Map([
    [
      "script",
      {
        read: read_script,
        property: "js"
      }
    ],
    [
      "style",
      {
        read: read_style,
        property: "css"
      }
    ]
  ]);
  var SELF = /^svelte:self(?=[\s/>])/;
  var COMPONENT = /^svelte:component(?=[\s/>])/;
  var SLOT = /^svelte:fragment(?=[\s/>])/;
  var ELEMENT = /^svelte:element(?=[\s/>])/;
  function parent_is_head(stack) {
    let i = stack.length;
    while (i--) {
      const { type } = stack[i];
      if (type === "Head")
        return true;
      if (type === "Element" || type === "InlineComponent")
        return false;
    }
    return false;
  }
  var regex_closing_textarea_tag = /^<\/textarea(\s[^>]*)?>/i;
  var regex_closing_comment = /-->/;
  var regex_capital_letter = /[A-Z]/;
  function tag(parser) {
    const start = parser.index++;
    let parent = parser.current();
    if (parser.eat("!--")) {
      const data2 = parser.read_until(regex_closing_comment);
      parser.eat("-->", true, parser_errors.unclosed_comment);
      parser.current().children.push({
        start,
        end: parser.index,
        type: "Comment",
        data: data2,
        ignores: extract_svelte_ignore(data2)
      });
      return;
    }
    const is_closing_tag = parser.eat("/");
    const name2 = read_tag_name(parser);
    if (meta_tags.has(name2)) {
      const slug = meta_tags.get(name2).toLowerCase();
      if (is_closing_tag) {
        if ((name2 === "svelte:window" || name2 === "svelte:body") && parser.current().children.length) {
          parser.error(parser_errors.invalid_element_content(slug, name2), parser.current().children[0].start);
        }
      } else {
        if (name2 in parser.meta_tags) {
          parser.error(parser_errors.duplicate_element(slug, name2), start);
        }
        if (parser.stack.length > 1) {
          parser.error(parser_errors.invalid_element_placement(slug, name2), start);
        }
        parser.meta_tags[name2] = true;
      }
    }
    const type = meta_tags.has(name2) ? meta_tags.get(name2) : regex_capital_letter.test(name2[0]) || name2 === "svelte:self" || name2 === "svelte:component" ? "InlineComponent" : name2 === "svelte:fragment" ? "SlotTemplate" : name2 === "title" && parent_is_head(parser.stack) ? "Title" : name2 === "slot" && !parser.customElement ? "Slot" : "Element";
    const element = {
      start,
      end: null,
      type,
      name: name2,
      attributes: [],
      children: []
    };
    parser.allow_whitespace();
    if (is_closing_tag) {
      if (is_void(name2)) {
        parser.error(parser_errors.invalid_void_content(name2), start);
      }
      parser.eat(">", true);
      while (parent.name !== name2) {
        if (parent.type !== "Element") {
          const error2 = parser.last_auto_closed_tag && parser.last_auto_closed_tag.tag === name2 ? parser_errors.invalid_closing_tag_autoclosed(name2, parser.last_auto_closed_tag.reason) : parser_errors.invalid_closing_tag_unopened(name2);
          parser.error(error2, start);
        }
        parent.end = start;
        parser.stack.pop();
        parent = parser.current();
      }
      parent.end = parser.index;
      parser.stack.pop();
      if (parser.last_auto_closed_tag && parser.stack.length < parser.last_auto_closed_tag.depth) {
        parser.last_auto_closed_tag = null;
      }
      return;
    } else if (closing_tag_omitted(parent.name, name2)) {
      parent.end = start;
      parser.stack.pop();
      parser.last_auto_closed_tag = {
        tag: parent.name,
        reason: name2,
        depth: parser.stack.length
      };
    }
    const unique_names = /* @__PURE__ */ new Set();
    let attribute;
    while (attribute = read_attribute(parser, unique_names)) {
      element.attributes.push(attribute);
      parser.allow_whitespace();
    }
    if (name2 === "svelte:component") {
      const index = element.attributes.findIndex((attr) => attr.type === "Attribute" && attr.name === "this");
      if (index === -1) {
        parser.error(parser_errors.missing_component_definition, start);
      }
      const definition = element.attributes.splice(index, 1)[0];
      if (definition.value === true || definition.value.length !== 1 || definition.value[0].type === "Text") {
        parser.error(parser_errors.invalid_component_definition, definition.start);
      }
      element.expression = definition.value[0].expression;
    }
    if (name2 === "svelte:element") {
      const index = element.attributes.findIndex((attr) => attr.type === "Attribute" && attr.name === "this");
      if (index === -1) {
        parser.error(parser_errors.missing_element_definition, start);
      }
      const definition = element.attributes.splice(index, 1)[0];
      if (definition.value === true) {
        parser.error(parser_errors.invalid_element_definition, definition.start);
      }
      element.tag = definition.value[0].data || definition.value[0].expression;
    }
    if (specials.has(name2) && parser.stack.length === 1) {
      const special = specials.get(name2);
      parser.eat(">", true);
      const content = special.read(parser, start, element.attributes);
      if (content)
        parser[special.property].push(content);
      return;
    }
    parser.current().children.push(element);
    const self_closing = parser.eat("/") || is_void(name2);
    parser.eat(">", true);
    if (self_closing) {
      element.end = parser.index;
    } else if (name2 === "textarea") {
      element.children = read_sequence(parser, () => regex_closing_textarea_tag.test(parser.template.slice(parser.index)), "inside <textarea>");
      parser.read(regex_closing_textarea_tag);
      element.end = parser.index;
    } else if (name2 === "script" || name2 === "style") {
      const start2 = parser.index;
      const data2 = parser.read_until(new RegExp(`</${name2}>`));
      const end = parser.index;
      element.children.push({ start: start2, end, type: "Text", data: data2 });
      parser.eat(`</${name2}>`, true);
      element.end = parser.index;
    } else {
      parser.stack.push(element);
    }
  }
  var regex_whitespace_or_slash_or_closing_tag = /(\s|\/|>)/;
  function read_tag_name(parser) {
    const start = parser.index;
    if (parser.read(SELF)) {
      let i = parser.stack.length;
      let legal = false;
      while (i--) {
        const fragment2 = parser.stack[i];
        if (fragment2.type === "IfBlock" || fragment2.type === "EachBlock" || fragment2.type === "InlineComponent") {
          legal = true;
          break;
        }
      }
      if (!legal) {
        parser.error(parser_errors.invalid_self_placement, start);
      }
      return "svelte:self";
    }
    if (parser.read(COMPONENT))
      return "svelte:component";
    if (parser.read(ELEMENT))
      return "svelte:element";
    if (parser.read(SLOT))
      return "svelte:fragment";
    const name2 = parser.read_until(regex_whitespace_or_slash_or_closing_tag);
    if (meta_tags.has(name2))
      return name2;
    if (name2.startsWith("svelte:")) {
      const match = fuzzymatch(name2.slice(7), valid_meta_tags);
      parser.error(parser_errors.invalid_tag_name_svelte_element(valid_meta_tags, match), start);
    }
    if (!valid_tag_name.test(name2)) {
      parser.error(parser_errors.invalid_tag_name, start);
    }
    return name2;
  }
  var regex_token_ending_character = /[\s=\/>"']/;
  var regex_starts_with_quote_characters = /^["']/;
  function read_attribute(parser, unique_names) {
    const start = parser.index;
    function check_unique(name3) {
      if (unique_names.has(name3)) {
        parser.error(parser_errors.duplicate_attribute, start);
      }
      unique_names.add(name3);
    }
    if (parser.eat("{")) {
      parser.allow_whitespace();
      if (parser.eat("...")) {
        const expression = read_expression(parser);
        parser.allow_whitespace();
        parser.eat("}", true);
        return {
          start,
          end: parser.index,
          type: "Spread",
          expression
        };
      } else {
        const value_start = parser.index;
        const name3 = parser.read_identifier();
        parser.allow_whitespace();
        parser.eat("}", true);
        if (name3 === null) {
          parser.error(parser_errors.empty_attribute_shorthand, start);
        }
        check_unique(name3);
        return {
          start,
          end: parser.index,
          type: "Attribute",
          name: name3,
          value: [{
            start: value_start,
            end: value_start + name3.length,
            type: "AttributeShorthand",
            expression: {
              start: value_start,
              end: value_start + name3.length,
              type: "Identifier",
              name: name3
            }
          }]
        };
      }
    }
    const name2 = parser.read_until(regex_token_ending_character);
    if (!name2)
      return null;
    let end = parser.index;
    parser.allow_whitespace();
    const colon_index = name2.indexOf(":");
    const type = colon_index !== -1 && get_directive_type(name2.slice(0, colon_index));
    let value = true;
    if (parser.eat("=")) {
      parser.allow_whitespace();
      value = read_attribute_value(parser);
      end = parser.index;
    } else if (parser.match_regex(regex_starts_with_quote_characters)) {
      parser.error(parser_errors.unexpected_token("="), parser.index);
    }
    if (type) {
      const [directive_name, ...modifiers] = name2.slice(colon_index + 1).split("|");
      if (directive_name === "") {
        parser.error(parser_errors.empty_directive_name(type), start + colon_index + 1);
      }
      if (type === "Binding" && directive_name !== "this") {
        check_unique(directive_name);
      } else if (type !== "EventHandler" && type !== "Action") {
        check_unique(name2);
      }
      if (type === "Ref") {
        parser.error(parser_errors.invalid_ref_directive(directive_name), start);
      }
      if (type === "StyleDirective") {
        return {
          start,
          end,
          type,
          name: directive_name,
          modifiers,
          value
        };
      }
      const first_value = value[0];
      let expression = null;
      if (first_value) {
        const attribute_contains_text = value.length > 1 || first_value.type === "Text";
        if (attribute_contains_text) {
          parser.error(parser_errors.invalid_directive_value, first_value.start);
        } else {
          expression = first_value.expression;
        }
      }
      const directive = {
        start,
        end,
        type,
        name: directive_name,
        modifiers,
        expression
      };
      if (type === "Transition") {
        const direction = name2.slice(0, colon_index);
        directive.intro = direction === "in" || direction === "transition";
        directive.outro = direction === "out" || direction === "transition";
      }
      if (!directive.expression && (type === "Binding" || type === "Class")) {
        directive.expression = {
          start: directive.start + colon_index + 1,
          end: directive.end,
          type: "Identifier",
          name: directive.name
        };
      }
      return directive;
    }
    check_unique(name2);
    return {
      start,
      end,
      type: "Attribute",
      name: name2,
      value
    };
  }
  function get_directive_type(name2) {
    if (name2 === "use")
      return "Action";
    if (name2 === "animate")
      return "Animation";
    if (name2 === "bind")
      return "Binding";
    if (name2 === "class")
      return "Class";
    if (name2 === "style")
      return "StyleDirective";
    if (name2 === "on")
      return "EventHandler";
    if (name2 === "let")
      return "Let";
    if (name2 === "ref")
      return "Ref";
    if (name2 === "in" || name2 === "out" || name2 === "transition")
      return "Transition";
  }
  function read_attribute_value(parser) {
    const quote_mark = parser.eat("'") ? "'" : parser.eat('"') ? '"' : null;
    if (quote_mark && parser.eat(quote_mark)) {
      return [{
        start: parser.index - 1,
        end: parser.index - 1,
        type: "Text",
        raw: "",
        data: ""
      }];
    }
    let value;
    try {
      value = read_sequence(parser, () => {
        if (quote_mark)
          return parser.match(quote_mark);
        return !!parser.match_regex(regex_starts_with_invalid_attr_value);
      }, "in attribute value");
    } catch (error2) {
      if (error2.code === "parse-error") {
        if (parser.template.slice(error2.pos - 1, error2.pos + 1) === "/>") {
          parser.index = error2.pos;
          parser.error(parser_errors.unclosed_attribute_value(quote_mark || "}"));
        }
      }
      throw error2;
    }
    if (value.length === 0 && !quote_mark) {
      parser.error(parser_errors.missing_attribute_value);
    }
    if (quote_mark)
      parser.index += 1;
    return value;
  }
  function read_sequence(parser, done, location) {
    let current_chunk = {
      start: parser.index,
      end: null,
      type: "Text",
      raw: "",
      data: null
    };
    const chunks = [];
    function flush(end) {
      if (current_chunk.raw) {
        current_chunk.data = decode_character_references(current_chunk.raw, true);
        current_chunk.end = end;
        chunks.push(current_chunk);
      }
    }
    while (parser.index < parser.template.length) {
      const index = parser.index;
      if (done()) {
        flush(parser.index);
        return chunks;
      } else if (parser.eat("{")) {
        if (parser.match("#")) {
          const index2 = parser.index - 1;
          parser.eat("#");
          const name2 = parser.read_until(/[^a-z]/);
          parser.error(parser_errors.invalid_logic_block_placement(location, name2), index2);
        } else if (parser.match("@")) {
          const index2 = parser.index - 1;
          parser.eat("@");
          const name2 = parser.read_until(/[^a-z]/);
          parser.error(parser_errors.invalid_tag_placement(location, name2), index2);
        }
        flush(parser.index - 1);
        parser.allow_whitespace();
        const expression = read_expression(parser);
        parser.allow_whitespace();
        parser.eat("}", true);
        chunks.push({
          start: index,
          end: parser.index,
          type: "MustacheTag",
          expression
        });
        current_chunk = {
          start: parser.index,
          end: null,
          type: "Text",
          raw: "",
          data: null
        };
      } else {
        current_chunk.raw += parser.template[parser.index++];
      }
    }
    parser.error(parser_errors.unexpected_eof);
  }
  function full_char_code_at(str, i) {
    const code = str.charCodeAt(i);
    if (code <= 55295 || code >= 57344)
      return code;
    const next = str.charCodeAt(i + 1);
    return (code << 10) + next - 56613888;
  }
  var SQUARE_BRACKET_OPEN = "[".charCodeAt(0);
  var SQUARE_BRACKET_CLOSE = "]".charCodeAt(0);
  var CURLY_BRACKET_OPEN = "{".charCodeAt(0);
  var CURLY_BRACKET_CLOSE = "}".charCodeAt(0);
  function is_bracket_open(code) {
    return code === SQUARE_BRACKET_OPEN || code === CURLY_BRACKET_OPEN;
  }
  function is_bracket_close(code) {
    return code === SQUARE_BRACKET_CLOSE || code === CURLY_BRACKET_CLOSE;
  }
  function is_bracket_pair(open, close) {
    return open === SQUARE_BRACKET_OPEN && close === SQUARE_BRACKET_CLOSE || open === CURLY_BRACKET_OPEN && close === CURLY_BRACKET_CLOSE;
  }
  function get_bracket_close(open) {
    if (open === SQUARE_BRACKET_OPEN) {
      return SQUARE_BRACKET_CLOSE;
    }
    if (open === CURLY_BRACKET_OPEN) {
      return CURLY_BRACKET_CLOSE;
    }
  }
  function read_context(parser) {
    const start = parser.index;
    let i = parser.index;
    const code = full_char_code_at(parser.template, i);
    if (isIdentifierStart(code, true)) {
      return {
        type: "Identifier",
        name: parser.read_identifier(),
        start,
        end: parser.index
      };
    }
    if (!is_bracket_open(code)) {
      parser.error(parser_errors.unexpected_token_destructure);
    }
    const bracket_stack = [code];
    i += code <= 65535 ? 1 : 2;
    while (i < parser.template.length) {
      const code2 = full_char_code_at(parser.template, i);
      if (is_bracket_open(code2)) {
        bracket_stack.push(code2);
      } else if (is_bracket_close(code2)) {
        if (!is_bracket_pair(bracket_stack[bracket_stack.length - 1], code2)) {
          parser.error(parser_errors.unexpected_token(String.fromCharCode(get_bracket_close(bracket_stack[bracket_stack.length - 1]))));
        }
        bracket_stack.pop();
        if (bracket_stack.length === 0) {
          i += code2 <= 65535 ? 1 : 2;
          break;
        }
      }
      i += code2 <= 65535 ? 1 : 2;
    }
    parser.index = i;
    const pattern_string = parser.template.slice(start, i);
    try {
      let space_with_newline = parser.template.slice(0, start).replace(regex_not_newline_characters, " ");
      const first_space = space_with_newline.indexOf(" ");
      space_with_newline = space_with_newline.slice(0, first_space) + space_with_newline.slice(first_space + 1);
      return parse_expression_at(`${space_with_newline}(${pattern_string} = 1)`, start - 1).left;
    } catch (error2) {
      parser.acorn_error(error2);
    }
  }
  function trim_start(str) {
    return str.replace(regex_starts_with_whitespaces, "");
  }
  function trim_end(str) {
    return str.replace(regex_ends_with_whitespaces, "");
  }
  function to_string(node2) {
    switch (node2.type) {
      case "IfBlock":
        return "{#if} block";
      case "ThenBlock":
        return "{:then} block";
      case "ElseBlock":
        return "{:else} block";
      case "PendingBlock":
      case "AwaitBlock":
        return "{#await} block";
      case "CatchBlock":
        return "{:catch} block";
      case "EachBlock":
        return "{#each} block";
      case "RawMustacheTag":
        return "{@html} block";
      case "DebugTag":
        return "{@debug} block";
      case "ConstTag":
        return "{@const} tag";
      case "Element":
      case "InlineComponent":
      case "Slot":
      case "Title":
        return `<${node2.name}> tag`;
      default:
        return node2.type;
    }
  }
  function trim_whitespace(block, trim_before, trim_after) {
    if (!block.children || block.children.length === 0)
      return;
    const first_child = block.children[0];
    const last_child = block.children[block.children.length - 1];
    if (first_child.type === "Text" && trim_before) {
      first_child.data = trim_start(first_child.data);
      if (!first_child.data)
        block.children.shift();
    }
    if (last_child.type === "Text" && trim_after) {
      last_child.data = trim_end(last_child.data);
      if (!last_child.data)
        block.children.pop();
    }
    if (block.else) {
      trim_whitespace(block.else, trim_before, trim_after);
    }
    if (first_child.elseif) {
      trim_whitespace(first_child, trim_before, trim_after);
    }
  }
  var regex_whitespace_with_closing_curly_brace = /^\s*}/;
  function mustache(parser) {
    const start = parser.index;
    parser.index += 1;
    parser.allow_whitespace();
    if (parser.eat("/")) {
      let block = parser.current();
      let expected;
      if (closing_tag_omitted(block.name)) {
        block.end = start;
        parser.stack.pop();
        block = parser.current();
      }
      if (block.type === "ElseBlock" || block.type === "PendingBlock" || block.type === "ThenBlock" || block.type === "CatchBlock") {
        block.end = start;
        parser.stack.pop();
        block = parser.current();
        expected = "await";
      }
      if (block.type === "IfBlock") {
        expected = "if";
      } else if (block.type === "EachBlock") {
        expected = "each";
      } else if (block.type === "AwaitBlock") {
        expected = "await";
      } else if (block.type === "KeyBlock") {
        expected = "key";
      } else {
        parser.error(parser_errors.unexpected_block_close);
      }
      parser.eat(expected, true);
      parser.allow_whitespace();
      parser.eat("}", true);
      while (block.elseif) {
        block.end = parser.index;
        parser.stack.pop();
        block = parser.current();
        if (block.else) {
          block.else.end = start;
        }
      }
      const char_before = parser.template[block.start - 1];
      const char_after = parser.template[parser.index];
      const trim_before = !char_before || regex_whitespace.test(char_before);
      const trim_after = !char_after || regex_whitespace.test(char_after);
      trim_whitespace(block, trim_before, trim_after);
      block.end = parser.index;
      parser.stack.pop();
    } else if (parser.eat(":else")) {
      if (parser.eat("if")) {
        parser.error(parser_errors.invalid_elseif);
      }
      parser.allow_whitespace();
      if (parser.eat("if")) {
        const block = parser.current();
        if (block.type !== "IfBlock") {
          parser.error(parser.stack.some((block2) => block2.type === "IfBlock") ? parser_errors.invalid_elseif_placement_unclosed_block(to_string(block)) : parser_errors.invalid_elseif_placement_outside_if);
        }
        parser.require_whitespace();
        const expression = read_expression(parser);
        parser.allow_whitespace();
        parser.eat("}", true);
        block.else = {
          start: parser.index,
          end: null,
          type: "ElseBlock",
          children: [
            {
              start: parser.index,
              end: null,
              type: "IfBlock",
              elseif: true,
              expression,
              children: []
            }
          ]
        };
        parser.stack.push(block.else.children[0]);
      } else {
        const block = parser.current();
        if (block.type !== "IfBlock" && block.type !== "EachBlock") {
          parser.error(parser.stack.some((block2) => block2.type === "IfBlock" || block2.type === "EachBlock") ? parser_errors.invalid_else_placement_unclosed_block(to_string(block)) : parser_errors.invalid_else_placement_outside_if);
        }
        parser.allow_whitespace();
        parser.eat("}", true);
        block.else = {
          start: parser.index,
          end: null,
          type: "ElseBlock",
          children: []
        };
        parser.stack.push(block.else);
      }
    } else if (parser.match(":then") || parser.match(":catch")) {
      const block = parser.current();
      const is_then = parser.eat(":then") || !parser.eat(":catch");
      if (is_then) {
        if (block.type !== "PendingBlock") {
          parser.error(parser.stack.some((block2) => block2.type === "PendingBlock") ? parser_errors.invalid_then_placement_unclosed_block(to_string(block)) : parser_errors.invalid_then_placement_without_await);
        }
      } else {
        if (block.type !== "ThenBlock" && block.type !== "PendingBlock") {
          parser.error(parser.stack.some((block2) => block2.type === "ThenBlock" || block2.type === "PendingBlock") ? parser_errors.invalid_catch_placement_unclosed_block(to_string(block)) : parser_errors.invalid_catch_placement_without_await);
        }
      }
      block.end = start;
      parser.stack.pop();
      const await_block = parser.current();
      if (!parser.eat("}")) {
        parser.require_whitespace();
        await_block[is_then ? "value" : "error"] = read_context(parser);
        parser.allow_whitespace();
        parser.eat("}", true);
      }
      const new_block = {
        start,
        end: null,
        type: is_then ? "ThenBlock" : "CatchBlock",
        children: [],
        skip: false
      };
      await_block[is_then ? "then" : "catch"] = new_block;
      parser.stack.push(new_block);
    } else if (parser.eat("#")) {
      let type;
      if (parser.eat("if")) {
        type = "IfBlock";
      } else if (parser.eat("each")) {
        type = "EachBlock";
      } else if (parser.eat("await")) {
        type = "AwaitBlock";
      } else if (parser.eat("key")) {
        type = "KeyBlock";
      } else {
        parser.error(parser_errors.expected_block_type);
      }
      parser.require_whitespace();
      const expression = read_expression(parser);
      const block = type === "AwaitBlock" ? {
        start,
        end: null,
        type,
        expression,
        value: null,
        error: null,
        pending: {
          start: null,
          end: null,
          type: "PendingBlock",
          children: [],
          skip: true
        },
        then: {
          start: null,
          end: null,
          type: "ThenBlock",
          children: [],
          skip: true
        },
        catch: {
          start: null,
          end: null,
          type: "CatchBlock",
          children: [],
          skip: true
        }
      } : {
        start,
        end: null,
        type,
        expression,
        children: []
      };
      parser.allow_whitespace();
      if (type === "EachBlock") {
        parser.eat("as", true);
        parser.require_whitespace();
        block.context = read_context(parser);
        parser.allow_whitespace();
        if (parser.eat(",")) {
          parser.allow_whitespace();
          block.index = parser.read_identifier();
          if (!block.index)
            parser.error(parser_errors.expected_name);
          parser.allow_whitespace();
        }
        if (parser.eat("(")) {
          parser.allow_whitespace();
          block.key = read_expression(parser);
          parser.allow_whitespace();
          parser.eat(")", true);
          parser.allow_whitespace();
        }
      }
      const await_block_shorthand = type === "AwaitBlock" && parser.eat("then");
      if (await_block_shorthand) {
        if (parser.match_regex(regex_whitespace_with_closing_curly_brace)) {
          parser.allow_whitespace();
        } else {
          parser.require_whitespace();
          block.value = read_context(parser);
          parser.allow_whitespace();
        }
      }
      const await_block_catch_shorthand = !await_block_shorthand && type === "AwaitBlock" && parser.eat("catch");
      if (await_block_catch_shorthand) {
        if (parser.match_regex(regex_whitespace_with_closing_curly_brace)) {
          parser.allow_whitespace();
        } else {
          parser.require_whitespace();
          block.error = read_context(parser);
          parser.allow_whitespace();
        }
      }
      parser.eat("}", true);
      parser.current().children.push(block);
      parser.stack.push(block);
      if (type === "AwaitBlock") {
        let child_block;
        if (await_block_shorthand) {
          block.then.skip = false;
          child_block = block.then;
        } else if (await_block_catch_shorthand) {
          block.catch.skip = false;
          child_block = block.catch;
        } else {
          block.pending.skip = false;
          child_block = block.pending;
        }
        child_block.start = parser.index;
        parser.stack.push(child_block);
      }
    } else if (parser.eat("@html")) {
      parser.require_whitespace();
      const expression = read_expression(parser);
      parser.allow_whitespace();
      parser.eat("}", true);
      parser.current().children.push({
        start,
        end: parser.index,
        type: "RawMustacheTag",
        expression
      });
    } else if (parser.eat("@debug")) {
      let identifiers;
      if (parser.read(regex_whitespace_with_closing_curly_brace)) {
        identifiers = [];
      } else {
        const expression = read_expression(parser);
        identifiers = expression.type === "SequenceExpression" ? expression.expressions : [expression];
        identifiers.forEach((node2) => {
          if (node2.type !== "Identifier") {
            parser.error(parser_errors.invalid_debug_args, node2.start);
          }
        });
        parser.allow_whitespace();
        parser.eat("}", true);
      }
      parser.current().children.push({
        start,
        end: parser.index,
        type: "DebugTag",
        identifiers
      });
    } else if (parser.eat("@const")) {
      parser.require_whitespace();
      const expression = read_expression(parser);
      if (!(expression.type === "AssignmentExpression" && expression.operator === "=")) {
        parser.error({
          code: "invalid-const-args",
          message: "{@const ...} must be an assignment."
        }, start);
      }
      parser.allow_whitespace();
      parser.eat("}", true);
      parser.current().children.push({
        start,
        end: parser.index,
        type: "ConstTag",
        expression
      });
    } else {
      const expression = read_expression(parser);
      parser.allow_whitespace();
      parser.eat("}", true);
      parser.current().children.push({
        start,
        end: parser.index,
        type: "MustacheTag",
        expression
      });
    }
  }
  function text(parser) {
    const start = parser.index;
    let data2 = "";
    while (parser.index < parser.template.length && !parser.match("<") && !parser.match("{")) {
      data2 += parser.template[parser.index++];
    }
    const node2 = {
      start,
      end: parser.index,
      type: "Text",
      raw: data2,
      data: decode_character_references(data2, false)
    };
    parser.current().children.push(node2);
  }
  function fragment(parser) {
    if (parser.match("<")) {
      return tag;
    }
    if (parser.match("{")) {
      return mustache;
    }
    return text;
  }
  var reserved = /* @__PURE__ */ new Set([
    "arguments",
    "await",
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "enum",
    "eval",
    "export",
    "extends",
    "false",
    "finally",
    "for",
    "function",
    "if",
    "implements",
    "import",
    "in",
    "instanceof",
    "interface",
    "let",
    "new",
    "null",
    "package",
    "private",
    "protected",
    "public",
    "return",
    "static",
    "super",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
    "yield"
  ]);
  function is_valid(str) {
    let i = 0;
    while (i < str.length) {
      const code = full_char_code_at(str, i);
      if (!(i === 0 ? isIdentifierStart : isIdentifierChar)(code, true))
        return false;
      i += code <= 65535 ? 1 : 2;
    }
    return true;
  }
  var regex_non_standard_characters = /[^a-zA-Z0-9_]+/g;
  var regex_starts_with_number = /^[0-9]/;
  function sanitize(name2) {
    return name2.replace(regex_non_standard_characters, "_").replace(regex_starts_with_underscore, "").replace(regex_ends_with_underscore, "").replace(regex_starts_with_number, "_$&");
  }
  function getLocator(source, options) {
    if (options === void 0) {
      options = {};
    }
    var offsetLine = options.offsetLine || 0;
    var offsetColumn = options.offsetColumn || 0;
    var originalLines = source.split("\n");
    var start = 0;
    var lineRanges = originalLines.map(function(line, i2) {
      var end = start + line.length + 1;
      var range = { start, end, line: i2 };
      start = end;
      return range;
    });
    var i = 0;
    function rangeContains(range, index) {
      return range.start <= index && index < range.end;
    }
    function getLocation(range, index) {
      return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };
    }
    function locate2(search, startIndex) {
      if (typeof search === "string") {
        search = source.indexOf(search, startIndex || 0);
      }
      var range = lineRanges[i];
      var d2 = search >= range.end ? 1 : -1;
      while (range) {
        if (rangeContains(range, search))
          return getLocation(range, search);
        i += d2;
        range = lineRanges[i];
      }
    }
    return locate2;
  }
  function locate(source, search, options) {
    if (typeof options === "number") {
      throw new Error("locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument");
    }
    return getLocator(source, options)(search, options && options.startIndex);
  }
  var regex_tabs = /^\t+/;
  function tabs_to_spaces(str) {
    return str.replace(regex_tabs, (match) => match.split("	").join("  "));
  }
  function get_code_frame(source, line, column) {
    const lines = source.split("\n");
    const frame_start = Math.max(0, line - 2);
    const frame_end = Math.min(line + 3, lines.length);
    const digits = String(frame_end + 1).length;
    return lines.slice(frame_start, frame_end).map((str, i) => {
      const is_error_line = frame_start + i === line;
      const line_num = String(i + frame_start + 1).padStart(digits, " ");
      if (is_error_line) {
        const indicator = " ".repeat(digits + 2 + tabs_to_spaces(str.slice(0, column)).length) + "^";
        return `${line_num}: ${tabs_to_spaces(str)}
${indicator}`;
      }
      return `${line_num}: ${tabs_to_spaces(str)}`;
    }).join("\n");
  }
  var CompileError = class extends Error {
    toString() {
      return `${this.message} (${this.start.line}:${this.start.column})
${this.frame}`;
    }
  };
  function error(message, props) {
    const error2 = new CompileError(message);
    error2.name = props.name;
    const start = locate(props.source, props.start, { offsetLine: 1 });
    const end = locate(props.source, props.end || props.start, { offsetLine: 1 });
    error2.code = props.code;
    error2.start = start;
    error2.end = end;
    error2.pos = props.start;
    error2.filename = props.filename;
    error2.frame = get_code_frame(props.source, start.line - 1, start.column);
    throw error2;
  }
  var regex_position_indicator = / \(\d+:\d+\)$/;
  var Parser$1 = class {
    constructor(template, options) {
      this.index = 0;
      this.stack = [];
      this.css = [];
      this.js = [];
      this.meta_tags = {};
      if (typeof template !== "string") {
        throw new TypeError("Template must be a string");
      }
      this.template = template.trimRight();
      this.filename = options.filename;
      this.customElement = options.customElement;
      this.css_mode = options.css;
      this.html = {
        start: null,
        end: null,
        type: "Fragment",
        children: []
      };
      this.stack.push(this.html);
      let state = fragment;
      while (this.index < this.template.length) {
        state = state(this) || fragment;
      }
      if (this.stack.length > 1) {
        const current2 = this.current();
        const type = current2.type === "Element" ? `<${current2.name}>` : "Block";
        const slug = current2.type === "Element" ? "element" : "block";
        this.error({
          code: `unclosed-${slug}`,
          message: `${type} was left open`
        }, current2.start);
      }
      if (state !== fragment) {
        this.error({
          code: "unexpected-eof",
          message: "Unexpected end of input"
        });
      }
      if (this.html.children.length) {
        let start = this.html.children[0].start;
        while (regex_whitespace.test(template[start]))
          start += 1;
        let end = this.html.children[this.html.children.length - 1].end;
        while (regex_whitespace.test(template[end - 1]))
          end -= 1;
        this.html.start = start;
        this.html.end = end;
      } else {
        this.html.start = this.html.end = null;
      }
    }
    current() {
      return this.stack[this.stack.length - 1];
    }
    acorn_error(err) {
      this.error({
        code: "parse-error",
        message: err.message.replace(regex_position_indicator, "")
      }, err.pos);
    }
    error({ code, message }, index = this.index) {
      error(message, {
        name: "ParseError",
        code,
        source: this.template,
        start: index,
        filename: this.filename
      });
    }
    eat(str, required, error2) {
      if (this.match(str)) {
        this.index += str.length;
        return true;
      }
      if (required) {
        this.error(error2 || (this.index === this.template.length ? parser_errors.unexpected_eof_token(str) : parser_errors.unexpected_token(str)));
      }
      return false;
    }
    match(str) {
      return this.template.slice(this.index, this.index + str.length) === str;
    }
    /**
     * Match a regex at the current index
     * @param pattern Should have a ^ anchor at the start so the regex doesn't search past the beginning, resulting in worse performance
     */
    match_regex(pattern) {
      const match = pattern.exec(this.template.slice(this.index));
      if (!match || match.index !== 0)
        return null;
      return match[0];
    }
    allow_whitespace() {
      while (this.index < this.template.length && regex_whitespace.test(this.template[this.index])) {
        this.index++;
      }
    }
    /**
     * Search for a regex starting at the current index and return the result if it matches
     * @param pattern Should have a ^ anchor at the start so the regex doesn't search past the beginning, resulting in worse performance
     */
    read(pattern) {
      const result = this.match_regex(pattern);
      if (result)
        this.index += result.length;
      return result;
    }
    read_identifier(allow_reserved = false) {
      const start = this.index;
      let i = this.index;
      const code = full_char_code_at(this.template, i);
      if (!isIdentifierStart(code, true))
        return null;
      i += code <= 65535 ? 1 : 2;
      while (i < this.template.length) {
        const code2 = full_char_code_at(this.template, i);
        if (!isIdentifierChar(code2, true))
          break;
        i += code2 <= 65535 ? 1 : 2;
      }
      const identifier = this.template.slice(this.index, this.index = i);
      if (!allow_reserved && reserved.has(identifier)) {
        this.error({
          code: "unexpected-reserved-word",
          message: `'${identifier}' is a reserved word in JavaScript and cannot be used here`
        }, start);
      }
      return identifier;
    }
    read_until(pattern, error_message) {
      if (this.index >= this.template.length) {
        this.error(error_message || {
          code: "unexpected-eof",
          message: "Unexpected end of input"
        });
      }
      const start = this.index;
      const match = pattern.exec(this.template.slice(start));
      if (match) {
        this.index = start + match.index;
        return this.template.slice(start, this.index);
      }
      this.index = this.template.length;
      return this.template.slice(start);
    }
    require_whitespace() {
      if (!regex_whitespace.test(this.template[this.index])) {
        this.error({
          code: "missing-whitespace",
          message: "Expected whitespace"
        });
      }
      this.allow_whitespace();
    }
  };
  function parse$b(template, options = {}) {
    const parser = new Parser$1(template, options);
    if (parser.css.length > 1) {
      parser.error(parser_errors.duplicate_style, parser.css[1].start);
    }
    const instance_scripts = parser.js.filter((script) => script.context === "default");
    const module_scripts = parser.js.filter((script) => script.context === "module");
    if (instance_scripts.length > 1) {
      parser.error(parser_errors.invalid_script_instance, instance_scripts[1].start);
    }
    if (module_scripts.length > 1) {
      parser.error(parser_errors.invalid_script_module, module_scripts[1].start);
    }
    return {
      html: parser.html,
      css: parser.css[0],
      instance: instance_scripts[0],
      module: module_scripts[0]
    };
  }
  function is_head(node2) {
    return node2 && node2.type === "MemberExpression" && node2.object["name"] === "@_document" && node2.property["name"] === "head";
  }
  var Block = class {
    constructor(options) {
      this.dependencies = /* @__PURE__ */ new Set();
      this.binding_group_initialised = /* @__PURE__ */ new Set();
      this.binding_groups = /* @__PURE__ */ new Set();
      this.event_listeners = [];
      this.variables = /* @__PURE__ */ new Map();
      this.has_update_method = false;
      this.parent = options.parent;
      this.renderer = options.renderer;
      this.name = options.name;
      this.type = options.type;
      this.comment = options.comment;
      this.wrappers = [];
      this.key = options.key;
      this.first = null;
      this.bindings = options.bindings;
      this.chunks = {
        declarations: [],
        init: [],
        create: [],
        claim: [],
        hydrate: [],
        mount: [],
        measure: [],
        restore_measurements: [],
        fix: [],
        animate: [],
        intro: [],
        update: [],
        outro: [],
        destroy: []
      };
      this.has_animation = false;
      this.has_intro_method = false;
      this.has_outro_method = false;
      this.outros = 0;
      this.get_unique_name = this.renderer.component.get_unique_name_maker();
      this.aliases = /* @__PURE__ */ new Map();
      if (this.key)
        this.aliases.set("key", this.get_unique_name("key"));
    }
    assign_variable_names() {
      const seen = /* @__PURE__ */ new Set();
      const dupes = /* @__PURE__ */ new Set();
      let i = this.wrappers.length;
      while (i--) {
        const wrapper = this.wrappers[i];
        if (!wrapper.var)
          continue;
        if (seen.has(wrapper.var.name)) {
          dupes.add(wrapper.var.name);
        }
        seen.add(wrapper.var.name);
      }
      const counts = /* @__PURE__ */ new Map();
      i = this.wrappers.length;
      while (i--) {
        const wrapper = this.wrappers[i];
        if (!wrapper.var)
          continue;
        let suffix = "";
        if (dupes.has(wrapper.var.name)) {
          const i2 = counts.get(wrapper.var.name) || 0;
          counts.set(wrapper.var.name, i2 + 1);
          suffix = i2;
        }
        wrapper.var.name = this.get_unique_name(wrapper.var.name + suffix).name;
      }
    }
    add_dependencies(dependencies) {
      dependencies.forEach((dependency) => {
        this.dependencies.add(dependency);
      });
      this.has_update_method = true;
      if (this.parent) {
        this.parent.add_dependencies(dependencies);
      }
    }
    add_element(id2, render_statement, claim_statement, parent_node, no_detach) {
      this.add_variable(id2);
      this.chunks.create.push(b`${id2} = ${render_statement};`);
      if (this.renderer.options.hydratable) {
        this.chunks.claim.push(b`${id2} = ${claim_statement || render_statement};`);
      }
      if (parent_node) {
        this.chunks.mount.push(b`@append(${parent_node}, ${id2});`);
        if (is_head(parent_node) && !no_detach)
          this.chunks.destroy.push(b`@detach(${id2});`);
      } else {
        this.chunks.mount.push(b`@insert(#target, ${id2}, #anchor);`);
        if (!no_detach)
          this.chunks.destroy.push(b`if (detaching) @detach(${id2});`);
      }
    }
    add_intro(local) {
      this.has_intros = this.has_intro_method = true;
      if (!local && this.parent)
        this.parent.add_intro();
    }
    add_outro(local) {
      this.has_outros = this.has_outro_method = true;
      this.outros += 1;
      if (!local && this.parent)
        this.parent.add_outro();
    }
    add_animation() {
      this.has_animation = true;
    }
    add_variable(id2, init) {
      if (this.variables.has(id2.name)) {
        throw new Error(`Variable '${id2.name}' already initialised with a different value`);
      }
      this.variables.set(id2.name, { id: id2, init });
    }
    alias(name2) {
      if (!this.aliases.has(name2)) {
        this.aliases.set(name2, this.get_unique_name(name2));
      }
      return this.aliases.get(name2);
    }
    child(options) {
      return new Block(Object.assign({}, this, { key: null }, options, { parent: this }));
    }
    get_contents(key) {
      const { dev } = this.renderer.options;
      if (this.has_outros) {
        this.add_variable({ type: "Identifier", name: "#current" });
        if (this.chunks.intro.length > 0) {
          this.chunks.intro.push(b`#current = true;`);
          this.chunks.mount.push(b`#current = true;`);
        }
        if (this.chunks.outro.length > 0) {
          this.chunks.outro.push(b`#current = false;`);
        }
      }
      if (this.autofocus) {
        if (this.autofocus.condition_expression) {
          this.chunks.mount.push(b`if (${this.autofocus.condition_expression}) ${this.autofocus.element_var}.focus();`);
        } else {
          this.chunks.mount.push(b`${this.autofocus.element_var}.focus();`);
        }
      }
      this.render_binding_groups();
      this.render_listeners();
      const properties2 = {};
      const noop2 = x`@noop`;
      properties2.key = key;
      if (this.first) {
        properties2.first = x`null`;
        this.chunks.hydrate.push(b`this.first = ${this.first};`);
      }
      if (this.chunks.create.length === 0 && this.chunks.hydrate.length === 0) {
        properties2.create = noop2;
      } else {
        const hydrate = this.chunks.hydrate.length > 0 && (this.renderer.options.hydratable ? b`this.h();` : this.chunks.hydrate);
        properties2.create = x`function #create() {
				${this.chunks.create}
				${hydrate}
			}`;
      }
      if (this.renderer.options.hydratable || this.chunks.claim.length > 0) {
        if (this.chunks.claim.length === 0 && this.chunks.hydrate.length === 0) {
          properties2.claim = noop2;
        } else {
          properties2.claim = x`function #claim(#nodes) {
					${this.chunks.claim}
					${this.renderer.options.hydratable && this.chunks.hydrate.length > 0 && b`this.h();`}
				}`;
        }
      }
      if (this.renderer.options.hydratable && this.chunks.hydrate.length > 0) {
        properties2.hydrate = x`function #hydrate() {
				${this.chunks.hydrate}
			}`;
      }
      if (this.chunks.mount.length === 0) {
        properties2.mount = noop2;
      } else if (this.event_listeners.length === 0) {
        properties2.mount = x`function #mount(#target, #anchor) {
				${this.chunks.mount}
			}`;
      } else {
        properties2.mount = x`function #mount(#target, #anchor) {
				${this.chunks.mount}
			}`;
      }
      if (this.has_update_method || this.maintain_context) {
        if (this.chunks.update.length === 0 && !this.maintain_context) {
          properties2.update = noop2;
        } else {
          const ctx = this.maintain_context ? x`#new_ctx` : x`#ctx`;
          let dirty = { type: "Identifier", name: "#dirty" };
          if (!this.renderer.context_overflow && !this.parent) {
            dirty = { type: "ArrayPattern", elements: [dirty] };
          }
          properties2.update = x`function #update(${ctx}, ${dirty}) {
					${this.maintain_context && b`#ctx = ${ctx};`}
					${this.chunks.update}
				}`;
        }
      }
      if (this.has_animation) {
        properties2.measure = x`function #measure() {
				${this.chunks.measure}
			}`;
        if (this.chunks.restore_measurements.length) {
          properties2.restore_measurements = x`function #restore_measurements(#measurement) {
					${this.chunks.restore_measurements}
				}`;
        }
        properties2.fix = x`function #fix() {
				${this.chunks.fix}
			}`;
        properties2.animate = x`function #animate() {
				${this.chunks.animate}
			}`;
      }
      if (this.has_intro_method || this.has_outro_method) {
        if (this.chunks.intro.length === 0) {
          properties2.intro = noop2;
        } else {
          properties2.intro = x`function #intro(#local) {
					${this.has_outros && b`if (#current) return;`}
					${this.chunks.intro}
				}`;
        }
        if (this.chunks.outro.length === 0) {
          properties2.outro = noop2;
        } else {
          properties2.outro = x`function #outro(#local) {
					${this.chunks.outro}
				}`;
        }
      }
      if (this.chunks.destroy.length === 0) {
        properties2.destroy = noop2;
      } else {
        properties2.destroy = x`function #destroy(detaching) {
				${this.chunks.destroy}
			}`;
      }
      if (!this.renderer.component.compile_options.dev) {
        for (const name2 in properties2) {
          const property = properties2[name2];
          if (property)
            property.id = null;
        }
      }
      const return_value = x`{
			key: ${properties2.key},
			first: ${properties2.first},
			c: ${properties2.create},
			l: ${properties2.claim},
			h: ${properties2.hydrate},
			m: ${properties2.mount},
			p: ${properties2.update},
			r: ${properties2.measure},
			s: ${properties2.restore_measurements},
			f: ${properties2.fix},
			a: ${properties2.animate},
			i: ${properties2.intro},
			o: ${properties2.outro},
			d: ${properties2.destroy}
		}`;
      const block = dev && this.get_unique_name("block");
      const body = b`
			${this.chunks.declarations}

			${Array.from(this.variables.values()).map(({ id: id2, init }) => {
        return init ? b`let ${id2} = ${init}` : b`let ${id2}`;
      })}

			${this.chunks.init}

			${dev ? b`
					const ${block} = ${return_value};
					@dispatch_dev("SvelteRegisterBlock", {
						block: ${block},
						id: ${this.name || "create_fragment"}.name,
						type: "${this.type}",
						source: "${this.comment ? this.comment.replace(regex_double_quotes, '\\"') : ""}",
						ctx: #ctx
					});
					return ${block};` : b`
					return ${return_value};`}
		`;
      return body;
    }
    has_content() {
      return !!this.first || this.event_listeners.length > 0 || this.chunks.intro.length > 0 || this.chunks.outro.length > 0 || this.chunks.create.length > 0 || this.chunks.hydrate.length > 0 || this.chunks.claim.length > 0 || this.chunks.mount.length > 0 || this.chunks.update.length > 0 || this.chunks.destroy.length > 0 || this.has_animation;
    }
    render() {
      const key = this.key && this.get_unique_name("key");
      const args = [x`#ctx`];
      if (key)
        args.unshift(key);
      const fn2 = b`function ${this.name}(${args}) {
			${this.get_contents(key)}
		}`;
      return this.comment ? b`
				// ${this.comment}
				${fn2}` : fn2;
    }
    render_listeners(chunk = "") {
      if (this.event_listeners.length > 0) {
        this.add_variable({ type: "Identifier", name: "#mounted" });
        this.chunks.destroy.push(b`#mounted = false`);
        const dispose = {
          type: "Identifier",
          name: `#dispose${chunk}`
        };
        this.add_variable(dispose);
        if (this.event_listeners.length === 1) {
          this.chunks.mount.push(b`
						if (!#mounted) {
							${dispose} = ${this.event_listeners[0]};
							#mounted = true;
						}
					`);
          this.chunks.destroy.push(b`${dispose}();`);
        } else {
          this.chunks.mount.push(b`
					if (!#mounted) {
						${dispose} = [
							${this.event_listeners}
						];
						#mounted = true;
					}
				`);
          this.chunks.destroy.push(b`@run_all(${dispose});`);
        }
      }
    }
    render_binding_groups() {
      for (const binding_group of this.binding_groups) {
        binding_group.render(this);
      }
    }
  };
  var Wrapper = class {
    constructor(renderer, block, parent, node2) {
      this.node = node2;
      Object.defineProperties(this, {
        renderer: {
          value: renderer
        },
        parent: {
          value: parent
        }
      });
      this.can_use_innerhtml = !renderer.options.hydratable;
      this.is_static_content = !renderer.options.hydratable;
      block.wrappers.push(this);
    }
    cannot_use_innerhtml() {
      this.can_use_innerhtml = false;
      if (this.parent)
        this.parent.cannot_use_innerhtml();
    }
    not_static_content() {
      this.is_static_content = false;
      if (this.parent)
        this.parent.not_static_content();
    }
    get_or_create_anchor(block, parent_node, parent_nodes) {
      const needs_anchor = this.next ? !this.next.is_dom_node() : !parent_node || !this.parent.is_dom_node();
      const anchor = needs_anchor ? block.get_unique_name(`${this.var.name}_anchor`) : this.next && this.next.var || { type: "Identifier", name: "null" };
      if (needs_anchor) {
        block.add_element(anchor, x`@empty()`, parent_nodes && x`@empty()`, parent_node);
      }
      return anchor;
    }
    get_update_mount_node(anchor) {
      return this.parent && this.parent.is_dom_node() ? this.parent.var : x`${anchor}.parentNode`;
    }
    is_dom_node() {
      return this.node.type === "Element" || this.node.type === "Text" || this.node.type === "MustacheTag";
    }
    render(_block, _parent_node, _parent_nodes, _data = void 0) {
      throw Error("Wrapper class is not renderable");
    }
  };
  function create_debugging_comment(node2, component) {
    const { locate: locate2, source } = component;
    let c2 = node2.start;
    if (node2.type === "ElseBlock") {
      while (source[c2 - 1] !== "{")
        c2 -= 1;
      while (source[c2 - 1] === "{")
        c2 -= 1;
    }
    let d2;
    if (node2.type === "InlineComponent" || node2.type === "Element" || node2.type === "SlotTemplate") {
      if (node2.children.length) {
        d2 = node2.children[0].start;
        while (source[d2 - 1] !== ">")
          d2 -= 1;
      } else {
        d2 = node2.start;
        while (source[d2] !== ">")
          d2 += 1;
        d2 += 1;
      }
    } else if (node2.type === "Text" || node2.type === "Comment") {
      d2 = node2.end;
    } else {
      d2 = node2.expression ? node2.expression.node.end : c2;
      while (source[d2] !== "}" && d2 <= source.length)
        d2 += 1;
      while (source[d2] === "}")
        d2 += 1;
    }
    const start = locate2(c2);
    const loc = `(${start.line}:${start.column})`;
    return `${loc} ${source.slice(c2, d2)}`.replace(regex_whitespace_characters, " ");
  }
  var Node$1 = class {
    constructor(component, parent, _scope, info) {
      this.start = info.start;
      this.end = info.end;
      this.type = info.type;
      Object.defineProperties(this, {
        component: {
          value: component
        },
        parent: {
          value: parent
        }
      });
    }
    cannot_use_innerhtml() {
      if (this.can_use_innerhtml !== false) {
        this.can_use_innerhtml = false;
        if (this.parent)
          this.parent.cannot_use_innerhtml();
      }
    }
    find_nearest(selector) {
      if (selector.test(this.type))
        return this;
      if (this.parent)
        return this.parent.find_nearest(selector);
    }
    get_static_attribute_value(name2) {
      const attribute = this.attributes && this.attributes.find((attr) => attr.type === "Attribute" && attr.name.toLowerCase() === name2);
      if (!attribute)
        return null;
      if (attribute.is_true)
        return true;
      if (attribute.chunks.length === 0)
        return "";
      if (attribute.chunks.length === 1 && attribute.chunks[0].type === "Text") {
        return attribute.chunks[0].data;
      }
      return null;
    }
    has_ancestor(type) {
      return this.parent ? this.parent.type === type || this.parent.has_ancestor(type) : false;
    }
  };
  var compiler_warnings = {
    custom_element_no_tag: {
      code: "custom-element-no-tag",
      message: `No custom element 'tag' option was specified. To automatically register a custom element, specify a name with a hyphen in it, e.g. <svelte:options tag="my-thing"/>. To hide this warning, use <svelte:options tag={null}/>`
    },
    unused_export_let: (component, property) => ({
      code: "unused-export-let",
      message: `${component} has unused export property '${property}'. If it is for external reference only, please consider using \`export const ${property}\``
    }),
    module_script_reactive_declaration: {
      code: "module-script-reactive-declaration",
      message: "$: has no effect in a module script"
    },
    non_top_level_reactive_declaration: {
      code: "non-top-level-reactive-declaration",
      message: "$: has no effect outside of the top-level"
    },
    module_script_variable_reactive_declaration: (names) => ({
      code: "module-script-reactive-declaration",
      message: `${names.map((name2) => `"${name2}"`).join(", ")} ${names.length > 1 ? "are" : "is"} declared in a module script and will not be reactive`
    }),
    missing_declaration: (name2, has_script) => ({
      code: "missing-declaration",
      message: `'${name2}' is not defined` + (has_script ? "" : `. Consider adding a <script> block with 'export let ${name2}' to declare a prop`)
    }),
    missing_custom_element_compile_options: {
      code: "missing-custom-element-compile-options",
      message: "The 'tag' option is used when generating a custom element. Did you forget the 'customElement: true' compile option?"
    },
    css_unused_selector: (selector) => ({
      code: "css-unused-selector",
      message: `Unused CSS selector "${selector}"`
    }),
    empty_block: {
      code: "empty-block",
      message: "Empty block"
    },
    reactive_component: (name2) => ({
      code: "reactive-component",
      message: `<${name2}/> will not be reactive if ${name2} changes. Use <svelte:component this={${name2}}/> if you want this reactivity.`
    }),
    component_name_lowercase: (name2) => ({
      code: "component-name-lowercase",
      message: `<${name2}> will be treated as an HTML element unless it begins with a capital letter`
    }),
    avoid_is: {
      code: "avoid-is",
      message: "The 'is' attribute is not supported cross-browser and should be avoided"
    },
    invalid_html_attribute: (name2, suggestion) => ({
      code: "invalid-html-attribute",
      message: `'${name2}' is not a valid HTML attribute. Did you mean '${suggestion}'?`
    }),
    a11y_aria_attributes: (name2) => ({
      code: "a11y-aria-attributes",
      message: `A11y: <${name2}> should not have aria-* attributes`
    }),
    a11y_incorrect_attribute_type: (schema, attribute) => {
      let message;
      switch (schema.type) {
        case "boolean":
          message = `The value of '${attribute}' must be exactly one of true or false`;
          break;
        case "id":
          message = `The value of '${attribute}' must be a string that represents a DOM element ID`;
          break;
        case "idlist":
          message = `The value of '${attribute}' must be a space-separated list of strings that represent DOM element IDs`;
          break;
        case "tristate":
          message = `The value of '${attribute}' must be exactly one of true, false, or mixed`;
          break;
        case "token":
          message = `The value of '${attribute}' must be exactly one of ${(schema.values || []).join(", ")}`;
          break;
        case "tokenlist":
          message = `The value of '${attribute}' must be a space-separated list of one or more of ${(schema.values || []).join(", ")}`;
          break;
        default:
          message = `The value of '${attribute}' must be of type ${schema.type}`;
      }
      return {
        code: "a11y-incorrect-aria-attribute-type",
        message: `A11y: ${message}`
      };
    },
    a11y_unknown_aria_attribute: (attribute, suggestion) => ({
      code: "a11y-unknown-aria-attribute",
      message: `A11y: Unknown aria attribute 'aria-${attribute}'` + (suggestion ? ` (did you mean '${suggestion}'?)` : "")
    }),
    a11y_hidden: (name2) => ({
      code: "a11y-hidden",
      message: `A11y: <${name2}> element should not be hidden`
    }),
    a11y_misplaced_role: (name2) => ({
      code: "a11y-misplaced-role",
      message: `A11y: <${name2}> should not have role attribute`
    }),
    a11y_unknown_role: (role, suggestion) => ({
      code: "a11y-unknown-role",
      message: `A11y: Unknown role '${role}'` + (suggestion ? ` (did you mean '${suggestion}'?)` : "")
    }),
    a11y_no_abstract_role: (role) => ({
      code: "a11y-no-abstract-role",
      message: `A11y: Abstract role '${role}' is forbidden`
    }),
    a11y_no_redundant_roles: (role) => ({
      code: "a11y-no-redundant-roles",
      message: `A11y: Redundant role '${role}'`
    }),
    a11y_no_interactive_element_to_noninteractive_role: (role, element) => ({
      code: "a11y-no-interactive-element-to-noninteractive-role",
      message: `A11y: <${element}> cannot have role '${role}'`
    }),
    a11y_no_noninteractive_element_to_interactive_role: (role, element) => ({
      code: "a11y-no-noninteractive-element-to-interactive-role",
      message: `A11y: Non-interactive element <${element}> cannot have interactive role '${role}'`
    }),
    a11y_role_has_required_aria_props: (role, props) => ({
      code: "a11y-role-has-required-aria-props",
      message: `A11y: Elements with the ARIA role "${role}" must have the following attributes defined: ${props.map((name2) => `"${name2}"`).join(", ")}`
    }),
    a11y_role_supports_aria_props: (attribute, role, is_implicit, name2) => {
      let message = `The attribute '${attribute}' is not supported by the role '${role}'.`;
      if (is_implicit) {
        message += ` This role is implicit on the element <${name2}>.`;
      }
      return {
        code: "a11y-role-supports-aria-props",
        message: `A11y: ${message}`
      };
    },
    a11y_accesskey: {
      code: "a11y-accesskey",
      message: "A11y: Avoid using accesskey"
    },
    a11y_autofocus: {
      code: "a11y-autofocus",
      message: "A11y: Avoid using autofocus"
    },
    a11y_misplaced_scope: {
      code: "a11y-misplaced-scope",
      message: "A11y: The scope attribute should only be used with <th> elements"
    },
    a11y_positive_tabindex: {
      code: "a11y-positive-tabindex",
      message: "A11y: avoid tabindex values above zero"
    },
    a11y_invalid_attribute: (href_attribute, href_value) => ({
      code: "a11y-invalid-attribute",
      message: `A11y: '${href_value}' is not a valid ${href_attribute} attribute`
    }),
    a11y_missing_attribute: (name2, article, sequence) => ({
      code: "a11y-missing-attribute",
      message: `A11y: <${name2}> element should have ${article} ${sequence} attribute`
    }),
    a11y_autocomplete_valid: (type, value) => ({
      code: "a11y-autocomplete-valid",
      message: `A11y: The value '${value}' is not supported by the attribute 'autocomplete' on element <input type="${type || "..."}">`
    }),
    a11y_img_redundant_alt: {
      code: "a11y-img-redundant-alt",
      message: "A11y: Screenreaders already announce <img> elements as an image."
    },
    a11y_interactive_supports_focus: (role) => ({
      code: "a11y-interactive-supports-focus",
      message: `A11y: Elements with the '${role}' interactive role must have a tabindex value.`
    }),
    a11y_label_has_associated_control: {
      code: "a11y-label-has-associated-control",
      message: "A11y: A form label must be associated with a control."
    },
    a11y_media_has_caption: {
      code: "a11y-media-has-caption",
      message: 'A11y: <video> elements must have a <track kind="captions">'
    },
    a11y_distracting_elements: (name2) => ({
      code: "a11y-distracting-elements",
      message: `A11y: Avoid <${name2}> elements`
    }),
    a11y_structure_immediate: {
      code: "a11y-structure",
      message: "A11y: <figcaption> must be an immediate child of <figure>"
    },
    a11y_structure_first_or_last: {
      code: "a11y-structure",
      message: "A11y: <figcaption> must be first or last child of <figure>"
    },
    a11y_mouse_events_have_key_events: (event, accompanied_by) => ({
      code: "a11y-mouse-events-have-key-events",
      message: `A11y: on:${event} must be accompanied by on:${accompanied_by}`
    }),
    a11y_click_events_have_key_events: {
      code: "a11y-click-events-have-key-events",
      message: "A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event."
    },
    a11y_missing_content: (name2) => ({
      code: "a11y-missing-content",
      message: `A11y: <${name2}> element should have child content`
    }),
    a11y_no_noninteractive_tabindex: {
      code: "a11y-no-noninteractive-tabindex",
      message: "A11y: noninteractive element cannot have nonnegative tabIndex value"
    },
    a11y_aria_activedescendant_has_tabindex: {
      code: "a11y-aria-activedescendant-has-tabindex",
      message: "A11y: Elements with attribute aria-activedescendant should have tabindex value"
    },
    redundant_event_modifier_for_touch: {
      code: "redundant-event-modifier",
      message: "Touch event handlers that don't use the 'event' object are passive by default"
    },
    redundant_event_modifier_passive: {
      code: "redundant-event-modifier",
      message: "The passive modifier only works with wheel and touch events"
    },
    invalid_rest_eachblock_binding: (rest_element_name) => ({
      code: "invalid-rest-eachblock-binding",
      message: `The rest operator (...) will create a new object and binding '${rest_element_name}' with the original object will not work`
    }),
    avoid_mouse_events_on_document: {
      code: "avoid-mouse-events-on-document",
      message: "Mouse enter/leave events on the document are not supported in all browsers and should be avoided"
    }
  };
  var regex_non_whitespace_characters = /[^ \r\n\f\v\t]/;
  var AbstractBlock = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
    }
    warn_if_empty_block() {
      if (!this.children || this.children.length > 1)
        return;
      const child = this.children[0];
      if (!child || child.type === "Text" && !regex_non_whitespace_characters.test(child.data)) {
        this.component.warn(this, compiler_warnings.empty_block);
      }
    }
  };
  function flatten_reference(node2) {
    const nodes = [];
    const parts = [];
    while (node2.type === "MemberExpression") {
      nodes.unshift(node2.property);
      if (!node2.computed) {
        parts.unshift(node2.property.name);
      } else {
        const computed_property = to_string$1(node2.property);
        if (computed_property) {
          parts.unshift(`[${computed_property}]`);
        }
      }
      node2 = node2.object;
    }
    const name2 = node2.type === "Identifier" ? node2.name : node2.type === "ThisExpression" ? "this" : null;
    nodes.unshift(node2);
    parts.unshift(name2);
    return { name: name2, nodes, parts };
  }
  function to_string$1(node2) {
    switch (node2.type) {
      case "Literal":
        return String(node2.value);
      case "Identifier":
        return node2.name;
    }
  }
  function create_scopes(expression) {
    return analyze(expression);
  }
  function get_object(node2) {
    while (node2.type === "MemberExpression")
      node2 = node2.object;
    return node2;
  }
  var reserved_keywords = /* @__PURE__ */ new Set(["$$props", "$$restProps", "$$slots"]);
  function is_reserved_keyword(name2) {
    return reserved_keywords.has(name2);
  }
  function is_dynamic(variable) {
    if (variable) {
      if (variable.mutated || variable.reassigned)
        return true;
      if (!variable.module && variable.writable && variable.export_name)
        return true;
      if (is_reserved_keyword(variable.name))
        return true;
    }
    return false;
  }
  function nodes_match(a, b2) {
    if (!!a !== !!b2)
      return false;
    if (Array.isArray(a) !== Array.isArray(b2))
      return false;
    if (a && typeof a === "object") {
      if (Array.isArray(a)) {
        if (a.length !== b2.length)
          return false;
        return a.every((child, i2) => nodes_match(child, b2[i2]));
      }
      const a_keys = Object.keys(a).sort();
      const b_keys = Object.keys(b2).sort();
      if (a_keys.length !== b_keys.length)
        return false;
      let i = a_keys.length;
      while (i--) {
        const key = a_keys[i];
        if (b_keys[i] !== key)
          return false;
        if (key === "start" || key === "end")
          continue;
        if (!nodes_match(a[key], b2[key])) {
          return false;
        }
      }
      return true;
    }
    return a === b2;
  }
  function invalidate(renderer, scope, node2, names, main_execution_context = false) {
    const { component } = renderer;
    const [head, ...tail] = Array.from(names).filter((name2) => {
      const owner = scope.find_owner(name2);
      return !owner || owner === component.instance_scope;
    }).map((name2) => component.var_lookup.get(name2)).filter((variable) => {
      return variable && (!variable.hoistable && !variable.global && !variable.module && (variable.referenced || variable.subscribable || variable.is_reactive_dependency || variable.export_name || variable.name[0] === "$"));
    });
    function get_invalidated(variable, node3) {
      if (main_execution_context && !variable.subscribable && variable.name[0] !== "$") {
        return node3;
      }
      return renderer_invalidate(renderer, variable.name, void 0, main_execution_context);
    }
    if (!head) {
      return node2;
    }
    component.has_reactive_assignments = true;
    if (node2.type === "AssignmentExpression" && node2.operator === "=" && nodes_match(node2.left, node2.right) && tail.length === 0) {
      return get_invalidated(head, node2);
    }
    const is_store_value = head.name[0] === "$" && head.name[1] !== "$";
    const extra_args = tail.map((variable) => get_invalidated(variable)).filter(Boolean);
    if (is_store_value) {
      return x`@set_store_value(${head.name.slice(1)}, ${node2}, ${head.name}, ${extra_args})`;
    }
    let invalidate2;
    if (!main_execution_context) {
      const pass_value = extra_args.length > 0 || node2.type === "AssignmentExpression" && node2.left.type !== "Identifier" || node2.type === "UpdateExpression" && (!node2.prefix || node2.argument.type !== "Identifier");
      if (pass_value) {
        extra_args.unshift({
          type: "Identifier",
          name: head.name
        });
      }
      invalidate2 = x`$$invalidate(${renderer.context_lookup.get(head.name).index}, ${node2}, ${extra_args})`;
    } else {
      invalidate2 = extra_args.length ? [node2, ...extra_args] : node2;
    }
    if (head.subscribable && head.reassigned) {
      const subscribe = `$$subscribe_${head.name}`;
      invalidate2 = x`${subscribe}(${invalidate2})`;
    }
    return invalidate2;
  }
  function renderer_invalidate(renderer, name2, value, main_execution_context = false) {
    const variable = renderer.component.var_lookup.get(name2);
    if (variable && (variable.subscribable && (variable.reassigned || variable.export_name))) {
      if (main_execution_context) {
        return x`${`$$subscribe_${name2}`}(${value || name2})`;
      } else {
        const member = renderer.context_lookup.get(name2);
        return x`${`$$subscribe_${name2}`}($$invalidate(${member.index}, ${value || name2}))`;
      }
    }
    if (name2[0] === "$" && name2[1] !== "$") {
      return x`${name2.slice(1)}.set(${value || name2})`;
    }
    if (variable && (variable.module || !variable.referenced && !variable.is_reactive_dependency && !variable.export_name && !name2.startsWith("$$"))) {
      return value || name2;
    }
    if (value) {
      if (main_execution_context) {
        return x`${value}`;
      } else {
        const member = renderer.context_lookup.get(name2);
        return x`$$invalidate(${member.index}, ${value})`;
      }
    }
    if (main_execution_context)
      return;
    const deps = /* @__PURE__ */ new Set([name2]);
    deps.forEach((name3) => {
      const reactive_declarations = renderer.component.reactive_declarations.filter((x2) => x2.assignees.has(name3));
      reactive_declarations.forEach((declaration) => {
        declaration.dependencies.forEach((name4) => {
          deps.add(name4);
        });
      });
    });
    const filtered = Array.from(deps).filter((n2) => renderer.context_lookup.has(n2));
    if (!filtered.length)
      return null;
    return filtered.map((n2) => x`$$invalidate(${renderer.context_lookup.get(n2).index}, ${n2})`).reduce((lhs, rhs) => x`${lhs}, ${rhs}`);
  }
  function replace_object(node2, replacement) {
    if (node2.type === "Identifier")
      return replacement;
    const ancestor = node2;
    let parent;
    while (node2.type === "MemberExpression") {
      parent = node2;
      node2 = node2.object;
    }
    parent.object = replacement;
    return ancestor;
  }
  function is_contextual(component, scope, name2) {
    if (is_reserved_keyword(name2))
      return true;
    if (!scope.is_top_level(name2))
      return true;
    const variable = component.var_lookup.get(name2);
    if (!variable || variable.hoistable)
      return false;
    return true;
  }
  function clone(val) {
    let k2, out, tmp;
    if (Array.isArray(val)) {
      out = Array(k2 = val.length);
      while (k2--)
        out[k2] = (tmp = val[k2]) && typeof tmp === "object" ? clone(tmp) : tmp;
      return out;
    }
    if (Object.prototype.toString.call(val) === "[object Object]") {
      out = {};
      for (k2 in val) {
        if (k2 === "__proto__") {
          Object.defineProperty(out, k2, {
            value: clone(val[k2]),
            configurable: true,
            enumerable: true,
            writable: true
          });
        } else if (typeof val[k2] !== "function") {
          out[k2] = (tmp = val[k2]) && typeof tmp === "object" ? clone(tmp) : tmp;
        }
      }
      return out;
    }
    return val;
  }
  var compiler_errors = {
    invalid_binding_elements: (element, binding) => ({
      code: "invalid-binding",
      message: `'${binding}' is not a valid binding on <${element}> elements`
    }),
    invalid_binding_element_with: (elements, binding) => ({
      code: "invalid-binding",
      message: `'${binding}' binding can only be used with ${elements}`
    }),
    invalid_binding_on: (binding, element, post) => ({
      code: "invalid-binding",
      message: `'${binding}' is not a valid binding on ${element}` + (post || "")
    }),
    invalid_binding_foreign: (binding) => ({
      code: "invalid-binding",
      message: `'${binding}' is not a valid binding. Foreign elements only support bind:this`
    }),
    invalid_binding_no_checkbox: (binding, is_radio) => ({
      code: "invalid-binding",
      message: `'${binding}' binding can only be used with <input type="checkbox">` + (is_radio ? ` \u2014 for <input type="radio">, use 'group' binding` : "")
    }),
    invalid_binding: (binding) => ({
      code: "invalid-binding",
      message: `'${binding}' is not a valid binding`
    }),
    invalid_binding_window: (parts) => ({
      code: "invalid-binding",
      message: `Bindings on <svelte:window> must be to top-level properties, e.g. '${parts[parts.length - 1]}' rather than '${parts.join(".")}'`
    }),
    invalid_binding_let: {
      code: "invalid-binding",
      message: "Cannot bind to a variable declared with the let: directive"
    },
    invalid_binding_await: {
      code: "invalid-binding",
      message: "Cannot bind to a variable declared with {#await ... then} or {:catch} blocks"
    },
    invalid_binding_const: {
      code: "invalid-binding",
      message: "Cannot bind to a variable declared with {@const ...}"
    },
    invalid_binding_writable: {
      code: "invalid-binding",
      message: "Cannot bind to a variable which is not writable"
    },
    binding_undeclared: (name2) => ({
      code: "binding-undeclared",
      message: `${name2} is not declared`
    }),
    invalid_type: {
      code: "invalid-type",
      message: "'type' attribute cannot be dynamic if input uses two-way binding"
    },
    missing_type: {
      code: "missing-type",
      message: "'type' attribute must be specified"
    },
    dynamic_multiple_attribute: {
      code: "dynamic-multiple-attribute",
      message: "'multiple' attribute cannot be dynamic if select uses two-way binding"
    },
    missing_contenteditable_attribute: {
      code: "missing-contenteditable-attribute",
      message: "'contenteditable' attribute is required for textContent, innerHTML and innerText two-way bindings"
    },
    dynamic_contenteditable_attribute: {
      code: "dynamic-contenteditable-attribute",
      message: "'contenteditable' attribute cannot be dynamic if element uses two-way binding"
    },
    invalid_event_modifier_combination: (modifier1, modifier2) => ({
      code: "invalid-event-modifier",
      message: `The '${modifier1}' and '${modifier2}' modifiers cannot be used together`
    }),
    invalid_event_modifier_legacy: (modifier) => ({
      code: "invalid-event-modifier",
      message: `The '${modifier}' modifier cannot be used in legacy mode`
    }),
    invalid_event_modifier: (valid) => ({
      code: "invalid-event-modifier",
      message: `Valid event modifiers are ${valid}`
    }),
    invalid_event_modifier_component: {
      code: "invalid-event-modifier",
      message: "Event modifiers other than 'once' can only be used on DOM elements"
    },
    textarea_duplicate_value: {
      code: "textarea-duplicate-value",
      message: "A <textarea> can have either a value attribute or (equivalently) child content, but not both"
    },
    illegal_attribute: (name2) => ({
      code: "illegal-attribute",
      message: `'${name2}' is not a valid attribute name`
    }),
    invalid_slot_attribute: {
      code: "invalid-slot-attribute",
      message: "slot attribute cannot have a dynamic value"
    },
    duplicate_slot_attribute: (name2) => ({
      code: "duplicate-slot-attribute",
      message: `Duplicate '${name2}' slot`
    }),
    invalid_slotted_content: {
      code: "invalid-slotted-content",
      message: "Element with a slot='...' attribute must be a child of a component or a descendant of a custom element"
    },
    invalid_attribute_head: {
      code: "invalid-attribute",
      message: "<svelte:head> should not have any attributes or directives"
    },
    invalid_action: {
      code: "invalid-action",
      message: "Actions can only be applied to DOM elements, not components"
    },
    invalid_class: {
      code: "invalid-class",
      message: "Classes can only be applied to DOM elements, not components"
    },
    invalid_transition: {
      code: "invalid-transition",
      message: "Transitions can only be applied to DOM elements, not components"
    },
    invalid_let: {
      code: "invalid-let",
      message: "let directive value must be an identifier or an object/array pattern"
    },
    invalid_slot_directive: {
      code: "invalid-slot-directive",
      message: "<slot> cannot have directives"
    },
    dynamic_slot_name: {
      code: "dynamic-slot-name",
      message: "<slot> name cannot be dynamic"
    },
    invalid_slot_name: {
      code: "invalid-slot-name",
      message: "default is a reserved word \u2014 it cannot be used as a slot name"
    },
    invalid_slot_attribute_value_missing: {
      code: "invalid-slot-attribute",
      message: "slot attribute value is missing"
    },
    invalid_slotted_content_fragment: {
      code: "invalid-slotted-content",
      message: "<svelte:fragment> must be a child of a component"
    },
    illegal_attribute_title: {
      code: "illegal-attribute",
      message: "<title> cannot have attributes"
    },
    illegal_structure_title: {
      code: "illegal-structure",
      message: "<title> can only contain text and {tags}"
    },
    duplicate_transition: (directive, parent_directive) => {
      function describe(_directive) {
        return _directive === "transition" ? "a 'transition'" : `an '${_directive}'`;
      }
      const message = directive === parent_directive ? `An element can only have one '${directive}' directive` : `An element cannot have both ${describe(parent_directive)} directive and ${describe(directive)} directive`;
      return {
        code: "duplicate-transition",
        message
      };
    },
    contextual_store: {
      code: "contextual-store",
      message: "Stores must be declared at the top level of the component (this may change in a future version of Svelte)"
    },
    default_export: {
      code: "default-export",
      message: "A component cannot have a default export"
    },
    illegal_declaration: {
      code: "illegal-declaration",
      message: "The $ prefix is reserved, and cannot be used for variable and import names"
    },
    illegal_subscription: {
      code: "illegal-subscription",
      message: 'Cannot reference store value inside <script context="module">'
    },
    illegal_global: (name2) => ({
      code: "illegal-global",
      message: `${name2} is an illegal variable name`
    }),
    illegal_variable_declaration: {
      code: "illegal-variable-declaration",
      message: 'Cannot declare same variable name which is imported inside <script context="module">'
    },
    cyclical_reactive_declaration: (cycle) => ({
      code: "cyclical-reactive-declaration",
      message: `Cyclical dependency detected: ${cycle.join(" \u2192 ")}`
    }),
    invalid_tag_property: {
      code: "invalid-tag-property",
      message: "tag name must be two or more words joined by the '-' character"
    },
    invalid_tag_attribute: {
      code: "invalid-tag-attribute",
      message: "'tag' must be a string literal"
    },
    invalid_namespace_property: (namespace, suggestion) => ({
      code: "invalid-namespace-property",
      message: `Invalid namespace '${namespace}'` + (suggestion ? ` (did you mean '${suggestion}'?)` : "")
    }),
    invalid_namespace_attribute: {
      code: "invalid-namespace-attribute",
      message: "The 'namespace' attribute must be a string literal representing a valid namespace"
    },
    invalid_attribute_value: (name2) => ({
      code: `invalid-${name2}-value`,
      message: `${name2} attribute must be true or false`
    }),
    invalid_options_attribute_unknown: {
      code: "invalid-options-attribute",
      message: "<svelte:options> unknown attribute"
    },
    invalid_options_attribute: {
      code: "invalid-options-attribute",
      message: "<svelte:options> can only have static 'tag', 'namespace', 'accessors', 'immutable' and 'preserveWhitespace' attributes"
    },
    css_invalid_global: {
      code: "css-invalid-global",
      message: ":global(...) can be at the start or end of a selector sequence, but not in the middle"
    },
    css_invalid_global_selector: {
      code: "css-invalid-global-selector",
      message: ":global(...) must contain a single selector"
    },
    css_invalid_global_selector_position: {
      code: "css-invalid-global-selector-position",
      message: ":global(...) not at the start of a selector sequence should not contain type or universal selectors"
    },
    css_invalid_selector: (selector) => ({
      code: "css-invalid-selector",
      message: `Invalid selector "${selector}"`
    }),
    duplicate_animation: {
      code: "duplicate-animation",
      message: "An element can only have one 'animate' directive"
    },
    invalid_animation_immediate: {
      code: "invalid-animation",
      message: "An element that uses the animate directive must be the immediate child of a keyed each block"
    },
    invalid_animation_key: {
      code: "invalid-animation",
      message: "An element that uses the animate directive must be used inside a keyed each block. Did you forget to add a key to your each block?"
    },
    invalid_animation_sole: {
      code: "invalid-animation",
      message: "An element that uses the animate directive must be the sole child of a keyed each block"
    },
    invalid_animation_dynamic_element: {
      code: "invalid-animation",
      message: "<svelte:element> cannot have a animate directive"
    },
    invalid_directive_value: {
      code: "invalid-directive-value",
      message: "Can only bind to an identifier (e.g. `foo`) or a member expression (e.g. `foo.bar` or `foo[baz]`)"
    },
    invalid_const_placement: {
      code: "invalid-const-placement",
      message: "{@const} must be the immediate child of {#if}, {:else if}, {:else}, {#each}, {:then}, {:catch}, <svelte:fragment> or <Component>"
    },
    invalid_const_declaration: (name2) => ({
      code: "invalid-const-declaration",
      message: `'${name2}' has already been declared`
    }),
    invalid_const_update: (name2) => ({
      code: "invalid-const-update",
      message: `'${name2}' is declared using {@const ...} and is read-only`
    }),
    cyclical_const_tags: (cycle) => ({
      code: "cyclical-const-tags",
      message: `Cyclical dependency detected: ${cycle.join(" \u2192 ")}`
    }),
    invalid_component_style_directive: {
      code: "invalid-component-style-directive",
      message: "Style directives cannot be used on components"
    },
    invalid_style_directive_modifier: (valid) => ({
      code: "invalid-style-directive-modifier",
      message: `Valid modifiers for style directives are: ${valid}`
    })
  };
  var regex_contains_term_function_expression = /FunctionExpression/;
  var Expression = class {
    constructor(component, owner, template_scope, info, lazy) {
      this.type = "Expression";
      this.references = /* @__PURE__ */ new Set();
      this.dependencies = /* @__PURE__ */ new Set();
      this.contextual_dependencies = /* @__PURE__ */ new Set();
      this.declarations = [];
      this.uses_context = false;
      Object.defineProperties(this, {
        component: {
          value: component
        }
      });
      this.node = info;
      this.template_scope = template_scope;
      this.owner = owner;
      const { dependencies, contextual_dependencies, references } = this;
      let { map, scope } = create_scopes(info);
      this.scope = scope;
      this.scope_map = map;
      const expression = this;
      let function_expression;
      walk(info, {
        enter(node2, parent, key) {
          if (key === "key" && parent.shorthand)
            return;
          if (node2.type === "MetaProperty")
            return this.skip();
          if (map.has(node2)) {
            scope = map.get(node2);
          }
          if (!function_expression && regex_contains_term_function_expression.test(node2.type)) {
            function_expression = node2;
          }
          if (is_reference(node2, parent)) {
            const { name: name2, nodes } = flatten_reference(node2);
            references.add(name2);
            if (scope.has(name2))
              return;
            if (name2[0] === "$") {
              const store_name = name2.slice(1);
              if (template_scope.names.has(store_name) || scope.has(store_name)) {
                return component.error(node2, compiler_errors.contextual_store);
              }
            }
            if (template_scope.is_let(name2)) {
              if (!lazy) {
                contextual_dependencies.add(name2);
                dependencies.add(name2);
              }
            } else if (template_scope.names.has(name2)) {
              expression.uses_context = true;
              contextual_dependencies.add(name2);
              const owner2 = template_scope.get_owner(name2);
              const is_index = owner2.type === "EachBlock" && owner2.key && name2 === owner2.index;
              if (!lazy || is_index) {
                template_scope.dependencies_for_name.get(name2).forEach((name3) => dependencies.add(name3));
              }
            } else {
              if (!lazy) {
                dependencies.add(name2);
              }
              component.add_reference(node2, name2);
              component.warn_if_undefined(name2, nodes[0], template_scope);
            }
            this.skip();
          }
          let names;
          let deep = false;
          if (function_expression) {
            if (node2.type === "AssignmentExpression") {
              deep = node2.left.type === "MemberExpression";
              names = extract_names(deep ? get_object(node2.left) : node2.left);
            } else if (node2.type === "UpdateExpression") {
              deep = node2.argument.type === "MemberExpression";
              names = extract_names(get_object(node2.argument));
            }
          }
          if (names) {
            names.forEach((name2) => {
              var _a2;
              if (template_scope.names.has(name2)) {
                if (template_scope.is_const(name2)) {
                  component.error(node2, compiler_errors.invalid_const_update(name2));
                }
                template_scope.dependencies_for_name.get(name2).forEach((name3) => {
                  const variable = component.var_lookup.get(name3);
                  if (variable)
                    variable[deep ? "mutated" : "reassigned"] = true;
                });
                const each_block = template_scope.get_owner(name2);
                each_block.has_binding = true;
              } else {
                component.add_reference(node2, name2);
                const variable = component.var_lookup.get(name2);
                if (variable) {
                  variable[deep ? "mutated" : "reassigned"] = true;
                }
                const declaration = (_a2 = scope.find_owner(name2)) === null || _a2 === void 0 ? void 0 : _a2.declarations.get(name2);
                if (declaration) {
                  if (declaration.kind === "const" && !deep) {
                    component.error(node2, {
                      code: "assignment-to-const",
                      message: "You are assigning to a const"
                    });
                  }
                } else if (variable && variable.writable === false && !deep) {
                  component.error(node2, {
                    code: "assignment-to-const",
                    message: "You are assigning to a const"
                  });
                }
              }
            });
          }
        },
        leave(node2) {
          if (map.has(node2)) {
            scope = scope.parent;
          }
          if (node2 === function_expression) {
            function_expression = null;
          }
        }
      });
    }
    dynamic_dependencies() {
      return Array.from(this.dependencies).filter((name2) => {
        if (this.template_scope.is_let(name2))
          return true;
        if (is_reserved_keyword(name2))
          return true;
        const variable = this.component.var_lookup.get(name2);
        return is_dynamic(variable);
      });
    }
    // TODO move this into a render-dom wrapper?
    manipulate(block, ctx) {
      if (this.manipulated)
        return this.manipulated;
      const { component, declarations, scope_map: map, template_scope, owner } = this;
      let scope = this.scope;
      let function_expression;
      let dependencies;
      let contextual_dependencies;
      const node2 = walk(this.node, {
        enter(node3, parent) {
          if (node3.type === "Property" && node3.shorthand) {
            node3.value = clone(node3.value);
            node3.shorthand = false;
          }
          if (map.has(node3)) {
            scope = map.get(node3);
          }
          if (node3.type === "Identifier" && is_reference(node3, parent)) {
            const { name: name2 } = flatten_reference(node3);
            if (scope.has(name2))
              return;
            if (function_expression) {
              if (template_scope.names.has(name2)) {
                contextual_dependencies.add(name2);
                template_scope.dependencies_for_name.get(name2).forEach((dependency) => {
                  dependencies.add(dependency);
                });
              } else {
                dependencies.add(name2);
                component.add_reference(node3, name2);
              }
            } else if (is_contextual(component, template_scope, name2)) {
              const reference = block.renderer.reference(node3, ctx);
              this.replace(reference);
            }
            this.skip();
          }
          if (!function_expression) {
            if (node3.type === "AssignmentExpression")
              ;
            if (node3.type === "FunctionExpression" || node3.type === "ArrowFunctionExpression") {
              function_expression = node3;
              dependencies = /* @__PURE__ */ new Set();
              contextual_dependencies = /* @__PURE__ */ new Set();
            }
          }
        },
        leave(node3, parent) {
          if (map.has(node3))
            scope = scope.parent;
          if (node3 === function_expression) {
            const id2 = component.get_unique_name(sanitize(get_function_name(node3, owner)));
            const declaration = b`const ${id2} = ${node3}`;
            const extract_functions = () => {
              const deps = Array.from(contextual_dependencies);
              const function_expression2 = node3;
              const has_args = function_expression2.params.length > 0;
              function_expression2.params = [
                ...deps.map((name2) => ({ type: "Identifier", name: name2 })),
                ...function_expression2.params
              ];
              const context_args = deps.map((name2) => block.renderer.reference(name2, ctx));
              component.partly_hoisted.push(declaration);
              block.renderer.add_to_context(id2.name);
              const callee = block.renderer.reference(id2);
              this.replace(id2);
              const func_declaration = has_args ? b`function ${id2}(...args) {
								return ${callee}(${context_args}, ...args);
							}` : b`function ${id2}() {
								return ${callee}(${context_args});
							}`;
              return { deps, func_declaration };
            };
            if (owner.type === "ConstTag") {
              if (contextual_dependencies.size === 0) {
                let child_scope = scope;
                walk(node3, {
                  enter(node4, parent2) {
                    if (map.has(node4))
                      child_scope = map.get(node4);
                    if (node4.type === "Identifier" && is_reference(node4, parent2)) {
                      if (child_scope.has(node4.name))
                        return;
                      this.replace(block.renderer.reference(node4, ctx));
                    }
                  },
                  leave(node4) {
                    if (map.has(node4))
                      child_scope = child_scope.parent;
                  }
                });
              } else {
                const { func_declaration } = extract_functions();
                this.replace(func_declaration[0]);
              }
            } else if (dependencies.size === 0 && contextual_dependencies.size === 0) {
              component.fully_hoisted.push(declaration);
              this.replace(id2);
              component.add_var(node3, {
                name: id2.name,
                internal: true,
                hoistable: true,
                referenced: true
              });
            } else if (contextual_dependencies.size === 0) {
              component.partly_hoisted.push(declaration);
              block.renderer.add_to_context(id2.name);
              this.replace(block.renderer.reference(id2));
            } else {
              const { deps, func_declaration } = extract_functions();
              if (owner.type === "Attribute" && owner.parent.name === "slot") {
                const dep_scopes = new Set(deps.map((name2) => template_scope.get_owner(name2)));
                let node4 = owner.parent;
                while (node4 && !dep_scopes.has(node4)) {
                  node4 = node4.parent;
                }
                const func_expression = func_declaration[0];
                if (node4.type === "InlineComponent" || node4.type === "SlotTemplate") {
                  this.replace(func_expression);
                } else {
                  const func_id = component.get_unique_name(id2.name + "_func");
                  block.renderer.add_to_context(func_id.name, true);
                  walk(func_expression, {
                    enter(node5) {
                      if (node5.type === "Identifier" && node5.name === "#ctx") {
                        node5.name = "child_ctx";
                      }
                    }
                  });
                  template_scope.get_owner(deps[0]).contexts.push({
                    type: "DestructuredVariable",
                    key: func_id,
                    modifier: () => func_expression,
                    default_modifier: (node5) => node5
                  });
                  this.replace(block.renderer.reference(func_id));
                }
              } else {
                declarations.push(func_declaration);
              }
            }
            function_expression = null;
            dependencies = null;
            contextual_dependencies = null;
            if (parent && parent.type === "Property") {
              parent.method = false;
            }
          }
          if (node3.type === "AssignmentExpression" || node3.type === "UpdateExpression") {
            const assignee = node3.type === "AssignmentExpression" ? node3.left : node3.argument;
            const object_name = get_object(assignee).name;
            if (scope.has(object_name))
              return;
            const names = new Set(extract_names(assignee));
            const traced = /* @__PURE__ */ new Set();
            names.forEach((name2) => {
              const dependencies2 = template_scope.dependencies_for_name.get(name2);
              if (dependencies2) {
                dependencies2.forEach((name3) => traced.add(name3));
              } else {
                traced.add(name2);
              }
            });
            const context = block.bindings.get(object_name);
            if (context) {
              const { snippet, object, property } = context;
              const replaced = replace_object(assignee, snippet);
              if (node3.type === "AssignmentExpression") {
                node3.left = replaced;
              } else {
                node3.argument = replaced;
              }
              contextual_dependencies.add(object.name);
              contextual_dependencies.add(property.name);
            }
            this.replace(invalidate(block.renderer, scope, node3, traced));
          }
        }
      });
      if (declarations.length > 0) {
        block.maintain_context = true;
        declarations.forEach((declaration) => {
          block.chunks.init.push(declaration);
        });
      }
      return this.manipulated = node2;
    }
  };
  function get_function_name(_node, parent) {
    if (parent.type === "EventHandler") {
      return `${parent.name}_handler`;
    }
    if (parent.type === "Action") {
      return `${parent.name}_function`;
    }
    return "func";
  }
  function unpack_destructuring({ contexts, node: node2, modifier = (node3) => node3, default_modifier = (node3) => node3, scope, component, context_rest_properties, in_rest_element = false }) {
    if (!node2)
      return;
    if (node2.type === "Identifier") {
      contexts.push({
        type: "DestructuredVariable",
        key: node2,
        modifier,
        default_modifier
      });
      if (in_rest_element) {
        context_rest_properties.set(node2.name, node2);
      }
    } else if (node2.type === "ArrayPattern") {
      node2.elements.forEach((element, i) => {
        if (!element) {
          return;
        } else if (element.type === "RestElement") {
          unpack_destructuring({
            contexts,
            node: element.argument,
            modifier: (node3) => x`${modifier(node3)}.slice(${i})`,
            default_modifier,
            scope,
            component,
            context_rest_properties,
            in_rest_element: true
          });
        } else if (element.type === "AssignmentPattern") {
          const n2 = contexts.length;
          mark_referenced(element.right, scope, component);
          unpack_destructuring({
            contexts,
            node: element.left,
            modifier: (node3) => x`${modifier(node3)}[${i}]`,
            default_modifier: (node3, to_ctx) => x`${node3} !== undefined ? ${node3} : ${update_reference(contexts, n2, element.right, to_ctx)}`,
            scope,
            component,
            context_rest_properties,
            in_rest_element
          });
        } else {
          unpack_destructuring({
            contexts,
            node: element,
            modifier: (node3) => x`${modifier(node3)}[${i}]`,
            default_modifier,
            scope,
            component,
            context_rest_properties,
            in_rest_element
          });
        }
      });
    } else if (node2.type === "ObjectPattern") {
      const used_properties = [];
      node2.properties.forEach((property) => {
        if (property.type === "RestElement") {
          unpack_destructuring({
            contexts,
            node: property.argument,
            modifier: (node3) => x`@object_without_properties(${modifier(node3)}, [${used_properties}])`,
            default_modifier,
            scope,
            component,
            context_rest_properties,
            in_rest_element: true
          });
        } else if (property.type === "Property") {
          const key = property.key;
          const value = property.value;
          let new_modifier;
          if (property.computed) {
            const property_name = component.get_unique_name("computed_property");
            contexts.push({
              type: "ComputedProperty",
              property_name,
              key
            });
            new_modifier = (node3) => x`${modifier(node3)}[${property_name}]`;
            used_properties.push(x`${property_name}`);
          } else if (key.type === "Identifier") {
            const property_name = key.name;
            new_modifier = (node3) => x`${modifier(node3)}.${property_name}`;
            used_properties.push(x`"${property_name}"`);
          } else if (key.type === "Literal") {
            const property_name = key.value;
            new_modifier = (node3) => x`${modifier(node3)}["${property_name}"]`;
            used_properties.push(x`"${property_name}"`);
          }
          if (value.type === "AssignmentPattern") {
            const n2 = contexts.length;
            mark_referenced(value.right, scope, component);
            unpack_destructuring({
              contexts,
              node: value.left,
              modifier: new_modifier,
              default_modifier: (node3, to_ctx) => x`${node3} !== undefined ? ${node3} : ${update_reference(contexts, n2, value.right, to_ctx)}`,
              scope,
              component,
              context_rest_properties,
              in_rest_element
            });
          } else {
            unpack_destructuring({
              contexts,
              node: value,
              modifier: new_modifier,
              default_modifier,
              scope,
              component,
              context_rest_properties,
              in_rest_element
            });
          }
        }
      });
    }
  }
  function update_reference(contexts, n2, expression, to_ctx) {
    const find_from_context = (node2) => {
      for (let i = n2; i < contexts.length; i++) {
        const cur_context = contexts[i];
        if (cur_context.type !== "DestructuredVariable")
          continue;
        const { key } = cur_context;
        if (node2.name === key.name) {
          throw new Error(`Cannot access '${node2.name}' before initialization`);
        }
      }
      return to_ctx(node2.name);
    };
    if (expression.type === "Identifier") {
      return find_from_context(expression);
    }
    expression = clone(expression);
    walk(expression, {
      enter(node2, parent) {
        if (is_reference(node2, parent)) {
          this.replace(find_from_context(node2));
          this.skip();
        }
      }
    });
    return expression;
  }
  function mark_referenced(node2, scope, component) {
    walk(node2, {
      enter(node3, parent) {
        if (is_reference(node3, parent)) {
          const { name: name2 } = flatten_reference(node3);
          if (!scope.is_let(name2) && !scope.names.has(name2)) {
            component.add_reference(node3, name2);
          }
        }
      }
    });
  }
  var allowed_parents = /* @__PURE__ */ new Set(["EachBlock", "CatchBlock", "ThenBlock", "InlineComponent", "SlotTemplate", "IfBlock", "ElseBlock"]);
  var ConstTag = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.contexts = [];
      this.context_rest_properties = /* @__PURE__ */ new Map();
      this.assignees = /* @__PURE__ */ new Set();
      this.dependencies = /* @__PURE__ */ new Set();
      if (!allowed_parents.has(parent.type)) {
        component.error(info, compiler_errors.invalid_const_placement);
      }
      this.node = info;
      this.scope = scope;
      const { assignees, dependencies } = this;
      extract_identifiers(info.expression.left).forEach(({ name: name2 }) => {
        assignees.add(name2);
        const owner = this.scope.get_owner(name2);
        if (owner === parent) {
          component.error(info, compiler_errors.invalid_const_declaration(name2));
        }
      });
      walk(info.expression.right, {
        enter(node2, parent2) {
          if (is_reference(node2, parent2)) {
            const identifier = get_object(node2);
            const { name: name2 } = identifier;
            dependencies.add(name2);
          }
        }
      });
    }
    parse_expression() {
      unpack_destructuring({
        contexts: this.contexts,
        node: this.node.expression.left,
        scope: this.scope,
        component: this.component,
        context_rest_properties: this.context_rest_properties
      });
      this.expression = new Expression(this.component, this, this.scope, this.node.expression.right);
      this.contexts.forEach((context) => {
        if (context.type !== "DestructuredVariable")
          return;
        const owner = this.scope.get_owner(context.key.name);
        if (owner && owner.type === "ConstTag" && owner.parent === this.parent) {
          this.component.error(this.node, compiler_errors.invalid_const_declaration(context.key.name));
        }
        this.scope.add(context.key.name, this.expression.dependencies, this);
      });
    }
  };
  var PendingBlock = class extends AbstractBlock {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.children = map_children(component, parent, scope, info.children);
      if (!info.skip) {
        this.warn_if_empty_block();
      }
    }
  };
  var CatchBlock = class extends AbstractBlock {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.scope = scope.child();
      if (parent.catch_node) {
        parent.catch_contexts.forEach((context) => {
          if (context.type !== "DestructuredVariable")
            return;
          this.scope.add(context.key.name, parent.expression.dependencies, this);
        });
      }
      [this.const_tags, this.children] = get_const_tags(info.children, component, this, parent);
      if (!info.skip) {
        this.warn_if_empty_block();
      }
    }
  };
  var AwaitBlock = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.context_rest_properties = /* @__PURE__ */ new Map();
      this.expression = new Expression(component, this, scope, info.expression);
      this.then_node = info.value;
      this.catch_node = info.error;
      if (this.then_node) {
        this.then_contexts = [];
        unpack_destructuring({ contexts: this.then_contexts, node: info.value, scope, component, context_rest_properties: this.context_rest_properties });
      }
      if (this.catch_node) {
        this.catch_contexts = [];
        unpack_destructuring({ contexts: this.catch_contexts, node: info.error, scope, component, context_rest_properties: this.context_rest_properties });
      }
      this.pending = new PendingBlock(component, this, scope, info.pending);
      this.then = new ThenBlock(component, this, scope, info.then);
      this.catch = new CatchBlock(component, this, scope, info.catch);
    }
  };
  var regex_contains_term_function_expression$1 = /FunctionExpression/;
  var EventHandler = class extends Node$1 {
    constructor(component, parent, template_scope, info) {
      super(component, parent, template_scope, info);
      this.uses_context = false;
      this.can_make_passive = false;
      this.name = info.name;
      this.modifiers = new Set(info.modifiers);
      if (info.expression) {
        this.expression = new Expression(component, this, template_scope, info.expression);
        this.uses_context = this.expression.uses_context;
        if (regex_contains_term_function_expression$1.test(info.expression.type) && info.expression.params.length === 0) {
          this.can_make_passive = true;
        } else if (info.expression.type === "Identifier") {
          let node2 = component.node_for_declaration.get(info.expression.name);
          if (node2) {
            if (node2.type === "VariableDeclaration") {
              const declarator = node2.declarations.find((d2) => d2.id.name === info.expression.name);
              node2 = declarator && declarator.init;
            }
            if (node2 && (node2.type === "FunctionExpression" || node2.type === "FunctionDeclaration" || node2.type === "ArrowFunctionExpression") && node2.params.length === 0) {
              this.can_make_passive = true;
            }
          }
        }
      } else {
        this.handler_name = component.get_unique_name(`${sanitize(this.name)}_handler`);
      }
    }
    get reassigned() {
      if (!this.expression) {
        return false;
      }
      const node2 = this.expression.node;
      if (regex_contains_term_function_expression$1.test(node2.type)) {
        return false;
      }
      return this.expression.dynamic_dependencies().length > 0;
    }
  };
  var Action = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      const object = info.name.split(".")[0];
      component.warn_if_undefined(object, info, scope);
      this.name = info.name;
      component.add_reference(this, object);
      this.expression = info.expression ? new Expression(component, this, scope, info.expression) : null;
      this.template_scope = scope;
      this.uses_context = this.expression && this.expression.uses_context;
    }
  };
  var Body = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.handlers = [];
      this.actions = [];
      info.attributes.forEach((node2) => {
        if (node2.type === "EventHandler") {
          this.handlers.push(new EventHandler(component, this, scope, node2));
        } else if (node2.type === "Action") {
          this.actions.push(new Action(component, this, scope, node2));
        }
      });
    }
  };
  var Comment$1 = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.data = info.data;
      this.ignores = info.ignores;
    }
  };
  var ElseBlock = class extends AbstractBlock {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.scope = scope.child();
      [this.const_tags, this.children] = get_const_tags(info.children, component, this, this);
      this.warn_if_empty_block();
    }
  };
  var EachBlock = class extends AbstractBlock {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.has_binding = false;
      this.has_index_binding = false;
      this.expression = new Expression(component, this, scope, info.expression);
      this.context = info.context.name || "each";
      this.context_node = info.context;
      this.index = info.index;
      this.scope = scope.child();
      this.context_rest_properties = /* @__PURE__ */ new Map();
      this.contexts = [];
      unpack_destructuring({ contexts: this.contexts, node: info.context, scope, component, context_rest_properties: this.context_rest_properties });
      this.contexts.forEach((context) => {
        if (context.type !== "DestructuredVariable")
          return;
        this.scope.add(context.key.name, this.expression.dependencies, this);
      });
      if (this.index) {
        const dependencies = info.key ? this.expression.dependencies : /* @__PURE__ */ new Set([]);
        this.scope.add(this.index, dependencies, this);
      }
      this.key = info.key ? new Expression(component, this, this.scope, info.key) : null;
      this.has_animation = false;
      [this.const_tags, this.children] = get_const_tags(info.children, component, this, this);
      if (this.has_animation) {
        this.children = this.children.filter((child) => !isEmptyNode(child) && !isCommentNode(child));
        if (this.children.length !== 1) {
          const child = this.children.find((child2) => !!child2.animation);
          component.error(child.animation, compiler_errors.invalid_animation_sole);
          return;
        }
      }
      this.warn_if_empty_block();
      this.else = info.else ? new ElseBlock(component, this, this.scope, info.else) : null;
    }
  };
  function isEmptyNode(node2) {
    return node2.type === "Text" && node2.data.trim() === "";
  }
  function isCommentNode(node2) {
    return node2.type === "Comment";
  }
  var read_only_media_attributes = /* @__PURE__ */ new Set([
    "duration",
    "buffered",
    "seekable",
    "played",
    "seeking",
    "ended",
    "videoHeight",
    "videoWidth",
    "naturalWidth",
    "naturalHeight",
    "readyState"
  ]);
  var Binding = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      if (info.expression.type !== "Identifier" && info.expression.type !== "MemberExpression") {
        component.error(info, compiler_errors.invalid_directive_value);
        return;
      }
      this.name = info.name;
      this.expression = new Expression(component, this, scope, info.expression);
      this.raw_expression = clone(info.expression);
      const { name: name2 } = get_object(this.expression.node);
      this.is_contextual = Array.from(this.expression.references).some((name3) => scope.names.has(name3));
      if (this.is_contextual)
        this.validate_binding_rest_properties(scope);
      if (scope.is_let(name2)) {
        component.error(this, compiler_errors.invalid_binding_let);
        return;
      } else if (scope.names.has(name2)) {
        if (scope.is_await(name2)) {
          component.error(this, compiler_errors.invalid_binding_await);
          return;
        }
        if (scope.is_const(name2)) {
          component.error(this, compiler_errors.invalid_binding_const);
        }
        scope.dependencies_for_name.get(name2).forEach((name3) => {
          const variable = component.var_lookup.get(name3);
          if (variable) {
            variable.mutated = true;
          }
        });
      } else {
        const variable = component.var_lookup.get(name2);
        if (!variable || variable.global) {
          component.error(this.expression.node, compiler_errors.binding_undeclared(name2));
          return;
        }
        variable[this.expression.node.type === "MemberExpression" ? "mutated" : "reassigned"] = true;
        if (info.expression.type === "Identifier" && !variable.writable) {
          component.error(this.expression.node, compiler_errors.invalid_binding_writable);
          return;
        }
      }
      const type = parent.get_static_attribute_value("type");
      this.is_readonly = regex_dimensions.test(this.name) || regex_box_size.test(this.name) || isElement(parent) && (parent.is_media_node() && read_only_media_attributes.has(this.name) || parent.name === "input" && type === "file");
    }
    is_readonly_media_attribute() {
      return read_only_media_attributes.has(this.name);
    }
    validate_binding_rest_properties(scope) {
      this.expression.references.forEach((name2) => {
        const each_block = scope.get_owner(name2);
        if (each_block && each_block.type === "EachBlock") {
          const rest_node = each_block.context_rest_properties.get(name2);
          if (rest_node) {
            this.component.warn(rest_node, compiler_warnings.invalid_rest_eachblock_binding(name2));
          }
        }
      });
    }
  };
  function isElement(node2) {
    return !!node2.is_media_node;
  }
  var valid_bindings = [
    "fullscreenElement",
    "visibilityState"
  ];
  var Document = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.handlers = [];
      this.bindings = [];
      this.actions = [];
      info.attributes.forEach((node2) => {
        if (node2.type === "EventHandler") {
          this.handlers.push(new EventHandler(component, this, scope, node2));
        } else if (node2.type === "Binding") {
          if (!~valid_bindings.indexOf(node2.name)) {
            const match = fuzzymatch(node2.name, valid_bindings);
            if (match) {
              return component.error(node2, compiler_errors.invalid_binding_on(node2.name, "<svelte:document>", ` (did you mean '${match}'?)`));
            } else {
              return component.error(node2, compiler_errors.invalid_binding_on(node2.name, "<svelte:document>", ` \u2014 valid bindings are ${list$1(valid_bindings)}`));
            }
          }
          this.bindings.push(new Binding(component, this, scope, node2));
        } else if (node2.type === "Action") {
          this.actions.push(new Action(component, this, scope, node2));
        }
      });
      this.validate();
    }
    validate() {
      const handlers_map = /* @__PURE__ */ new Set();
      this.handlers.forEach((handler) => handlers_map.add(handler.name));
      if (handlers_map.has("mouseenter") || handlers_map.has("mouseleave")) {
        this.component.warn(this, compiler_warnings.avoid_mouse_events_on_document);
      }
    }
  };
  function string_literal(data2) {
    return {
      type: "Literal",
      value: data2
    };
  }
  var escaped = {
    '"': "&quot;",
    "'": "&#39;",
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;"
  };
  var regex_html_characters_to_escape = /["'&<>]/g;
  function escape_html(html2) {
    return String(html2).replace(regex_html_characters_to_escape, (match) => escaped[match]);
  }
  var regex_template_characters_to_escape = /(\${|`|\\)/g;
  function escape_template(str) {
    return str.replace(regex_template_characters_to_escape, "\\$1");
  }
  function add_to_set(a, b2) {
    b2.forEach((item) => {
      a.add(item);
    });
  }
  var Attribute = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.scope = scope;
      if (info.type === "Spread") {
        this.name = null;
        this.is_spread = true;
        this.is_true = false;
        this.expression = new Expression(component, this, scope, info.expression);
        this.dependencies = this.expression.dependencies;
        this.chunks = null;
        this.is_static = false;
      } else {
        this.name = info.name;
        this.is_true = info.value === true;
        this.is_static = true;
        this.dependencies = /* @__PURE__ */ new Set();
        this.chunks = this.is_true ? [] : info.value.map((node2) => {
          if (node2.type === "Text")
            return node2;
          this.is_static = false;
          const expression = new Expression(component, this, scope, node2.expression);
          add_to_set(this.dependencies, expression.dependencies);
          return expression;
        });
      }
    }
    get_dependencies() {
      if (this.is_spread)
        return this.expression.dynamic_dependencies();
      const dependencies = /* @__PURE__ */ new Set();
      this.chunks.forEach((chunk) => {
        if (chunk.type === "Expression") {
          add_to_set(dependencies, chunk.dynamic_dependencies());
        }
      });
      return Array.from(dependencies);
    }
    get_value(block) {
      if (this.is_true)
        return x`true`;
      if (this.chunks.length === 0)
        return x`""`;
      if (this.chunks.length === 1) {
        return this.chunks[0].type === "Text" ? string_literal(this.chunks[0].data) : this.chunks[0].manipulate(block);
      }
      let expression = this.chunks.map((chunk) => chunk.type === "Text" ? string_literal(chunk.data) : chunk.manipulate(block)).reduce((lhs, rhs) => x`${lhs} + ${rhs}`);
      if (this.chunks[0].type !== "Text") {
        expression = x`"" + ${expression}`;
      }
      return expression;
    }
    get_static_value() {
      if (!this.is_static)
        return null;
      return this.is_true ? true : this.chunks[0] ? this.chunks[0].data : "";
    }
    should_cache() {
      return this.is_static ? false : this.chunks.length === 1 ? this.chunks[0].node.type !== "Identifier" || this.scope.names.has(this.chunks[0].node.name) : true;
    }
  };
  var Transition = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      component.warn_if_undefined(info.name, info, scope);
      this.name = info.name;
      component.add_reference(this, info.name.split(".")[0]);
      this.directive = info.intro && info.outro ? "transition" : info.intro ? "in" : "out";
      this.is_local = info.modifiers.includes("local");
      if (info.intro && parent.intro || info.outro && parent.outro) {
        const parent_transition = parent.intro || parent.outro;
        component.error(info, compiler_errors.duplicate_transition(this.directive, parent_transition.directive));
        return;
      }
      this.expression = info.expression ? new Expression(component, this, scope, info.expression) : null;
    }
  };
  var Animation = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      component.warn_if_undefined(info.name, info, scope);
      this.name = info.name;
      component.add_reference(this, info.name.split(".")[0]);
      if (parent.animation) {
        component.error(this, compiler_errors.duplicate_animation);
        return;
      }
      const block = parent.parent;
      if (!block || block.type !== "EachBlock") {
        component.error(this, compiler_errors.invalid_animation_immediate);
        return;
      }
      if (!block.key) {
        component.error(this, compiler_errors.invalid_animation_key);
        return;
      }
      block.has_animation = true;
      this.expression = info.expression ? new Expression(component, this, scope, info.expression, true) : null;
    }
  };
  var Class = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.name = info.name;
      this.expression = info.expression ? new Expression(component, this, scope, info.expression) : null;
    }
  };
  function nodes_to_template_literal(value) {
    const literal2 = {
      type: "TemplateLiteral",
      expressions: [],
      quasis: []
    };
    let quasi = {
      type: "TemplateElement",
      value: { raw: "", cooked: null },
      tail: false
    };
    value.forEach((node2) => {
      if (node2.type === "Text") {
        quasi.value.raw += node2.raw;
      } else if (node2.type === "MustacheTag") {
        literal2.quasis.push(quasi);
        literal2.expressions.push(node2.expression);
        quasi = {
          type: "TemplateElement",
          value: { raw: "", cooked: null },
          tail: false
        };
      }
    });
    quasi.tail = true;
    literal2.quasis.push(quasi);
    return literal2;
  }
  var valid_modifiers = /* @__PURE__ */ new Set(["important"]);
  var StyleDirective = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.name = info.name;
      this.modifiers = new Set(info.modifiers);
      for (const modifier of this.modifiers) {
        if (!valid_modifiers.has(modifier)) {
          component.error(this, compiler_errors.invalid_style_directive_modifier(list$1([...valid_modifiers])));
        }
      }
      if (info.value === true || info.value.length === 1 && info.value[0].type === "MustacheTag") {
        const identifier = info.value === true ? {
          type: "Identifier",
          start: info.end - info.name.length,
          end: info.end,
          name: info.name
        } : info.value[0].expression;
        this.expression = new Expression(component, this, scope, identifier);
        this.should_cache = false;
      } else {
        const raw_expression = nodes_to_template_literal(info.value);
        this.expression = new Expression(component, this, scope, raw_expression);
        this.should_cache = raw_expression.expressions.length > 0;
      }
    }
    get important() {
      return this.modifiers.has("important");
    }
  };
  var elements_without_text = /* @__PURE__ */ new Set([
    "audio",
    "datalist",
    "dl",
    "optgroup",
    "select",
    "video"
  ]);
  var regex_ends_with_svg = /svg$/;
  var Text = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.data = info.data;
      this.synthetic = info.synthetic || false;
    }
    should_skip() {
      if (regex_non_whitespace_character.test(this.data))
        return false;
      const parent_element = this.find_nearest(/(?:Element|InlineComponent|SlotTemplate|Head)/);
      if (!parent_element)
        return false;
      if (parent_element.type === "Head")
        return true;
      if (parent_element.type === "InlineComponent")
        return parent_element.children.length === 1 && this === parent_element.children[0];
      if (regex_ends_with_svg.test(parent_element.namespace)) {
        if (this.prev && this.prev.type === "Element" && this.prev.name === "tspan")
          return false;
      }
      return parent_element.namespace || elements_without_text.has(parent_element.name);
    }
    keep_space() {
      if (this.component.component_options.preserveWhitespace)
        return true;
      return this.within_pre();
    }
    within_pre() {
      let node2 = this.parent;
      while (node2) {
        if (node2.type === "Element" && node2.name === "pre") {
          return true;
        }
        node2 = node2.parent;
      }
      return false;
    }
  };
  var foreign = "https://svelte.dev/docs#template-syntax-svelte-options";
  var html = "http://www.w3.org/1999/xhtml";
  var mathml = "http://www.w3.org/1998/Math/MathML";
  var svg$1 = "http://www.w3.org/2000/svg";
  var xlink = "http://www.w3.org/1999/xlink";
  var xml = "http://www.w3.org/XML/1998/namespace";
  var xmlns = "http://www.w3.org/2000/xmlns";
  var valid_namespaces = [
    "foreign",
    "html",
    "mathml",
    "svg",
    "xlink",
    "xml",
    "xmlns",
    foreign,
    html,
    mathml,
    svg$1,
    xlink,
    xml,
    xmlns
  ];
  var namespaces = { foreign, html, mathml, svg: svg$1, xlink, xml, xmlns };
  var CONTENTEDITABLE_BINDINGS = [
    "textContent",
    "innerHTML",
    "innerText"
  ];
  function is_input_or_textarea(node2) {
    return node2.name === "textarea" || node2.name === "input";
  }
  function is_attr_contenteditable(attribute) {
    return attribute.name === "contenteditable";
  }
  function has_contenteditable_attr(node2) {
    return node2.attributes.some(is_attr_contenteditable);
  }
  function is_contenteditable(node2) {
    return !is_input_or_textarea(node2) && has_contenteditable_attr(node2);
  }
  function is_name_contenteditable(name2) {
    return CONTENTEDITABLE_BINDINGS.includes(name2);
  }
  function get_contenteditable_attr(node2) {
    return node2.attributes.find(is_attr_contenteditable);
  }
  var applicable = /* @__PURE__ */ new Set(["Identifier", "ObjectExpression", "ArrayExpression", "Property"]);
  var Let = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.names = [];
      this.name = { type: "Identifier", name: info.name };
      const { names } = this;
      if (info.expression) {
        this.value = info.expression;
        walk(info.expression, {
          enter(node2) {
            if (!applicable.has(node2.type)) {
              return component.error(node2, compiler_errors.invalid_let);
            }
            if (node2.type === "Identifier") {
              names.push(node2.name);
            }
            if (node2.type === "ArrayExpression") {
              node2.type = "ArrayPattern";
            }
            if (node2.type === "ObjectExpression") {
              node2.type = "ObjectPattern";
            }
          }
        });
      } else {
        names.push(this.name.name);
      }
    }
  };
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function unwrapExports(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
  }
  function createCommonjsModule(fn2, module) {
    return module = { exports: {} }, fn2(module, module.exports), module.exports;
  }
  function getCjsExportFromNamespace(n2) {
    return n2 && n2["default"] || n2;
  }
  var iteratorProxy_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function iteratorProxy() {
      var values = this;
      var index = 0;
      var iter = {
        "@@iterator": function iterator() {
          return iter;
        },
        next: function next() {
          if (index < values.length) {
            var value = values[index];
            index = index + 1;
            return {
              done: false,
              value
            };
          } else {
            return {
              done: true
            };
          }
        }
      };
      return iter;
    }
    var _default = iteratorProxy;
    exports.default = _default;
  });
  unwrapExports(iteratorProxy_1);
  var iterationDecorator_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = iterationDecorator;
    var _iteratorProxy = _interopRequireDefault(iteratorProxy_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function iterationDecorator(collection, entries) {
      if (typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol") {
        Object.defineProperty(collection, Symbol.iterator, {
          value: _iteratorProxy.default.bind(entries)
        });
      }
      return collection;
    }
  });
  unwrapExports(iterationDecorator_1);
  var ariaPropsMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var properties2 = [["aria-activedescendant", {
      "type": "id"
    }], ["aria-atomic", {
      "type": "boolean"
    }], ["aria-autocomplete", {
      "type": "token",
      "values": ["inline", "list", "both", "none"]
    }], ["aria-busy", {
      "type": "boolean"
    }], ["aria-checked", {
      "type": "tristate"
    }], ["aria-colcount", {
      type: "integer"
    }], ["aria-colindex", {
      type: "integer"
    }], ["aria-colspan", {
      type: "integer"
    }], ["aria-controls", {
      "type": "idlist"
    }], ["aria-current", {
      type: "token",
      values: ["page", "step", "location", "date", "time", true, false]
    }], ["aria-describedby", {
      "type": "idlist"
    }], ["aria-details", {
      "type": "id"
    }], ["aria-disabled", {
      "type": "boolean"
    }], ["aria-dropeffect", {
      "type": "tokenlist",
      "values": ["copy", "execute", "link", "move", "none", "popup"]
    }], ["aria-errormessage", {
      "type": "id"
    }], ["aria-expanded", {
      "type": "boolean",
      "allowundefined": true
    }], ["aria-flowto", {
      "type": "idlist"
    }], ["aria-grabbed", {
      "type": "boolean",
      "allowundefined": true
    }], ["aria-haspopup", {
      "type": "token",
      "values": [false, true, "menu", "listbox", "tree", "grid", "dialog"]
    }], ["aria-hidden", {
      "type": "boolean",
      "allowundefined": true
    }], ["aria-invalid", {
      "type": "token",
      "values": ["grammar", false, "spelling", true]
    }], ["aria-keyshortcuts", {
      type: "string"
    }], ["aria-label", {
      "type": "string"
    }], ["aria-labelledby", {
      "type": "idlist"
    }], ["aria-level", {
      "type": "integer"
    }], ["aria-live", {
      "type": "token",
      "values": ["assertive", "off", "polite"]
    }], ["aria-modal", {
      type: "boolean"
    }], ["aria-multiline", {
      "type": "boolean"
    }], ["aria-multiselectable", {
      "type": "boolean"
    }], ["aria-orientation", {
      "type": "token",
      "values": ["vertical", "undefined", "horizontal"]
    }], ["aria-owns", {
      "type": "idlist"
    }], ["aria-placeholder", {
      type: "string"
    }], ["aria-posinset", {
      "type": "integer"
    }], ["aria-pressed", {
      "type": "tristate"
    }], ["aria-readonly", {
      "type": "boolean"
    }], ["aria-relevant", {
      "type": "tokenlist",
      "values": ["additions", "all", "removals", "text"]
    }], ["aria-required", {
      "type": "boolean"
    }], ["aria-roledescription", {
      type: "string"
    }], ["aria-rowcount", {
      type: "integer"
    }], ["aria-rowindex", {
      type: "integer"
    }], ["aria-rowspan", {
      type: "integer"
    }], ["aria-selected", {
      "type": "boolean",
      "allowundefined": true
    }], ["aria-setsize", {
      "type": "integer"
    }], ["aria-sort", {
      "type": "token",
      "values": ["ascending", "descending", "none", "other"]
    }], ["aria-valuemax", {
      "type": "number"
    }], ["aria-valuemin", {
      "type": "number"
    }], ["aria-valuenow", {
      "type": "number"
    }], ["aria-valuetext", {
      "type": "string"
    }]];
    var ariaPropsMap = {
      entries: function entries() {
        return properties2;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(properties2), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
            fn2.call(thisArg, values, key, properties2);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key) {
        var item = properties2.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!ariaPropsMap.get(key);
      },
      keys: function keys2() {
        return properties2.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return properties2.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(ariaPropsMap, ariaPropsMap.entries());
    exports.default = _default;
  });
  unwrapExports(ariaPropsMap_1);
  var domMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var dom2 = [["a", {
      reserved: false
    }], ["abbr", {
      reserved: false
    }], ["acronym", {
      reserved: false
    }], ["address", {
      reserved: false
    }], ["applet", {
      reserved: false
    }], ["area", {
      reserved: false
    }], ["article", {
      reserved: false
    }], ["aside", {
      reserved: false
    }], ["audio", {
      reserved: false
    }], ["b", {
      reserved: false
    }], ["base", {
      reserved: true
    }], ["bdi", {
      reserved: false
    }], ["bdo", {
      reserved: false
    }], ["big", {
      reserved: false
    }], ["blink", {
      reserved: false
    }], ["blockquote", {
      reserved: false
    }], ["body", {
      reserved: false
    }], ["br", {
      reserved: false
    }], ["button", {
      reserved: false
    }], ["canvas", {
      reserved: false
    }], ["caption", {
      reserved: false
    }], ["center", {
      reserved: false
    }], ["cite", {
      reserved: false
    }], ["code", {
      reserved: false
    }], ["col", {
      reserved: true
    }], ["colgroup", {
      reserved: true
    }], ["content", {
      reserved: false
    }], ["data", {
      reserved: false
    }], ["datalist", {
      reserved: false
    }], ["dd", {
      reserved: false
    }], ["del", {
      reserved: false
    }], ["details", {
      reserved: false
    }], ["dfn", {
      reserved: false
    }], ["dialog", {
      reserved: false
    }], ["dir", {
      reserved: false
    }], ["div", {
      reserved: false
    }], ["dl", {
      reserved: false
    }], ["dt", {
      reserved: false
    }], ["em", {
      reserved: false
    }], ["embed", {
      reserved: false
    }], ["fieldset", {
      reserved: false
    }], ["figcaption", {
      reserved: false
    }], ["figure", {
      reserved: false
    }], ["font", {
      reserved: false
    }], ["footer", {
      reserved: false
    }], ["form", {
      reserved: false
    }], ["frame", {
      reserved: false
    }], ["frameset", {
      reserved: false
    }], ["h1", {
      reserved: false
    }], ["h2", {
      reserved: false
    }], ["h3", {
      reserved: false
    }], ["h4", {
      reserved: false
    }], ["h5", {
      reserved: false
    }], ["h6", {
      reserved: false
    }], ["head", {
      reserved: true
    }], ["header", {
      reserved: false
    }], ["hgroup", {
      reserved: false
    }], ["hr", {
      reserved: false
    }], ["html", {
      reserved: true
    }], ["i", {
      reserved: false
    }], ["iframe", {
      reserved: false
    }], ["img", {
      reserved: false
    }], ["input", {
      reserved: false
    }], ["ins", {
      reserved: false
    }], ["kbd", {
      reserved: false
    }], ["keygen", {
      reserved: false
    }], ["label", {
      reserved: false
    }], ["legend", {
      reserved: false
    }], ["li", {
      reserved: false
    }], ["link", {
      reserved: true
    }], ["main", {
      reserved: false
    }], ["map", {
      reserved: false
    }], ["mark", {
      reserved: false
    }], ["marquee", {
      reserved: false
    }], ["menu", {
      reserved: false
    }], ["menuitem", {
      reserved: false
    }], ["meta", {
      reserved: true
    }], ["meter", {
      reserved: false
    }], ["nav", {
      reserved: false
    }], ["noembed", {
      reserved: true
    }], ["noscript", {
      reserved: true
    }], ["object", {
      reserved: false
    }], ["ol", {
      reserved: false
    }], ["optgroup", {
      reserved: false
    }], ["option", {
      reserved: false
    }], ["output", {
      reserved: false
    }], ["p", {
      reserved: false
    }], ["param", {
      reserved: true
    }], ["picture", {
      reserved: true
    }], ["pre", {
      reserved: false
    }], ["progress", {
      reserved: false
    }], ["q", {
      reserved: false
    }], ["rp", {
      reserved: false
    }], ["rt", {
      reserved: false
    }], ["rtc", {
      reserved: false
    }], ["ruby", {
      reserved: false
    }], ["s", {
      reserved: false
    }], ["samp", {
      reserved: false
    }], ["script", {
      reserved: true
    }], ["section", {
      reserved: false
    }], ["select", {
      reserved: false
    }], ["small", {
      reserved: false
    }], ["source", {
      reserved: true
    }], ["spacer", {
      reserved: false
    }], ["span", {
      reserved: false
    }], ["strike", {
      reserved: false
    }], ["strong", {
      reserved: false
    }], ["style", {
      reserved: true
    }], ["sub", {
      reserved: false
    }], ["summary", {
      reserved: false
    }], ["sup", {
      reserved: false
    }], ["table", {
      reserved: false
    }], ["tbody", {
      reserved: false
    }], ["td", {
      reserved: false
    }], ["textarea", {
      reserved: false
    }], ["tfoot", {
      reserved: false
    }], ["th", {
      reserved: false
    }], ["thead", {
      reserved: false
    }], ["time", {
      reserved: false
    }], ["title", {
      reserved: true
    }], ["tr", {
      reserved: false
    }], ["track", {
      reserved: true
    }], ["tt", {
      reserved: false
    }], ["u", {
      reserved: false
    }], ["ul", {
      reserved: false
    }], ["var", {
      reserved: false
    }], ["video", {
      reserved: false
    }], ["wbr", {
      reserved: false
    }], ["xmp", {
      reserved: false
    }]];
    var domMap = {
      entries: function entries() {
        return dom2;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(dom2), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
            fn2.call(thisArg, values, key, dom2);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key) {
        var item = dom2.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!domMap.get(key);
      },
      keys: function keys2() {
        return dom2.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return dom2.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(domMap, domMap.entries());
    exports.default = _default;
  });
  unwrapExports(domMap_1);
  var commandRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var commandRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "menuitem"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget"]]
    };
    var _default = commandRole;
    exports.default = _default;
  });
  unwrapExports(commandRole_1);
  var compositeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var compositeRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-disabled": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget"]]
    };
    var _default = compositeRole;
    exports.default = _default;
  });
  unwrapExports(compositeRole_1);
  var inputRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var inputRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null
      },
      relatedConcepts: [{
        concept: {
          name: "input"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget"]]
    };
    var _default = inputRole;
    exports.default = _default;
  });
  unwrapExports(inputRole_1);
  var landmarkRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var landmarkRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = landmarkRole;
    exports.default = _default;
  });
  unwrapExports(landmarkRole_1);
  var rangeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var rangeRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = rangeRole;
    exports.default = _default;
  });
  unwrapExports(rangeRole_1);
  var roletypeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var roletypeRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {
        "aria-atomic": null,
        "aria-busy": null,
        "aria-controls": null,
        "aria-current": null,
        "aria-describedby": null,
        "aria-details": null,
        "aria-dropeffect": null,
        "aria-flowto": null,
        "aria-grabbed": null,
        "aria-hidden": null,
        "aria-keyshortcuts": null,
        "aria-label": null,
        "aria-labelledby": null,
        "aria-live": null,
        "aria-owns": null,
        "aria-relevant": null,
        "aria-roledescription": null
      },
      relatedConcepts: [{
        concept: {
          name: "rel"
        },
        module: "HTML"
      }, {
        concept: {
          name: "role"
        },
        module: "XHTML"
      }, {
        concept: {
          name: "type"
        },
        module: "Dublin Core"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: []
    };
    var _default = roletypeRole;
    exports.default = _default;
  });
  unwrapExports(roletypeRole_1);
  var sectionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var sectionRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "frontmatter"
        },
        module: "DTB"
      }, {
        concept: {
          name: "level"
        },
        module: "DTB"
      }, {
        concept: {
          name: "level"
        },
        module: "SMIL"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = sectionRole;
    exports.default = _default;
  });
  unwrapExports(sectionRole_1);
  var sectionheadRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var sectionheadRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = sectionheadRole;
    exports.default = _default;
  });
  unwrapExports(sectionheadRole_1);
  var selectRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var selectRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-orientation": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "group"]]
    };
    var _default = selectRole;
    exports.default = _default;
  });
  unwrapExports(selectRole_1);
  var structureRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var structureRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype"]]
    };
    var _default = structureRole;
    exports.default = _default;
  });
  unwrapExports(structureRole_1);
  var widgetRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var widgetRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype"]]
    };
    var _default = widgetRole;
    exports.default = _default;
  });
  unwrapExports(widgetRole_1);
  var windowRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var windowRole = {
      abstract: true,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-modal": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype"]]
    };
    var _default = windowRole;
    exports.default = _default;
  });
  unwrapExports(windowRole_1);
  var ariaAbstractRoles_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _commandRole = _interopRequireDefault(commandRole_1);
    var _compositeRole = _interopRequireDefault(compositeRole_1);
    var _inputRole = _interopRequireDefault(inputRole_1);
    var _landmarkRole = _interopRequireDefault(landmarkRole_1);
    var _rangeRole = _interopRequireDefault(rangeRole_1);
    var _roletypeRole = _interopRequireDefault(roletypeRole_1);
    var _sectionRole = _interopRequireDefault(sectionRole_1);
    var _sectionheadRole = _interopRequireDefault(sectionheadRole_1);
    var _selectRole = _interopRequireDefault(selectRole_1);
    var _structureRole = _interopRequireDefault(structureRole_1);
    var _widgetRole = _interopRequireDefault(widgetRole_1);
    var _windowRole = _interopRequireDefault(windowRole_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ariaAbstractRoles = [["command", _commandRole.default], ["composite", _compositeRole.default], ["input", _inputRole.default], ["landmark", _landmarkRole.default], ["range", _rangeRole.default], ["roletype", _roletypeRole.default], ["section", _sectionRole.default], ["sectionhead", _sectionheadRole.default], ["select", _selectRole.default], ["structure", _structureRole.default], ["widget", _widgetRole.default], ["window", _windowRole.default]];
    var _default = ariaAbstractRoles;
    exports.default = _default;
  });
  unwrapExports(ariaAbstractRoles_1);
  var alertRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var alertRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-atomic": "true",
        "aria-live": "assertive"
      },
      relatedConcepts: [{
        concept: {
          name: "alert"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = alertRole;
    exports.default = _default;
  });
  unwrapExports(alertRole_1);
  var alertdialogRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var alertdialogRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "alert"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "alert"], ["roletype", "window", "dialog"]]
    };
    var _default = alertdialogRole;
    exports.default = _default;
  });
  unwrapExports(alertdialogRole_1);
  var applicationRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var applicationRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "Device Independence Delivery Unit"
        }
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = applicationRole;
    exports.default = _default;
  });
  unwrapExports(applicationRole_1);
  var articleRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var articleRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-posinset": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          name: "article"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "document"]]
    };
    var _default = articleRole;
    exports.default = _default;
  });
  unwrapExports(articleRole_1);
  var bannerRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var bannerRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          constraints: ["direct descendant of document"],
          name: "header"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = bannerRole;
    exports.default = _default;
  });
  unwrapExports(bannerRole_1);
  var blockquoteRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var blockquoteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = blockquoteRole;
    exports.default = _default;
  });
  unwrapExports(blockquoteRole_1);
  var buttonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var buttonRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-pressed": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-pressed"
          }, {
            name: "type",
            value: "checkbox"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "aria-expanded",
            value: "false"
          }],
          name: "summary"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "aria-expanded",
            value: "true"
          }],
          constraints: ["direct descendant of details element with the open attribute defined"],
          name: "summary"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "type",
            value: "button"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "type",
            value: "image"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "type",
            value: "reset"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "type",
            value: "submit"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          name: "button"
        },
        module: "HTML"
      }, {
        concept: {
          name: "trigger"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command"]]
    };
    var _default = buttonRole;
    exports.default = _default;
  });
  unwrapExports(buttonRole_1);
  var captionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var captionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: ["figure", "grid", "table"],
      requiredContextRole: ["figure", "grid", "table"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = captionRole;
    exports.default = _default;
  });
  unwrapExports(captionRole_1);
  var cellRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var cellRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-colindex": null,
        "aria-colspan": null,
        "aria-rowindex": null,
        "aria-rowspan": null
      },
      relatedConcepts: [{
        concept: {
          constraints: ["descendant of table"],
          name: "td"
        },
        module: "HTML"
      }],
      requireContextRole: ["row"],
      requiredContextRole: ["row"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = cellRole;
    exports.default = _default;
  });
  unwrapExports(cellRole_1);
  var checkboxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var checkboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-checked": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "type",
            value: "checkbox"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          name: "option"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = checkboxRole;
    exports.default = _default;
  });
  unwrapExports(checkboxRole_1);
  var codeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var codeRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = codeRole;
    exports.default = _default;
  });
  unwrapExports(codeRole_1);
  var columnheaderRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var columnheaderRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-sort": null
      },
      relatedConcepts: [{
        attributes: [{
          name: "scope",
          value: "col"
        }],
        concept: {
          name: "th"
        },
        module: "HTML"
      }],
      requireContextRole: ["row"],
      requiredContextRole: ["row"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
    };
    var _default = columnheaderRole;
    exports.default = _default;
  });
  unwrapExports(columnheaderRole_1);
  var comboboxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var comboboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-autocomplete": null,
        "aria-errormessage": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null,
        "aria-expanded": "false",
        "aria-haspopup": "listbox"
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "email"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "search"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "tel"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "text"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "url"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "list"
          }, {
            name: "type",
            value: "url"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "multiple"
          }, {
            constraints: ["undefined"],
            name: "size"
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "multiple"
          }, {
            name: "size",
            value: 1
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          name: "select"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-controls": null,
        "aria-expanded": "false"
      },
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = comboboxRole;
    exports.default = _default;
  });
  unwrapExports(comboboxRole_1);
  var complementaryRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var complementaryRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "aside"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = complementaryRole;
    exports.default = _default;
  });
  unwrapExports(complementaryRole_1);
  var contentinfoRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var contentinfoRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          constraints: ["direct descendant of document"],
          name: "footer"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = contentinfoRole;
    exports.default = _default;
  });
  unwrapExports(contentinfoRole_1);
  var definitionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var definitionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "dd"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = definitionRole;
    exports.default = _default;
  });
  unwrapExports(definitionRole_1);
  var deletionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var deletionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = deletionRole;
    exports.default = _default;
  });
  unwrapExports(deletionRole_1);
  var dialogRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var dialogRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "dialog"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "window"]]
    };
    var _default = dialogRole;
    exports.default = _default;
  });
  unwrapExports(dialogRole_1);
  var directoryRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var directoryRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        module: "DAISY Guide"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "list"]]
    };
    var _default = directoryRole;
    exports.default = _default;
  });
  unwrapExports(directoryRole_1);
  var documentRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var documentRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "Device Independence Delivery Unit"
        }
      }, {
        concept: {
          name: "body"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = documentRole;
    exports.default = _default;
  });
  unwrapExports(documentRole_1);
  var emphasisRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var emphasisRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = emphasisRole;
    exports.default = _default;
  });
  unwrapExports(emphasisRole_1);
  var feedRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var feedRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["article"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "list"]]
    };
    var _default = feedRole;
    exports.default = _default;
  });
  unwrapExports(feedRole_1);
  var figureRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var figureRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "figure"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = figureRole;
    exports.default = _default;
  });
  unwrapExports(figureRole_1);
  var formRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var formRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-label"
          }],
          name: "form"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-labelledby"
          }],
          name: "form"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "name"
          }],
          name: "form"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = formRole;
    exports.default = _default;
  });
  unwrapExports(formRole_1);
  var genericRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var genericRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "span"
        },
        module: "HTML"
      }, {
        concept: {
          name: "div"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = genericRole;
    exports.default = _default;
  });
  unwrapExports(genericRole_1);
  var gridRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var gridRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-multiselectable": null,
        "aria-readonly": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "role",
            value: "grid"
          }],
          name: "table"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["row"], ["row", "rowgroup"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite"], ["roletype", "structure", "section", "table"]]
    };
    var _default = gridRole;
    exports.default = _default;
  });
  unwrapExports(gridRole_1);
  var gridcellRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var gridcellRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null,
        "aria-selected": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "role",
            value: "gridcell"
          }],
          name: "td"
        },
        module: "HTML"
      }],
      requireContextRole: ["row"],
      requiredContextRole: ["row"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "cell"], ["roletype", "widget"]]
    };
    var _default = gridcellRole;
    exports.default = _default;
  });
  unwrapExports(gridcellRole_1);
  var groupRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var groupRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-disabled": null
      },
      relatedConcepts: [{
        concept: {
          name: "details"
        },
        module: "HTML"
      }, {
        concept: {
          name: "fieldset"
        },
        module: "HTML"
      }, {
        concept: {
          name: "optgroup"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = groupRole;
    exports.default = _default;
  });
  unwrapExports(groupRole_1);
  var headingRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var headingRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-level": "2"
      },
      relatedConcepts: [{
        concept: {
          name: "h1"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h2"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h3"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h4"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h5"
        },
        module: "HTML"
      }, {
        concept: {
          name: "h6"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-level": "2"
      },
      superClass: [["roletype", "structure", "sectionhead"]]
    };
    var _default = headingRole;
    exports.default = _default;
  });
  unwrapExports(headingRole_1);
  var imgRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var imgRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "alt"
          }],
          name: "img"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "alt"
          }],
          name: "img"
        },
        module: "HTML"
      }, {
        concept: {
          name: "imggroup"
        },
        module: "DTB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = imgRole;
    exports.default = _default;
  });
  unwrapExports(imgRole_1);
  var insertionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var insertionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = insertionRole;
    exports.default = _default;
  });
  unwrapExports(insertionRole_1);
  var linkRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var linkRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-expanded": null,
        "aria-haspopup": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "href"
          }],
          name: "a"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "href"
          }],
          name: "area"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "href"
          }],
          name: "link"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command"]]
    };
    var _default = linkRole;
    exports.default = _default;
  });
  unwrapExports(linkRole_1);
  var listRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var listRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "menu"
        },
        module: "HTML"
      }, {
        concept: {
          name: "ol"
        },
        module: "HTML"
      }, {
        concept: {
          name: "ul"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["listitem"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = listRole;
    exports.default = _default;
  });
  unwrapExports(listRole_1);
  var listboxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var listboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-invalid": null,
        "aria-multiselectable": null,
        "aria-readonly": null,
        "aria-required": null,
        "aria-orientation": "vertical"
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: [">1"],
            name: "size"
          }, {
            name: "multiple"
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: [">1"],
            name: "size"
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "multiple"
          }],
          name: "select"
        },
        module: "HTML"
      }, {
        concept: {
          name: "datalist"
        },
        module: "HTML"
      }, {
        concept: {
          name: "list"
        },
        module: "ARIA"
      }, {
        concept: {
          name: "select"
        },
        module: "XForms"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["option", "group"], ["option"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
    };
    var _default = listboxRole;
    exports.default = _default;
  });
  unwrapExports(listboxRole_1);
  var listitemRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var listitemRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-level": null,
        "aria-posinset": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          constraints: ["direct descendant of ol, ul or menu"],
          name: "li"
        },
        module: "HTML"
      }, {
        concept: {
          name: "item"
        },
        module: "XForms"
      }],
      requireContextRole: ["directory", "list"],
      requiredContextRole: ["directory", "list"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = listitemRole;
    exports.default = _default;
  });
  unwrapExports(listitemRole_1);
  var logRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var logRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-live": "polite"
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = logRole;
    exports.default = _default;
  });
  unwrapExports(logRole_1);
  var mainRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var mainRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "main"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = mainRole;
    exports.default = _default;
  });
  unwrapExports(mainRole_1);
  var marqueeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var marqueeRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = marqueeRole;
    exports.default = _default;
  });
  unwrapExports(marqueeRole_1);
  var mathRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var mathRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "math"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = mathRole;
    exports.default = _default;
  });
  unwrapExports(mathRole_1);
  var menuRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menuRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-orientation": "vertical"
      },
      relatedConcepts: [{
        concept: {
          name: "MENU"
        },
        module: "JAPI"
      }, {
        concept: {
          name: "list"
        },
        module: "ARIA"
      }, {
        concept: {
          name: "select"
        },
        module: "XForms"
      }, {
        concept: {
          name: "sidebar"
        },
        module: "DTB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
    };
    var _default = menuRole;
    exports.default = _default;
  });
  unwrapExports(menuRole_1);
  var menubarRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menubarRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-orientation": "horizontal"
      },
      relatedConcepts: [{
        concept: {
          name: "toolbar"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["menuitem", "group"], ["menuitemradio", "group"], ["menuitemcheckbox", "group"], ["menuitem"], ["menuitemcheckbox"], ["menuitemradio"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select", "menu"], ["roletype", "structure", "section", "group", "select", "menu"]]
    };
    var _default = menubarRole;
    exports.default = _default;
  });
  unwrapExports(menubarRole_1);
  var menuitemRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menuitemRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-posinset": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          name: "MENU_ITEM"
        },
        module: "JAPI"
      }, {
        concept: {
          name: "listitem"
        },
        module: "ARIA"
      }, {
        concept: {
          name: "menuitem"
        },
        module: "HTML"
      }, {
        concept: {
          name: "option"
        },
        module: "ARIA"
      }],
      requireContextRole: ["group", "menu", "menubar"],
      requiredContextRole: ["group", "menu", "menubar"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command"]]
    };
    var _default = menuitemRole;
    exports.default = _default;
  });
  unwrapExports(menuitemRole_1);
  var menuitemcheckboxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menuitemcheckboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "menuitem"
        },
        module: "ARIA"
      }],
      requireContextRole: ["group", "menu", "menubar"],
      requiredContextRole: ["group", "menu", "menubar"],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input", "checkbox"], ["roletype", "widget", "command", "menuitem"]]
    };
    var _default = menuitemcheckboxRole;
    exports.default = _default;
  });
  unwrapExports(menuitemcheckboxRole_1);
  var menuitemradioRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var menuitemradioRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "menuitem"
        },
        module: "ARIA"
      }],
      requireContextRole: ["group", "menu", "menubar"],
      requiredContextRole: ["group", "menu", "menubar"],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input", "checkbox", "menuitemcheckbox"], ["roletype", "widget", "command", "menuitem", "menuitemcheckbox"], ["roletype", "widget", "input", "radio"]]
    };
    var _default = menuitemradioRole;
    exports.default = _default;
  });
  unwrapExports(menuitemradioRole_1);
  var meterRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var meterRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-valuetext": null,
        "aria-valuemax": "100",
        "aria-valuemin": "0"
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-valuenow": null
      },
      superClass: [["roletype", "structure", "range"]]
    };
    var _default = meterRole;
    exports.default = _default;
  });
  unwrapExports(meterRole_1);
  var navigationRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var navigationRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "nav"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = navigationRole;
    exports.default = _default;
  });
  unwrapExports(navigationRole_1);
  var noneRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var noneRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: [],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: []
    };
    var _default = noneRole;
    exports.default = _default;
  });
  unwrapExports(noneRole_1);
  var noteRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var noteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = noteRole;
    exports.default = _default;
  });
  unwrapExports(noteRole_1);
  var optionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var optionRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-checked": null,
        "aria-posinset": null,
        "aria-setsize": null,
        "aria-selected": "false"
      },
      relatedConcepts: [{
        concept: {
          name: "item"
        },
        module: "XForms"
      }, {
        concept: {
          name: "listitem"
        },
        module: "ARIA"
      }, {
        concept: {
          name: "option"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-selected": "false"
      },
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = optionRole;
    exports.default = _default;
  });
  unwrapExports(optionRole_1);
  var paragraphRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var paragraphRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = paragraphRole;
    exports.default = _default;
  });
  unwrapExports(paragraphRole_1);
  var presentationRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var presentationRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = presentationRole;
    exports.default = _default;
  });
  unwrapExports(presentationRole_1);
  var progressbarRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var progressbarRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-valuetext": null
      },
      relatedConcepts: [{
        concept: {
          name: "progress"
        },
        module: "HTML"
      }, {
        concept: {
          name: "status"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
    };
    var _default = progressbarRole;
    exports.default = _default;
  });
  unwrapExports(progressbarRole_1);
  var radioRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var radioRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-checked": null,
        "aria-posinset": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "type",
            value: "radio"
          }],
          name: "input"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = radioRole;
    exports.default = _default;
  });
  unwrapExports(radioRole_1);
  var radiogroupRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var radiogroupRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null
      },
      relatedConcepts: [{
        concept: {
          name: "list"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["radio"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
    };
    var _default = radiogroupRole;
    exports.default = _default;
  });
  unwrapExports(radiogroupRole_1);
  var regionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var regionRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-label"
          }],
          name: "section"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["set"],
            name: "aria-labelledby"
          }],
          name: "section"
        },
        module: "HTML"
      }, {
        concept: {
          name: "Device Independence Glossart perceivable unit"
        }
      }, {
        concept: {
          name: "frame"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = regionRole;
    exports.default = _default;
  });
  unwrapExports(regionRole_1);
  var rowRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var rowRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-colindex": null,
        "aria-expanded": null,
        "aria-level": null,
        "aria-posinset": null,
        "aria-rowindex": null,
        "aria-selected": null,
        "aria-setsize": null
      },
      relatedConcepts: [{
        concept: {
          name: "tr"
        },
        module: "HTML"
      }],
      requireContextRole: ["grid", "rowgroup", "table", "treegrid"],
      requiredContextRole: ["grid", "rowgroup", "table", "treegrid"],
      requiredOwnedElements: [["cell"], ["columnheader"], ["gridcell"], ["rowheader"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "group"], ["roletype", "widget"]]
    };
    var _default = rowRole;
    exports.default = _default;
  });
  unwrapExports(rowRole_1);
  var rowgroupRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var rowgroupRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "tbody"
        },
        module: "HTML"
      }, {
        concept: {
          name: "tfoot"
        },
        module: "HTML"
      }, {
        concept: {
          name: "thead"
        },
        module: "HTML"
      }],
      requireContextRole: ["grid", "table", "treegrid"],
      requiredContextRole: ["grid", "table", "treegrid"],
      requiredOwnedElements: [["row"]],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = rowgroupRole;
    exports.default = _default;
  });
  unwrapExports(rowgroupRole_1);
  var rowheaderRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var rowheaderRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-sort": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "scope",
            value: "row"
          }],
          name: "th"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            name: "scope",
            value: "rowgroup"
          }],
          name: "th"
        },
        module: "HTML"
      }],
      requireContextRole: ["row", "rowgroup"],
      requiredContextRole: ["row", "rowgroup"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "cell"], ["roletype", "structure", "section", "cell", "gridcell"], ["roletype", "widget", "gridcell"], ["roletype", "structure", "sectionhead"]]
    };
    var _default = rowheaderRole;
    exports.default = _default;
  });
  unwrapExports(rowheaderRole_1);
  var scrollbarRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var scrollbarRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-valuetext": null,
        "aria-orientation": "vertical",
        "aria-valuemax": "100",
        "aria-valuemin": "0"
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-controls": null,
        "aria-valuenow": null
      },
      superClass: [["roletype", "structure", "range"], ["roletype", "widget"]]
    };
    var _default = scrollbarRole;
    exports.default = _default;
  });
  unwrapExports(scrollbarRole_1);
  var searchRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var searchRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = searchRole;
    exports.default = _default;
  });
  unwrapExports(searchRole_1);
  var searchboxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var searchboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "search"
          }],
          name: "input"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "input", "textbox"]]
    };
    var _default = searchboxRole;
    exports.default = _default;
  });
  unwrapExports(searchboxRole_1);
  var separatorRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var separatorRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-orientation": "horizontal",
        "aria-valuemax": "100",
        "aria-valuemin": "0",
        "aria-valuenow": null,
        "aria-valuetext": null
      },
      relatedConcepts: [{
        concept: {
          name: "hr"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure"]]
    };
    var _default = separatorRole;
    exports.default = _default;
  });
  unwrapExports(separatorRole_1);
  var sliderRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var sliderRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-haspopup": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-valuetext": null,
        "aria-orientation": "horizontal",
        "aria-valuemax": "100",
        "aria-valuemin": "0"
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "type",
            value: "range"
          }],
          name: "input"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-valuenow": null
      },
      superClass: [["roletype", "widget", "input"], ["roletype", "structure", "range"]]
    };
    var _default = sliderRole;
    exports.default = _default;
  });
  unwrapExports(sliderRole_1);
  var spinbuttonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var spinbuttonRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null,
        "aria-readonly": null,
        "aria-required": null,
        "aria-valuetext": null,
        "aria-valuenow": "0"
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            name: "type",
            value: "number"
          }],
          name: "input"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite"], ["roletype", "widget", "input"], ["roletype", "structure", "range"]]
    };
    var _default = spinbuttonRole;
    exports.default = _default;
  });
  unwrapExports(spinbuttonRole_1);
  var statusRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var statusRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-atomic": "true",
        "aria-live": "polite"
      },
      relatedConcepts: [{
        concept: {
          name: "output"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = statusRole;
    exports.default = _default;
  });
  unwrapExports(statusRole_1);
  var strongRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var strongRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = strongRole;
    exports.default = _default;
  });
  unwrapExports(strongRole_1);
  var subscriptRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var subscriptRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = subscriptRole;
    exports.default = _default;
  });
  unwrapExports(subscriptRole_1);
  var superscriptRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var superscriptRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["prohibited"],
      prohibitedProps: ["aria-label", "aria-labelledby"],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = superscriptRole;
    exports.default = _default;
  });
  unwrapExports(superscriptRole_1);
  var switchRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var switchRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "button"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-checked": null
      },
      superClass: [["roletype", "widget", "input", "checkbox"]]
    };
    var _default = switchRole;
    exports.default = _default;
  });
  unwrapExports(switchRole_1);
  var tabRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tabRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-posinset": null,
        "aria-setsize": null,
        "aria-selected": "false"
      },
      relatedConcepts: [],
      requireContextRole: ["tablist"],
      requiredContextRole: ["tablist"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "sectionhead"], ["roletype", "widget"]]
    };
    var _default = tabRole;
    exports.default = _default;
  });
  unwrapExports(tabRole_1);
  var tableRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tableRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-colcount": null,
        "aria-rowcount": null
      },
      relatedConcepts: [{
        concept: {
          name: "table"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["row"], ["row", "rowgroup"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = tableRole;
    exports.default = _default;
  });
  unwrapExports(tableRole_1);
  var tablistRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tablistRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-level": null,
        "aria-multiselectable": null,
        "aria-orientation": "horizontal"
      },
      relatedConcepts: [{
        module: "DAISY",
        concept: {
          name: "guide"
        }
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["tab"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite"]]
    };
    var _default = tablistRole;
    exports.default = _default;
  });
  unwrapExports(tablistRole_1);
  var tabpanelRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tabpanelRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = tabpanelRole;
    exports.default = _default;
  });
  unwrapExports(tabpanelRole_1);
  var termRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var termRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "dfn"
        },
        module: "HTML"
      }, {
        concept: {
          name: "dt"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = termRole;
    exports.default = _default;
  });
  unwrapExports(termRole_1);
  var textboxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var textboxRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-activedescendant": null,
        "aria-autocomplete": null,
        "aria-errormessage": null,
        "aria-haspopup": null,
        "aria-invalid": null,
        "aria-multiline": null,
        "aria-placeholder": null,
        "aria-readonly": null,
        "aria-required": null
      },
      relatedConcepts: [{
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "type"
          }, {
            constraints: ["undefined"],
            name: "list"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "email"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "tel"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "text"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          attributes: [{
            constraints: ["undefined"],
            name: "list"
          }, {
            name: "type",
            value: "url"
          }],
          name: "input"
        },
        module: "HTML"
      }, {
        concept: {
          name: "input"
        },
        module: "XForms"
      }, {
        concept: {
          name: "textarea"
        },
        module: "HTML"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "input"]]
    };
    var _default = textboxRole;
    exports.default = _default;
  });
  unwrapExports(textboxRole_1);
  var timeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var timeRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = timeRole;
    exports.default = _default;
  });
  unwrapExports(timeRole_1);
  var timerRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var timerRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "status"]]
    };
    var _default = timerRole;
    exports.default = _default;
  });
  unwrapExports(timerRole_1);
  var toolbarRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var toolbarRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-orientation": "horizontal"
      },
      relatedConcepts: [{
        concept: {
          name: "menubar"
        },
        module: "ARIA"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "group"]]
    };
    var _default = toolbarRole;
    exports.default = _default;
  });
  unwrapExports(toolbarRole_1);
  var tooltipRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var tooltipRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = tooltipRole;
    exports.default = _default;
  });
  unwrapExports(tooltipRole_1);
  var treeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var treeRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null,
        "aria-multiselectable": null,
        "aria-required": null,
        "aria-orientation": "vertical"
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["treeitem", "group"], ["treeitem"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "select"], ["roletype", "structure", "section", "group", "select"]]
    };
    var _default = treeRole;
    exports.default = _default;
  });
  unwrapExports(treeRole_1);
  var treegridRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var treegridRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["row"], ["row", "rowgroup"]],
      requiredProps: {},
      superClass: [["roletype", "widget", "composite", "grid"], ["roletype", "structure", "section", "table", "grid"], ["roletype", "widget", "composite", "select", "tree"], ["roletype", "structure", "section", "group", "select", "tree"]]
    };
    var _default = treegridRole;
    exports.default = _default;
  });
  unwrapExports(treegridRole_1);
  var treeitemRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var treeitemRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-expanded": null,
        "aria-haspopup": null
      },
      relatedConcepts: [],
      requireContextRole: ["group", "tree"],
      requiredContextRole: ["group", "tree"],
      requiredOwnedElements: [],
      requiredProps: {
        "aria-selected": null
      },
      superClass: [["roletype", "structure", "section", "listitem"], ["roletype", "widget", "input", "option"]]
    };
    var _default = treeitemRole;
    exports.default = _default;
  });
  unwrapExports(treeitemRole_1);
  var ariaLiteralRoles_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _alertRole = _interopRequireDefault(alertRole_1);
    var _alertdialogRole = _interopRequireDefault(alertdialogRole_1);
    var _applicationRole = _interopRequireDefault(applicationRole_1);
    var _articleRole = _interopRequireDefault(articleRole_1);
    var _bannerRole = _interopRequireDefault(bannerRole_1);
    var _blockquoteRole = _interopRequireDefault(blockquoteRole_1);
    var _buttonRole = _interopRequireDefault(buttonRole_1);
    var _captionRole = _interopRequireDefault(captionRole_1);
    var _cellRole = _interopRequireDefault(cellRole_1);
    var _checkboxRole = _interopRequireDefault(checkboxRole_1);
    var _codeRole = _interopRequireDefault(codeRole_1);
    var _columnheaderRole = _interopRequireDefault(columnheaderRole_1);
    var _comboboxRole = _interopRequireDefault(comboboxRole_1);
    var _complementaryRole = _interopRequireDefault(complementaryRole_1);
    var _contentinfoRole = _interopRequireDefault(contentinfoRole_1);
    var _definitionRole = _interopRequireDefault(definitionRole_1);
    var _deletionRole = _interopRequireDefault(deletionRole_1);
    var _dialogRole = _interopRequireDefault(dialogRole_1);
    var _directoryRole = _interopRequireDefault(directoryRole_1);
    var _documentRole = _interopRequireDefault(documentRole_1);
    var _emphasisRole = _interopRequireDefault(emphasisRole_1);
    var _feedRole = _interopRequireDefault(feedRole_1);
    var _figureRole = _interopRequireDefault(figureRole_1);
    var _formRole = _interopRequireDefault(formRole_1);
    var _genericRole = _interopRequireDefault(genericRole_1);
    var _gridRole = _interopRequireDefault(gridRole_1);
    var _gridcellRole = _interopRequireDefault(gridcellRole_1);
    var _groupRole = _interopRequireDefault(groupRole_1);
    var _headingRole = _interopRequireDefault(headingRole_1);
    var _imgRole = _interopRequireDefault(imgRole_1);
    var _insertionRole = _interopRequireDefault(insertionRole_1);
    var _linkRole = _interopRequireDefault(linkRole_1);
    var _listRole = _interopRequireDefault(listRole_1);
    var _listboxRole = _interopRequireDefault(listboxRole_1);
    var _listitemRole = _interopRequireDefault(listitemRole_1);
    var _logRole = _interopRequireDefault(logRole_1);
    var _mainRole = _interopRequireDefault(mainRole_1);
    var _marqueeRole = _interopRequireDefault(marqueeRole_1);
    var _mathRole = _interopRequireDefault(mathRole_1);
    var _menuRole = _interopRequireDefault(menuRole_1);
    var _menubarRole = _interopRequireDefault(menubarRole_1);
    var _menuitemRole = _interopRequireDefault(menuitemRole_1);
    var _menuitemcheckboxRole = _interopRequireDefault(menuitemcheckboxRole_1);
    var _menuitemradioRole = _interopRequireDefault(menuitemradioRole_1);
    var _meterRole = _interopRequireDefault(meterRole_1);
    var _navigationRole = _interopRequireDefault(navigationRole_1);
    var _noneRole = _interopRequireDefault(noneRole_1);
    var _noteRole = _interopRequireDefault(noteRole_1);
    var _optionRole = _interopRequireDefault(optionRole_1);
    var _paragraphRole = _interopRequireDefault(paragraphRole_1);
    var _presentationRole = _interopRequireDefault(presentationRole_1);
    var _progressbarRole = _interopRequireDefault(progressbarRole_1);
    var _radioRole = _interopRequireDefault(radioRole_1);
    var _radiogroupRole = _interopRequireDefault(radiogroupRole_1);
    var _regionRole = _interopRequireDefault(regionRole_1);
    var _rowRole = _interopRequireDefault(rowRole_1);
    var _rowgroupRole = _interopRequireDefault(rowgroupRole_1);
    var _rowheaderRole = _interopRequireDefault(rowheaderRole_1);
    var _scrollbarRole = _interopRequireDefault(scrollbarRole_1);
    var _searchRole = _interopRequireDefault(searchRole_1);
    var _searchboxRole = _interopRequireDefault(searchboxRole_1);
    var _separatorRole = _interopRequireDefault(separatorRole_1);
    var _sliderRole = _interopRequireDefault(sliderRole_1);
    var _spinbuttonRole = _interopRequireDefault(spinbuttonRole_1);
    var _statusRole = _interopRequireDefault(statusRole_1);
    var _strongRole = _interopRequireDefault(strongRole_1);
    var _subscriptRole = _interopRequireDefault(subscriptRole_1);
    var _superscriptRole = _interopRequireDefault(superscriptRole_1);
    var _switchRole = _interopRequireDefault(switchRole_1);
    var _tabRole = _interopRequireDefault(tabRole_1);
    var _tableRole = _interopRequireDefault(tableRole_1);
    var _tablistRole = _interopRequireDefault(tablistRole_1);
    var _tabpanelRole = _interopRequireDefault(tabpanelRole_1);
    var _termRole = _interopRequireDefault(termRole_1);
    var _textboxRole = _interopRequireDefault(textboxRole_1);
    var _timeRole = _interopRequireDefault(timeRole_1);
    var _timerRole = _interopRequireDefault(timerRole_1);
    var _toolbarRole = _interopRequireDefault(toolbarRole_1);
    var _tooltipRole = _interopRequireDefault(tooltipRole_1);
    var _treeRole = _interopRequireDefault(treeRole_1);
    var _treegridRole = _interopRequireDefault(treegridRole_1);
    var _treeitemRole = _interopRequireDefault(treeitemRole_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ariaLiteralRoles = [["alert", _alertRole.default], ["alertdialog", _alertdialogRole.default], ["application", _applicationRole.default], ["article", _articleRole.default], ["banner", _bannerRole.default], ["blockquote", _blockquoteRole.default], ["button", _buttonRole.default], ["caption", _captionRole.default], ["cell", _cellRole.default], ["checkbox", _checkboxRole.default], ["code", _codeRole.default], ["columnheader", _columnheaderRole.default], ["combobox", _comboboxRole.default], ["complementary", _complementaryRole.default], ["contentinfo", _contentinfoRole.default], ["definition", _definitionRole.default], ["deletion", _deletionRole.default], ["dialog", _dialogRole.default], ["directory", _directoryRole.default], ["document", _documentRole.default], ["emphasis", _emphasisRole.default], ["feed", _feedRole.default], ["figure", _figureRole.default], ["form", _formRole.default], ["generic", _genericRole.default], ["grid", _gridRole.default], ["gridcell", _gridcellRole.default], ["group", _groupRole.default], ["heading", _headingRole.default], ["img", _imgRole.default], ["insertion", _insertionRole.default], ["link", _linkRole.default], ["list", _listRole.default], ["listbox", _listboxRole.default], ["listitem", _listitemRole.default], ["log", _logRole.default], ["main", _mainRole.default], ["marquee", _marqueeRole.default], ["math", _mathRole.default], ["menu", _menuRole.default], ["menubar", _menubarRole.default], ["menuitem", _menuitemRole.default], ["menuitemcheckbox", _menuitemcheckboxRole.default], ["menuitemradio", _menuitemradioRole.default], ["meter", _meterRole.default], ["navigation", _navigationRole.default], ["none", _noneRole.default], ["note", _noteRole.default], ["option", _optionRole.default], ["paragraph", _paragraphRole.default], ["presentation", _presentationRole.default], ["progressbar", _progressbarRole.default], ["radio", _radioRole.default], ["radiogroup", _radiogroupRole.default], ["region", _regionRole.default], ["row", _rowRole.default], ["rowgroup", _rowgroupRole.default], ["rowheader", _rowheaderRole.default], ["scrollbar", _scrollbarRole.default], ["search", _searchRole.default], ["searchbox", _searchboxRole.default], ["separator", _separatorRole.default], ["slider", _sliderRole.default], ["spinbutton", _spinbuttonRole.default], ["status", _statusRole.default], ["strong", _strongRole.default], ["subscript", _subscriptRole.default], ["superscript", _superscriptRole.default], ["switch", _switchRole.default], ["tab", _tabRole.default], ["table", _tableRole.default], ["tablist", _tablistRole.default], ["tabpanel", _tabpanelRole.default], ["term", _termRole.default], ["textbox", _textboxRole.default], ["time", _timeRole.default], ["timer", _timerRole.default], ["toolbar", _toolbarRole.default], ["tooltip", _tooltipRole.default], ["tree", _treeRole.default], ["treegrid", _treegridRole.default], ["treeitem", _treeitemRole.default]];
    var _default = ariaLiteralRoles;
    exports.default = _default;
  });
  unwrapExports(ariaLiteralRoles_1);
  var docAbstractRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docAbstractRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "abstract [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docAbstractRole;
    exports.default = _default;
  });
  unwrapExports(docAbstractRole_1);
  var docAcknowledgmentsRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docAcknowledgmentsRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "acknowledgments [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docAcknowledgmentsRole;
    exports.default = _default;
  });
  unwrapExports(docAcknowledgmentsRole_1);
  var docAfterwordRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docAfterwordRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "afterword [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docAfterwordRole;
    exports.default = _default;
  });
  unwrapExports(docAfterwordRole_1);
  var docAppendixRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docAppendixRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "appendix [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docAppendixRole;
    exports.default = _default;
  });
  unwrapExports(docAppendixRole_1);
  var docBacklinkRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docBacklinkRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "content"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "referrer [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command", "link"]]
    };
    var _default = docBacklinkRole;
    exports.default = _default;
  });
  unwrapExports(docBacklinkRole_1);
  var docBiblioentryRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docBiblioentryRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "EPUB biblioentry [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: ["doc-bibliography"],
      requiredContextRole: ["doc-bibliography"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "listitem"]]
    };
    var _default = docBiblioentryRole;
    exports.default = _default;
  });
  unwrapExports(docBiblioentryRole_1);
  var docBibliographyRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docBibliographyRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "bibliography [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["doc-biblioentry"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docBibliographyRole;
    exports.default = _default;
  });
  unwrapExports(docBibliographyRole_1);
  var docBibliorefRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docBibliorefRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "biblioref [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command", "link"]]
    };
    var _default = docBibliorefRole;
    exports.default = _default;
  });
  unwrapExports(docBibliorefRole_1);
  var docChapterRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docChapterRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "chapter [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docChapterRole;
    exports.default = _default;
  });
  unwrapExports(docChapterRole_1);
  var docColophonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docColophonRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "colophon [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docColophonRole;
    exports.default = _default;
  });
  unwrapExports(docColophonRole_1);
  var docConclusionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docConclusionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "conclusion [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docConclusionRole;
    exports.default = _default;
  });
  unwrapExports(docConclusionRole_1);
  var docCoverRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docCoverRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "cover [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "img"]]
    };
    var _default = docCoverRole;
    exports.default = _default;
  });
  unwrapExports(docCoverRole_1);
  var docCreditRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docCreditRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "credit [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docCreditRole;
    exports.default = _default;
  });
  unwrapExports(docCreditRole_1);
  var docCreditsRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docCreditsRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "credits [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docCreditsRole;
    exports.default = _default;
  });
  unwrapExports(docCreditsRole_1);
  var docDedicationRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docDedicationRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "dedication [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docDedicationRole;
    exports.default = _default;
  });
  unwrapExports(docDedicationRole_1);
  var docEndnoteRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docEndnoteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "rearnote [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: ["doc-endnotes"],
      requiredContextRole: ["doc-endnotes"],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "listitem"]]
    };
    var _default = docEndnoteRole;
    exports.default = _default;
  });
  unwrapExports(docEndnoteRole_1);
  var docEndnotesRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docEndnotesRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "rearnotes [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["doc-endnote"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docEndnotesRole;
    exports.default = _default;
  });
  unwrapExports(docEndnotesRole_1);
  var docEpigraphRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docEpigraphRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "epigraph [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docEpigraphRole;
    exports.default = _default;
  });
  unwrapExports(docEpigraphRole_1);
  var docEpilogueRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docEpilogueRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "epilogue [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docEpilogueRole;
    exports.default = _default;
  });
  unwrapExports(docEpilogueRole_1);
  var docErrataRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docErrataRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "errata [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docErrataRole;
    exports.default = _default;
  });
  unwrapExports(docErrataRole_1);
  var docExampleRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docExampleRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docExampleRole;
    exports.default = _default;
  });
  unwrapExports(docExampleRole_1);
  var docFootnoteRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docFootnoteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "footnote [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docFootnoteRole;
    exports.default = _default;
  });
  unwrapExports(docFootnoteRole_1);
  var docForewordRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docForewordRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "foreword [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docForewordRole;
    exports.default = _default;
  });
  unwrapExports(docForewordRole_1);
  var docGlossaryRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docGlossaryRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "glossary [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [["definition"], ["term"]],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docGlossaryRole;
    exports.default = _default;
  });
  unwrapExports(docGlossaryRole_1);
  var docGlossrefRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docGlossrefRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "glossref [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command", "link"]]
    };
    var _default = docGlossrefRole;
    exports.default = _default;
  });
  unwrapExports(docGlossrefRole_1);
  var docIndexRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docIndexRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "index [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
    };
    var _default = docIndexRole;
    exports.default = _default;
  });
  unwrapExports(docIndexRole_1);
  var docIntroductionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docIntroductionRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "introduction [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docIntroductionRole;
    exports.default = _default;
  });
  unwrapExports(docIntroductionRole_1);
  var docNoterefRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docNoterefRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "noteref [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "widget", "command", "link"]]
    };
    var _default = docNoterefRole;
    exports.default = _default;
  });
  unwrapExports(docNoterefRole_1);
  var docNoticeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docNoticeRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "notice [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "note"]]
    };
    var _default = docNoticeRole;
    exports.default = _default;
  });
  unwrapExports(docNoticeRole_1);
  var docPagebreakRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPagebreakRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "pagebreak [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "separator"]]
    };
    var _default = docPagebreakRole;
    exports.default = _default;
  });
  unwrapExports(docPagebreakRole_1);
  var docPagelistRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPagelistRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "page-list [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
    };
    var _default = docPagelistRole;
    exports.default = _default;
  });
  unwrapExports(docPagelistRole_1);
  var docPartRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPartRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "part [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docPartRole;
    exports.default = _default;
  });
  unwrapExports(docPartRole_1);
  var docPrefaceRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPrefaceRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "preface [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docPrefaceRole;
    exports.default = _default;
  });
  unwrapExports(docPrefaceRole_1);
  var docPrologueRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPrologueRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "prologue [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark"]]
    };
    var _default = docPrologueRole;
    exports.default = _default;
  });
  unwrapExports(docPrologueRole_1);
  var docPullquoteRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docPullquoteRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {},
      relatedConcepts: [{
        concept: {
          name: "pullquote [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["none"]]
    };
    var _default = docPullquoteRole;
    exports.default = _default;
  });
  unwrapExports(docPullquoteRole_1);
  var docQnaRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docQnaRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "qna [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section"]]
    };
    var _default = docQnaRole;
    exports.default = _default;
  });
  unwrapExports(docQnaRole_1);
  var docSubtitleRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docSubtitleRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "subtitle [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "sectionhead"]]
    };
    var _default = docSubtitleRole;
    exports.default = _default;
  });
  unwrapExports(docSubtitleRole_1);
  var docTipRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docTipRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "help [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "note"]]
    };
    var _default = docTipRole;
    exports.default = _default;
  });
  unwrapExports(docTipRole_1);
  var docTocRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var docTocRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        concept: {
          name: "toc [EPUB-SSV]"
        },
        module: "EPUB"
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "landmark", "navigation"]]
    };
    var _default = docTocRole;
    exports.default = _default;
  });
  unwrapExports(docTocRole_1);
  var ariaDpubRoles_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _docAbstractRole = _interopRequireDefault(docAbstractRole_1);
    var _docAcknowledgmentsRole = _interopRequireDefault(docAcknowledgmentsRole_1);
    var _docAfterwordRole = _interopRequireDefault(docAfterwordRole_1);
    var _docAppendixRole = _interopRequireDefault(docAppendixRole_1);
    var _docBacklinkRole = _interopRequireDefault(docBacklinkRole_1);
    var _docBiblioentryRole = _interopRequireDefault(docBiblioentryRole_1);
    var _docBibliographyRole = _interopRequireDefault(docBibliographyRole_1);
    var _docBibliorefRole = _interopRequireDefault(docBibliorefRole_1);
    var _docChapterRole = _interopRequireDefault(docChapterRole_1);
    var _docColophonRole = _interopRequireDefault(docColophonRole_1);
    var _docConclusionRole = _interopRequireDefault(docConclusionRole_1);
    var _docCoverRole = _interopRequireDefault(docCoverRole_1);
    var _docCreditRole = _interopRequireDefault(docCreditRole_1);
    var _docCreditsRole = _interopRequireDefault(docCreditsRole_1);
    var _docDedicationRole = _interopRequireDefault(docDedicationRole_1);
    var _docEndnoteRole = _interopRequireDefault(docEndnoteRole_1);
    var _docEndnotesRole = _interopRequireDefault(docEndnotesRole_1);
    var _docEpigraphRole = _interopRequireDefault(docEpigraphRole_1);
    var _docEpilogueRole = _interopRequireDefault(docEpilogueRole_1);
    var _docErrataRole = _interopRequireDefault(docErrataRole_1);
    var _docExampleRole = _interopRequireDefault(docExampleRole_1);
    var _docFootnoteRole = _interopRequireDefault(docFootnoteRole_1);
    var _docForewordRole = _interopRequireDefault(docForewordRole_1);
    var _docGlossaryRole = _interopRequireDefault(docGlossaryRole_1);
    var _docGlossrefRole = _interopRequireDefault(docGlossrefRole_1);
    var _docIndexRole = _interopRequireDefault(docIndexRole_1);
    var _docIntroductionRole = _interopRequireDefault(docIntroductionRole_1);
    var _docNoterefRole = _interopRequireDefault(docNoterefRole_1);
    var _docNoticeRole = _interopRequireDefault(docNoticeRole_1);
    var _docPagebreakRole = _interopRequireDefault(docPagebreakRole_1);
    var _docPagelistRole = _interopRequireDefault(docPagelistRole_1);
    var _docPartRole = _interopRequireDefault(docPartRole_1);
    var _docPrefaceRole = _interopRequireDefault(docPrefaceRole_1);
    var _docPrologueRole = _interopRequireDefault(docPrologueRole_1);
    var _docPullquoteRole = _interopRequireDefault(docPullquoteRole_1);
    var _docQnaRole = _interopRequireDefault(docQnaRole_1);
    var _docSubtitleRole = _interopRequireDefault(docSubtitleRole_1);
    var _docTipRole = _interopRequireDefault(docTipRole_1);
    var _docTocRole = _interopRequireDefault(docTocRole_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ariaDpubRoles = [["doc-abstract", _docAbstractRole.default], ["doc-acknowledgments", _docAcknowledgmentsRole.default], ["doc-afterword", _docAfterwordRole.default], ["doc-appendix", _docAppendixRole.default], ["doc-backlink", _docBacklinkRole.default], ["doc-biblioentry", _docBiblioentryRole.default], ["doc-bibliography", _docBibliographyRole.default], ["doc-biblioref", _docBibliorefRole.default], ["doc-chapter", _docChapterRole.default], ["doc-colophon", _docColophonRole.default], ["doc-conclusion", _docConclusionRole.default], ["doc-cover", _docCoverRole.default], ["doc-credit", _docCreditRole.default], ["doc-credits", _docCreditsRole.default], ["doc-dedication", _docDedicationRole.default], ["doc-endnote", _docEndnoteRole.default], ["doc-endnotes", _docEndnotesRole.default], ["doc-epigraph", _docEpigraphRole.default], ["doc-epilogue", _docEpilogueRole.default], ["doc-errata", _docErrataRole.default], ["doc-example", _docExampleRole.default], ["doc-footnote", _docFootnoteRole.default], ["doc-foreword", _docForewordRole.default], ["doc-glossary", _docGlossaryRole.default], ["doc-glossref", _docGlossrefRole.default], ["doc-index", _docIndexRole.default], ["doc-introduction", _docIntroductionRole.default], ["doc-noteref", _docNoterefRole.default], ["doc-notice", _docNoticeRole.default], ["doc-pagebreak", _docPagebreakRole.default], ["doc-pagelist", _docPagelistRole.default], ["doc-part", _docPartRole.default], ["doc-preface", _docPrefaceRole.default], ["doc-prologue", _docPrologueRole.default], ["doc-pullquote", _docPullquoteRole.default], ["doc-qna", _docQnaRole.default], ["doc-subtitle", _docSubtitleRole.default], ["doc-tip", _docTipRole.default], ["doc-toc", _docTocRole.default]];
    var _default = ariaDpubRoles;
    exports.default = _default;
  });
  unwrapExports(ariaDpubRoles_1);
  var graphicsDocumentRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var graphicsDocumentRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        module: "GRAPHICS",
        concept: {
          name: "graphics-object"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "img"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "article"
        }
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "document"]]
    };
    var _default = graphicsDocumentRole;
    exports.default = _default;
  });
  unwrapExports(graphicsDocumentRole_1);
  var graphicsObjectRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var graphicsObjectRole = {
      abstract: false,
      accessibleNameRequired: false,
      baseConcepts: [],
      childrenPresentational: false,
      nameFrom: ["author", "contents"],
      prohibitedProps: [],
      props: {
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [{
        module: "GRAPHICS",
        concept: {
          name: "graphics-document"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "group"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "img"
        }
      }, {
        module: "GRAPHICS",
        concept: {
          name: "graphics-symbol"
        }
      }],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "group"]]
    };
    var _default = graphicsObjectRole;
    exports.default = _default;
  });
  unwrapExports(graphicsObjectRole_1);
  var graphicsSymbolRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var graphicsSymbolRole = {
      abstract: false,
      accessibleNameRequired: true,
      baseConcepts: [],
      childrenPresentational: true,
      nameFrom: ["author"],
      prohibitedProps: [],
      props: {
        "aria-disabled": null,
        "aria-errormessage": null,
        "aria-expanded": null,
        "aria-haspopup": null,
        "aria-invalid": null
      },
      relatedConcepts: [],
      requireContextRole: [],
      requiredContextRole: [],
      requiredOwnedElements: [],
      requiredProps: {},
      superClass: [["roletype", "structure", "section", "img"]]
    };
    var _default = graphicsSymbolRole;
    exports.default = _default;
  });
  unwrapExports(graphicsSymbolRole_1);
  var ariaGraphicsRoles_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _graphicsDocumentRole = _interopRequireDefault(graphicsDocumentRole_1);
    var _graphicsObjectRole = _interopRequireDefault(graphicsObjectRole_1);
    var _graphicsSymbolRole = _interopRequireDefault(graphicsSymbolRole_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ariaGraphicsRoles = [["graphics-document", _graphicsDocumentRole.default], ["graphics-object", _graphicsObjectRole.default], ["graphics-symbol", _graphicsSymbolRole.default]];
    var _default = ariaGraphicsRoles;
    exports.default = _default;
  });
  unwrapExports(ariaGraphicsRoles_1);
  var rolesMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ariaAbstractRoles = _interopRequireDefault(ariaAbstractRoles_1);
    var _ariaLiteralRoles = _interopRequireDefault(ariaLiteralRoles_1);
    var _ariaDpubRoles = _interopRequireDefault(ariaDpubRoles_1);
    var _ariaGraphicsRoles = _interopRequireDefault(ariaGraphicsRoles_1);
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var roles = [].concat(_ariaAbstractRoles.default, _ariaLiteralRoles.default, _ariaDpubRoles.default, _ariaGraphicsRoles.default);
    roles.forEach(function(_ref) {
      var _ref2 = _slicedToArray(_ref, 2), roleDefinition = _ref2[1];
      var _iterator = _createForOfIteratorHelper(roleDefinition.superClass), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var superClassIter = _step.value;
          var _iterator2 = _createForOfIteratorHelper(superClassIter), _step2;
          try {
            var _loop = function _loop2() {
              var superClassName = _step2.value;
              var superClassRoleTuple = roles.find(function(_ref3) {
                var _ref4 = _slicedToArray(_ref3, 1), name2 = _ref4[0];
                return name2 === superClassName;
              });
              if (superClassRoleTuple) {
                var superClassDefinition = superClassRoleTuple[1];
                for (var _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
                  var prop = _Object$keys[_i2];
                  if (
                    // $FlowIssue Accessing the hasOwnProperty on the Object prototype is fine.
                    !Object.prototype.hasOwnProperty.call(roleDefinition.props, prop)
                  ) {
                    Object.assign(roleDefinition.props, _defineProperty({}, prop, superClassDefinition.props[prop]));
                  }
                }
              }
            };
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              _loop();
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
    var rolesMap = {
      entries: function entries() {
        return roles;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator3 = _createForOfIteratorHelper(roles), _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var _step3$value = _slicedToArray(_step3.value, 2), key = _step3$value[0], values = _step3$value[1];
            fn2.call(thisArg, values, key, roles);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      },
      get: function get(key) {
        var item = roles.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!rolesMap.get(key);
      },
      keys: function keys2() {
        return roles.map(function(_ref5) {
          var _ref6 = _slicedToArray(_ref5, 1), key = _ref6[0];
          return key;
        });
      },
      values: function values() {
        return roles.map(function(_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2), values2 = _ref8[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(rolesMap, rolesMap.entries());
    exports.default = _default;
  });
  unwrapExports(rolesMap_1);
  var toStr = Object.prototype.toString;
  var isArguments = function isArguments2(value) {
    var str = toStr.call(value);
    var isArgs = str === "[object Arguments]";
    if (!isArgs) {
      isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
    }
    return isArgs;
  };
  var keysShim;
  if (!Object.keys) {
    has = Object.prototype.hasOwnProperty;
    toStr$1 = Object.prototype.toString;
    isArgs = isArguments;
    isEnumerable = Object.prototype.propertyIsEnumerable;
    hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
    hasProtoEnumBug = isEnumerable.call(function() {
    }, "prototype");
    dontEnums = [
      "toString",
      "toLocaleString",
      "valueOf",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "constructor"
    ];
    equalsConstructorPrototype = function(o) {
      var ctor = o.constructor;
      return ctor && ctor.prototype === o;
    };
    excludedKeys = {
      $applicationCache: true,
      $console: true,
      $external: true,
      $frame: true,
      $frameElement: true,
      $frames: true,
      $innerHeight: true,
      $innerWidth: true,
      $onmozfullscreenchange: true,
      $onmozfullscreenerror: true,
      $outerHeight: true,
      $outerWidth: true,
      $pageXOffset: true,
      $pageYOffset: true,
      $parent: true,
      $scrollLeft: true,
      $scrollTop: true,
      $scrollX: true,
      $scrollY: true,
      $self: true,
      $webkitIndexedDB: true,
      $webkitStorageInfo: true,
      $window: true
    };
    hasAutomationEqualityBug = function() {
      if (typeof window === "undefined") {
        return false;
      }
      for (var k2 in window) {
        try {
          if (!excludedKeys["$" + k2] && has.call(window, k2) && window[k2] !== null && typeof window[k2] === "object") {
            try {
              equalsConstructorPrototype(window[k2]);
            } catch (e) {
              return true;
            }
          }
        } catch (e) {
          return true;
        }
      }
      return false;
    }();
    equalsConstructorPrototypeIfNotBuggy = function(o) {
      if (typeof window === "undefined" || !hasAutomationEqualityBug) {
        return equalsConstructorPrototype(o);
      }
      try {
        return equalsConstructorPrototype(o);
      } catch (e) {
        return false;
      }
    };
    keysShim = function keys2(object) {
      var isObject2 = object !== null && typeof object === "object";
      var isFunction2 = toStr$1.call(object) === "[object Function]";
      var isArguments5 = isArgs(object);
      var isString3 = isObject2 && toStr$1.call(object) === "[object String]";
      var theKeys = [];
      if (!isObject2 && !isFunction2 && !isArguments5) {
        throw new TypeError("Object.keys called on a non-object");
      }
      var skipProto = hasProtoEnumBug && isFunction2;
      if (isString3 && object.length > 0 && !has.call(object, 0)) {
        for (var i = 0; i < object.length; ++i) {
          theKeys.push(String(i));
        }
      }
      if (isArguments5 && object.length > 0) {
        for (var j = 0; j < object.length; ++j) {
          theKeys.push(String(j));
        }
      } else {
        for (var name2 in object) {
          if (!(skipProto && name2 === "prototype") && has.call(object, name2)) {
            theKeys.push(String(name2));
          }
        }
      }
      if (hasDontEnumBug) {
        var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
        for (var k2 = 0; k2 < dontEnums.length; ++k2) {
          if (!(skipConstructor && dontEnums[k2] === "constructor") && has.call(object, dontEnums[k2])) {
            theKeys.push(dontEnums[k2]);
          }
        }
      }
      return theKeys;
    };
  }
  var has;
  var toStr$1;
  var isArgs;
  var isEnumerable;
  var hasDontEnumBug;
  var hasProtoEnumBug;
  var dontEnums;
  var equalsConstructorPrototype;
  var excludedKeys;
  var hasAutomationEqualityBug;
  var equalsConstructorPrototypeIfNotBuggy;
  var implementation = keysShim;
  var slice = Array.prototype.slice;
  var origKeys = Object.keys;
  var keysShim$1 = origKeys ? function keys(o) {
    return origKeys(o);
  } : implementation;
  var originalKeys = Object.keys;
  keysShim$1.shim = function shimObjectKeys() {
    if (Object.keys) {
      var keysWorksWithArguments = function() {
        var args = Object.keys(arguments);
        return args && args.length === arguments.length;
      }(1, 2);
      if (!keysWorksWithArguments) {
        Object.keys = function keys2(object) {
          if (isArguments(object)) {
            return originalKeys(slice.call(object));
          }
          return originalKeys(object);
        };
      }
    } else {
      Object.keys = keysShim$1;
    }
    return Object.keys || keysShim$1;
  };
  var objectKeys = keysShim$1;
  var shams = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  var shams$1 = function hasToStringTagShams() {
    return shams() && !!Symbol.toStringTag;
  };
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbols2 = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return shams();
  };
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var slice$1 = Array.prototype.slice;
  var toStr$2 = Object.prototype.toString;
  var funcType = "[object Function]";
  var implementation$1 = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr$2.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice$1.call(arguments, 1);
    var bound2;
    var binder = function() {
      if (this instanceof bound2) {
        var result = target.apply(
          this,
          args.concat(slice$1.call(arguments))
        );
        if (Object(result) === result) {
          return result;
        }
        return this;
      } else {
        return target.apply(
          that,
          args.concat(slice$1.call(arguments))
        );
      }
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
      boundArgs.push("$" + i);
    }
    bound2 = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound2.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound2;
  };
  var functionBind = Function.prototype.bind || implementation$1;
  var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);
  var undefined$1;
  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError = TypeError;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError();
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols$1 = hasSymbols2();
  var getProto = Object.getPrototypeOf || function(x2) {
    return x2.__proto__;
  };
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols$1 ? getProto([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": Error,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols$1 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols$1 ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": RangeError,
    "%ReferenceError%": ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols$1 ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols$1 ? getProto(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols$1 ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet
  };
  var doEval = function doEval2(name2) {
    var value;
    if (name2 === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name2 === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name2 === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name2 === "%AsyncGenerator%") {
      var fn2 = doEval2("%AsyncGeneratorFunction%");
      if (fn2) {
        value = fn2.prototype;
      }
    } else if (name2 === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name2] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var $concat = functionBind.call(Function.call, Array.prototype.concat);
  var $spliceApply = functionBind.call(Function.apply, Array.prototype.splice);
  var $replace = functionBind.call(Function.call, String.prototype.replace);
  var $strSlice = functionBind.call(Function.call, String.prototype.slice);
  var $exec = functionBind.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string, rePropName, function(match, number, quote2, subString) {
      result[result.length] = quote2 ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
    var intrinsicName = name2;
    var alias;
    if (src(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (src(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
  };
  var getIntrinsic = function GetIntrinsic(name2, allowMissing) {
    if (typeof name2 !== "string" || name2.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name2) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name2);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (src(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
          }
          return void 0;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = src(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  var callBind = createCommonjsModule(function(module) {
    var $apply = getIntrinsic("%Function.prototype.apply%");
    var $call = getIntrinsic("%Function.prototype.call%");
    var $reflectApply = getIntrinsic("%Reflect.apply%", true) || functionBind.call($call, $apply);
    var $gOPD2 = getIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty2 = getIntrinsic("%Object.defineProperty%", true);
    var $max = getIntrinsic("%Math.max%");
    if ($defineProperty2) {
      try {
        $defineProperty2({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty2 = null;
      }
    }
    module.exports = function callBind2(originalFunction) {
      var func = $reflectApply(functionBind, $call, arguments);
      if ($gOPD2 && $defineProperty2) {
        var desc = $gOPD2(func, "length");
        if (desc.configurable) {
          $defineProperty2(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(functionBind, $apply, arguments);
    };
    if ($defineProperty2) {
      $defineProperty2(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  });
  var callBind_1 = callBind.apply;
  var $indexOf = callBind(getIntrinsic("String.prototype.indexOf"));
  var callBound = function callBoundIntrinsic(name2, allowMissing) {
    var intrinsic = getIntrinsic(name2, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
      return callBind(intrinsic);
    }
    return intrinsic;
  };
  var hasToStringTag = shams$1();
  var $toString = callBound("Object.prototype.toString");
  var isStandardArguments = function isArguments3(value) {
    if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
      return false;
    }
    return $toString(value) === "[object Arguments]";
  };
  var isLegacyArguments = function isArguments4(value) {
    if (isStandardArguments(value)) {
      return true;
    }
    return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
  };
  var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
  }();
  isStandardArguments.isLegacyArguments = isLegacyArguments;
  var isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  var $defineProperty = getIntrinsic("%Object.defineProperty%", true);
  var hasPropertyDescriptors = function hasPropertyDescriptors2() {
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
        return true;
      } catch (e) {
        return false;
      }
    }
    return false;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!hasPropertyDescriptors()) {
      return null;
    }
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch (e) {
      return true;
    }
  };
  var hasPropertyDescriptors_1 = hasPropertyDescriptors;
  var hasSymbols$2 = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
  var toStr$3 = Object.prototype.toString;
  var concat = Array.prototype.concat;
  var origDefineProperty = Object.defineProperty;
  var isFunction = function(fn2) {
    return typeof fn2 === "function" && toStr$3.call(fn2) === "[object Function]";
  };
  var hasPropertyDescriptors$1 = hasPropertyDescriptors_1();
  var supportsDescriptors = origDefineProperty && hasPropertyDescriptors$1;
  var defineProperty = function(object, name2, value, predicate) {
    if (name2 in object && (!isFunction(predicate) || !predicate())) {
      return;
    }
    if (supportsDescriptors) {
      origDefineProperty(object, name2, {
        configurable: true,
        enumerable: false,
        value,
        writable: true
      });
    } else {
      object[name2] = value;
    }
  };
  var defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = objectKeys(map);
    if (hasSymbols$2) {
      props = concat.call(props, Object.getOwnPropertySymbols(map));
    }
    for (var i = 0; i < props.length; i += 1) {
      defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
    }
  };
  defineProperties.supportsDescriptors = !!supportsDescriptors;
  var defineProperties_1 = defineProperties;
  var numberIsNaN = function(value) {
    return value !== value;
  };
  var implementation$2 = function is2(a, b2) {
    if (a === 0 && b2 === 0) {
      return 1 / a === 1 / b2;
    }
    if (a === b2) {
      return true;
    }
    if (numberIsNaN(a) && numberIsNaN(b2)) {
      return true;
    }
    return false;
  };
  var polyfill = function getPolyfill() {
    return typeof Object.is === "function" ? Object.is : implementation$2;
  };
  var shim = function shimObjectIs() {
    var polyfill$12 = polyfill();
    defineProperties_1(Object, { is: polyfill$12 }, {
      is: function testObjectIs() {
        return Object.is !== polyfill$12;
      }
    });
    return polyfill$12;
  };
  var polyfill$1 = callBind(polyfill(), Object);
  defineProperties_1(polyfill$1, {
    getPolyfill: polyfill,
    implementation: implementation$2,
    shim
  });
  var objectIs = polyfill$1;
  var hasToStringTag$1 = shams$1();
  var has$1;
  var $exec$1;
  var isRegexMarker;
  var badStringifier;
  if (hasToStringTag$1) {
    has$1 = callBound("Object.prototype.hasOwnProperty");
    $exec$1 = callBound("RegExp.prototype.exec");
    isRegexMarker = {};
    throwRegexMarker = function() {
      throw isRegexMarker;
    };
    badStringifier = {
      toString: throwRegexMarker,
      valueOf: throwRegexMarker
    };
    if (typeof Symbol.toPrimitive === "symbol") {
      badStringifier[Symbol.toPrimitive] = throwRegexMarker;
    }
  }
  var throwRegexMarker;
  var $toString$1 = callBound("Object.prototype.toString");
  var gOPD = Object.getOwnPropertyDescriptor;
  var regexClass = "[object RegExp]";
  var isRegex = hasToStringTag$1 ? function isRegex2(value) {
    if (!value || typeof value !== "object") {
      return false;
    }
    var descriptor = gOPD(value, "lastIndex");
    var hasLastIndexDataProperty = descriptor && has$1(descriptor, "value");
    if (!hasLastIndexDataProperty) {
      return false;
    }
    try {
      $exec$1(value, badStringifier);
    } catch (e) {
      return e === isRegexMarker;
    }
  } : function isRegex3(value) {
    if (!value || typeof value !== "object" && typeof value !== "function") {
      return false;
    }
    return $toString$1(value) === regexClass;
  };
  var functionsHaveNames = function functionsHaveNames2() {
    return typeof function f() {
    }.name === "string";
  };
  var gOPD$1 = Object.getOwnPropertyDescriptor;
  if (gOPD$1) {
    try {
      gOPD$1([], "length");
    } catch (e) {
      gOPD$1 = null;
    }
  }
  functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
    if (!functionsHaveNames() || !gOPD$1) {
      return false;
    }
    var desc = gOPD$1(function() {
    }, "name");
    return !!desc && !!desc.configurable;
  };
  var $bind = Function.prototype.bind;
  functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
    return functionsHaveNames() && typeof $bind === "function" && function f() {
    }.bind().name !== "";
  };
  var functionsHaveNames_1 = functionsHaveNames;
  var implementation$3 = createCommonjsModule(function(module) {
    var functionsHaveConfigurableNames2 = functionsHaveNames_1.functionsHaveConfigurableNames();
    var $Object = Object;
    var $TypeError2 = TypeError;
    module.exports = function flags() {
      if (this != null && this !== $Object(this)) {
        throw new $TypeError2("RegExp.prototype.flags getter called on non-object");
      }
      var result = "";
      if (this.hasIndices) {
        result += "d";
      }
      if (this.global) {
        result += "g";
      }
      if (this.ignoreCase) {
        result += "i";
      }
      if (this.multiline) {
        result += "m";
      }
      if (this.dotAll) {
        result += "s";
      }
      if (this.unicode) {
        result += "u";
      }
      if (this.sticky) {
        result += "y";
      }
      return result;
    };
    if (functionsHaveConfigurableNames2 && Object.defineProperty) {
      Object.defineProperty(module.exports, "name", { value: "get flags" });
    }
  });
  var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
  var $gOPD$1 = Object.getOwnPropertyDescriptor;
  var polyfill$2 = function getPolyfill2() {
    if (supportsDescriptors$1 && /a/mig.flags === "gim") {
      var descriptor = $gOPD$1(RegExp.prototype, "flags");
      if (descriptor && typeof descriptor.get === "function" && typeof RegExp.prototype.dotAll === "boolean" && typeof RegExp.prototype.hasIndices === "boolean") {
        var calls = "";
        var o = {};
        Object.defineProperty(o, "hasIndices", {
          get: function() {
            calls += "d";
          }
        });
        Object.defineProperty(o, "sticky", {
          get: function() {
            calls += "y";
          }
        });
        if (calls === "dy") {
          return descriptor.get;
        }
      }
    }
    return implementation$3;
  };
  var supportsDescriptors$2 = defineProperties_1.supportsDescriptors;
  var gOPD$2 = Object.getOwnPropertyDescriptor;
  var defineProperty$1 = Object.defineProperty;
  var TypeErr = TypeError;
  var getProto$1 = Object.getPrototypeOf;
  var regex = /a/;
  var shim$1 = function shimFlags() {
    if (!supportsDescriptors$2 || !getProto$1) {
      throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
    }
    var polyfill2 = polyfill$2();
    var proto = getProto$1(regex);
    var descriptor = gOPD$2(proto, "flags");
    if (!descriptor || descriptor.get !== polyfill2) {
      defineProperty$1(proto, "flags", {
        configurable: true,
        enumerable: false,
        get: polyfill2
      });
    }
    return polyfill2;
  };
  var flagsBound = callBind(polyfill$2());
  defineProperties_1(flagsBound, {
    getPolyfill: polyfill$2,
    implementation: implementation$3,
    shim: shim$1
  });
  var regexp_prototype_flags = flagsBound;
  var toString$1 = {}.toString;
  var isarray = Array.isArray || function(arr) {
    return toString$1.call(arr) == "[object Array]";
  };
  var getDay = Date.prototype.getDay;
  var tryDateObject = function tryDateGetDayCall(value) {
    try {
      getDay.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr$4 = Object.prototype.toString;
  var dateClass = "[object Date]";
  var hasToStringTag$2 = shams$1();
  var isDateObject = function isDateObject2(value) {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    return hasToStringTag$2 ? tryDateObject(value) : toStr$4.call(value) === dateClass;
  };
  var strValue = String.prototype.valueOf;
  var tryStringObject = function tryStringObject2(value) {
    try {
      strValue.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr$5 = Object.prototype.toString;
  var strClass = "[object String]";
  var hasToStringTag$3 = shams$1();
  var isString = function isString2(value) {
    if (typeof value === "string") {
      return true;
    }
    if (typeof value !== "object") {
      return false;
    }
    return hasToStringTag$3 ? tryStringObject(value) : toStr$5.call(value) === strClass;
  };
  var numToStr = Number.prototype.toString;
  var tryNumberObject = function tryNumberObject2(value) {
    try {
      numToStr.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr$6 = Object.prototype.toString;
  var numClass = "[object Number]";
  var hasToStringTag$4 = shams$1();
  var isNumberObject = function isNumberObject2(value) {
    if (typeof value === "number") {
      return true;
    }
    if (typeof value !== "object") {
      return false;
    }
    return hasToStringTag$4 ? tryNumberObject(value) : toStr$6.call(value) === numClass;
  };
  var $boolToStr = callBound("Boolean.prototype.toString");
  var $toString$2 = callBound("Object.prototype.toString");
  var tryBooleanObject = function booleanBrandCheck(value) {
    try {
      $boolToStr(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  var boolClass = "[object Boolean]";
  var hasToStringTag$5 = shams$1();
  var isBooleanObject = function isBoolean(value) {
    if (typeof value === "boolean") {
      return true;
    }
    if (value === null || typeof value !== "object") {
      return false;
    }
    return hasToStringTag$5 && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString$2(value) === boolClass;
  };
  var isSymbol = createCommonjsModule(function(module) {
    var toStr2 = Object.prototype.toString;
    var hasSymbols$12 = hasSymbols2();
    if (hasSymbols$12) {
      var symToStr = Symbol.prototype.toString;
      var symStringRegex = /^Symbol\(.*\)$/;
      var isSymbolObject = function isRealSymbolObject(value) {
        if (typeof value.valueOf() !== "symbol") {
          return false;
        }
        return symStringRegex.test(symToStr.call(value));
      };
      module.exports = function isSymbol2(value) {
        if (typeof value === "symbol") {
          return true;
        }
        if (toStr2.call(value) !== "[object Symbol]") {
          return false;
        }
        try {
          return isSymbolObject(value);
        } catch (e) {
          return false;
        }
      };
    } else {
      module.exports = function isSymbol2(value) {
        return false;
      };
    }
  });
  var $BigInt = typeof BigInt !== "undefined" && BigInt;
  var hasBigints = function hasNativeBigInts() {
    return typeof $BigInt === "function" && typeof BigInt === "function" && typeof $BigInt(42) === "bigint" && typeof BigInt(42) === "bigint";
  };
  var isBigint = createCommonjsModule(function(module) {
    var hasBigInts = hasBigints();
    if (hasBigInts) {
      var bigIntValueOf2 = BigInt.prototype.valueOf;
      var tryBigInt = function tryBigIntObject(value) {
        try {
          bigIntValueOf2.call(value);
          return true;
        } catch (e) {
        }
        return false;
      };
      module.exports = function isBigInt2(value) {
        if (value === null || typeof value === "undefined" || typeof value === "boolean" || typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "function") {
          return false;
        }
        if (typeof value === "bigint") {
          return true;
        }
        return tryBigInt(value);
      };
    } else {
      module.exports = function isBigInt2(value) {
        return false;
      };
    }
  });
  var whichBoxedPrimitive = function whichBoxedPrimitive2(value) {
    if (value == null || typeof value !== "object" && typeof value !== "function") {
      return null;
    }
    if (isString(value)) {
      return "String";
    }
    if (isNumberObject(value)) {
      return "Number";
    }
    if (isBooleanObject(value)) {
      return "Boolean";
    }
    if (isSymbol(value)) {
      return "Symbol";
    }
    if (isBigint(value)) {
      return "BigInt";
    }
  };
  var $Map = typeof Map === "function" && Map.prototype ? Map : null;
  var $Set = typeof Set === "function" && Set.prototype ? Set : null;
  var exported;
  if (!$Map) {
    exported = function isMap3(x2) {
      return false;
    };
  }
  var $mapHas = $Map ? Map.prototype.has : null;
  var $setHas = $Set ? Set.prototype.has : null;
  if (!exported && !$mapHas) {
    exported = function isMap3(x2) {
      return false;
    };
  }
  var isMap = exported || function isMap2(x2) {
    if (!x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      $mapHas.call(x2);
      if ($setHas) {
        try {
          $setHas.call(x2);
        } catch (e) {
          return true;
        }
      }
      return x2 instanceof $Map;
    } catch (e) {
    }
    return false;
  };
  var $Map$1 = typeof Map === "function" && Map.prototype ? Map : null;
  var $Set$1 = typeof Set === "function" && Set.prototype ? Set : null;
  var exported$1;
  if (!$Set$1) {
    exported$1 = function isSet3(x2) {
      return false;
    };
  }
  var $mapHas$1 = $Map$1 ? Map.prototype.has : null;
  var $setHas$1 = $Set$1 ? Set.prototype.has : null;
  if (!exported$1 && !$setHas$1) {
    exported$1 = function isSet3(x2) {
      return false;
    };
  }
  var isSet = exported$1 || function isSet2(x2) {
    if (!x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      $setHas$1.call(x2);
      if ($mapHas$1) {
        try {
          $mapHas$1.call(x2);
        } catch (e) {
          return true;
        }
      }
      return x2 instanceof $Set$1;
    } catch (e) {
    }
    return false;
  };
  var $WeakMap = typeof WeakMap === "function" && WeakMap.prototype ? WeakMap : null;
  var $WeakSet = typeof WeakSet === "function" && WeakSet.prototype ? WeakSet : null;
  var exported$2;
  if (!$WeakMap) {
    exported$2 = function isWeakMap3(x2) {
      return false;
    };
  }
  var $mapHas$2 = $WeakMap ? $WeakMap.prototype.has : null;
  var $setHas$2 = $WeakSet ? $WeakSet.prototype.has : null;
  if (!exported$2 && !$mapHas$2) {
    exported$2 = function isWeakMap3(x2) {
      return false;
    };
  }
  var isWeakmap = exported$2 || function isWeakMap(x2) {
    if (!x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      $mapHas$2.call(x2, $mapHas$2);
      if ($setHas$2) {
        try {
          $setHas$2.call(x2, $setHas$2);
        } catch (e) {
          return true;
        }
      }
      return x2 instanceof $WeakMap;
    } catch (e) {
    }
    return false;
  };
  var isWeakset = createCommonjsModule(function(module) {
    var $WeakSet2 = getIntrinsic("%WeakSet%", true);
    var $setHas2 = callBound("WeakSet.prototype.has", true);
    if ($setHas2) {
      var $mapHas2 = callBound("WeakMap.prototype.has", true);
      module.exports = function isWeakSet2(x2) {
        if (!x2 || typeof x2 !== "object") {
          return false;
        }
        try {
          $setHas2(x2, $setHas2);
          if ($mapHas2) {
            try {
              $mapHas2(x2, $mapHas2);
            } catch (e) {
              return true;
            }
          }
          return x2 instanceof $WeakSet2;
        } catch (e) {
        }
        return false;
      };
    } else {
      module.exports = function isWeakSet2(x2) {
        return false;
      };
    }
  });
  var whichCollection = function whichCollection2(value) {
    if (value && typeof value === "object") {
      if (isMap(value)) {
        return "Map";
      }
      if (isSet(value)) {
        return "Set";
      }
      if (isWeakmap(value)) {
        return "WeakMap";
      }
      if (isWeakset(value)) {
        return "WeakSet";
      }
    }
    return false;
  };
  var $iterator = Symbol.iterator;
  function getIterator(iterable) {
    if (iterable != null && iterable[$iterator] !== void 0) {
      return iterable[$iterator]();
    }
  }
  var node$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    "default": getIterator
  });
  var toStr$7 = Object.prototype.toString;
  var fnToStr = Function.prototype.toString;
  var isFnRegex = /^\s*(?:function)?\*/;
  var hasToStringTag$6 = shams$1();
  var getProto$2 = Object.getPrototypeOf;
  var getGeneratorFunc = function() {
    if (!hasToStringTag$6) {
      return false;
    }
    try {
      return Function("return function*() {}")();
    } catch (e) {
    }
  };
  var GeneratorFunction;
  var isGeneratorFunction = function isGeneratorFunction2(fn2) {
    if (typeof fn2 !== "function") {
      return false;
    }
    if (isFnRegex.test(fnToStr.call(fn2))) {
      return true;
    }
    if (!hasToStringTag$6) {
      var str = toStr$7.call(fn2);
      return str === "[object GeneratorFunction]";
    }
    if (!getProto$2) {
      return false;
    }
    if (typeof GeneratorFunction === "undefined") {
      var generatorFunc = getGeneratorFunc();
      GeneratorFunction = generatorFunc ? getProto$2(generatorFunc) : false;
    }
    return getProto$2(fn2) === GeneratorFunction;
  };
  var fnToStr$1 = Function.prototype.toString;
  var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
    try {
      badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
          throw isCallableMarker;
        }
      });
      isCallableMarker = {};
      reflectApply(function() {
        throw 42;
      }, null, badArrayLike);
    } catch (_2) {
      if (_2 !== isCallableMarker) {
        reflectApply = null;
      }
    }
  } else {
    reflectApply = null;
  }
  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value) {
    try {
      var fnStr = fnToStr$1.call(value);
      return constructorRegex.test(fnStr);
    } catch (e) {
      return false;
    }
  };
  var tryFunctionObject = function tryFunctionToStr(value) {
    try {
      if (isES6ClassFn(value)) {
        return false;
      }
      fnToStr$1.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr$8 = Object.prototype.toString;
  var objectClass = "[object Object]";
  var fnClass = "[object Function]";
  var genClass = "[object GeneratorFunction]";
  var ddaClass = "[object HTMLAllCollection]";
  var ddaClass2 = "[object HTML document.all class]";
  var ddaClass3 = "[object HTMLCollection]";
  var hasToStringTag$7 = typeof Symbol === "function" && !!Symbol.toStringTag;
  var isIE68 = !(0 in [,]);
  var isDDA = function isDocumentDotAll() {
    return false;
  };
  if (typeof document === "object") {
    all = document.all;
    if (toStr$8.call(all) === toStr$8.call(document.all)) {
      isDDA = function isDocumentDotAll2(value) {
        if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
          try {
            var str = toStr$8.call(value);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
          } catch (e) {
          }
        }
        return false;
      };
    }
  }
  var all;
  var isCallable = reflectApply ? function isCallable2(value) {
    if (isDDA(value)) {
      return true;
    }
    if (!value) {
      return false;
    }
    if (typeof value !== "function" && typeof value !== "object") {
      return false;
    }
    try {
      reflectApply(value, null, badArrayLike);
    } catch (e) {
      if (e !== isCallableMarker) {
        return false;
      }
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
  } : function isCallable3(value) {
    if (isDDA(value)) {
      return true;
    }
    if (!value) {
      return false;
    }
    if (typeof value !== "function" && typeof value !== "object") {
      return false;
    }
    if (hasToStringTag$7) {
      return tryFunctionObject(value);
    }
    if (isES6ClassFn(value)) {
      return false;
    }
    var strClass2 = toStr$8.call(value);
    if (strClass2 !== fnClass && strClass2 !== genClass && !/^\[object HTML/.test(strClass2)) {
      return false;
    }
    return tryFunctionObject(value);
  };
  var toStr$9 = Object.prototype.toString;
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  var forEachArray = function forEachArray2(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (hasOwnProperty$2.call(array, i)) {
        if (receiver == null) {
          iterator(array[i], i, array);
        } else {
          iterator.call(receiver, array[i], i, array);
        }
      }
    }
  };
  var forEachString = function forEachString2(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
      if (receiver == null) {
        iterator(string.charAt(i), i, string);
      } else {
        iterator.call(receiver, string.charAt(i), i, string);
      }
    }
  };
  var forEachObject = function forEachObject2(object, iterator, receiver) {
    for (var k2 in object) {
      if (hasOwnProperty$2.call(object, k2)) {
        if (receiver == null) {
          iterator(object[k2], k2, object);
        } else {
          iterator.call(receiver, object[k2], k2, object);
        }
      }
    }
  };
  var forEach = function forEach2(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
      throw new TypeError("iterator must be a function");
    }
    var receiver;
    if (arguments.length >= 3) {
      receiver = thisArg;
    }
    if (toStr$9.call(list) === "[object Array]") {
      forEachArray(list, iterator, receiver);
    } else if (typeof list === "string") {
      forEachString(list, iterator, receiver);
    } else {
      forEachObject(list, iterator, receiver);
    }
  };
  var forEach_1 = forEach;
  var possibleNames = [
    "BigInt64Array",
    "BigUint64Array",
    "Float32Array",
    "Float64Array",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray"
  ];
  var g$1 = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  var availableTypedArrays = function availableTypedArrays2() {
    var out = [];
    for (var i = 0; i < possibleNames.length; i++) {
      if (typeof g$1[possibleNames[i]] === "function") {
        out[out.length] = possibleNames[i];
      }
    }
    return out;
  };
  var $gOPD$2 = getIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  if ($gOPD$2) {
    try {
      $gOPD$2([], "length");
    } catch (e) {
      $gOPD$2 = null;
    }
  }
  var getOwnPropertyDescriptor = $gOPD$2;
  var $toString$3 = callBound("Object.prototype.toString");
  var hasToStringTag$8 = shams$1();
  var g$2 = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  var typedArrays = availableTypedArrays();
  var $indexOf$1 = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
    for (var i = 0; i < array.length; i += 1) {
      if (array[i] === value) {
        return i;
      }
    }
    return -1;
  };
  var $slice = callBound("String.prototype.slice");
  var toStrTags = {};
  var getPrototypeOf = Object.getPrototypeOf;
  if (hasToStringTag$8 && getOwnPropertyDescriptor && getPrototypeOf) {
    forEach_1(typedArrays, function(typedArray) {
      var arr = new g$2[typedArray]();
      if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = getOwnPropertyDescriptor(proto, Symbol.toStringTag);
        if (!descriptor) {
          var superProto = getPrototypeOf(proto);
          descriptor = getOwnPropertyDescriptor(superProto, Symbol.toStringTag);
        }
        toStrTags[typedArray] = descriptor.get;
      }
    });
  }
  var tryTypedArrays = function tryAllTypedArrays(value) {
    var anyTrue = false;
    forEach_1(toStrTags, function(getter, typedArray) {
      if (!anyTrue) {
        try {
          anyTrue = getter.call(value) === typedArray;
        } catch (e) {
        }
      }
    });
    return anyTrue;
  };
  var isTypedArray = function isTypedArray2(value) {
    if (!value || typeof value !== "object") {
      return false;
    }
    if (!hasToStringTag$8 || !(Symbol.toStringTag in value)) {
      var tag2 = $slice($toString$3(value), 8, -1);
      return $indexOf$1(typedArrays, tag2) > -1;
    }
    if (!getOwnPropertyDescriptor) {
      return false;
    }
    return tryTypedArrays(value);
  };
  var $toString$4 = callBound("Object.prototype.toString");
  var hasToStringTag$9 = shams$1();
  var g$3 = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  var typedArrays$1 = availableTypedArrays();
  var $slice$1 = callBound("String.prototype.slice");
  var toStrTags$1 = {};
  var getPrototypeOf$1 = Object.getPrototypeOf;
  if (hasToStringTag$9 && getOwnPropertyDescriptor && getPrototypeOf$1) {
    forEach_1(typedArrays$1, function(typedArray) {
      if (typeof g$3[typedArray] === "function") {
        var arr = new g$3[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf$1(arr);
          var descriptor = getOwnPropertyDescriptor(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf$1(proto);
            descriptor = getOwnPropertyDescriptor(superProto, Symbol.toStringTag);
          }
          toStrTags$1[typedArray] = descriptor.get;
        }
      }
    });
  }
  var tryTypedArrays$1 = function tryAllTypedArrays2(value) {
    var foundName = false;
    forEach_1(toStrTags$1, function(getter, typedArray) {
      if (!foundName) {
        try {
          var name2 = getter.call(value);
          if (name2 === typedArray) {
            foundName = name2;
          }
        } catch (e) {
        }
      }
    });
    return foundName;
  };
  var whichTypedArray = function whichTypedArray2(value) {
    if (!isTypedArray(value)) {
      return false;
    }
    if (!hasToStringTag$9 || !(Symbol.toStringTag in value)) {
      return $slice$1($toString$4(value), 8, -1);
    }
    return tryTypedArrays$1(value);
  };
  var types$2 = createCommonjsModule(function(module, exports) {
    function uncurryThis(f) {
      return f.call.bind(f);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    if (SymbolSupported) {
      var symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch (e) {
        return false;
      }
    }
    exports.isArgumentsObject = isArguments$1;
    exports.isGeneratorFunction = isGeneratorFunction;
    exports.isTypedArray = isTypedArray;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports.isPromise = isPromise;
    function isArrayBufferView(value) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }
      return isTypedArray(value) || isDataView(value);
    }
    exports.isArrayBufferView = isArrayBufferView;
    function isUint8Array(value) {
      return whichTypedArray(value) === "Uint8Array";
    }
    exports.isUint8Array = isUint8Array;
    function isUint8ClampedArray(value) {
      return whichTypedArray(value) === "Uint8ClampedArray";
    }
    exports.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value) {
      return whichTypedArray(value) === "Uint16Array";
    }
    exports.isUint16Array = isUint16Array;
    function isUint32Array(value) {
      return whichTypedArray(value) === "Uint32Array";
    }
    exports.isUint32Array = isUint32Array;
    function isInt8Array(value) {
      return whichTypedArray(value) === "Int8Array";
    }
    exports.isInt8Array = isInt8Array;
    function isInt16Array(value) {
      return whichTypedArray(value) === "Int16Array";
    }
    exports.isInt16Array = isInt16Array;
    function isInt32Array(value) {
      return whichTypedArray(value) === "Int32Array";
    }
    exports.isInt32Array = isInt32Array;
    function isFloat32Array(value) {
      return whichTypedArray(value) === "Float32Array";
    }
    exports.isFloat32Array = isFloat32Array;
    function isFloat64Array(value) {
      return whichTypedArray(value) === "Float64Array";
    }
    exports.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value) {
      return whichTypedArray(value) === "BigInt64Array";
    }
    exports.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value) {
      return whichTypedArray(value) === "BigUint64Array";
    }
    exports.isBigUint64Array = isBigUint64Array;
    function isMapToString(value) {
      return ObjectToString(value) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
    function isMap3(value) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value) : value instanceof Map;
    }
    exports.isMap = isMap3;
    function isSetToString(value) {
      return ObjectToString(value) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
    function isSet3(value) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value) : value instanceof Set;
    }
    exports.isSet = isSet3;
    function isWeakMapToString(value) {
      return ObjectToString(value) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
    function isWeakMap3(value) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
    }
    exports.isWeakMap = isWeakMap3;
    function isWeakSetToString(value) {
      return ObjectToString(value) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
    function isWeakSet2(value) {
      return isWeakSetToString(value);
    }
    exports.isWeakSet = isWeakSet2;
    function isArrayBufferToString(value) {
      return ObjectToString(value) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer(value) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
    }
    exports.isArrayBuffer = isArrayBuffer;
    function isDataViewToString(value) {
      return ObjectToString(value) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
    }
    exports.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
    }
    exports.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value) {
      return ObjectToString(value) === "[object AsyncFunction]";
    }
    exports.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value) {
      return ObjectToString(value) === "[object Map Iterator]";
    }
    exports.isMapIterator = isMapIterator;
    function isSetIterator(value) {
      return ObjectToString(value) === "[object Set Iterator]";
    }
    exports.isSetIterator = isSetIterator;
    function isGeneratorObject(value) {
      return ObjectToString(value) === "[object Generator]";
    }
    exports.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === "[object WebAssembly.Module]";
    }
    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject3(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports.isNumberObject = isNumberObject3;
    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports.isStringObject = isStringObject;
    function isBooleanObject2(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports.isBooleanObject = isBooleanObject2;
    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports.isBigIntObject = isBigIntObject;
    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value) {
      return isNumberObject3(value) || isStringObject(value) || isBooleanObject2(value) || isBigIntObject(value) || isSymbolObject(value);
    }
    exports.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
    }
    exports.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
      Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + " is not supported in userland");
        }
      });
    });
  });
  var types_1 = types$2.isArgumentsObject;
  var types_2 = types$2.isGeneratorFunction;
  var types_3 = types$2.isTypedArray;
  var types_4 = types$2.isPromise;
  var types_5 = types$2.isArrayBufferView;
  var types_6 = types$2.isUint8Array;
  var types_7 = types$2.isUint8ClampedArray;
  var types_8 = types$2.isUint16Array;
  var types_9 = types$2.isUint32Array;
  var types_10 = types$2.isInt8Array;
  var types_11 = types$2.isInt16Array;
  var types_12 = types$2.isInt32Array;
  var types_13 = types$2.isFloat32Array;
  var types_14 = types$2.isFloat64Array;
  var types_15 = types$2.isBigInt64Array;
  var types_16 = types$2.isBigUint64Array;
  var types_17 = types$2.isMap;
  var types_18 = types$2.isSet;
  var types_19 = types$2.isWeakMap;
  var types_20 = types$2.isWeakSet;
  var types_21 = types$2.isArrayBuffer;
  var types_22 = types$2.isDataView;
  var types_23 = types$2.isSharedArrayBuffer;
  var types_24 = types$2.isAsyncFunction;
  var types_25 = types$2.isMapIterator;
  var types_26 = types$2.isSetIterator;
  var types_27 = types$2.isGeneratorObject;
  var types_28 = types$2.isWebAssemblyCompiledModule;
  var types_29 = types$2.isNumberObject;
  var types_30 = types$2.isStringObject;
  var types_31 = types$2.isBooleanObject;
  var types_32 = types$2.isBigIntObject;
  var types_33 = types$2.isSymbolObject;
  var types_34 = types$2.isBoxedPrimitive;
  var types_35 = types$2.isAnyArrayBuffer;
  var isBuffer = function isBuffer2(arg) {
    return arg instanceof Buffer;
  };
  var inherits_browser = createCommonjsModule(function(module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });
  var inherits = createCommonjsModule(function(module) {
    try {
      var util$1 = util;
      if (typeof util$1.inherits !== "function")
        throw "";
      module.exports = util$1.inherits;
    } catch (e) {
      module.exports = inherits_browser;
    }
  });
  var util = createCommonjsModule(function(module, exports) {
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys2 = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys2.length; i++) {
        descriptors[keys2[i]] = Object.getOwnPropertyDescriptor(obj, keys2[i]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString3(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x3) {
        if (x3 === "%%")
          return "%";
        if (i >= len)
          return x3;
        switch (x3) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_2) {
              return "[Circular]";
            }
          default:
            return x3;
        }
      });
      for (var x2 = args[i]; i < len; x2 = args[++i]) {
        if (isNull(x2) || !isObject2(x2)) {
          str += " " + x2;
        } else {
          str += " " + inspect(x2);
        }
      }
      return str;
    };
    exports.deprecate = function(fn2, msg) {
      if (typeof process !== "undefined" && process.noDeprecation === true) {
        return fn2;
      }
      if (typeof process === "undefined") {
        return function() {
          return exports.deprecate(fn2, msg).apply(this, arguments);
        };
      }
      var warned2 = false;
      function deprecated() {
        if (!warned2) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned2 = true;
        }
        return fn2.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    exports.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (isBoolean3(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden))
        ctx.showHidden = false;
      if (isUndefined(ctx.depth))
        ctx.depth = 2;
      if (isUndefined(ctx.colors))
        ctx.colors = false;
      if (isUndefined(ctx.customInspect))
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash2 = {};
      array.forEach(function(val, idx) {
        hash2[val] = true;
      });
      return hash2;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction2(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString3(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys2 = Object.keys(value);
      var visibleKeys = arrayToHash(keys2);
      if (ctx.showHidden) {
        keys2 = Object.getOwnPropertyNames(value);
      }
      if (isError2(value) && (keys2.indexOf("message") >= 0 || keys2.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys2.length === 0) {
        if (isFunction2(value)) {
          var name2 = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name2 + "]", "special");
        }
        if (isRegExp2(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate2(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError2(value)) {
          return formatError(value);
        }
      }
      var base = "", array = false, braces = ["{", "}"];
      if (isArray2(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction2(value)) {
        var n2 = value.name ? ": " + value.name : "";
        base = " [Function" + n2 + "]";
      }
      if (isRegExp2(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate2(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError2(value)) {
        base = " " + formatError(value);
      }
      if (keys2.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp2(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys2);
      } else {
        output = keys2.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString3(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber2(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean3(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys2) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty2(value, String(i))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys2.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name2, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty2(visibleKeys, key)) {
        name2 = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").slice(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name2)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name2 = JSON.stringify("" + key);
        if (name2.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name2 = name2.slice(1, -1);
          name2 = ctx.stylize(name2, "name");
        } else {
          name2 = name2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name2 = ctx.stylize(name2, "string");
        }
      }
      return name2 + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf("\n") >= 0)
          ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    exports.types = types$2;
    function isArray2(ar2) {
      return Array.isArray(ar2);
    }
    exports.isArray = isArray2;
    function isBoolean3(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean3;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber2(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber2;
    function isString3(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString3;
    function isSymbol2(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol2;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp2(re2) {
      return isObject2(re2) && objectToString2(re2) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp2;
    exports.types.isRegExp = isRegExp2;
    function isObject2(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject2;
    function isDate2(d2) {
      return isObject2(d2) && objectToString2(d2) === "[object Date]";
    }
    exports.isDate = isDate2;
    exports.types.isDate = isDate2;
    function isError2(e) {
      return isObject2(e) && (objectToString2(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError2;
    exports.types.isNativeError = isError2;
    function isFunction2(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction2;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = isBuffer;
    function objectToString2(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n2) {
      return n2 < 10 ? "0" + n2.toString(10) : n2.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d2 = /* @__PURE__ */ new Date();
      var time = [
        pad(d2.getHours()),
        pad(d2.getMinutes()),
        pad(d2.getSeconds())
      ].join(":");
      return [d2.getDate(), months[d2.getMonth()], time].join(" ");
    }
    exports.log = function() {
      console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = inherits;
    exports._extend = function(origin, add) {
      if (!add || !isObject2(add))
        return origin;
      var keys2 = Object.keys(add);
      var i = keys2.length;
      while (i--) {
        origin[keys2[i]] = add[keys2[i]];
      }
      return origin;
    };
    function hasOwnProperty2(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn2 = original[kCustomPromisifiedSymbol];
        if (typeof fn2 !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn2, kCustomPromisifiedSymbol, {
          value: fn2,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn2;
      }
      function fn2() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve2, reject) {
          promiseResolve = resolve2;
          promiseReject = reject;
        });
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn2, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol)
        Object.defineProperty(fn2, kCustomPromisifiedSymbol, {
          value: fn2,
          enumerable: false,
          writable: false,
          configurable: true
        });
      return Object.defineProperties(
        fn2,
        getOwnPropertyDescriptors(original)
      );
    };
    exports.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process.nextTick(cb.bind(null, null, ret));
          },
          function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports.callbackify = callbackify;
  });
  var util_1 = util.format;
  var util_2 = util.deprecate;
  var util_3 = util.debuglog;
  var util_4 = util.inspect;
  var util_5 = util.types;
  var util_6 = util.isArray;
  var util_7 = util.isBoolean;
  var util_8 = util.isNull;
  var util_9 = util.isNullOrUndefined;
  var util_10 = util.isNumber;
  var util_11 = util.isString;
  var util_12 = util.isSymbol;
  var util_13 = util.isUndefined;
  var util_14 = util.isRegExp;
  var util_15 = util.isObject;
  var util_16 = util.isDate;
  var util_17 = util.isError;
  var util_18 = util.isFunction;
  var util_19 = util.isPrimitive;
  var util_20 = util.isBuffer;
  var util_21 = util.log;
  var util_22 = util.inherits;
  var util_23 = util._extend;
  var util_24 = util.promisify;
  var util_25 = util.callbackify;
  var util_inspect = util.inspect;
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice$2 = String.prototype.slice;
  var $replace$1 = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat$1 = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable$1 = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O2) {
    return O2.__proto__;
  } : null);
  function addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice$2.call(str, intStr.length + 1);
        return $replace$1.call(intStr, sepRegex, "$&_") + "." + $replace$1.call($replace$1.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace$1.call(str, sepRegex, "$&_");
  }
  var inspectCustom = util_inspect.custom;
  var inspectSymbol = isSymbol$1(inspectCustom) ? inspectCustom : null;
  var objectInspect = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has$2(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has$2(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has$2(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    }
    if (has$2(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has$2(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray$1(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf$1(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect(value, from, noIndent) {
      if (from) {
        seen = $arrSlice.call(seen);
        seen.push(from);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has$2(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp(obj)) {
      var name2 = nameOf(obj);
      var keys2 = arrObjKeys(obj, inspect);
      return "[Function" + (name2 ? ": " + name2 : " (anonymous)") + "]" + (keys2.length > 0 ? " { " + $join.call(keys2, ", ") + " }" : "");
    }
    if (isSymbol$1(obj)) {
      var symString = hasShammedSymbols ? $replace$1.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement$1(obj)) {
      var s = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs = obj.attributes || [];
      for (var i = 0; i < attrs.length; i++) {
        s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
      }
      s += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s += "...";
      }
      s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s;
    }
    if (isArray$1(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs2 = arrObjKeys(obj, inspect);
      if (indent && !singleLineValues(xs2)) {
        return "[" + indentedJoin(xs2, indent) + "]";
      }
      return "[ " + $join.call(xs2, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect);
      if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable$1.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat$1.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function" && util_inspect) {
        return util_inspect(obj, { depth: maxDepth - depth });
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap$1(obj)) {
      var mapParts = [];
      mapForEach.call(obj, function(value, key) {
        mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
      });
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet$1(obj)) {
      var setParts = [];
      setForEach.call(obj, function(value) {
        setParts.push(inspect(value, obj));
      });
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap2(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber(obj)) {
      return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean2(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString$1(obj)) {
      return markBoxed(inspect(String(obj)));
    }
    if (!isDate(obj) && !isRegExp(obj)) {
      var ys2 = arrObjKeys(obj, inspect);
      var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice$2.call(toStr$a(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag2 = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat$1.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      if (ys2.length === 0) {
        return tag2 + "{}";
      }
      if (indent) {
        return tag2 + "{" + indentedJoin(ys2, indent) + "}";
      }
      return tag2 + "{ " + $join.call(ys2, ", ") + " }";
    }
    return String(obj);
  };
  function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s + quoteChar;
  }
  function quote(s) {
    return $replace$1.call(String(s), /"/g, "&quot;");
  }
  function isArray$1(obj) {
    return toStr$a(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isDate(obj) {
    return toStr$a(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isRegExp(obj) {
    return toStr$a(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isError(obj) {
    return toStr$a(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isString$1(obj) {
    return toStr$a(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isNumber(obj) {
    return toStr$a(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isBoolean2(obj) {
    return toStr$a(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isSymbol$1(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  }
  function isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  }
  var hasOwn$1 = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
  function has$2(obj, key) {
    return hasOwn$1.call(obj, key);
  }
  function toStr$a(obj) {
    return objectToString.call(obj);
  }
  function nameOf(f) {
    if (f.name) {
      return f.name;
    }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) {
      return m[1];
    }
    return null;
  }
  function indexOf$1(xs2, x2) {
    if (xs2.indexOf) {
      return xs2.indexOf(x2);
    }
    for (var i = 0, l = xs2.length; i < l; i++) {
      if (xs2[i] === x2) {
        return i;
      }
    }
    return -1;
  }
  function isMap$1(x2) {
    if (!mapSize || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      mapSize.call(x2);
      try {
        setSize.call(x2);
      } catch (s) {
        return true;
      }
      return x2 instanceof Map;
    } catch (e) {
    }
    return false;
  }
  function isWeakMap2(x2) {
    if (!weakMapHas || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x2, weakMapHas);
      try {
        weakSetHas.call(x2, weakSetHas);
      } catch (s) {
        return true;
      }
      return x2 instanceof WeakMap;
    } catch (e) {
    }
    return false;
  }
  function isWeakRef(x2) {
    if (!weakRefDeref || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x2);
      return true;
    } catch (e) {
    }
    return false;
  }
  function isSet$1(x2) {
    if (!setSize || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      setSize.call(x2);
      try {
        mapSize.call(x2);
      } catch (m) {
        return true;
      }
      return x2 instanceof Set;
    } catch (e) {
    }
    return false;
  }
  function isWeakSet(x2) {
    if (!weakSetHas || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x2, weakSetHas);
      try {
        weakMapHas.call(x2, weakMapHas);
      } catch (s) {
        return true;
      }
      return x2 instanceof WeakSet;
    } catch (e) {
    }
    return false;
  }
  function isElement$1(x2) {
    if (!x2 || typeof x2 !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x2 instanceof HTMLElement) {
      return true;
    }
    return typeof x2.nodeName === "string" && typeof x2.getAttribute === "function";
  }
  function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice$2.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s = $replace$1.call($replace$1.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, "single", opts);
  }
  function lowbyte(c2) {
    var n2 = c2.charCodeAt(0);
    var x2 = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n2];
    if (x2) {
      return "\\" + x2;
    }
    return "\\x" + (n2 < 16 ? "0" : "") + $toUpperCase.call(n2.toString(16));
  }
  function markBoxed(str) {
    return "Object(" + str + ")";
  }
  function weakCollectionOf(type) {
    return type + " { ? }";
  }
  function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type + " (" + size + ") {" + joinedEntries + "}";
  }
  function singleLineValues(xs2) {
    for (var i = 0; i < xs2.length; i++) {
      if (indexOf$1(xs2[i], "\n") >= 0) {
        return false;
      }
    }
    return true;
  }
  function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") {
      baseIndent = "	";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  }
  function indentedJoin(xs2, indent) {
    if (xs2.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs2, "," + lineJoiner) + "\n" + indent.prev;
  }
  function arrObjKeys(obj, inspect) {
    var isArr = isArray$1(obj);
    var xs2 = [];
    if (isArr) {
      xs2.length = obj.length;
      for (var i = 0; i < obj.length; i++) {
        xs2[i] = has$2(obj, i) ? inspect(obj[i], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k2 = 0; k2 < syms.length; k2++) {
        symMap["$" + syms[k2]] = syms[k2];
      }
    }
    for (var key in obj) {
      if (!has$2(obj, key)) {
        continue;
      }
      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key)) {
        xs2.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
      } else {
        xs2.push(key + ": " + inspect(obj[key], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j = 0; j < syms.length; j++) {
        if (isEnumerable$1.call(obj, syms[j])) {
          xs2.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
        }
      }
    }
    return xs2;
  }
  var $TypeError$1 = getIntrinsic("%TypeError%");
  var $WeakMap$1 = getIntrinsic("%WeakMap%", true);
  var $Map$2 = getIntrinsic("%Map%", true);
  var $weakMapGet = callBound("WeakMap.prototype.get", true);
  var $weakMapSet = callBound("WeakMap.prototype.set", true);
  var $weakMapHas = callBound("WeakMap.prototype.has", true);
  var $mapGet = callBound("Map.prototype.get", true);
  var $mapSet = callBound("Map.prototype.set", true);
  var $mapHas$3 = callBound("Map.prototype.has", true);
  var listGetNode = function(list, key) {
    for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        curr.next = list.next;
        list.next = curr;
        return curr;
      }
    }
  };
  var listGet = function(objects, key) {
    var node2 = listGetNode(objects, key);
    return node2 && node2.value;
  };
  var listSet = function(objects, key, value) {
    var node2 = listGetNode(objects, key);
    if (node2) {
      node2.value = value;
    } else {
      objects.next = {
        // eslint-disable-line no-param-reassign
        key,
        next: objects.next,
        value
      };
    }
  };
  var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
  };
  var sideChannel = function getSideChannel() {
    var $wm;
    var $m;
    var $o2;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError$1("Side channel does not contain " + objectInspect(key));
        }
      },
      get: function(key) {
        if ($WeakMap$1 && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapGet($wm, key);
          }
        } else if ($Map$2) {
          if ($m) {
            return $mapGet($m, key);
          }
        } else {
          if ($o2) {
            return listGet($o2, key);
          }
        }
      },
      has: function(key) {
        if ($WeakMap$1 && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapHas($wm, key);
          }
        } else if ($Map$2) {
          if ($m) {
            return $mapHas$3($m, key);
          }
        } else {
          if ($o2) {
            return listHas($o2, key);
          }
        }
        return false;
      },
      set: function(key, value) {
        if ($WeakMap$1 && key && (typeof key === "object" || typeof key === "function")) {
          if (!$wm) {
            $wm = new $WeakMap$1();
          }
          $weakMapSet($wm, key, value);
        } else if ($Map$2) {
          if (!$m) {
            $m = new $Map$2();
          }
          $mapSet($m, key, value);
        } else {
          if (!$o2) {
            $o2 = { key: {}, next: null };
          }
          listSet($o2, key, value);
        }
      }
    };
    return channel;
  };
  var hasSymbols$3 = shams();
  var toObject = Object;
  var $push = callBound("Array.prototype.push");
  var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
  var originalGetSymbols = hasSymbols$3 ? Object.getOwnPropertySymbols : null;
  var implementation$4 = function assign(target, source1) {
    if (target == null) {
      throw new TypeError("target must be an object");
    }
    var to2 = toObject(target);
    if (arguments.length === 1) {
      return to2;
    }
    for (var s = 1; s < arguments.length; ++s) {
      var from = toObject(arguments[s]);
      var keys2 = objectKeys(from);
      var getSymbols = hasSymbols$3 && (Object.getOwnPropertySymbols || originalGetSymbols);
      if (getSymbols) {
        var syms = getSymbols(from);
        for (var j = 0; j < syms.length; ++j) {
          var key = syms[j];
          if ($propIsEnumerable(from, key)) {
            $push(keys2, key);
          }
        }
      }
      for (var i = 0; i < keys2.length; ++i) {
        var nextKey = keys2[i];
        if ($propIsEnumerable(from, nextKey)) {
          var propValue = from[nextKey];
          to2[nextKey] = propValue;
        }
      }
    }
    return to2;
  };
  var lacksProperEnumerationOrder = function() {
    if (!Object.assign) {
      return false;
    }
    var str = "abcdefghijklmnopqrst";
    var letters = str.split("");
    var map = {};
    for (var i = 0; i < letters.length; ++i) {
      map[letters[i]] = letters[i];
    }
    var obj = Object.assign({}, map);
    var actual = "";
    for (var k2 in obj) {
      actual += k2;
    }
    return str !== actual;
  };
  var assignHasPendingExceptions = function() {
    if (!Object.assign || !Object.preventExtensions) {
      return false;
    }
    var thrower = Object.preventExtensions({ 1: 2 });
    try {
      Object.assign(thrower, "xy");
    } catch (e) {
      return thrower[1] === "y";
    }
    return false;
  };
  var polyfill$3 = function getPolyfill3() {
    if (!Object.assign) {
      return implementation$4;
    }
    if (lacksProperEnumerationOrder()) {
      return implementation$4;
    }
    if (assignHasPendingExceptions()) {
      return implementation$4;
    }
    return Object.assign;
  };
  var shim$2 = function shimAssign() {
    var polyfill2 = polyfill$3();
    defineProperties_1(
      Object,
      { assign: polyfill2 },
      { assign: function() {
        return Object.assign !== polyfill2;
      } }
    );
    return polyfill2;
  };
  var polyfill$4 = callBind.apply(polyfill$3());
  var bound = function assign2(target, source1) {
    return polyfill$4(Object, arguments);
  };
  defineProperties_1(bound, {
    getPolyfill: polyfill$3,
    implementation: implementation$4,
    shim: shim$2
  });
  var object_assign = bound;
  var getIterator$1 = getCjsExportFromNamespace(node$1);
  var $getTime = callBound("Date.prototype.getTime");
  var gPO$1 = Object.getPrototypeOf;
  var $objToString = callBound("Object.prototype.toString");
  var $Set$2 = getIntrinsic("%Set%", true);
  var $mapHas$4 = callBound("Map.prototype.has", true);
  var $mapGet$1 = callBound("Map.prototype.get", true);
  var $mapSize = callBound("Map.prototype.size", true);
  var $setAdd = callBound("Set.prototype.add", true);
  var $setDelete = callBound("Set.prototype.delete", true);
  var $setHas$3 = callBound("Set.prototype.has", true);
  var $setSize = callBound("Set.prototype.size", true);
  function setHasEqualElement(set, val1, opts, channel) {
    var i = getIterator$1(set);
    var result;
    while ((result = i.next()) && !result.done) {
      if (internalDeepEqual(val1, result.value, opts, channel)) {
        $setDelete(set, result.value);
        return true;
      }
    }
    return false;
  }
  function findLooseMatchingPrimitives(prim) {
    if (typeof prim === "undefined") {
      return null;
    }
    if (typeof prim === "object") {
      return void 0;
    }
    if (typeof prim === "symbol") {
      return false;
    }
    if (typeof prim === "string" || typeof prim === "number") {
      return +prim === +prim;
    }
    return true;
  }
  function mapMightHaveLoosePrim(a, b2, prim, item, opts, channel) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) {
      return altValue;
    }
    var curB = $mapGet$1(b2, altValue);
    var looseOpts = object_assign({}, opts, { strict: false });
    if (typeof curB === "undefined" && !$mapHas$4(b2, altValue) || !internalDeepEqual(item, curB, looseOpts, channel)) {
      return false;
    }
    return !$mapHas$4(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
  }
  function setMightHaveLoosePrim(a, b2, prim) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) {
      return altValue;
    }
    return $setHas$3(b2, altValue) && !$setHas$3(a, altValue);
  }
  function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
    var i = getIterator$1(set);
    var result;
    var key2;
    while ((result = i.next()) && !result.done) {
      key2 = result.value;
      if (
        // eslint-disable-next-line no-use-before-define
        internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet$1(map, key2), opts, channel)
      ) {
        $setDelete(set, key2);
        return true;
      }
    }
    return false;
  }
  function internalDeepEqual(actual, expected, options, channel) {
    var opts = options || {};
    if (opts.strict ? objectIs(actual, expected) : actual === expected) {
      return true;
    }
    var actualBoxed = whichBoxedPrimitive(actual);
    var expectedBoxed = whichBoxedPrimitive(expected);
    if (actualBoxed !== expectedBoxed) {
      return false;
    }
    if (!actual || !expected || typeof actual !== "object" && typeof expected !== "object") {
      return opts.strict ? objectIs(actual, expected) : actual == expected;
    }
    var hasActual = channel.has(actual);
    var hasExpected = channel.has(expected);
    var sentinel;
    if (hasActual && hasExpected) {
      if (channel.get(actual) === channel.get(expected)) {
        return true;
      }
    } else {
      sentinel = {};
    }
    if (!hasActual) {
      channel.set(actual, sentinel);
    }
    if (!hasExpected) {
      channel.set(expected, sentinel);
    }
    return objEquiv(actual, expected, opts, channel);
  }
  function isBuffer$1(x2) {
    if (!x2 || typeof x2 !== "object" || typeof x2.length !== "number") {
      return false;
    }
    if (typeof x2.copy !== "function" || typeof x2.slice !== "function") {
      return false;
    }
    if (x2.length > 0 && typeof x2[0] !== "number") {
      return false;
    }
    return !!(x2.constructor && x2.constructor.isBuffer && x2.constructor.isBuffer(x2));
  }
  function setEquiv(a, b2, opts, channel) {
    if ($setSize(a) !== $setSize(b2)) {
      return false;
    }
    var iA = getIterator$1(a);
    var iB = getIterator$1(b2);
    var resultA;
    var resultB;
    var set;
    while ((resultA = iA.next()) && !resultA.done) {
      if (resultA.value && typeof resultA.value === "object") {
        if (!set) {
          set = new $Set$2();
        }
        $setAdd(set, resultA.value);
      } else if (!$setHas$3(b2, resultA.value)) {
        if (opts.strict) {
          return false;
        }
        if (!setMightHaveLoosePrim(a, b2, resultA.value)) {
          return false;
        }
        if (!set) {
          set = new $Set$2();
        }
        $setAdd(set, resultA.value);
      }
    }
    if (set) {
      while ((resultB = iB.next()) && !resultB.done) {
        if (resultB.value && typeof resultB.value === "object") {
          if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
            return false;
          }
        } else if (!opts.strict && !$setHas$3(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) {
          return false;
        }
      }
      return $setSize(set) === 0;
    }
    return true;
  }
  function mapEquiv(a, b2, opts, channel) {
    if ($mapSize(a) !== $mapSize(b2)) {
      return false;
    }
    var iA = getIterator$1(a);
    var iB = getIterator$1(b2);
    var resultA;
    var resultB;
    var set;
    var key;
    var item1;
    var item2;
    while ((resultA = iA.next()) && !resultA.done) {
      key = resultA.value[0];
      item1 = resultA.value[1];
      if (key && typeof key === "object") {
        if (!set) {
          set = new $Set$2();
        }
        $setAdd(set, key);
      } else {
        item2 = $mapGet$1(b2, key);
        if (typeof item2 === "undefined" && !$mapHas$4(b2, key) || !internalDeepEqual(item1, item2, opts, channel)) {
          if (opts.strict) {
            return false;
          }
          if (!mapMightHaveLoosePrim(a, b2, key, item1, opts, channel)) {
            return false;
          }
          if (!set) {
            set = new $Set$2();
          }
          $setAdd(set, key);
        }
      }
    }
    if (set) {
      while ((resultB = iB.next()) && !resultB.done) {
        key = resultB.value[0];
        item2 = resultB.value[1];
        if (key && typeof key === "object") {
          if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
            return false;
          }
        } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet$1(a, key), item2, opts, channel)) && !mapHasEqualEntry(set, a, key, item2, object_assign({}, opts, { strict: false }), channel)) {
          return false;
        }
      }
      return $setSize(set) === 0;
    }
    return true;
  }
  function objEquiv(a, b2, opts, channel) {
    var i, key;
    if (typeof a !== typeof b2) {
      return false;
    }
    if (a == null || b2 == null) {
      return false;
    }
    if ($objToString(a) !== $objToString(b2)) {
      return false;
    }
    if (isArguments$1(a) !== isArguments$1(b2)) {
      return false;
    }
    var aIsArray = isarray(a);
    var bIsArray = isarray(b2);
    if (aIsArray !== bIsArray) {
      return false;
    }
    var aIsError = a instanceof Error;
    var bIsError = b2 instanceof Error;
    if (aIsError !== bIsError) {
      return false;
    }
    if (aIsError || bIsError) {
      if (a.name !== b2.name || a.message !== b2.message) {
        return false;
      }
    }
    var aIsRegex = isRegex(a);
    var bIsRegex = isRegex(b2);
    if (aIsRegex !== bIsRegex) {
      return false;
    }
    if ((aIsRegex || bIsRegex) && (a.source !== b2.source || regexp_prototype_flags(a) !== regexp_prototype_flags(b2))) {
      return false;
    }
    var aIsDate = isDateObject(a);
    var bIsDate = isDateObject(b2);
    if (aIsDate !== bIsDate) {
      return false;
    }
    if (aIsDate || bIsDate) {
      if ($getTime(a) !== $getTime(b2)) {
        return false;
      }
    }
    if (opts.strict && gPO$1 && gPO$1(a) !== gPO$1(b2)) {
      return false;
    }
    if (whichTypedArray(a) !== whichTypedArray(b2)) {
      return false;
    }
    var aIsBuffer = isBuffer$1(a);
    var bIsBuffer = isBuffer$1(b2);
    if (aIsBuffer !== bIsBuffer) {
      return false;
    }
    if (aIsBuffer || bIsBuffer) {
      if (a.length !== b2.length) {
        return false;
      }
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b2[i]) {
          return false;
        }
      }
      return true;
    }
    if (typeof a !== typeof b2) {
      return false;
    }
    var ka2 = objectKeys(a);
    var kb2 = objectKeys(b2);
    if (ka2.length !== kb2.length) {
      return false;
    }
    ka2.sort();
    kb2.sort();
    for (i = ka2.length - 1; i >= 0; i--) {
      if (ka2[i] != kb2[i]) {
        return false;
      }
    }
    for (i = ka2.length - 1; i >= 0; i--) {
      key = ka2[i];
      if (!internalDeepEqual(a[key], b2[key], opts, channel)) {
        return false;
      }
    }
    var aCollection = whichCollection(a);
    var bCollection = whichCollection(b2);
    if (aCollection !== bCollection) {
      return false;
    }
    if (aCollection === "Set" || bCollection === "Set") {
      return setEquiv(a, b2, opts, channel);
    }
    if (aCollection === "Map") {
      return mapEquiv(a, b2, opts, channel);
    }
    return true;
  }
  var deepEqual = function deepEqual2(a, b2, opts) {
    return internalDeepEqual(a, b2, opts, sideChannel());
  };
  var elementRoleMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _deepEqual = _interopRequireDefault(deepEqual);
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1);
    var _rolesMap = _interopRequireDefault(rolesMap_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i2) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i2 = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i2 >= o.length)
              return { done: true };
            return { done: false, value: o[i2++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var elementRoles = [];
    var keys2 = _rolesMap.default.keys();
    for (var i = 0; i < keys2.length; i++) {
      var key = keys2[i];
      var role = _rolesMap.default.get(key);
      if (role) {
        var concepts = [].concat(role.baseConcepts, role.relatedConcepts);
        for (var k2 = 0; k2 < concepts.length; k2++) {
          var relation = concepts[k2];
          if (relation.module === "HTML") {
            var concept = relation.concept;
            if (concept) {
              (function() {
                var conceptStr = JSON.stringify(concept);
                var elementRoleRelation = elementRoles.find(function(relation2) {
                  return JSON.stringify(relation2[0]) === conceptStr;
                });
                var roles = void 0;
                if (elementRoleRelation) {
                  roles = elementRoleRelation[1];
                } else {
                  roles = [];
                }
                var isUnique = true;
                for (var _i2 = 0; _i2 < roles.length; _i2++) {
                  if (roles[_i2] === key) {
                    isUnique = false;
                    break;
                  }
                }
                if (isUnique) {
                  roles.push(key);
                }
                elementRoles.push([concept, roles]);
              })();
            }
          }
        }
      }
    }
    var elementRoleMap = {
      entries: function entries() {
        return elementRoles;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(elementRoles), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), _key = _step$value[0], values = _step$value[1];
            fn2.call(thisArg, values, _key, elementRoles);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key2) {
        var item = elementRoles.find(function(tuple) {
          return (0, _deepEqual.default)(key2, tuple[0]);
        });
        return item && item[1];
      },
      has: function has(key2) {
        return !!elementRoleMap.get(key2);
      },
      keys: function keys3() {
        return elementRoles.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key2 = _ref2[0];
          return key2;
        });
      },
      values: function values() {
        return elementRoles.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(elementRoleMap, elementRoleMap.entries());
    exports.default = _default;
  });
  unwrapExports(elementRoleMap_1);
  var roleElementMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1);
    var _rolesMap = _interopRequireDefault(rolesMap_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i2) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i2 = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i2 >= o.length)
              return { done: true };
            return { done: false, value: o[i2++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var roleElement = [];
    var keys2 = _rolesMap.default.keys();
    var _loop = function _loop2(i2) {
      var key = keys2[i2];
      var role = _rolesMap.default.get(key);
      if (role) {
        var concepts = [].concat(role.baseConcepts, role.relatedConcepts);
        for (var k2 = 0; k2 < concepts.length; k2++) {
          var relation = concepts[k2];
          if (relation.module === "HTML") {
            var concept = relation.concept;
            if (concept) {
              var roleElementRelation = roleElement.find(function(item) {
                return item[0] === key;
              });
              var relationConcepts = void 0;
              if (roleElementRelation) {
                relationConcepts = roleElementRelation[1];
              } else {
                relationConcepts = [];
              }
              relationConcepts.push(concept);
              roleElement.push([key, relationConcepts]);
            }
          }
        }
      }
    };
    for (var i = 0; i < keys2.length; i++) {
      _loop(i);
    }
    var roleElementMap = {
      entries: function entries() {
        return roleElement;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(roleElement), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
            fn2.call(thisArg, values, key, roleElement);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key) {
        var item = roleElement.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!roleElementMap.get(key);
      },
      keys: function keys3() {
        return roleElement.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return roleElement.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(roleElementMap, roleElementMap.entries());
    exports.default = _default;
  });
  unwrapExports(roleElementMap_1);
  var lib = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.roles = exports.roleElements = exports.elementRoles = exports.dom = exports.aria = void 0;
    var _ariaPropsMap = _interopRequireDefault(ariaPropsMap_1);
    var _domMap = _interopRequireDefault(domMap_1);
    var _rolesMap = _interopRequireDefault(rolesMap_1);
    var _elementRoleMap = _interopRequireDefault(elementRoleMap_1);
    var _roleElementMap = _interopRequireDefault(roleElementMap_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var aria = _ariaPropsMap.default;
    exports.aria = aria;
    var dom2 = _domMap.default;
    exports.dom = dom2;
    var roles = _rolesMap.default;
    exports.roles = roles;
    var elementRoles = _elementRoleMap.default;
    exports.elementRoles = elementRoles;
    var roleElements = _roleElementMap.default;
    exports.roleElements = roleElements;
  });
  unwrapExports(lib);
  var lib_1 = lib.roles;
  var lib_2 = lib.roleElements;
  var lib_3 = lib.elementRoles;
  var lib_4 = lib.dom;
  var lib_5 = lib.aria;
  var iteratorProxy_1$1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function iteratorProxy() {
      var values = this;
      var index = 0;
      var iter = {
        "@@iterator": function iterator() {
          return iter;
        },
        next: function next() {
          if (index < values.length) {
            var value = values[index];
            index = index + 1;
            return {
              done: false,
              value
            };
          } else {
            return {
              done: true
            };
          }
        }
      };
      return iter;
    }
    var _default = iteratorProxy;
    exports.default = _default;
  });
  unwrapExports(iteratorProxy_1$1);
  var iterationDecorator_1$1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = iterationDecorator;
    var _iteratorProxy = _interopRequireDefault(iteratorProxy_1$1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function iterationDecorator(collection, entries) {
      if (typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol") {
        Object.defineProperty(collection, Symbol.iterator, {
          value: _iteratorProxy.default.bind(entries)
        });
      }
      return collection;
    }
  });
  unwrapExports(iterationDecorator_1$1);
  var AbbrRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var AbbrRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "abbr"
        }
      }],
      type: "structure"
    };
    var _default = AbbrRole;
    exports.default = _default;
  });
  unwrapExports(AbbrRole_1);
  var AlertDialogRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var AlertDialogRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "alertdialog"
        }
      }],
      type: "window"
    };
    var _default = AlertDialogRole;
    exports.default = _default;
  });
  unwrapExports(AlertDialogRole_1);
  var AlertRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var AlertRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "alert"
        }
      }],
      type: "structure"
    };
    var _default = AlertRole;
    exports.default = _default;
  });
  unwrapExports(AlertRole_1);
  var AnnotationRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var AnnotationRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = AnnotationRole;
    exports.default = _default;
  });
  unwrapExports(AnnotationRole_1);
  var ApplicationRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ApplicationRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "application"
        }
      }],
      type: "window"
    };
    var _default = ApplicationRole;
    exports.default = _default;
  });
  unwrapExports(ApplicationRole_1);
  var ArticleRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ArticleRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "article"
        }
      }, {
        module: "HTML",
        concept: {
          name: "article"
        }
      }],
      type: "structure"
    };
    var _default = ArticleRole;
    exports.default = _default;
  });
  unwrapExports(ArticleRole_1);
  var AudioRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var AudioRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "audio"
        }
      }],
      type: "widget"
    };
    var _default = AudioRole;
    exports.default = _default;
  });
  unwrapExports(AudioRole_1);
  var BannerRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var BannerRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "banner"
        }
      }],
      type: "structure"
    };
    var _default = BannerRole;
    exports.default = _default;
  });
  unwrapExports(BannerRole_1);
  var BlockquoteRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var BlockquoteRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "blockquote"
        }
      }],
      type: "structure"
    };
    var _default = BlockquoteRole;
    exports.default = _default;
  });
  unwrapExports(BlockquoteRole_1);
  var BusyIndicatorRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var BusyIndicatorRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          attributes: [{
            name: "aria-busy",
            value: "true"
          }]
        }
      }],
      type: "widget"
    };
    var _default = BusyIndicatorRole;
    exports.default = _default;
  });
  unwrapExports(BusyIndicatorRole_1);
  var ButtonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ButtonRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "button"
        }
      }, {
        module: "HTML",
        concept: {
          name: "button"
        }
      }],
      type: "widget"
    };
    var _default = ButtonRole;
    exports.default = _default;
  });
  unwrapExports(ButtonRole_1);
  var CanvasRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var CanvasRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "canvas"
        }
      }],
      type: "widget"
    };
    var _default = CanvasRole;
    exports.default = _default;
  });
  unwrapExports(CanvasRole_1);
  var CaptionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var CaptionRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "caption"
        }
      }],
      type: "structure"
    };
    var _default = CaptionRole;
    exports.default = _default;
  });
  unwrapExports(CaptionRole_1);
  var CellRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var CellRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "cell"
        }
      }, {
        module: "ARIA",
        concept: {
          name: "gridcell"
        }
      }, {
        module: "HTML",
        concept: {
          name: "td"
        }
      }],
      type: "widget"
    };
    var _default = CellRole;
    exports.default = _default;
  });
  unwrapExports(CellRole_1);
  var CheckBoxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var CheckBoxRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "checkbox"
        }
      }, {
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "checkbox"
          }]
        }
      }],
      type: "widget"
    };
    var _default = CheckBoxRole;
    exports.default = _default;
  });
  unwrapExports(CheckBoxRole_1);
  var ColorWellRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ColorWellRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "color"
          }]
        }
      }],
      type: "widget"
    };
    var _default = ColorWellRole;
    exports.default = _default;
  });
  unwrapExports(ColorWellRole_1);
  var ColumnHeaderRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ColumnHeaderRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "columnheader"
        }
      }, {
        module: "HTML",
        concept: {
          name: "th"
        }
      }],
      type: "widget"
    };
    var _default = ColumnHeaderRole;
    exports.default = _default;
  });
  unwrapExports(ColumnHeaderRole_1);
  var ColumnRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ColumnRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = ColumnRole;
    exports.default = _default;
  });
  unwrapExports(ColumnRole_1);
  var ComboBoxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ComboBoxRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "combobox"
        }
      }, {
        module: "HTML",
        concept: {
          name: "select"
        }
      }],
      type: "widget"
    };
    var _default = ComboBoxRole;
    exports.default = _default;
  });
  unwrapExports(ComboBoxRole_1);
  var ComplementaryRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ComplementaryRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "complementary"
        }
      }],
      type: "structure"
    };
    var _default = ComplementaryRole;
    exports.default = _default;
  });
  unwrapExports(ComplementaryRole_1);
  var ContentInfoRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ContentInfoRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "structureinfo"
        }
      }],
      type: "structure"
    };
    var _default = ContentInfoRole;
    exports.default = _default;
  });
  unwrapExports(ContentInfoRole_1);
  var DateRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DateRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "date"
          }]
        }
      }],
      type: "widget"
    };
    var _default = DateRole;
    exports.default = _default;
  });
  unwrapExports(DateRole_1);
  var DateTimeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DateTimeRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "datetime"
          }]
        }
      }],
      type: "widget"
    };
    var _default = DateTimeRole;
    exports.default = _default;
  });
  unwrapExports(DateTimeRole_1);
  var DefinitionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DefinitionRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "dfn"
        }
      }],
      type: "structure"
    };
    var _default = DefinitionRole;
    exports.default = _default;
  });
  unwrapExports(DefinitionRole_1);
  var DescriptionListDetailRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DescriptionListDetailRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "dd"
        }
      }],
      type: "structure"
    };
    var _default = DescriptionListDetailRole;
    exports.default = _default;
  });
  unwrapExports(DescriptionListDetailRole_1);
  var DescriptionListRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DescriptionListRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "dl"
        }
      }],
      type: "structure"
    };
    var _default = DescriptionListRole;
    exports.default = _default;
  });
  unwrapExports(DescriptionListRole_1);
  var DescriptionListTermRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DescriptionListTermRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "dt"
        }
      }],
      type: "structure"
    };
    var _default = DescriptionListTermRole;
    exports.default = _default;
  });
  unwrapExports(DescriptionListTermRole_1);
  var DetailsRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DetailsRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "details"
        }
      }],
      type: "structure"
    };
    var _default = DetailsRole;
    exports.default = _default;
  });
  unwrapExports(DetailsRole_1);
  var DialogRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DialogRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "dialog"
        }
      }, {
        module: "HTML",
        concept: {
          name: "dialog"
        }
      }],
      type: "window"
    };
    var _default = DialogRole;
    exports.default = _default;
  });
  unwrapExports(DialogRole_1);
  var DirectoryRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DirectoryRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "directory"
        }
      }, {
        module: "HTML",
        concept: {
          name: "dir"
        }
      }],
      type: "structure"
    };
    var _default = DirectoryRole;
    exports.default = _default;
  });
  unwrapExports(DirectoryRole_1);
  var DisclosureTriangleRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DisclosureTriangleRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "summary"
        }
      }],
      type: "widget"
    };
    var _default = DisclosureTriangleRole;
    exports.default = _default;
  });
  unwrapExports(DisclosureTriangleRole_1);
  var DivRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DivRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "div"
        }
      }],
      type: "generic"
    };
    var _default = DivRole;
    exports.default = _default;
  });
  unwrapExports(DivRole_1);
  var DocumentRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DocumentRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "document"
        }
      }],
      type: "structure"
    };
    var _default = DocumentRole;
    exports.default = _default;
  });
  unwrapExports(DocumentRole_1);
  var EmbeddedObjectRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var EmbeddedObjectRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "embed"
        }
      }],
      type: "widget"
    };
    var _default = EmbeddedObjectRole;
    exports.default = _default;
  });
  unwrapExports(EmbeddedObjectRole_1);
  var FeedRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var FeedRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "feed"
        }
      }],
      type: "structure"
    };
    var _default = FeedRole;
    exports.default = _default;
  });
  unwrapExports(FeedRole_1);
  var FigcaptionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var FigcaptionRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "figcaption"
        }
      }],
      type: "structure"
    };
    var _default = FigcaptionRole;
    exports.default = _default;
  });
  unwrapExports(FigcaptionRole_1);
  var FigureRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var FigureRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "figure"
        }
      }, {
        module: "HTML",
        concept: {
          name: "figure"
        }
      }],
      type: "structure"
    };
    var _default = FigureRole;
    exports.default = _default;
  });
  unwrapExports(FigureRole_1);
  var FooterRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var FooterRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "footer"
        }
      }],
      type: "structure"
    };
    var _default = FooterRole;
    exports.default = _default;
  });
  unwrapExports(FooterRole_1);
  var FormRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var FormRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "form"
        }
      }, {
        module: "HTML",
        concept: {
          name: "form"
        }
      }],
      type: "structure"
    };
    var _default = FormRole;
    exports.default = _default;
  });
  unwrapExports(FormRole_1);
  var GridRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var GridRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "grid"
        }
      }],
      type: "widget"
    };
    var _default = GridRole;
    exports.default = _default;
  });
  unwrapExports(GridRole_1);
  var GroupRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var GroupRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "group"
        }
      }],
      type: "structure"
    };
    var _default = GroupRole;
    exports.default = _default;
  });
  unwrapExports(GroupRole_1);
  var HeadingRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var HeadingRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "heading"
        }
      }, {
        module: "HTML",
        concept: {
          name: "h1"
        }
      }, {
        module: "HTML",
        concept: {
          name: "h2"
        }
      }, {
        module: "HTML",
        concept: {
          name: "h3"
        }
      }, {
        module: "HTML",
        concept: {
          name: "h4"
        }
      }, {
        module: "HTML",
        concept: {
          name: "h5"
        }
      }, {
        module: "HTML",
        concept: {
          name: "h6"
        }
      }],
      type: "structure"
    };
    var _default = HeadingRole;
    exports.default = _default;
  });
  unwrapExports(HeadingRole_1);
  var IframePresentationalRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var IframePresentationalRole = {
      relatedConcepts: [],
      type: "window"
    };
    var _default = IframePresentationalRole;
    exports.default = _default;
  });
  unwrapExports(IframePresentationalRole_1);
  var IframeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var IframeRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "iframe"
        }
      }],
      type: "window"
    };
    var _default = IframeRole;
    exports.default = _default;
  });
  unwrapExports(IframeRole_1);
  var IgnoredRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var IgnoredRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = IgnoredRole;
    exports.default = _default;
  });
  unwrapExports(IgnoredRole_1);
  var ImageMapLinkRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ImageMapLinkRole = {
      relatedConcepts: [],
      type: "widget"
    };
    var _default = ImageMapLinkRole;
    exports.default = _default;
  });
  unwrapExports(ImageMapLinkRole_1);
  var ImageMapRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ImageMapRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "img",
          attributes: [{
            name: "usemap"
          }]
        }
      }],
      type: "structure"
    };
    var _default = ImageMapRole;
    exports.default = _default;
  });
  unwrapExports(ImageMapRole_1);
  var ImageRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ImageRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "img"
        }
      }, {
        module: "HTML",
        concept: {
          name: "img"
        }
      }],
      type: "structure"
    };
    var _default = ImageRole;
    exports.default = _default;
  });
  unwrapExports(ImageRole_1);
  var InlineTextBoxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var InlineTextBoxRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "input"
        }
      }],
      type: "widget"
    };
    var _default = InlineTextBoxRole;
    exports.default = _default;
  });
  unwrapExports(InlineTextBoxRole_1);
  var InputTimeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var InputTimeRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "time"
          }]
        }
      }],
      type: "widget"
    };
    var _default = InputTimeRole;
    exports.default = _default;
  });
  unwrapExports(InputTimeRole_1);
  var LabelRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var LabelRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "label"
        }
      }],
      type: "structure"
    };
    var _default = LabelRole;
    exports.default = _default;
  });
  unwrapExports(LabelRole_1);
  var LegendRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var LegendRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "legend"
        }
      }],
      type: "structure"
    };
    var _default = LegendRole;
    exports.default = _default;
  });
  unwrapExports(LegendRole_1);
  var LineBreakRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var LineBreakRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "br"
        }
      }],
      type: "structure"
    };
    var _default = LineBreakRole;
    exports.default = _default;
  });
  unwrapExports(LineBreakRole_1);
  var LinkRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var LinkRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "link"
        }
      }, {
        module: "HTML",
        concept: {
          name: "a",
          attributes: [{
            name: "href"
          }]
        }
      }],
      type: "widget"
    };
    var _default = LinkRole;
    exports.default = _default;
  });
  unwrapExports(LinkRole_1);
  var ListBoxOptionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ListBoxOptionRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "option"
        }
      }, {
        module: "HTML",
        concept: {
          name: "option"
        }
      }],
      type: "widget"
    };
    var _default = ListBoxOptionRole;
    exports.default = _default;
  });
  unwrapExports(ListBoxOptionRole_1);
  var ListBoxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ListBoxRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "listbox"
        }
      }, {
        module: "HTML",
        concept: {
          name: "datalist"
        }
      }, {
        module: "HTML",
        concept: {
          name: "select"
        }
      }],
      type: "widget"
    };
    var _default = ListBoxRole;
    exports.default = _default;
  });
  unwrapExports(ListBoxRole_1);
  var ListItemRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ListItemRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "listitem"
        }
      }, {
        module: "HTML",
        concept: {
          name: "li"
        }
      }],
      type: "structure"
    };
    var _default = ListItemRole;
    exports.default = _default;
  });
  unwrapExports(ListItemRole_1);
  var ListMarkerRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ListMarkerRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = ListMarkerRole;
    exports.default = _default;
  });
  unwrapExports(ListMarkerRole_1);
  var ListRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ListRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "list"
        }
      }, {
        module: "HTML",
        concept: {
          name: "ul"
        }
      }, {
        module: "HTML",
        concept: {
          name: "ol"
        }
      }],
      type: "structure"
    };
    var _default = ListRole;
    exports.default = _default;
  });
  unwrapExports(ListRole_1);
  var LogRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var LogRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "log"
        }
      }],
      type: "structure"
    };
    var _default = LogRole;
    exports.default = _default;
  });
  unwrapExports(LogRole_1);
  var MainRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MainRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "main"
        }
      }, {
        module: "HTML",
        concept: {
          name: "main"
        }
      }],
      type: "structure"
    };
    var _default = MainRole;
    exports.default = _default;
  });
  unwrapExports(MainRole_1);
  var MarkRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MarkRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "mark"
        }
      }],
      type: "structure"
    };
    var _default = MarkRole;
    exports.default = _default;
  });
  unwrapExports(MarkRole_1);
  var MarqueeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MarqueeRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "marquee"
        }
      }, {
        module: "HTML",
        concept: {
          name: "marquee"
        }
      }],
      type: "structure"
    };
    var _default = MarqueeRole;
    exports.default = _default;
  });
  unwrapExports(MarqueeRole_1);
  var MathRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MathRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "math"
        }
      }],
      type: "structure"
    };
    var _default = MathRole;
    exports.default = _default;
  });
  unwrapExports(MathRole_1);
  var MenuBarRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MenuBarRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "menubar"
        }
      }],
      type: "structure"
    };
    var _default = MenuBarRole;
    exports.default = _default;
  });
  unwrapExports(MenuBarRole_1);
  var MenuButtonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MenuButtonRole = {
      relatedConcepts: [],
      type: "widget"
    };
    var _default = MenuButtonRole;
    exports.default = _default;
  });
  unwrapExports(MenuButtonRole_1);
  var MenuItemRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MenuItemRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "menuitem"
        }
      }, {
        module: "HTML",
        concept: {
          name: "menuitem"
        }
      }],
      type: "widget"
    };
    var _default = MenuItemRole;
    exports.default = _default;
  });
  unwrapExports(MenuItemRole_1);
  var MenuItemCheckBoxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MenuItemCheckBoxRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "menuitemcheckbox"
        }
      }],
      type: "widget"
    };
    var _default = MenuItemCheckBoxRole;
    exports.default = _default;
  });
  unwrapExports(MenuItemCheckBoxRole_1);
  var MenuItemRadioRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MenuItemRadioRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "menuitemradio"
        }
      }],
      type: "widget"
    };
    var _default = MenuItemRadioRole;
    exports.default = _default;
  });
  unwrapExports(MenuItemRadioRole_1);
  var MenuListOptionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MenuListOptionRole = {
      relatedConcepts: [],
      type: "widget"
    };
    var _default = MenuListOptionRole;
    exports.default = _default;
  });
  unwrapExports(MenuListOptionRole_1);
  var MenuListPopupRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MenuListPopupRole = {
      relatedConcepts: [],
      type: "widget"
    };
    var _default = MenuListPopupRole;
    exports.default = _default;
  });
  unwrapExports(MenuListPopupRole_1);
  var MenuRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MenuRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "menu"
        }
      }, {
        module: "HTML",
        concept: {
          name: "menu"
        }
      }],
      type: "structure"
    };
    var _default = MenuRole;
    exports.default = _default;
  });
  unwrapExports(MenuRole_1);
  var MeterRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var MeterRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "meter"
        }
      }],
      type: "structure"
    };
    var _default = MeterRole;
    exports.default = _default;
  });
  unwrapExports(MeterRole_1);
  var NavigationRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var NavigationRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "navigation"
        }
      }, {
        module: "HTML",
        concept: {
          name: "nav"
        }
      }],
      type: "structure"
    };
    var _default = NavigationRole;
    exports.default = _default;
  });
  unwrapExports(NavigationRole_1);
  var NoneRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var NoneRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "none"
        }
      }],
      type: "structure"
    };
    var _default = NoneRole;
    exports.default = _default;
  });
  unwrapExports(NoneRole_1);
  var NoteRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var NoteRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "note"
        }
      }],
      type: "structure"
    };
    var _default = NoteRole;
    exports.default = _default;
  });
  unwrapExports(NoteRole_1);
  var OutlineRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var OutlineRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = OutlineRole;
    exports.default = _default;
  });
  unwrapExports(OutlineRole_1);
  var ParagraphRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ParagraphRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "p"
        }
      }],
      type: "structure"
    };
    var _default = ParagraphRole;
    exports.default = _default;
  });
  unwrapExports(ParagraphRole_1);
  var PopUpButtonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var PopUpButtonRole = {
      relatedConcepts: [],
      type: "widget"
    };
    var _default = PopUpButtonRole;
    exports.default = _default;
  });
  unwrapExports(PopUpButtonRole_1);
  var PreRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var PreRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "pre"
        }
      }],
      type: "structure"
    };
    var _default = PreRole;
    exports.default = _default;
  });
  unwrapExports(PreRole_1);
  var PresentationalRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var PresentationalRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "presentation"
        }
      }],
      type: "structure"
    };
    var _default = PresentationalRole;
    exports.default = _default;
  });
  unwrapExports(PresentationalRole_1);
  var ProgressIndicatorRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ProgressIndicatorRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "progressbar"
        }
      }, {
        module: "HTML",
        concept: {
          name: "progress"
        }
      }],
      type: "structure"
    };
    var _default = ProgressIndicatorRole;
    exports.default = _default;
  });
  unwrapExports(ProgressIndicatorRole_1);
  var RadioButtonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RadioButtonRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "radio"
        }
      }, {
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "radio"
          }]
        }
      }],
      type: "widget"
    };
    var _default = RadioButtonRole;
    exports.default = _default;
  });
  unwrapExports(RadioButtonRole_1);
  var RadioGroupRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RadioGroupRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "radiogroup"
        }
      }],
      type: "structure"
    };
    var _default = RadioGroupRole;
    exports.default = _default;
  });
  unwrapExports(RadioGroupRole_1);
  var RegionRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RegionRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "region"
        }
      }],
      type: "structure"
    };
    var _default = RegionRole;
    exports.default = _default;
  });
  unwrapExports(RegionRole_1);
  var RootWebAreaRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RootWebAreaRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = RootWebAreaRole;
    exports.default = _default;
  });
  unwrapExports(RootWebAreaRole_1);
  var RowHeaderRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RowHeaderRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "rowheader"
        }
      }, {
        module: "HTML",
        concept: {
          name: "th",
          attributes: [{
            name: "scope",
            value: "row"
          }]
        }
      }],
      type: "widget"
    };
    var _default = RowHeaderRole;
    exports.default = _default;
  });
  unwrapExports(RowHeaderRole_1);
  var RowRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RowRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "row"
        }
      }, {
        module: "HTML",
        concept: {
          name: "tr"
        }
      }],
      type: "structure"
    };
    var _default = RowRole;
    exports.default = _default;
  });
  unwrapExports(RowRole_1);
  var RubyRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RubyRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "ruby"
        }
      }],
      type: "structure"
    };
    var _default = RubyRole;
    exports.default = _default;
  });
  unwrapExports(RubyRole_1);
  var RulerRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var RulerRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = RulerRole;
    exports.default = _default;
  });
  unwrapExports(RulerRole_1);
  var ScrollAreaRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ScrollAreaRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = ScrollAreaRole;
    exports.default = _default;
  });
  unwrapExports(ScrollAreaRole_1);
  var ScrollBarRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ScrollBarRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "scrollbar"
        }
      }],
      type: "widget"
    };
    var _default = ScrollBarRole;
    exports.default = _default;
  });
  unwrapExports(ScrollBarRole_1);
  var SeamlessWebAreaRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SeamlessWebAreaRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = SeamlessWebAreaRole;
    exports.default = _default;
  });
  unwrapExports(SeamlessWebAreaRole_1);
  var SearchRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SearchRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "search"
        }
      }],
      type: "structure"
    };
    var _default = SearchRole;
    exports.default = _default;
  });
  unwrapExports(SearchRole_1);
  var SearchBoxRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SearchBoxRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "searchbox"
        }
      }, {
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "search"
          }]
        }
      }],
      type: "widget"
    };
    var _default = SearchBoxRole;
    exports.default = _default;
  });
  unwrapExports(SearchBoxRole_1);
  var SliderRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SliderRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "slider"
        }
      }, {
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "range"
          }]
        }
      }],
      type: "widget"
    };
    var _default = SliderRole;
    exports.default = _default;
  });
  unwrapExports(SliderRole_1);
  var SliderThumbRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SliderThumbRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = SliderThumbRole;
    exports.default = _default;
  });
  unwrapExports(SliderThumbRole_1);
  var SpinButtonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SpinButtonRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "spinbutton"
        }
      }, {
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "number"
          }]
        }
      }],
      type: "widget"
    };
    var _default = SpinButtonRole;
    exports.default = _default;
  });
  unwrapExports(SpinButtonRole_1);
  var SpinButtonPartRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SpinButtonPartRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = SpinButtonPartRole;
    exports.default = _default;
  });
  unwrapExports(SpinButtonPartRole_1);
  var SplitterRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SplitterRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "separator"
        }
      }],
      type: "widget"
    };
    var _default = SplitterRole;
    exports.default = _default;
  });
  unwrapExports(SplitterRole_1);
  var StaticTextRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var StaticTextRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = StaticTextRole;
    exports.default = _default;
  });
  unwrapExports(StaticTextRole_1);
  var StatusRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var StatusRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "status"
        }
      }],
      type: "structure"
    };
    var _default = StatusRole;
    exports.default = _default;
  });
  unwrapExports(StatusRole_1);
  var SVGRootRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SVGRootRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = SVGRootRole;
    exports.default = _default;
  });
  unwrapExports(SVGRootRole_1);
  var SwitchRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var SwitchRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "switch"
        }
      }, {
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "checkbox"
          }]
        }
      }],
      type: "widget"
    };
    var _default = SwitchRole;
    exports.default = _default;
  });
  unwrapExports(SwitchRole_1);
  var TabGroupRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TabGroupRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "tablist"
        }
      }],
      type: "structure"
    };
    var _default = TabGroupRole;
    exports.default = _default;
  });
  unwrapExports(TabGroupRole_1);
  var TabRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TabRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "tab"
        }
      }],
      type: "widget"
    };
    var _default = TabRole;
    exports.default = _default;
  });
  unwrapExports(TabRole_1);
  var TableHeaderContainerRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TableHeaderContainerRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = TableHeaderContainerRole;
    exports.default = _default;
  });
  unwrapExports(TableHeaderContainerRole_1);
  var TableRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TableRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "table"
        }
      }, {
        module: "HTML",
        concept: {
          name: "table"
        }
      }],
      type: "structure"
    };
    var _default = TableRole;
    exports.default = _default;
  });
  unwrapExports(TableRole_1);
  var TabListRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TabListRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "tablist"
        }
      }],
      type: "structure"
    };
    var _default = TabListRole;
    exports.default = _default;
  });
  unwrapExports(TabListRole_1);
  var TabPanelRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TabPanelRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "tabpanel"
        }
      }],
      type: "structure"
    };
    var _default = TabPanelRole;
    exports.default = _default;
  });
  unwrapExports(TabPanelRole_1);
  var TermRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TermRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "term"
        }
      }],
      type: "structure"
    };
    var _default = TermRole;
    exports.default = _default;
  });
  unwrapExports(TermRole_1);
  var TextFieldRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TextFieldRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "textbox"
        }
      }, {
        module: "HTML",
        concept: {
          name: "input"
        }
      }, {
        module: "HTML",
        concept: {
          name: "input",
          attributes: [{
            name: "type",
            value: "text"
          }]
        }
      }],
      type: "widget"
    };
    var _default = TextFieldRole;
    exports.default = _default;
  });
  unwrapExports(TextFieldRole_1);
  var TimeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TimeRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "time"
        }
      }],
      type: "structure"
    };
    var _default = TimeRole;
    exports.default = _default;
  });
  unwrapExports(TimeRole_1);
  var TimerRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TimerRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "timer"
        }
      }],
      type: "structure"
    };
    var _default = TimerRole;
    exports.default = _default;
  });
  unwrapExports(TimerRole_1);
  var ToggleButtonRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ToggleButtonRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          attributes: [{
            name: "aria-pressed"
          }]
        }
      }],
      type: "widget"
    };
    var _default = ToggleButtonRole;
    exports.default = _default;
  });
  unwrapExports(ToggleButtonRole_1);
  var ToolbarRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var ToolbarRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "toolbar"
        }
      }],
      type: "structure"
    };
    var _default = ToolbarRole;
    exports.default = _default;
  });
  unwrapExports(ToolbarRole_1);
  var TreeRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TreeRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "tree"
        }
      }],
      type: "widget"
    };
    var _default = TreeRole;
    exports.default = _default;
  });
  unwrapExports(TreeRole_1);
  var TreeGridRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TreeGridRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "treegrid"
        }
      }],
      type: "widget"
    };
    var _default = TreeGridRole;
    exports.default = _default;
  });
  unwrapExports(TreeGridRole_1);
  var TreeItemRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var TreeItemRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "treeitem"
        }
      }],
      type: "widget"
    };
    var _default = TreeItemRole;
    exports.default = _default;
  });
  unwrapExports(TreeItemRole_1);
  var UserInterfaceTooltipRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var UserInterfaceTooltipRole = {
      relatedConcepts: [{
        module: "ARIA",
        concept: {
          name: "tooltip"
        }
      }],
      type: "structure"
    };
    var _default = UserInterfaceTooltipRole;
    exports.default = _default;
  });
  unwrapExports(UserInterfaceTooltipRole_1);
  var VideoRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var VideoRole = {
      relatedConcepts: [{
        module: "HTML",
        concept: {
          name: "video"
        }
      }],
      type: "widget"
    };
    var _default = VideoRole;
    exports.default = _default;
  });
  unwrapExports(VideoRole_1);
  var WebAreaRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var WebAreaRole = {
      relatedConcepts: [],
      type: "structure"
    };
    var _default = WebAreaRole;
    exports.default = _default;
  });
  unwrapExports(WebAreaRole_1);
  var WindowRole_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var WindowRole = {
      relatedConcepts: [],
      type: "window"
    };
    var _default = WindowRole;
    exports.default = _default;
  });
  unwrapExports(WindowRole_1);
  var AXObjectsMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1$1);
    var _AbbrRole = _interopRequireDefault(AbbrRole_1);
    var _AlertDialogRole = _interopRequireDefault(AlertDialogRole_1);
    var _AlertRole = _interopRequireDefault(AlertRole_1);
    var _AnnotationRole = _interopRequireDefault(AnnotationRole_1);
    var _ApplicationRole = _interopRequireDefault(ApplicationRole_1);
    var _ArticleRole = _interopRequireDefault(ArticleRole_1);
    var _AudioRole = _interopRequireDefault(AudioRole_1);
    var _BannerRole = _interopRequireDefault(BannerRole_1);
    var _BlockquoteRole = _interopRequireDefault(BlockquoteRole_1);
    var _BusyIndicatorRole = _interopRequireDefault(BusyIndicatorRole_1);
    var _ButtonRole = _interopRequireDefault(ButtonRole_1);
    var _CanvasRole = _interopRequireDefault(CanvasRole_1);
    var _CaptionRole = _interopRequireDefault(CaptionRole_1);
    var _CellRole = _interopRequireDefault(CellRole_1);
    var _CheckBoxRole = _interopRequireDefault(CheckBoxRole_1);
    var _ColorWellRole = _interopRequireDefault(ColorWellRole_1);
    var _ColumnHeaderRole = _interopRequireDefault(ColumnHeaderRole_1);
    var _ColumnRole = _interopRequireDefault(ColumnRole_1);
    var _ComboBoxRole = _interopRequireDefault(ComboBoxRole_1);
    var _ComplementaryRole = _interopRequireDefault(ComplementaryRole_1);
    var _ContentInfoRole = _interopRequireDefault(ContentInfoRole_1);
    var _DateRole = _interopRequireDefault(DateRole_1);
    var _DateTimeRole = _interopRequireDefault(DateTimeRole_1);
    var _DefinitionRole = _interopRequireDefault(DefinitionRole_1);
    var _DescriptionListDetailRole = _interopRequireDefault(DescriptionListDetailRole_1);
    var _DescriptionListRole = _interopRequireDefault(DescriptionListRole_1);
    var _DescriptionListTermRole = _interopRequireDefault(DescriptionListTermRole_1);
    var _DetailsRole = _interopRequireDefault(DetailsRole_1);
    var _DialogRole = _interopRequireDefault(DialogRole_1);
    var _DirectoryRole = _interopRequireDefault(DirectoryRole_1);
    var _DisclosureTriangleRole = _interopRequireDefault(DisclosureTriangleRole_1);
    var _DivRole = _interopRequireDefault(DivRole_1);
    var _DocumentRole = _interopRequireDefault(DocumentRole_1);
    var _EmbeddedObjectRole = _interopRequireDefault(EmbeddedObjectRole_1);
    var _FeedRole = _interopRequireDefault(FeedRole_1);
    var _FigcaptionRole = _interopRequireDefault(FigcaptionRole_1);
    var _FigureRole = _interopRequireDefault(FigureRole_1);
    var _FooterRole = _interopRequireDefault(FooterRole_1);
    var _FormRole = _interopRequireDefault(FormRole_1);
    var _GridRole = _interopRequireDefault(GridRole_1);
    var _GroupRole = _interopRequireDefault(GroupRole_1);
    var _HeadingRole = _interopRequireDefault(HeadingRole_1);
    var _IframePresentationalRole = _interopRequireDefault(IframePresentationalRole_1);
    var _IframeRole = _interopRequireDefault(IframeRole_1);
    var _IgnoredRole = _interopRequireDefault(IgnoredRole_1);
    var _ImageMapLinkRole = _interopRequireDefault(ImageMapLinkRole_1);
    var _ImageMapRole = _interopRequireDefault(ImageMapRole_1);
    var _ImageRole = _interopRequireDefault(ImageRole_1);
    var _InlineTextBoxRole = _interopRequireDefault(InlineTextBoxRole_1);
    var _InputTimeRole = _interopRequireDefault(InputTimeRole_1);
    var _LabelRole = _interopRequireDefault(LabelRole_1);
    var _LegendRole = _interopRequireDefault(LegendRole_1);
    var _LineBreakRole = _interopRequireDefault(LineBreakRole_1);
    var _LinkRole = _interopRequireDefault(LinkRole_1);
    var _ListBoxOptionRole = _interopRequireDefault(ListBoxOptionRole_1);
    var _ListBoxRole = _interopRequireDefault(ListBoxRole_1);
    var _ListItemRole = _interopRequireDefault(ListItemRole_1);
    var _ListMarkerRole = _interopRequireDefault(ListMarkerRole_1);
    var _ListRole = _interopRequireDefault(ListRole_1);
    var _LogRole = _interopRequireDefault(LogRole_1);
    var _MainRole = _interopRequireDefault(MainRole_1);
    var _MarkRole = _interopRequireDefault(MarkRole_1);
    var _MarqueeRole = _interopRequireDefault(MarqueeRole_1);
    var _MathRole = _interopRequireDefault(MathRole_1);
    var _MenuBarRole = _interopRequireDefault(MenuBarRole_1);
    var _MenuButtonRole = _interopRequireDefault(MenuButtonRole_1);
    var _MenuItemRole = _interopRequireDefault(MenuItemRole_1);
    var _MenuItemCheckBoxRole = _interopRequireDefault(MenuItemCheckBoxRole_1);
    var _MenuItemRadioRole = _interopRequireDefault(MenuItemRadioRole_1);
    var _MenuListOptionRole = _interopRequireDefault(MenuListOptionRole_1);
    var _MenuListPopupRole = _interopRequireDefault(MenuListPopupRole_1);
    var _MenuRole = _interopRequireDefault(MenuRole_1);
    var _MeterRole = _interopRequireDefault(MeterRole_1);
    var _NavigationRole = _interopRequireDefault(NavigationRole_1);
    var _NoneRole = _interopRequireDefault(NoneRole_1);
    var _NoteRole = _interopRequireDefault(NoteRole_1);
    var _OutlineRole = _interopRequireDefault(OutlineRole_1);
    var _ParagraphRole = _interopRequireDefault(ParagraphRole_1);
    var _PopUpButtonRole = _interopRequireDefault(PopUpButtonRole_1);
    var _PreRole = _interopRequireDefault(PreRole_1);
    var _PresentationalRole = _interopRequireDefault(PresentationalRole_1);
    var _ProgressIndicatorRole = _interopRequireDefault(ProgressIndicatorRole_1);
    var _RadioButtonRole = _interopRequireDefault(RadioButtonRole_1);
    var _RadioGroupRole = _interopRequireDefault(RadioGroupRole_1);
    var _RegionRole = _interopRequireDefault(RegionRole_1);
    var _RootWebAreaRole = _interopRequireDefault(RootWebAreaRole_1);
    var _RowHeaderRole = _interopRequireDefault(RowHeaderRole_1);
    var _RowRole = _interopRequireDefault(RowRole_1);
    var _RubyRole = _interopRequireDefault(RubyRole_1);
    var _RulerRole = _interopRequireDefault(RulerRole_1);
    var _ScrollAreaRole = _interopRequireDefault(ScrollAreaRole_1);
    var _ScrollBarRole = _interopRequireDefault(ScrollBarRole_1);
    var _SeamlessWebAreaRole = _interopRequireDefault(SeamlessWebAreaRole_1);
    var _SearchRole = _interopRequireDefault(SearchRole_1);
    var _SearchBoxRole = _interopRequireDefault(SearchBoxRole_1);
    var _SliderRole = _interopRequireDefault(SliderRole_1);
    var _SliderThumbRole = _interopRequireDefault(SliderThumbRole_1);
    var _SpinButtonRole = _interopRequireDefault(SpinButtonRole_1);
    var _SpinButtonPartRole = _interopRequireDefault(SpinButtonPartRole_1);
    var _SplitterRole = _interopRequireDefault(SplitterRole_1);
    var _StaticTextRole = _interopRequireDefault(StaticTextRole_1);
    var _StatusRole = _interopRequireDefault(StatusRole_1);
    var _SVGRootRole = _interopRequireDefault(SVGRootRole_1);
    var _SwitchRole = _interopRequireDefault(SwitchRole_1);
    var _TabGroupRole = _interopRequireDefault(TabGroupRole_1);
    var _TabRole = _interopRequireDefault(TabRole_1);
    var _TableHeaderContainerRole = _interopRequireDefault(TableHeaderContainerRole_1);
    var _TableRole = _interopRequireDefault(TableRole_1);
    var _TabListRole = _interopRequireDefault(TabListRole_1);
    var _TabPanelRole = _interopRequireDefault(TabPanelRole_1);
    var _TermRole = _interopRequireDefault(TermRole_1);
    var _TextFieldRole = _interopRequireDefault(TextFieldRole_1);
    var _TimeRole = _interopRequireDefault(TimeRole_1);
    var _TimerRole = _interopRequireDefault(TimerRole_1);
    var _ToggleButtonRole = _interopRequireDefault(ToggleButtonRole_1);
    var _ToolbarRole = _interopRequireDefault(ToolbarRole_1);
    var _TreeRole = _interopRequireDefault(TreeRole_1);
    var _TreeGridRole = _interopRequireDefault(TreeGridRole_1);
    var _TreeItemRole = _interopRequireDefault(TreeItemRole_1);
    var _UserInterfaceTooltipRole = _interopRequireDefault(UserInterfaceTooltipRole_1);
    var _VideoRole = _interopRequireDefault(VideoRole_1);
    var _WebAreaRole = _interopRequireDefault(WebAreaRole_1);
    var _WindowRole = _interopRequireDefault(WindowRole_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var AXObjects = [["AbbrRole", _AbbrRole.default], ["AlertDialogRole", _AlertDialogRole.default], ["AlertRole", _AlertRole.default], ["AnnotationRole", _AnnotationRole.default], ["ApplicationRole", _ApplicationRole.default], ["ArticleRole", _ArticleRole.default], ["AudioRole", _AudioRole.default], ["BannerRole", _BannerRole.default], ["BlockquoteRole", _BlockquoteRole.default], ["BusyIndicatorRole", _BusyIndicatorRole.default], ["ButtonRole", _ButtonRole.default], ["CanvasRole", _CanvasRole.default], ["CaptionRole", _CaptionRole.default], ["CellRole", _CellRole.default], ["CheckBoxRole", _CheckBoxRole.default], ["ColorWellRole", _ColorWellRole.default], ["ColumnHeaderRole", _ColumnHeaderRole.default], ["ColumnRole", _ColumnRole.default], ["ComboBoxRole", _ComboBoxRole.default], ["ComplementaryRole", _ComplementaryRole.default], ["ContentInfoRole", _ContentInfoRole.default], ["DateRole", _DateRole.default], ["DateTimeRole", _DateTimeRole.default], ["DefinitionRole", _DefinitionRole.default], ["DescriptionListDetailRole", _DescriptionListDetailRole.default], ["DescriptionListRole", _DescriptionListRole.default], ["DescriptionListTermRole", _DescriptionListTermRole.default], ["DetailsRole", _DetailsRole.default], ["DialogRole", _DialogRole.default], ["DirectoryRole", _DirectoryRole.default], ["DisclosureTriangleRole", _DisclosureTriangleRole.default], ["DivRole", _DivRole.default], ["DocumentRole", _DocumentRole.default], ["EmbeddedObjectRole", _EmbeddedObjectRole.default], ["FeedRole", _FeedRole.default], ["FigcaptionRole", _FigcaptionRole.default], ["FigureRole", _FigureRole.default], ["FooterRole", _FooterRole.default], ["FormRole", _FormRole.default], ["GridRole", _GridRole.default], ["GroupRole", _GroupRole.default], ["HeadingRole", _HeadingRole.default], ["IframePresentationalRole", _IframePresentationalRole.default], ["IframeRole", _IframeRole.default], ["IgnoredRole", _IgnoredRole.default], ["ImageMapLinkRole", _ImageMapLinkRole.default], ["ImageMapRole", _ImageMapRole.default], ["ImageRole", _ImageRole.default], ["InlineTextBoxRole", _InlineTextBoxRole.default], ["InputTimeRole", _InputTimeRole.default], ["LabelRole", _LabelRole.default], ["LegendRole", _LegendRole.default], ["LineBreakRole", _LineBreakRole.default], ["LinkRole", _LinkRole.default], ["ListBoxOptionRole", _ListBoxOptionRole.default], ["ListBoxRole", _ListBoxRole.default], ["ListItemRole", _ListItemRole.default], ["ListMarkerRole", _ListMarkerRole.default], ["ListRole", _ListRole.default], ["LogRole", _LogRole.default], ["MainRole", _MainRole.default], ["MarkRole", _MarkRole.default], ["MarqueeRole", _MarqueeRole.default], ["MathRole", _MathRole.default], ["MenuBarRole", _MenuBarRole.default], ["MenuButtonRole", _MenuButtonRole.default], ["MenuItemRole", _MenuItemRole.default], ["MenuItemCheckBoxRole", _MenuItemCheckBoxRole.default], ["MenuItemRadioRole", _MenuItemRadioRole.default], ["MenuListOptionRole", _MenuListOptionRole.default], ["MenuListPopupRole", _MenuListPopupRole.default], ["MenuRole", _MenuRole.default], ["MeterRole", _MeterRole.default], ["NavigationRole", _NavigationRole.default], ["NoneRole", _NoneRole.default], ["NoteRole", _NoteRole.default], ["OutlineRole", _OutlineRole.default], ["ParagraphRole", _ParagraphRole.default], ["PopUpButtonRole", _PopUpButtonRole.default], ["PreRole", _PreRole.default], ["PresentationalRole", _PresentationalRole.default], ["ProgressIndicatorRole", _ProgressIndicatorRole.default], ["RadioButtonRole", _RadioButtonRole.default], ["RadioGroupRole", _RadioGroupRole.default], ["RegionRole", _RegionRole.default], ["RootWebAreaRole", _RootWebAreaRole.default], ["RowHeaderRole", _RowHeaderRole.default], ["RowRole", _RowRole.default], ["RubyRole", _RubyRole.default], ["RulerRole", _RulerRole.default], ["ScrollAreaRole", _ScrollAreaRole.default], ["ScrollBarRole", _ScrollBarRole.default], ["SeamlessWebAreaRole", _SeamlessWebAreaRole.default], ["SearchRole", _SearchRole.default], ["SearchBoxRole", _SearchBoxRole.default], ["SliderRole", _SliderRole.default], ["SliderThumbRole", _SliderThumbRole.default], ["SpinButtonRole", _SpinButtonRole.default], ["SpinButtonPartRole", _SpinButtonPartRole.default], ["SplitterRole", _SplitterRole.default], ["StaticTextRole", _StaticTextRole.default], ["StatusRole", _StatusRole.default], ["SVGRootRole", _SVGRootRole.default], ["SwitchRole", _SwitchRole.default], ["TabGroupRole", _TabGroupRole.default], ["TabRole", _TabRole.default], ["TableHeaderContainerRole", _TableHeaderContainerRole.default], ["TableRole", _TableRole.default], ["TabListRole", _TabListRole.default], ["TabPanelRole", _TabPanelRole.default], ["TermRole", _TermRole.default], ["TextFieldRole", _TextFieldRole.default], ["TimeRole", _TimeRole.default], ["TimerRole", _TimerRole.default], ["ToggleButtonRole", _ToggleButtonRole.default], ["ToolbarRole", _ToolbarRole.default], ["TreeRole", _TreeRole.default], ["TreeGridRole", _TreeGridRole.default], ["TreeItemRole", _TreeItemRole.default], ["UserInterfaceTooltipRole", _UserInterfaceTooltipRole.default], ["VideoRole", _VideoRole.default], ["WebAreaRole", _WebAreaRole.default], ["WindowRole", _WindowRole.default]];
    var AXObjectsMap = {
      entries: function entries() {
        return AXObjects;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator = _createForOfIteratorHelper(AXObjects), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], values = _step$value[1];
            fn2.call(thisArg, values, key, AXObjects);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      },
      get: function get(key) {
        var item = AXObjects.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!this.get(key);
      },
      keys: function keys2() {
        return AXObjects.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return AXObjects.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(AXObjectsMap, AXObjectsMap.entries());
    exports.default = _default;
  });
  unwrapExports(AXObjectsMap_1);
  var AXObjectElementMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1$1);
    var _AXObjectsMap = _interopRequireDefault(AXObjectsMap_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var AXObjectElements = [];
    var _iterator = _createForOfIteratorHelper(_AXObjectsMap.default.entries()), _step;
    try {
      var _loop = function _loop2() {
        var _step$value = _slicedToArray(_step.value, 2), name2 = _step$value[0], def = _step$value[1];
        var relatedConcepts = def.relatedConcepts;
        if (Array.isArray(relatedConcepts)) {
          relatedConcepts.forEach(function(relation) {
            if (relation.module === "HTML") {
              var concept = relation.concept;
              if (concept) {
                var index = AXObjectElements.findIndex(function(_ref5) {
                  var _ref6 = _slicedToArray(_ref5, 1), key = _ref6[0];
                  return key === name2;
                });
                if (index === -1) {
                  AXObjectElements.push([name2, []]);
                  index = AXObjectElements.length - 1;
                }
                AXObjectElements[index][1].push(concept);
              }
            }
          });
        }
      };
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var AXObjectElementMap = {
      entries: function entries() {
        return AXObjectElements;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator2 = _createForOfIteratorHelper(AXObjectElements), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _step2$value = _slicedToArray(_step2.value, 2), key = _step2$value[0], values = _step2$value[1];
            fn2.call(thisArg, values, key, AXObjectElements);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      },
      get: function get(key) {
        var item = AXObjectElements.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!this.get(key);
      },
      keys: function keys2() {
        return AXObjectElements.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return AXObjectElements.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(AXObjectElementMap, AXObjectElementMap.entries());
    exports.default = _default;
  });
  unwrapExports(AXObjectElementMap_1);
  var AXObjectRoleMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1$1);
    var _AXObjectsMap = _interopRequireDefault(AXObjectsMap_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var AXObjectRoleElements = [];
    var _iterator = _createForOfIteratorHelper(_AXObjectsMap.default.entries()), _step;
    try {
      var _loop = function _loop2() {
        var _step$value = _slicedToArray(_step.value, 2), name2 = _step$value[0], def = _step$value[1];
        var relatedConcepts = def.relatedConcepts;
        if (Array.isArray(relatedConcepts)) {
          relatedConcepts.forEach(function(relation) {
            if (relation.module === "ARIA") {
              var concept = relation.concept;
              if (concept) {
                var index = AXObjectRoleElements.findIndex(function(_ref5) {
                  var _ref6 = _slicedToArray(_ref5, 1), key = _ref6[0];
                  return key === name2;
                });
                if (index === -1) {
                  AXObjectRoleElements.push([name2, []]);
                  index = AXObjectRoleElements.length - 1;
                }
                AXObjectRoleElements[index][1].push(concept);
              }
            }
          });
        }
      };
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var AXObjectRoleMap = {
      entries: function entries() {
        return AXObjectRoleElements;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator2 = _createForOfIteratorHelper(AXObjectRoleElements), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _step2$value = _slicedToArray(_step2.value, 2), key = _step2$value[0], values = _step2$value[1];
            fn2.call(thisArg, values, key, AXObjectRoleElements);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      },
      get: function get(key) {
        var item = AXObjectRoleElements.find(function(tuple) {
          return tuple[0] === key ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!this.get(key);
      },
      keys: function keys2() {
        return AXObjectRoleElements.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return AXObjectRoleElements.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(AXObjectRoleMap, AXObjectRoleMap.entries());
    exports.default = _default;
  });
  unwrapExports(AXObjectRoleMap_1);
  var elementAXObjectMap_1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _AXObjectsMap = _interopRequireDefault(AXObjectsMap_1);
    var _deepEqual = _interopRequireDefault(deepEqual);
    var _iterationDecorator = _interopRequireDefault(iterationDecorator_1$1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      var _i2 = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i2 == null)
        return;
      var _arr = [];
      var _n2 = true;
      var _d = false;
      var _s2, _e2;
      try {
        for (_i2 = _i2.call(arr); !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
          _arr.push(_s2.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e2 = err;
      } finally {
        try {
          if (!_n2 && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d)
            throw _e2;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it2 = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it2) {
        if (Array.isArray(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it2)
            o = it2;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it2 = it2.call(o);
      }, n: function n2() {
        var step = it2.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it2.return != null)
            it2.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor)
        n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var elementAXObjects = [];
    var _iterator = _createForOfIteratorHelper(_AXObjectsMap.default.entries()), _step;
    try {
      var _loop = function _loop2() {
        var _step$value = _slicedToArray(_step.value, 2), name2 = _step$value[0], def = _step$value[1];
        var relatedConcepts = def.relatedConcepts;
        if (Array.isArray(relatedConcepts)) {
          relatedConcepts.forEach(function(relation) {
            if (relation.module === "HTML") {
              var concept = relation.concept;
              if (concept != null) {
                var conceptStr = JSON.stringify(concept);
                var axObjects;
                var index = 0;
                for (; index < elementAXObjects.length; index++) {
                  var key = elementAXObjects[index][0];
                  if (JSON.stringify(key) === conceptStr) {
                    axObjects = elementAXObjects[index][1];
                    break;
                  }
                }
                if (!Array.isArray(axObjects)) {
                  axObjects = [];
                }
                var loc = axObjects.findIndex(function(item) {
                  return item === name2;
                });
                if (loc === -1) {
                  axObjects.push(name2);
                }
                if (index < elementAXObjects.length) {
                  elementAXObjects.splice(index, 1, [concept, axObjects]);
                } else {
                  elementAXObjects.push([concept, axObjects]);
                }
              }
            }
          });
        }
      };
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var elementAXObjectMap = {
      entries: function entries() {
        return elementAXObjects;
      },
      forEach: function forEach3(fn2) {
        var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        var _iterator2 = _createForOfIteratorHelper(elementAXObjects), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _step2$value = _slicedToArray(_step2.value, 2), key = _step2$value[0], values = _step2$value[1];
            fn2.call(thisArg, values, key, elementAXObjects);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      },
      get: function get(key) {
        var item = elementAXObjects.find(function(tuple) {
          return (0, _deepEqual.default)(key, tuple[0]) ? true : false;
        });
        return item && item[1];
      },
      has: function has(key) {
        return !!this.get(key);
      },
      keys: function keys2() {
        return elementAXObjects.map(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 1), key = _ref2[0];
          return key;
        });
      },
      values: function values() {
        return elementAXObjects.map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), values2 = _ref4[1];
          return values2;
        });
      }
    };
    var _default = (0, _iterationDecorator.default)(elementAXObjectMap, elementAXObjectMap.entries());
    exports.default = _default;
  });
  unwrapExports(elementAXObjectMap_1);
  var lib$1 = createCommonjsModule(function(module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.elementAXObjects = exports.AXObjects = exports.AXObjectRoles = exports.AXObjectElements = void 0;
    var _AXObjectElementMap = _interopRequireDefault(AXObjectElementMap_1);
    var _AXObjectRoleMap = _interopRequireDefault(AXObjectRoleMap_1);
    var _AXObjectsMap = _interopRequireDefault(AXObjectsMap_1);
    var _elementAXObjectMap = _interopRequireDefault(elementAXObjectMap_1);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var AXObjectElements = _AXObjectElementMap.default;
    exports.AXObjectElements = AXObjectElements;
    var AXObjectRoles = _AXObjectRoleMap.default;
    exports.AXObjectRoles = AXObjectRoles;
    var AXObjects = _AXObjectsMap.default;
    exports.AXObjects = AXObjects;
    var elementAXObjects = _elementAXObjectMap.default;
    exports.elementAXObjects = elementAXObjects;
  });
  unwrapExports(lib$1);
  var lib_1$1 = lib$1.elementAXObjects;
  var lib_2$1 = lib$1.AXObjects;
  var lib_3$1 = lib$1.AXObjectRoles;
  var lib_4$1 = lib$1.AXObjectElements;
  var aria_roles = lib_1.keys();
  var abstract_roles = new Set(aria_roles.filter((role) => lib_1.get(role).abstract));
  var non_abstract_roles = aria_roles.filter((name2) => !abstract_roles.has(name2));
  var non_interactive_roles = new Set(non_abstract_roles.filter((name2) => {
    const role = lib_1.get(name2);
    return (
      // 'toolbar' does not descend from widget, but it does support
      // aria-activedescendant, thus in practice we treat it as a widget.
      // focusable tabpanel elements are recommended if any panels in a set contain content where the first element in the panel is not focusable.
      !["toolbar", "tabpanel"].includes(name2) && !role.superClass.some((classes) => classes.includes("widget"))
    );
  }).concat(
    // The `progressbar` is descended from `widget`, but in practice, its
    // value is always `readonly`, so we treat it as a non-interactive role.
    "progressbar"
  ));
  var interactive_roles = new Set(non_abstract_roles.filter((name2) => !non_interactive_roles.has(name2)));
  function is_non_interactive_roles(role) {
    return non_interactive_roles.has(role);
  }
  function is_interactive_roles(role) {
    return interactive_roles.has(role);
  }
  function is_abstract_role(role) {
    return abstract_roles.has(role);
  }
  var presentation_roles = /* @__PURE__ */ new Set(["presentation", "none"]);
  function is_presentation_role(role) {
    return presentation_roles.has(role);
  }
  function is_hidden_from_screen_reader(tag_name, attribute_map) {
    var _a2;
    if (tag_name === "input") {
      const type = (_a2 = attribute_map.get("type")) === null || _a2 === void 0 ? void 0 : _a2.get_static_value();
      if (type && type === "hidden") {
        return true;
      }
    }
    const aria_hidden = attribute_map.get("aria-hidden");
    if (!aria_hidden)
      return false;
    if (!aria_hidden.is_static)
      return true;
    const aria_hidden_value = aria_hidden.get_static_value();
    return aria_hidden_value === true || aria_hidden_value === "true";
  }
  function has_disabled_attribute(attribute_map) {
    const disabled_attr = attribute_map.get("disabled");
    const disabled_attr_value = disabled_attr && disabled_attr.get_static_value();
    if (disabled_attr_value) {
      return true;
    }
    const aria_disabled_attr = attribute_map.get("aria-disabled");
    if (aria_disabled_attr) {
      const aria_disabled_attr_value = aria_disabled_attr.get_static_value();
      if (aria_disabled_attr_value === true) {
        return true;
      }
    }
    return false;
  }
  var non_interactive_element_role_schemas = [];
  lib_3.entries().forEach(([schema, roles]) => {
    if ([...roles].every((role) => role !== "generic" && non_interactive_roles.has(role))) {
      non_interactive_element_role_schemas.push(schema);
    }
  });
  var interactive_element_role_schemas = [];
  lib_3.entries().forEach(([schema, roles]) => {
    if ([...roles].every((role) => interactive_roles.has(role))) {
      interactive_element_role_schemas.push(schema);
    }
  });
  var interactive_ax_objects = new Set([...lib_2$1.keys()].filter((name2) => lib_2$1.get(name2).type === "widget"));
  var non_interactive_ax_objects = new Set([...lib_2$1.keys()].filter((name2) => ["windows", "structure"].includes(lib_2$1.get(name2).type)));
  var interactive_element_ax_object_schemas = [];
  lib_1$1.entries().forEach(([schema, ax_object]) => {
    if ([...ax_object].every((role) => interactive_ax_objects.has(role))) {
      interactive_element_ax_object_schemas.push(schema);
    }
  });
  var non_interactive_element_ax_object_schemas = [];
  lib_1$1.entries().forEach(([schema, ax_object]) => {
    if ([...ax_object].every((role) => non_interactive_ax_objects.has(role))) {
      non_interactive_element_ax_object_schemas.push(schema);
    }
  });
  function match_schema(schema, tag_name, attribute_map) {
    if (schema.name !== tag_name)
      return false;
    if (!schema.attributes)
      return true;
    return schema.attributes.every((schema_attribute) => {
      const attribute = attribute_map.get(schema_attribute.name);
      if (!attribute)
        return false;
      if (schema_attribute.value && schema_attribute.value !== attribute.get_static_value()) {
        return false;
      }
      return true;
    });
  }
  var ElementInteractivity;
  (function(ElementInteractivity2) {
    ElementInteractivity2["Interactive"] = "interactive";
    ElementInteractivity2["NonInteractive"] = "non-interactive";
    ElementInteractivity2["Static"] = "static";
  })(ElementInteractivity || (ElementInteractivity = {}));
  function element_interactivity(tag_name, attribute_map) {
    if (interactive_element_role_schemas.some((schema) => match_schema(schema, tag_name, attribute_map))) {
      return ElementInteractivity.Interactive;
    }
    if (tag_name !== "header" && non_interactive_element_role_schemas.some((schema) => match_schema(schema, tag_name, attribute_map))) {
      return ElementInteractivity.NonInteractive;
    }
    if (interactive_element_ax_object_schemas.some((schema) => match_schema(schema, tag_name, attribute_map))) {
      return ElementInteractivity.Interactive;
    }
    if (non_interactive_element_ax_object_schemas.some((schema) => match_schema(schema, tag_name, attribute_map))) {
      return ElementInteractivity.NonInteractive;
    }
    return ElementInteractivity.Static;
  }
  function is_interactive_element(tag_name, attribute_map) {
    return element_interactivity(tag_name, attribute_map) === ElementInteractivity.Interactive;
  }
  function is_non_interactive_element(tag_name, attribute_map) {
    return element_interactivity(tag_name, attribute_map) === ElementInteractivity.NonInteractive;
  }
  function is_static_element(tag_name, attribute_map) {
    return element_interactivity(tag_name, attribute_map) === ElementInteractivity.Static;
  }
  function is_semantic_role_element(role, tag_name, attribute_map) {
    for (const [schema, ax_object] of lib_1$1.entries()) {
      if (schema.name === tag_name && (!schema.attributes || schema.attributes.every((attr) => attribute_map.has(attr.name) && attribute_map.get(attr.name).get_static_value() === attr.value))) {
        for (const name2 of ax_object) {
          const roles = lib_3$1.get(name2);
          if (roles) {
            for (const { name: name3 } of roles) {
              if (name3 === role) {
                return true;
              }
            }
          }
        }
      }
    }
    return false;
  }
  var address_type_tokens = /* @__PURE__ */ new Set(["shipping", "billing"]);
  var autofill_field_name_tokens = /* @__PURE__ */ new Set([
    "",
    "on",
    "off",
    "name",
    "honorific-prefix",
    "given-name",
    "additional-name",
    "family-name",
    "honorific-suffix",
    "nickname",
    "username",
    "new-password",
    "current-password",
    "one-time-code",
    "organization-title",
    "organization",
    "street-address",
    "address-line1",
    "address-line2",
    "address-line3",
    "address-level4",
    "address-level3",
    "address-level2",
    "address-level1",
    "country",
    "country-name",
    "postal-code",
    "cc-name",
    "cc-given-name",
    "cc-additional-name",
    "cc-family-name",
    "cc-number",
    "cc-exp",
    "cc-exp-month",
    "cc-exp-year",
    "cc-csc",
    "cc-type",
    "transaction-currency",
    "transaction-amount",
    "language",
    "bday",
    "bday-day",
    "bday-month",
    "bday-year",
    "sex",
    "url",
    "photo"
  ]);
  var contact_type_tokens = /* @__PURE__ */ new Set(["home", "work", "mobile", "fax", "pager"]);
  var autofill_contact_field_name_tokens = /* @__PURE__ */ new Set([
    "tel",
    "tel-country-code",
    "tel-national",
    "tel-area-code",
    "tel-local",
    "tel-local-prefix",
    "tel-local-suffix",
    "tel-extension",
    "email",
    "impp"
  ]);
  function is_valid_autocomplete(autocomplete) {
    if (autocomplete === true) {
      return false;
    } else if (!autocomplete) {
      return true;
    }
    const tokens = autocomplete.trim().toLowerCase().split(regex_whitespaces);
    if (typeof tokens[0] === "string" && tokens[0].startsWith("section-")) {
      tokens.shift();
    }
    if (address_type_tokens.has(tokens[0])) {
      tokens.shift();
    }
    if (autofill_field_name_tokens.has(tokens[0])) {
      tokens.shift();
    } else {
      if (contact_type_tokens.has(tokens[0])) {
        tokens.shift();
      }
      if (autofill_contact_field_name_tokens.has(tokens[0])) {
        tokens.shift();
      } else {
        return false;
      }
    }
    if (tokens[0] === "webauthn") {
      tokens.shift();
    }
    return tokens.length === 0;
  }
  var aria_attributes = "activedescendant atomic autocomplete busy checked colcount colindex colspan controls current describedby description details disabled dropeffect errormessage expanded flowto grabbed haspopup hidden invalid keyshortcuts label labelledby level live modal multiline multiselectable orientation owns placeholder posinset pressed readonly relevant required roledescription rowcount rowindex rowspan selected setsize sort valuemax valuemin valuenow valuetext".split(" ");
  var aria_attribute_set = new Set(aria_attributes);
  var aria_roles$1 = lib_1.keys();
  var aria_role_set = new Set(aria_roles$1);
  var a11y_required_attributes = {
    a: ["href"],
    area: ["alt", "aria-label", "aria-labelledby"],
    // html-has-lang
    html: ["lang"],
    // iframe-has-title
    iframe: ["title"],
    img: ["alt"],
    object: ["title", "aria-label", "aria-labelledby"]
  };
  var a11y_distracting_elements = /* @__PURE__ */ new Set([
    "blink",
    "marquee"
  ]);
  var a11y_required_content = /* @__PURE__ */ new Set([
    // anchor-has-content
    "a",
    // heading-has-content
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6"
  ]);
  var a11y_labelable = /* @__PURE__ */ new Set([
    "button",
    "input",
    "keygen",
    "meter",
    "output",
    "progress",
    "select",
    "textarea"
  ]);
  var a11y_interactive_handlers = /* @__PURE__ */ new Set([
    // Keyboard events
    "keypress",
    "keydown",
    "keyup",
    // Click events
    "click",
    "contextmenu",
    "dblclick",
    "drag",
    "dragend",
    "dragenter",
    "dragexit",
    "dragleave",
    "dragover",
    "dragstart",
    "drop",
    "mousedown",
    "mouseenter",
    "mouseleave",
    "mousemove",
    "mouseout",
    "mouseover",
    "mouseup"
  ]);
  var a11y_nested_implicit_semantics = /* @__PURE__ */ new Map([
    ["header", "banner"],
    ["footer", "contentinfo"]
  ]);
  var a11y_implicit_semantics = /* @__PURE__ */ new Map([
    ["a", "link"],
    ["area", "link"],
    ["article", "article"],
    ["aside", "complementary"],
    ["body", "document"],
    ["button", "button"],
    ["datalist", "listbox"],
    ["dd", "definition"],
    ["dfn", "term"],
    ["dialog", "dialog"],
    ["details", "group"],
    ["dt", "term"],
    ["fieldset", "group"],
    ["figure", "figure"],
    ["form", "form"],
    ["h1", "heading"],
    ["h2", "heading"],
    ["h3", "heading"],
    ["h4", "heading"],
    ["h5", "heading"],
    ["h6", "heading"],
    ["hr", "separator"],
    ["img", "img"],
    ["li", "listitem"],
    ["link", "link"],
    ["main", "main"],
    ["menu", "list"],
    ["meter", "progressbar"],
    ["nav", "navigation"],
    ["ol", "list"],
    ["option", "option"],
    ["optgroup", "group"],
    ["output", "status"],
    ["progress", "progressbar"],
    ["section", "region"],
    ["summary", "button"],
    ["table", "table"],
    ["tbody", "rowgroup"],
    ["textarea", "textbox"],
    ["tfoot", "rowgroup"],
    ["thead", "rowgroup"],
    ["tr", "row"],
    ["ul", "list"]
  ]);
  var menuitem_type_to_implicit_role = /* @__PURE__ */ new Map([
    ["command", "menuitem"],
    ["checkbox", "menuitemcheckbox"],
    ["radio", "menuitemradio"]
  ]);
  var input_type_to_implicit_role = /* @__PURE__ */ new Map([
    ["button", "button"],
    ["image", "button"],
    ["reset", "button"],
    ["submit", "button"],
    ["checkbox", "checkbox"],
    ["radio", "radio"],
    ["range", "slider"],
    ["number", "spinbutton"],
    ["email", "textbox"],
    ["search", "searchbox"],
    ["tel", "textbox"],
    ["text", "textbox"],
    ["url", "textbox"]
  ]);
  var a11y_non_interactive_element_to_interactive_role_exceptions = {
    ul: [
      "listbox",
      "menu",
      "menubar",
      "radiogroup",
      "tablist",
      "tree",
      "treegrid"
    ],
    ol: [
      "listbox",
      "menu",
      "menubar",
      "radiogroup",
      "tablist",
      "tree",
      "treegrid"
    ],
    li: ["menuitem", "option", "row", "tab", "treeitem"],
    table: ["grid"],
    td: ["gridcell"],
    fieldset: ["radiogroup", "presentation"]
  };
  var combobox_if_list = /* @__PURE__ */ new Set(["email", "search", "tel", "text", "url"]);
  function input_implicit_role(attribute_map) {
    const type_attribute = attribute_map.get("type");
    if (!type_attribute || !type_attribute.is_static)
      return;
    const type = type_attribute.get_static_value();
    const list_attribute_exists = attribute_map.has("list");
    if (list_attribute_exists && combobox_if_list.has(type)) {
      return "combobox";
    }
    return input_type_to_implicit_role.get(type);
  }
  function menuitem_implicit_role(attribute_map) {
    const type_attribute = attribute_map.get("type");
    if (!type_attribute || !type_attribute.is_static)
      return;
    const type = type_attribute.get_static_value();
    return menuitem_type_to_implicit_role.get(type);
  }
  function get_implicit_role(name2, attribute_map) {
    if (name2 === "menuitem") {
      return menuitem_implicit_role(attribute_map);
    } else if (name2 === "input") {
      return input_implicit_role(attribute_map);
    } else {
      return a11y_implicit_semantics.get(name2);
    }
  }
  var invisible_elements = /* @__PURE__ */ new Set(["meta", "html", "script", "style"]);
  var valid_modifiers$1 = /* @__PURE__ */ new Set([
    "preventDefault",
    "stopPropagation",
    "stopImmediatePropagation",
    "capture",
    "once",
    "passive",
    "nonpassive",
    "self",
    "trusted"
  ]);
  var passive_events = /* @__PURE__ */ new Set([
    "wheel",
    "touchstart",
    "touchmove",
    "touchend",
    "touchcancel"
  ]);
  var react_attributes = /* @__PURE__ */ new Map([
    ["className", "class"],
    ["htmlFor", "for"]
  ]);
  var attributes_to_compact_whitespace = ["class", "style"];
  function is_parent(parent, elements) {
    let check = false;
    while (parent) {
      const parent_name = parent.name;
      if (elements.includes(parent_name)) {
        check = true;
        break;
      }
      if (parent.type === "Element") {
        break;
      }
      parent = parent.parent;
    }
    return check;
  }
  function get_namespace(parent, element, explicit_namespace) {
    const parent_element = parent.find_nearest(/^Element/);
    if (!parent_element) {
      return explicit_namespace || (is_svg(element.name) ? namespaces.svg : null);
    }
    if (parent_element.namespace !== namespaces.foreign) {
      if (is_svg(element.name.toLowerCase()))
        return namespaces.svg;
      if (parent_element.name.toLowerCase() === "foreignobject")
        return null;
    }
    return parent_element.namespace;
  }
  function is_valid_aria_attribute_value(schema, value) {
    switch (schema.type) {
      case "boolean":
        return typeof value === "boolean";
      case "string":
      case "id":
        return typeof value === "string";
      case "tristate":
        return typeof value === "boolean" || value === "mixed";
      case "integer":
      case "number":
        return typeof value !== "boolean" && isNaN(Number(value)) === false;
      case "token":
        return (schema.values || []).indexOf(typeof value === "string" ? value.toLowerCase() : value) > -1;
      case "idlist":
        return typeof value === "string" && value.split(regex_any_repeated_whitespaces).every((id2) => typeof id2 === "string");
      case "tokenlist":
        return typeof value === "string" && value.split(regex_any_repeated_whitespaces).every((token) => (schema.values || []).indexOf(token.toLowerCase()) > -1);
      default:
        return false;
    }
  }
  var regex_any_repeated_whitespaces = /[\s]+/g;
  var regex_heading_tags = /^h[1-6]$/;
  var regex_illegal_attribute_character = /(^[0-9-.])|[\^$@%&#?!|()[\]{}^*+~;]/;
  var Element = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.attributes = [];
      this.actions = [];
      this.bindings = [];
      this.classes = [];
      this.styles = [];
      this.handlers = [];
      this.lets = [];
      this.intro = null;
      this.outro = null;
      this.animation = null;
      this.name = info.name;
      if (info.name === "svelte:element") {
        if (typeof info.tag !== "string") {
          this.tag_expr = new Expression(component, this, scope, info.tag);
        } else {
          this.tag_expr = new Expression(component, this, scope, string_literal(info.tag));
          this.name = info.tag;
        }
      } else {
        this.tag_expr = new Expression(component, this, scope, string_literal(this.name));
      }
      this.namespace = get_namespace(parent, this, component.namespace);
      if (this.namespace !== namespaces.foreign) {
        if (this.name === "pre" || this.name === "textarea") {
          const first = info.children[0];
          if (first && first.type === "Text") {
            first.data = first.data.replace(regex_starts_with_newline, "");
          }
        }
        if (this.name === "textarea") {
          if (info.children.length > 0) {
            const value_attribute = info.attributes.find((node2) => node2.name === "value");
            if (value_attribute) {
              component.error(value_attribute, compiler_errors.textarea_duplicate_value);
              return;
            }
            info.attributes.push({
              type: "Attribute",
              name: "value",
              value: info.children
            });
            info.children = [];
          }
        }
        if (this.name === "option") {
          const value_attribute = info.attributes.find((attribute) => attribute.name === "value");
          if (!value_attribute) {
            info.attributes.push({
              type: "Attribute",
              name: "value",
              value: info.children,
              synthetic: true
            });
          }
        }
      }
      const has_let = info.attributes.some((node2) => node2.type === "Let");
      if (has_let) {
        scope = scope.child();
      }
      const order = ["Binding"];
      info.attributes.sort((a, b2) => order.indexOf(a.type) - order.indexOf(b2.type));
      info.attributes.forEach((node2) => {
        switch (node2.type) {
          case "Action":
            this.actions.push(new Action(component, this, scope, node2));
            break;
          case "Attribute":
          case "Spread":
            if (node2.name === "xmlns")
              this.namespace = node2.value[0].data;
            this.attributes.push(new Attribute(component, this, scope, node2));
            break;
          case "Binding":
            this.bindings.push(new Binding(component, this, scope, node2));
            break;
          case "Class":
            this.classes.push(new Class(component, this, scope, node2));
            break;
          case "StyleDirective":
            this.styles.push(new StyleDirective(component, this, scope, node2));
            break;
          case "EventHandler":
            this.handlers.push(new EventHandler(component, this, scope, node2));
            break;
          case "Let": {
            const l = new Let(component, this, scope, node2);
            this.lets.push(l);
            const dependencies = /* @__PURE__ */ new Set([l.name.name]);
            l.names.forEach((name2) => {
              scope.add(name2, dependencies, this);
            });
            break;
          }
          case "Transition": {
            const transition = new Transition(component, this, scope, node2);
            if (node2.intro)
              this.intro = transition;
            if (node2.outro)
              this.outro = transition;
            break;
          }
          case "Animation":
            this.animation = new Animation(component, this, scope, node2);
            break;
          default:
            throw new Error(`Not implemented: ${node2.type}`);
        }
      });
      this.scope = scope;
      this.children = map_children(component, this, this.scope, info.children);
      this.validate();
      this.optimise();
      component.apply_stylesheet(this);
    }
    get is_dynamic_element() {
      return this.name === "svelte:element";
    }
    validate() {
      if (this.component.var_lookup.has(this.name) && this.component.var_lookup.get(this.name).imported && !is_svg(this.name) && !is_html(this.name)) {
        this.component.warn(this, compiler_warnings.component_name_lowercase(this.name));
      }
      this.validate_attributes();
      this.validate_event_handlers();
      if (this.namespace === namespaces.foreign) {
        this.validate_bindings_foreign();
      } else {
        this.validate_attributes_a11y();
        this.validate_special_cases();
        this.validate_bindings();
        this.validate_content();
      }
    }
    validate_attributes() {
      const { component, parent } = this;
      this.attributes.forEach((attribute) => {
        if (attribute.is_spread)
          return;
        const name2 = attribute.name.toLowerCase();
        if (regex_illegal_attribute_character.test(name2)) {
          return component.error(attribute, compiler_errors.illegal_attribute(name2));
        }
        if (name2 === "slot") {
          if (!attribute.is_static) {
            return component.error(attribute, compiler_errors.invalid_slot_attribute);
          }
          if (component.slot_outlets.has(name2)) {
            return component.error(attribute, compiler_errors.duplicate_slot_attribute(name2));
          }
          if (!(parent.type === "SlotTemplate" || within_custom_element(parent))) {
            return component.error(attribute, compiler_errors.invalid_slotted_content);
          }
        }
        if (this.namespace !== namespaces.foreign) {
          if (name2 === "is") {
            component.warn(attribute, compiler_warnings.avoid_is);
          }
          if (react_attributes.has(attribute.name)) {
            component.warn(attribute, compiler_warnings.invalid_html_attribute(attribute.name, react_attributes.get(attribute.name)));
          }
        }
      });
    }
    validate_attributes_a11y() {
      var _a2;
      const { component, attributes, handlers: handlers2 } = this;
      const attribute_map = /* @__PURE__ */ new Map();
      const handlers_map = /* @__PURE__ */ new Map();
      attributes.forEach((attribute) => attribute_map.set(attribute.name, attribute));
      handlers2.forEach((handler) => handlers_map.set(handler.name, handler));
      attributes.forEach((attribute) => {
        if (attribute.is_spread)
          return;
        const name2 = attribute.name.toLowerCase();
        if (name2.startsWith("aria-")) {
          if (invisible_elements.has(this.name)) {
            component.warn(attribute, compiler_warnings.a11y_aria_attributes(this.name));
          }
          const type = name2.slice(5);
          if (!aria_attribute_set.has(type)) {
            const match = fuzzymatch(type, aria_attributes);
            component.warn(attribute, compiler_warnings.a11y_unknown_aria_attribute(type, match));
          }
          if (name2 === "aria-hidden" && regex_heading_tags.test(this.name)) {
            component.warn(attribute, compiler_warnings.a11y_hidden(this.name));
          }
          let value = attribute.get_static_value();
          if (value === "true")
            value = true;
          if (value === "false")
            value = false;
          if (value !== null && value !== void 0 && lib_5.has(name2)) {
            const schema = lib_5.get(name2);
            if (!is_valid_aria_attribute_value(schema, value)) {
              component.warn(attribute, compiler_warnings.a11y_incorrect_attribute_type(schema, name2));
            }
          }
          if (name2 === "aria-activedescendant" && !this.is_dynamic_element && !is_interactive_element(this.name, attribute_map) && !attribute_map.has("tabindex")) {
            component.warn(attribute, compiler_warnings.a11y_aria_activedescendant_has_tabindex);
          }
        }
        if (name2 === "role") {
          if (invisible_elements.has(this.name)) {
            component.warn(attribute, compiler_warnings.a11y_misplaced_role(this.name));
          }
          const value = attribute.get_static_value();
          if (typeof value === "string") {
            value.split(regex_any_repeated_whitespaces).forEach((current_role) => {
              var _a3;
              if (current_role && is_abstract_role(current_role)) {
                component.warn(attribute, compiler_warnings.a11y_no_abstract_role(current_role));
              } else if (current_role && !aria_role_set.has(current_role)) {
                const match = fuzzymatch(current_role, aria_roles$1);
                component.warn(attribute, compiler_warnings.a11y_unknown_role(current_role, match));
              }
              if (current_role === get_implicit_role(this.name, attribute_map)) {
                component.warn(attribute, compiler_warnings.a11y_no_redundant_roles(current_role));
              }
              const is_parent_section_or_article = is_parent(this.parent, ["section", "article"]);
              if (!is_parent_section_or_article) {
                const has_nested_redundant_role = current_role === a11y_nested_implicit_semantics.get(this.name);
                if (has_nested_redundant_role) {
                  component.warn(attribute, compiler_warnings.a11y_no_redundant_roles(current_role));
                }
              }
              if (!this.is_dynamic_element && !is_semantic_role_element(current_role, this.name, attribute_map)) {
                const role2 = lib_1.get(current_role);
                if (role2) {
                  const required_role_props = Object.keys(role2.requiredProps);
                  const has_missing_props = required_role_props.some((prop) => !attributes.find((a) => a.name === prop));
                  if (has_missing_props) {
                    component.warn(attribute, compiler_warnings.a11y_role_has_required_aria_props(current_role, required_role_props));
                  }
                }
              }
              if (!has_disabled_attribute(attribute_map) && !is_hidden_from_screen_reader(this.name, attribute_map) && !is_presentation_role(current_role) && is_interactive_roles(current_role) && is_static_element(this.name, attribute_map) && !attribute_map.get("tabindex")) {
                const has_interactive_handlers = handlers2.some((handler) => a11y_interactive_handlers.has(handler.name));
                if (has_interactive_handlers) {
                  component.warn(this, compiler_warnings.a11y_interactive_supports_focus(current_role));
                }
              }
              if (is_interactive_element(this.name, attribute_map) && (is_non_interactive_roles(current_role) || is_presentation_role(current_role))) {
                component.warn(this, compiler_warnings.a11y_no_interactive_element_to_noninteractive_role(current_role, this.name));
              }
              if (is_non_interactive_element(this.name, attribute_map) && is_interactive_roles(current_role) && !((_a3 = a11y_non_interactive_element_to_interactive_role_exceptions[this.name]) === null || _a3 === void 0 ? void 0 : _a3.includes(current_role))) {
                component.warn(this, compiler_warnings.a11y_no_noninteractive_element_to_interactive_role(current_role, this.name));
              }
            });
          }
        }
        if (name2 === "accesskey") {
          component.warn(attribute, compiler_warnings.a11y_accesskey);
        }
        if (name2 === "autofocus") {
          component.warn(attribute, compiler_warnings.a11y_autofocus);
        }
        if (name2 === "scope" && !this.is_dynamic_element && this.name !== "th") {
          component.warn(attribute, compiler_warnings.a11y_misplaced_scope);
        }
        if (name2 === "tabindex") {
          const value = attribute.get_static_value();
          if (!isNaN(value) && +value > 0) {
            component.warn(attribute, compiler_warnings.a11y_positive_tabindex);
          }
        }
      });
      if (handlers_map.has("click")) {
        const role2 = attribute_map.get("role");
        const is_non_presentation_role = (role2 === null || role2 === void 0 ? void 0 : role2.is_static) && !is_presentation_role(role2.get_static_value());
        if (!this.is_dynamic_element && !is_hidden_from_screen_reader(this.name, attribute_map) && (!role2 || is_non_presentation_role) && !is_interactive_element(this.name, attribute_map) && !this.attributes.find((attr) => attr.is_spread)) {
          const has_key_event = handlers_map.has("keydown") || handlers_map.has("keyup") || handlers_map.has("keypress");
          if (!has_key_event) {
            component.warn(this, compiler_warnings.a11y_click_events_have_key_events);
          }
        }
      }
      if (!this.is_dynamic_element && !is_interactive_element(this.name, attribute_map) && !is_interactive_roles((_a2 = attribute_map.get("role")) === null || _a2 === void 0 ? void 0 : _a2.get_static_value())) {
        const tab_index = attribute_map.get("tabindex");
        if (tab_index && (!tab_index.is_static || Number(tab_index.get_static_value()) >= 0)) {
          component.warn(this, compiler_warnings.a11y_no_noninteractive_tabindex);
        }
      }
      const role = attribute_map.get("role");
      const role_value = role ? role.get_static_value() : get_implicit_role(this.name, attribute_map);
      if (typeof role_value === "string" && lib_1.has(role_value)) {
        const { props } = lib_1.get(role_value);
        const invalid_aria_props = new Set(lib_5.keys().filter((attribute) => !(attribute in props)));
        const is_implicit = role_value && role === void 0;
        attributes.filter((prop) => prop.type !== "Spread").forEach((prop) => {
          if (invalid_aria_props.has(prop.name)) {
            component.warn(prop, compiler_warnings.a11y_role_supports_aria_props(prop.name, role_value, is_implicit, this.name));
          }
        });
      }
    }
    validate_special_cases() {
      const { component, attributes, handlers: handlers2 } = this;
      const attribute_map = /* @__PURE__ */ new Map();
      const handlers_map = /* @__PURE__ */ new Map();
      attributes.forEach((attribute) => attribute_map.set(attribute.name, attribute));
      handlers2.forEach((handler) => handlers_map.set(handler.name, handler));
      if (this.name === "a") {
        const href_attribute = attribute_map.get("href") || attribute_map.get("xlink:href");
        const id_attribute = attribute_map.get("id");
        const name_attribute = attribute_map.get("name");
        const target_attribute = attribute_map.get("target");
        const aria_label_attribute = attribute_map.get("aria-label");
        if (component.compile_options.legacy && target_attribute && target_attribute.get_static_value() === "_blank" && href_attribute) {
          const href_static_value = href_attribute.get_static_value() ? href_attribute.get_static_value().toLowerCase() : null;
          if (href_static_value === null || href_static_value.match(/^(https?:)?\/\//i)) {
            const rel = attribute_map.get("rel");
            if (rel == null || rel.is_static) {
              const rel_values = rel ? rel.get_static_value().split(regex_any_repeated_whitespaces) : [];
              if (!rel || !rel_values.includes("noreferrer")) {
                component.warn(this, {
                  code: "security-anchor-rel-noreferrer",
                  message: 'Security: Anchor with "target=_blank" should have rel attribute containing the value "noreferrer"'
                });
              }
            }
          }
        }
        if (aria_label_attribute) {
          const aria_value = aria_label_attribute.get_static_value();
          if (aria_value != "") {
            this.contains_a11y_label = true;
          }
        }
        if (href_attribute) {
          const href_value = href_attribute.get_static_value();
          if (href_value === "" || href_value === "#" || /^\W*javascript:/i.test(href_value)) {
            component.warn(href_attribute, compiler_warnings.a11y_invalid_attribute(href_attribute.name, href_value));
          }
        } else {
          const id_attribute_valid = id_attribute && id_attribute.get_static_value() !== "";
          const name_attribute_valid = name_attribute && name_attribute.get_static_value() !== "";
          if (!id_attribute_valid && !name_attribute_valid) {
            component.warn(this, compiler_warnings.a11y_missing_attribute("a", "an", "href"));
          }
        }
      } else {
        const required_attributes = a11y_required_attributes[this.name];
        if (required_attributes) {
          const has_attribute = required_attributes.some((name2) => attribute_map.has(name2));
          if (!has_attribute) {
            should_have_attribute(this, required_attributes);
          }
        }
      }
      if (this.name === "input") {
        const type = attribute_map.get("type");
        if (type && type.get_static_value() === "image") {
          const required_attributes = ["alt", "aria-label", "aria-labelledby"];
          const has_attribute = required_attributes.some((name2) => attribute_map.has(name2));
          if (!has_attribute) {
            should_have_attribute(this, required_attributes, 'input type="image"');
          }
        }
        const autocomplete = attribute_map.get("autocomplete");
        if (type && autocomplete) {
          const type_value = type.get_static_value();
          const autocomplete_value = autocomplete.get_static_value();
          if (!is_valid_autocomplete(autocomplete_value)) {
            component.warn(autocomplete, compiler_warnings.a11y_autocomplete_valid(type_value, autocomplete_value));
          }
        }
      }
      if (this.name === "img") {
        const alt_attribute = attribute_map.get("alt");
        const aria_hidden_attribute = attribute_map.get("aria-hidden");
        const aria_hidden_exist = aria_hidden_attribute && aria_hidden_attribute.get_static_value();
        if (alt_attribute && !aria_hidden_exist) {
          const alt_value = alt_attribute.get_static_value();
          if (/\b(image|picture|photo)\b/i.test(alt_value)) {
            component.warn(this, compiler_warnings.a11y_img_redundant_alt);
          }
        }
      }
      if (this.name === "label") {
        const has_input_child = (children) => {
          if (children.some((child) => child instanceof Element && (a11y_labelable.has(child.name) || child.name === "slot"))) {
            return true;
          }
          for (const child of children) {
            if (!("children" in child) || child.children.length === 0) {
              continue;
            }
            if (has_input_child(child.children)) {
              return true;
            }
          }
          return false;
        };
        if (!attribute_map.has("for") && !has_input_child(this.children)) {
          component.warn(this, compiler_warnings.a11y_label_has_associated_control);
        }
      }
      if (this.name === "video") {
        const aria_hidden_attribute = attribute_map.get("aria-hidden");
        const aria_hidden_exist = aria_hidden_attribute && aria_hidden_attribute.get_static_value();
        if (attribute_map.has("muted") || aria_hidden_exist === "true") {
          return;
        }
        let has_caption;
        const track = this.children.find((i) => i.name === "track");
        if (track) {
          has_caption = track.attributes.find((a) => a.name === "kind" && a.get_static_value() === "captions");
        }
        if (!has_caption) {
          component.warn(this, compiler_warnings.a11y_media_has_caption);
        }
      }
      if (a11y_distracting_elements.has(this.name)) {
        component.warn(this, compiler_warnings.a11y_distracting_elements(this.name));
      }
      if (this.name === "figcaption") {
        let { parent } = this;
        let is_figure_parent = false;
        while (parent) {
          if (parent.name === "figure") {
            is_figure_parent = true;
            break;
          }
          if (parent.type === "Element") {
            break;
          }
          parent = parent.parent;
        }
        if (!is_figure_parent) {
          component.warn(this, compiler_warnings.a11y_structure_immediate);
        }
      }
      if (this.name === "figure") {
        const children = this.children.filter((node2) => {
          if (node2.type === "Comment")
            return false;
          if (node2.type === "Text")
            return regex_non_whitespace_character.test(node2.data);
          return true;
        });
        const index = children.findIndex((child) => child.name === "figcaption");
        if (index !== -1 && (index !== 0 && index !== children.length - 1)) {
          component.warn(children[index], compiler_warnings.a11y_structure_first_or_last);
        }
      }
      if (handlers_map.has("mouseover") && !handlers_map.has("focus")) {
        component.warn(this, compiler_warnings.a11y_mouse_events_have_key_events("mouseover", "focus"));
      }
      if (handlers_map.has("mouseout") && !handlers_map.has("blur")) {
        component.warn(this, compiler_warnings.a11y_mouse_events_have_key_events("mouseout", "blur"));
      }
    }
    validate_bindings_foreign() {
      this.bindings.forEach((binding) => {
        if (binding.name !== "this") {
          return this.component.error(binding, compiler_errors.invalid_binding_foreign(binding.name));
        }
      });
    }
    validate_bindings() {
      const { component } = this;
      const check_type_attribute = () => {
        const attribute = this.attributes.find((attribute2) => attribute2.name === "type");
        if (!attribute)
          return null;
        if (!attribute.is_static) {
          return component.error(attribute, compiler_errors.invalid_type);
        }
        const value = attribute.get_static_value();
        if (value === true) {
          return component.error(attribute, compiler_errors.missing_type);
        }
        return value;
      };
      this.bindings.forEach((binding) => {
        const { name: name2 } = binding;
        if (name2 === "value") {
          if (this.name !== "input" && this.name !== "textarea" && this.name !== "select") {
            return component.error(binding, compiler_errors.invalid_binding_elements(this.name, "value"));
          }
          if (this.name === "select") {
            const attribute = this.attributes.find((attribute2) => attribute2.name === "multiple");
            if (attribute && !attribute.is_static) {
              return component.error(attribute, compiler_errors.dynamic_multiple_attribute);
            }
          } else {
            check_type_attribute();
          }
        } else if (name2 === "checked" || name2 === "indeterminate") {
          if (this.name !== "input") {
            return component.error(binding, compiler_errors.invalid_binding_elements(this.name, name2));
          }
          const type = check_type_attribute();
          if (type !== "checkbox") {
            return component.error(binding, compiler_errors.invalid_binding_no_checkbox(name2, type === "radio"));
          }
        } else if (name2 === "group") {
          if (this.name !== "input") {
            return component.error(binding, compiler_errors.invalid_binding_elements(this.name, "group"));
          }
          const type = check_type_attribute();
          if (type !== "checkbox" && type !== "radio") {
            return component.error(binding, compiler_errors.invalid_binding_element_with('<input type="checkbox"> or <input type="radio">', "group"));
          }
        } else if (name2 === "files") {
          if (this.name !== "input") {
            return component.error(binding, compiler_errors.invalid_binding_elements(this.name, "files"));
          }
          const type = check_type_attribute();
          if (type !== "file") {
            return component.error(binding, compiler_errors.invalid_binding_element_with('<input type="file">', "files"));
          }
        } else if (name2 === "open") {
          if (this.name !== "details") {
            return component.error(binding, compiler_errors.invalid_binding_element_with("<details>", name2));
          }
        } else if (name2 === "currentTime" || name2 === "duration" || name2 === "paused" || name2 === "buffered" || name2 === "seekable" || name2 === "played" || name2 === "volume" || name2 === "muted" || name2 === "playbackRate" || name2 === "seeking" || name2 === "ended" || name2 === "readyState") {
          if (this.name !== "audio" && this.name !== "video") {
            return component.error(binding, compiler_errors.invalid_binding_element_with("audio> or <video>", name2));
          }
        } else if (name2 === "videoHeight" || name2 === "videoWidth") {
          if (this.name !== "video") {
            return component.error(binding, compiler_errors.invalid_binding_element_with("<video>", name2));
          }
        } else if (regex_dimensions.test(name2)) {
          if (this.name === "svg" && (name2 === "offsetWidth" || name2 === "offsetHeight")) {
            return component.error(binding, compiler_errors.invalid_binding_on(binding.name, `<svg>. Use '${name2.replace("offset", "client")}' instead`));
          } else if (is_svg(this.name)) {
            return component.error(binding, compiler_errors.invalid_binding_on(binding.name, "SVG elements"));
          } else if (is_void(this.name)) {
            return component.error(binding, compiler_errors.invalid_binding_on(binding.name, `void elements like <${this.name}>. Use a wrapper element instead`));
          }
        } else if (name2 === "naturalWidth" || name2 === "naturalHeight") {
          if (this.name !== "img") {
            return component.error(binding, compiler_errors.invalid_binding_element_with("<img>", name2));
          }
        } else if (is_name_contenteditable(name2)) {
          const contenteditable = get_contenteditable_attr(this);
          if (!contenteditable) {
            return component.error(binding, compiler_errors.missing_contenteditable_attribute);
          } else if (contenteditable && !contenteditable.is_static) {
            return component.error(contenteditable, compiler_errors.dynamic_contenteditable_attribute);
          }
        } else if (name2 !== "this" && !regex_box_size.test(name2)) {
          return component.error(binding, compiler_errors.invalid_binding(binding.name));
        }
      });
    }
    validate_content() {
      if (!a11y_required_content.has(this.name))
        return;
      if (this.contains_a11y_label)
        return;
      if (this.bindings.some((binding) => ["textContent", "innerHTML"].includes(binding.name)))
        return;
      if (this.children.length === 0) {
        this.component.warn(this, compiler_warnings.a11y_missing_content(this.name));
      }
    }
    validate_event_handlers() {
      const { component } = this;
      this.handlers.forEach((handler) => {
        if (handler.modifiers.has("passive") && handler.modifiers.has("preventDefault")) {
          return component.error(handler, compiler_errors.invalid_event_modifier_combination("passive", "preventDefault"));
        }
        if (handler.modifiers.has("passive") && handler.modifiers.has("nonpassive")) {
          return component.error(handler, compiler_errors.invalid_event_modifier_combination("passive", "nonpassive"));
        }
        handler.modifiers.forEach((modifier) => {
          if (!valid_modifiers$1.has(modifier)) {
            return component.error(handler, compiler_errors.invalid_event_modifier(list$1(Array.from(valid_modifiers$1))));
          }
          if (modifier === "passive") {
            if (passive_events.has(handler.name)) {
              if (handler.can_make_passive) {
                component.warn(handler, compiler_warnings.redundant_event_modifier_for_touch);
              }
            } else {
              component.warn(handler, compiler_warnings.redundant_event_modifier_passive);
            }
          }
          if (component.compile_options.legacy && (modifier === "once" || modifier === "passive")) {
            return component.error(handler, compiler_errors.invalid_event_modifier_legacy(modifier));
          }
        });
        if (passive_events.has(handler.name) && handler.can_make_passive && !handler.modifiers.has("preventDefault") && !handler.modifiers.has("nonpassive")) {
          handler.modifiers.add("passive");
        }
      });
    }
    is_media_node() {
      return this.name === "audio" || this.name === "video";
    }
    add_css_class() {
      if (this.attributes.some((attr) => attr.is_spread)) {
        this.needs_manual_style_scoping = true;
        return;
      }
      const { id: id2 } = this.component.stylesheet;
      const class_attribute = this.attributes.find((a) => a.name === "class");
      if (class_attribute && !class_attribute.is_true) {
        if (class_attribute.chunks.length === 1 && class_attribute.chunks[0].type === "Text") {
          class_attribute.chunks[0].data += ` ${id2}`;
        } else {
          class_attribute.chunks.push(new Text(this.component, this, this.scope, {
            type: "Text",
            data: ` ${id2}`,
            synthetic: true
          }));
        }
      } else {
        this.attributes.push(new Attribute(this.component, this, this.scope, {
          type: "Attribute",
          name: "class",
          value: [{ type: "Text", data: id2, synthetic: true }]
        }));
      }
    }
    get slot_template_name() {
      return this.attributes.find((attribute) => attribute.name === "slot").get_static_value();
    }
    optimise() {
      attributes_to_compact_whitespace.forEach((attribute_name) => {
        const attribute = this.attributes.find((a) => a.name === attribute_name);
        if (attribute && !attribute.is_true) {
          attribute.chunks.forEach((chunk, index) => {
            if (chunk.type === "Text") {
              let data2 = chunk.data.replace(regex_any_repeated_whitespaces, " ");
              if (index === 0) {
                data2 = data2.trimLeft();
              } else if (index === attribute.chunks.length - 1) {
                data2 = data2.trimRight();
              }
              chunk.data = data2;
            }
          });
        }
      });
    }
  };
  var regex_starts_with_vowel = /^[aeiou]/;
  function should_have_attribute(node2, attributes, name2 = node2.name) {
    const article = regex_starts_with_vowel.test(attributes[0]) ? "an" : "a";
    const sequence = attributes.length > 1 ? attributes.slice(0, -1).join(", ") + ` or ${attributes[attributes.length - 1]}` : attributes[0];
    node2.component.warn(node2, compiler_warnings.a11y_missing_attribute(name2, article, sequence));
  }
  var regex_minus_sign = /-/;
  function within_custom_element(parent) {
    while (parent) {
      if (parent.type === "InlineComponent")
        return false;
      if (parent.type === "Element" && regex_minus_sign.test(parent.name))
        return true;
      parent = parent.parent;
    }
    return false;
  }
  var regex_return_characters = /\r/g;
  function hash(str) {
    str = str.replace(regex_return_characters, "");
    let hash2 = 5381;
    let i = str.length;
    while (i--)
      hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
    return (hash2 >>> 0).toString(36);
  }
  var Head = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      if (info.attributes.length) {
        component.error(info.attributes[0], compiler_errors.invalid_attribute_head);
        return;
      }
      this.children = map_children(component, parent, scope, info.children.filter((child) => {
        return child.type !== "Text" || regex_non_whitespace_character.test(child.data);
      }));
      if (this.children.length > 0) {
        this.id = `svelte-${hash(this.component.source.slice(this.start, this.end))}`;
      }
    }
  };
  var IfBlock = class extends AbstractBlock {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.scope = scope.child();
      this.expression = new Expression(component, this, this.scope, info.expression);
      [this.const_tags, this.children] = get_const_tags(info.children, component, this, this);
      this.else = info.else ? new ElseBlock(component, this, scope, info.else) : null;
      this.warn_if_empty_block();
    }
  };
  var InlineComponent = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.attributes = [];
      this.bindings = [];
      this.handlers = [];
      this.lets = [];
      this.css_custom_properties = [];
      if (info.name !== "svelte:component" && info.name !== "svelte:self") {
        const name2 = info.name.split(".")[0];
        component.warn_if_undefined(name2, info, scope);
        component.add_reference(this, name2);
      }
      this.name = info.name;
      this.namespace = get_namespace$1(parent, component.namespace);
      this.expression = this.name === "svelte:component" ? new Expression(component, this, scope, info.expression) : null;
      info.attributes.forEach((node2) => {
        switch (node2.type) {
          case "Action":
            return component.error(node2, compiler_errors.invalid_action);
          case "Attribute":
            if (node2.name.startsWith("--")) {
              this.css_custom_properties.push(new Attribute(component, this, scope, node2));
              break;
            }
          case "Spread":
            this.attributes.push(new Attribute(component, this, scope, node2));
            break;
          case "Binding":
            this.bindings.push(new Binding(component, this, scope, node2));
            break;
          case "Class":
            return component.error(node2, compiler_errors.invalid_class);
          case "EventHandler":
            this.handlers.push(new EventHandler(component, this, scope, node2));
            break;
          case "Let":
            this.lets.push(new Let(component, this, scope, node2));
            break;
          case "Transition":
            return component.error(node2, compiler_errors.invalid_transition);
          case "StyleDirective":
            return component.error(node2, compiler_errors.invalid_component_style_directive);
          default:
            throw new Error(`Not implemented: ${node2.type}`);
        }
      });
      if (this.lets.length > 0) {
        this.scope = scope.child();
        this.lets.forEach((l) => {
          const dependencies = /* @__PURE__ */ new Set([l.name.name]);
          l.names.forEach((name2) => {
            this.scope.add(name2, dependencies, this);
          });
        });
      } else {
        this.scope = scope;
      }
      this.handlers.forEach((handler) => {
        handler.modifiers.forEach((modifier) => {
          if (modifier !== "once") {
            return component.error(handler, compiler_errors.invalid_event_modifier_component);
          }
        });
      });
      const children = [];
      for (let i = info.children.length - 1; i >= 0; i--) {
        const child = info.children[i];
        if (child.type === "SlotTemplate") {
          children.push(child);
          info.children.splice(i, 1);
        } else if ((child.type === "Element" || child.type === "InlineComponent" || child.type === "Slot") && child.attributes.find((attribute) => attribute.name === "slot")) {
          const slot_template = {
            start: child.start,
            end: child.end,
            type: "SlotTemplate",
            name: "svelte:fragment",
            attributes: [],
            children: [child]
          };
          for (let i2 = child.attributes.length - 1; i2 >= 0; i2--) {
            const attribute = child.attributes[i2];
            if (attribute.type === "Let") {
              slot_template.attributes.push(attribute);
              child.attributes.splice(i2, 1);
            } else if (attribute.type === "Attribute" && attribute.name === "slot") {
              slot_template.attributes.push(attribute);
            }
          }
          for (let i2 = child.children.length - 1; i2 >= 0; i2--) {
            const child_child = child.children[i2];
            if (child_child.type === "ConstTag") {
              slot_template.children.push(child_child);
              child.children.splice(i2, 1);
            }
          }
          children.push(slot_template);
          info.children.splice(i, 1);
        } else if (child.type === "Comment" && children.length > 0) {
          children[children.length - 1].children.unshift(child);
        }
      }
      if (info.children.some((node2) => not_whitespace_text(node2))) {
        children.push({
          start: info.start,
          end: info.end,
          type: "SlotTemplate",
          name: "svelte:fragment",
          attributes: [],
          children: info.children
        });
      }
      this.children = map_children(component, this, this.scope, children);
    }
    get slot_template_name() {
      return this.attributes.find((attribute) => attribute.name === "slot").get_static_value();
    }
  };
  function not_whitespace_text(node2) {
    return !(node2.type === "Text" && regex_only_whitespaces.test(node2.data));
  }
  function get_namespace$1(parent, explicit_namespace) {
    const parent_element = parent.find_nearest(/^Element/);
    if (!parent_element) {
      return explicit_namespace;
    }
    return parent_element.namespace;
  }
  var KeyBlock = class extends AbstractBlock {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.expression = new Expression(component, this, scope, info.expression);
      this.children = map_children(component, this, scope, info.children);
      this.warn_if_empty_block();
    }
  };
  var Tag = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.expression = new Expression(component, this, scope, info.expression);
      this.should_cache = info.expression.type !== "Identifier" || this.expression.dependencies.size && scope.names.has(info.expression.name);
    }
  };
  var MustacheTag = class extends Tag {
  };
  var Options = class extends Node$1 {
  };
  var RawMustacheTag = class extends Tag {
  };
  var DebugTag = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.expressions = info.identifiers.map((node2) => {
        return new Expression(component, parent, scope, node2);
      });
    }
  };
  var Slot = class extends Element {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.values = /* @__PURE__ */ new Map();
      info.attributes.forEach((attr) => {
        if (attr.type !== "Attribute" && attr.type !== "Spread") {
          return component.error(attr, compiler_errors.invalid_slot_directive);
        }
        if (attr.name === "name") {
          if (attr.value.length !== 1 || attr.value[0].type !== "Text") {
            return component.error(attr, compiler_errors.dynamic_slot_name);
          }
          this.slot_name = attr.value[0].data;
          if (this.slot_name === "default") {
            return component.error(attr, compiler_errors.invalid_slot_name);
          }
        }
        this.values.set(attr.name, new Attribute(component, this, scope, attr));
      });
      if (!this.slot_name)
        this.slot_name = "default";
      if (this.slot_name === "default") {
        component.slots.forEach((slot) => {
          this.values.forEach((attribute, name2) => {
            if (!slot.values.has(name2)) {
              slot.values.set(name2, attribute);
            }
          });
        });
      } else if (component.slots.has("default")) {
        const default_slot = component.slots.get("default");
        default_slot.values.forEach((attribute, name2) => {
          if (!this.values.has(name2)) {
            this.values.set(name2, attribute);
          }
        });
      }
      component.slots.set(this.slot_name, this);
    }
  };
  var SlotTemplate = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.lets = [];
      this.slot_template_name = "default";
      this.validate_slot_template_placement();
      scope = scope.child();
      info.attributes.forEach((node2) => {
        switch (node2.type) {
          case "Let": {
            const l = new Let(component, this, scope, node2);
            this.lets.push(l);
            const dependencies = /* @__PURE__ */ new Set([l.name.name]);
            l.names.forEach((name2) => {
              scope.add(name2, dependencies, this);
            });
            break;
          }
          case "Attribute": {
            if (node2.name === "slot") {
              this.slot_attribute = new Attribute(component, this, scope, node2);
              if (!this.slot_attribute.is_static) {
                return component.error(node2, compiler_errors.invalid_slot_attribute);
              }
              const value = this.slot_attribute.get_static_value();
              if (typeof value === "boolean") {
                return component.error(node2, compiler_errors.invalid_slot_attribute_value_missing);
              }
              this.slot_template_name = value;
              break;
            }
            throw new Error(`Invalid attribute '${node2.name}' in <svelte:fragment>`);
          }
          default:
            throw new Error(`Not implemented: ${node2.type}`);
        }
      });
      this.scope = scope;
      [this.const_tags, this.children] = get_const_tags(info.children, component, this, this);
    }
    validate_slot_template_placement() {
      if (this.parent.type !== "InlineComponent") {
        return this.component.error(this, compiler_errors.invalid_slotted_content_fragment);
      }
    }
  };
  var Title = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.children = map_children(component, parent, scope, info.children);
      if (info.attributes.length > 0) {
        component.error(info.attributes[0], compiler_errors.illegal_attribute_title);
        return;
      }
      info.children.forEach((child) => {
        if (child.type !== "Text" && child.type !== "MustacheTag") {
          return component.error(child, compiler_errors.illegal_structure_title);
        }
      });
      this.should_cache = info.children.length === 1 ? info.children[0].type !== "Identifier" || scope.names.has(info.children[0].name) : true;
    }
  };
  var valid_bindings$1 = [
    "innerWidth",
    "innerHeight",
    "outerWidth",
    "outerHeight",
    "scrollX",
    "scrollY",
    "devicePixelRatio",
    "online"
  ];
  var Window = class extends Node$1 {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.handlers = [];
      this.bindings = [];
      this.actions = [];
      info.attributes.forEach((node2) => {
        if (node2.type === "EventHandler") {
          this.handlers.push(new EventHandler(component, this, scope, node2));
        } else if (node2.type === "Binding") {
          if (node2.expression.type !== "Identifier") {
            const { parts } = flatten_reference(node2.expression);
            return component.error(node2.expression, compiler_errors.invalid_binding_window(parts));
          }
          if (!~valid_bindings$1.indexOf(node2.name)) {
            const match = node2.name === "width" ? "innerWidth" : node2.name === "height" ? "innerHeight" : fuzzymatch(node2.name, valid_bindings$1);
            if (match) {
              return component.error(node2, compiler_errors.invalid_binding_on(node2.name, "<svelte:window>", ` (did you mean '${match}'?)`));
            } else {
              return component.error(node2, compiler_errors.invalid_binding_on(node2.name, "<svelte:window>", ` \u2014 valid bindings are ${list$1(valid_bindings$1)}`));
            }
          }
          this.bindings.push(new Binding(component, this, scope, node2));
        } else if (node2.type === "Action") {
          this.actions.push(new Action(component, this, scope, node2));
        }
      });
    }
  };
  function push_array$1(array, items) {
    for (let i = 0; i < items.length; i++) {
      array.push(items[i]);
    }
  }
  function get_constructor(type) {
    switch (type) {
      case "AwaitBlock":
        return AwaitBlock;
      case "Body":
        return Body;
      case "Comment":
        return Comment$1;
      case "ConstTag":
        return ConstTag;
      case "Document":
        return Document;
      case "EachBlock":
        return EachBlock;
      case "Element":
        return Element;
      case "Head":
        return Head;
      case "IfBlock":
        return IfBlock;
      case "InlineComponent":
        return InlineComponent;
      case "KeyBlock":
        return KeyBlock;
      case "MustacheTag":
        return MustacheTag;
      case "Options":
        return Options;
      case "RawMustacheTag":
        return RawMustacheTag;
      case "DebugTag":
        return DebugTag;
      case "Slot":
        return Slot;
      case "SlotTemplate":
        return SlotTemplate;
      case "Text":
        return Text;
      case "Title":
        return Title;
      case "Window":
        return Window;
      default:
        throw new Error(`Not implemented: ${type}`);
    }
  }
  function map_children(component, parent, scope, children) {
    let last = null;
    let ignores = [];
    return children.map((child) => {
      const constructor = get_constructor(child.type);
      const use_ignores = child.type !== "Text" && child.type !== "Comment" && ignores.length;
      if (use_ignores)
        component.push_ignores(ignores);
      const node2 = new constructor(component, parent, scope, child);
      if (use_ignores)
        component.pop_ignores(), ignores = [];
      if (node2.type === "Comment" && node2.ignores.length) {
        push_array$1(ignores, node2.ignores);
      }
      if (last)
        last.next = node2;
      node2.prev = last;
      last = node2;
      return node2;
    });
  }
  function check_graph_for_cycles(edges) {
    const graph = edges.reduce((g2, edge) => {
      const [u, v2] = edge;
      if (!g2.has(u))
        g2.set(u, []);
      if (!g2.has(v2))
        g2.set(v2, []);
      g2.get(u).push(v2);
      return g2;
    }, /* @__PURE__ */ new Map());
    const visited = /* @__PURE__ */ new Set();
    const on_stack = /* @__PURE__ */ new Set();
    const cycles = [];
    function visit(v2) {
      visited.add(v2);
      on_stack.add(v2);
      graph.get(v2).forEach((w2) => {
        if (!visited.has(w2)) {
          visit(w2);
        } else if (on_stack.has(w2)) {
          cycles.push([...on_stack, w2]);
        }
      });
      on_stack.delete(v2);
    }
    graph.forEach((_2, v2) => {
      if (!visited.has(v2)) {
        visit(v2);
      }
    });
    return cycles[0];
  }
  function get_const_tags(children, component, node2, parent) {
    const const_tags = [];
    const others = [];
    for (const child of children) {
      if (child.type === "ConstTag") {
        const_tags.push(child);
      } else {
        others.push(child);
      }
    }
    const consts_nodes = const_tags.map((tag2) => new ConstTag(component, node2, node2.scope, tag2));
    const sorted_consts_nodes = sort_consts_nodes(consts_nodes, component);
    sorted_consts_nodes.forEach((node3) => node3.parse_expression());
    const children_nodes = map_children(component, parent, node2.scope, others);
    return [sorted_consts_nodes, children_nodes];
  }
  function sort_consts_nodes(consts_nodes, component) {
    const sorted_consts_nodes = [];
    const unsorted_consts_nodes = consts_nodes.map((node2) => {
      return {
        assignees: node2.assignees,
        dependencies: node2.dependencies,
        node: node2
      };
    });
    const lookup = /* @__PURE__ */ new Map();
    unsorted_consts_nodes.forEach((node2) => {
      node2.assignees.forEach((name2) => {
        if (!lookup.has(name2)) {
          lookup.set(name2, []);
        }
        lookup.get(name2).push(node2);
      });
    });
    const cycle = check_graph_for_cycles(unsorted_consts_nodes.reduce((acc, node2) => {
      node2.assignees.forEach((v2) => {
        node2.dependencies.forEach((w2) => {
          if (!node2.assignees.has(w2)) {
            acc.push([v2, w2]);
          }
        });
      });
      return acc;
    }, []));
    if (cycle && cycle.length) {
      const nodeList = lookup.get(cycle[0]);
      const node2 = nodeList[0];
      component.error(node2.node, compiler_errors.cyclical_const_tags(cycle));
    }
    const add_node = (node2) => {
      if (sorted_consts_nodes.includes(node2))
        return;
      node2.dependencies.forEach((name2) => {
        if (node2.assignees.has(name2))
          return;
        const earlier_nodes = lookup.get(name2);
        if (earlier_nodes) {
          earlier_nodes.forEach(add_node);
        }
      });
      sorted_consts_nodes.push(node2);
    };
    unsorted_consts_nodes.forEach(add_node);
    return sorted_consts_nodes.map((node2) => node2.node);
  }
  var ThenBlock = class extends AbstractBlock {
    constructor(component, parent, scope, info) {
      super(component, parent, scope, info);
      this.scope = scope.child();
      if (parent.then_node) {
        parent.then_contexts.forEach((context) => {
          if (context.type !== "DestructuredVariable")
            return;
          this.scope.add(context.key.name, parent.expression.dependencies, this);
        });
      }
      [this.const_tags, this.children] = get_const_tags(info.children, component, this, parent);
      if (!info.skip) {
        this.warn_if_empty_block();
      }
    }
  };
  function add_const_tags(block, const_tags, ctx) {
    const const_tags_props = [];
    const_tags.forEach((const_tag, i) => {
      const name2 = `#constants_${i}`;
      const_tags_props.push(b`const ${name2} = ${const_tag.expression.manipulate(block, ctx)}`);
      const to_ctx = (name3) => block.renderer.context_lookup.has(name3) ? x`${ctx}[${block.renderer.context_lookup.get(name3).index}]` : { type: "Identifier", name: name3 };
      const_tag.contexts.forEach((context) => {
        if (context.type === "DestructuredVariable") {
          const_tags_props.push(b`${ctx}[${block.renderer.context_lookup.get(context.key.name).index}] = ${context.default_modifier(context.modifier({ type: "Identifier", name: name2 }), to_ctx)}`);
        } else {
          const expression = new Expression(block.renderer.component, const_tag, const_tag.scope, context.key);
          const_tags_props.push(b`const ${context.property_name} = ${expression.manipulate(block, ctx)}`);
        }
      });
    });
    return const_tags_props;
  }
  function add_const_tags_context(renderer, const_tags) {
    const_tags.forEach((const_tag) => {
      const_tag.contexts.forEach((context) => {
        if (context.type !== "DestructuredVariable")
          return;
        renderer.add_to_context(context.key.name, true);
      });
    });
  }
  var AwaitBlockBranch = class extends Wrapper {
    constructor(status, renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.var = null;
      this.status = status;
      this.block = block.child({
        comment: create_debugging_comment(node2, this.renderer.component),
        name: this.renderer.component.get_unique_name(`create_${status}_block`),
        type: status
      });
      this.add_context(parent.node[status + "_node"], parent.node[status + "_contexts"]);
      this.fragment = new FragmentWrapper(renderer, this.block, this.node.children, parent, strip_whitespace, next_sibling);
      this.is_dynamic = this.block.dependencies.size > 0;
    }
    add_context(node2, contexts) {
      if (!node2)
        return;
      if (node2.type === "Identifier") {
        this.value = node2.name;
        this.renderer.add_to_context(this.value, true);
      } else {
        contexts.forEach((context) => {
          if (context.type !== "DestructuredVariable")
            return;
          this.renderer.add_to_context(context.key.name, true);
        });
        this.value = this.block.parent.get_unique_name("value").name;
        this.value_contexts = contexts;
        this.renderer.add_to_context(this.value, true);
        this.is_destructured = true;
      }
      this.value_index = this.renderer.context_lookup.get(this.value).index;
      if (this.has_consts(this.node)) {
        add_const_tags_context(this.renderer, this.node.const_tags);
      }
    }
    has_consts(node2) {
      return node2 instanceof ThenBlock || node2 instanceof CatchBlock;
    }
    render(block, parent_node, parent_nodes) {
      this.fragment.render(block, parent_node, parent_nodes);
      if (this.is_destructured || this.has_consts(this.node) && this.node.const_tags.length > 0) {
        this.render_get_context();
      }
    }
    render_get_context() {
      const props = this.is_destructured ? this.value_contexts.map((prop) => {
        if (prop.type === "ComputedProperty") {
          const expression = new Expression(this.renderer.component, this.node, this.has_consts(this.node) ? this.node.scope : null, prop.key);
          return b`const ${prop.property_name} = ${expression.manipulate(this.block, "#ctx")};`;
        } else {
          const to_ctx = (name2) => this.renderer.reference(name2);
          return b`#ctx[${this.block.renderer.context_lookup.get(prop.key.name).index}] = ${prop.default_modifier(prop.modifier(x`#ctx[${this.value_index}]`), to_ctx)};`;
        }
      }) : null;
      const const_tags_props = this.has_consts(this.node) ? add_const_tags(this.block, this.node.const_tags, "#ctx") : null;
      const get_context2 = this.block.renderer.component.get_unique_name(`get_${this.status}_context`);
      this.block.renderer.blocks.push(b`
			function ${get_context2}(#ctx) {
				${props}
				${const_tags_props}
			}
		`);
      this.block.chunks.declarations.push(b`${get_context2}(#ctx)`);
      if (this.block.has_update_method) {
        this.block.chunks.update.unshift(b`${get_context2}(#ctx)`);
      }
    }
  };
  var AwaitBlockWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.var = { type: "Identifier", name: "await_block" };
      this.cannot_use_innerhtml();
      this.not_static_content();
      block.add_dependencies(this.node.expression.dependencies);
      let is_dynamic2 = false;
      let has_intros = false;
      let has_outros = false;
      ["pending", "then", "catch"].forEach((status) => {
        const child = this.node[status];
        const branch = new AwaitBlockBranch(status, renderer, block, this, child, strip_whitespace, next_sibling);
        renderer.blocks.push(branch.block);
        if (branch.is_dynamic) {
          is_dynamic2 = true;
          block.add_dependencies(branch.block.dependencies);
        }
        if (branch.block.has_intros)
          has_intros = true;
        if (branch.block.has_outros)
          has_outros = true;
        this[status] = branch;
      });
      ["pending", "then", "catch"].forEach((status) => {
        this[status].block.has_update_method = is_dynamic2;
        this[status].block.has_intro_method = has_intros;
        this[status].block.has_outro_method = has_outros;
      });
      if (has_outros) {
        block.add_outro();
      }
    }
    render(block, parent_node, parent_nodes) {
      const anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);
      const update_mount_node = this.get_update_mount_node(anchor);
      const snippet = this.node.expression.manipulate(block);
      const info = block.get_unique_name("info");
      const promise = block.get_unique_name("promise");
      block.add_variable(promise);
      block.maintain_context = true;
      const info_props = x`{
			ctx: #ctx,
			current: null,
			token: null,
			hasCatch: ${this.catch.node.start !== null ? "true" : "false"},
			pending: ${this.pending.block.name},
			then: ${this.then.block.name},
			catch: ${this.catch.block.name},
			value: ${this.then.value_index},
			error: ${this.catch.value_index},
			blocks: ${this.pending.block.has_outro_method && x`[,,,]`}
		}`;
      block.chunks.init.push(b`
			let ${info} = ${info_props};
		`);
      block.chunks.init.push(b`
			@handle_promise(${promise} = ${snippet}, ${info});
		`);
      block.chunks.create.push(b`
			${info}.block.c();
		`);
      if (parent_nodes && this.renderer.options.hydratable) {
        block.chunks.claim.push(b`
				${info}.block.l(${parent_nodes});
			`);
      }
      const initial_mount_node = parent_node || "#target";
      const anchor_node = parent_node ? "null" : "#anchor";
      const has_transitions = this.pending.block.has_intro_method || this.pending.block.has_outro_method;
      block.chunks.mount.push(b`
			${info}.block.m(${initial_mount_node}, ${info}.anchor = ${anchor_node});
			${info}.mount = () => ${update_mount_node};
			${info}.anchor = ${anchor};
		`);
      if (has_transitions) {
        block.chunks.intro.push(b`@transition_in(${info}.block);`);
      }
      const dependencies = this.node.expression.dynamic_dependencies();
      const update_await_block_branch = b`@update_await_block_branch(${info}, #ctx, #dirty)`;
      if (dependencies.length > 0) {
        const condition = x`
				${block.renderer.dirty(dependencies)} &&
				${promise} !== (${promise} = ${snippet}) &&
				@handle_promise(${promise}, ${info})`;
        block.chunks.update.push(b`${info}.ctx = #ctx;`);
        if (this.pending.block.has_update_method) {
          block.chunks.update.push(b`
					if (${condition}) {

					} else {
						${update_await_block_branch}
					}
				`);
        } else {
          block.chunks.update.push(b`
					${condition}
				`);
        }
      } else {
        if (this.pending.block.has_update_method) {
          block.chunks.update.push(b`
					${update_await_block_branch}
				`);
        }
      }
      if (this.pending.block.has_outro_method) {
        block.chunks.outro.push(b`
				for (let #i = 0; #i < 3; #i += 1) {
					const block = ${info}.blocks[#i];
					@transition_out(block);
				}
			`);
      }
      block.chunks.destroy.push(b`
			${info}.block.d(${parent_node ? null : "detaching"});
			${info}.token = null;
			${info} = null;
		`);
      [this.pending, this.then, this.catch].forEach((branch) => {
        branch.render(branch.block, null, x`#nodes`);
      });
    }
  };
  var TRUE = x`true`;
  var FALSE = x`false`;
  var EventHandlerWrapper = class {
    constructor(node2, parent) {
      this.node = node2;
      this.parent = parent;
      if (!node2.expression) {
        this.parent.renderer.add_to_context(node2.handler_name.name);
        this.parent.renderer.component.partly_hoisted.push(b`
				function ${node2.handler_name.name}(event) {
					@bubble.call(this, $$self, event);
				}
			`);
      }
    }
    get_snippet(block) {
      const snippet = this.node.expression ? this.node.expression.manipulate(block) : block.renderer.reference(this.node.handler_name);
      if (this.node.reassigned) {
        block.maintain_context = true;
        return x`function () { if (@is_function(${snippet})) ${snippet}.apply(this, arguments); }`;
      }
      return snippet;
    }
    render(block, target) {
      let snippet = this.get_snippet(block);
      if (this.node.modifiers.has("preventDefault"))
        snippet = x`@prevent_default(${snippet})`;
      if (this.node.modifiers.has("stopPropagation"))
        snippet = x`@stop_propagation(${snippet})`;
      if (this.node.modifiers.has("stopImmediatePropagation"))
        snippet = x`@stop_immediate_propagation(${snippet})`;
      if (this.node.modifiers.has("self"))
        snippet = x`@self(${snippet})`;
      if (this.node.modifiers.has("trusted"))
        snippet = x`@trusted(${snippet})`;
      const args = [];
      const opts = ["nonpassive", "passive", "once", "capture"].filter((mod) => this.node.modifiers.has(mod));
      if (opts.length) {
        if (opts.length === 1 && opts[0] === "capture") {
          args.push(TRUE);
        } else {
          args.push(x`{ ${opts.map((opt) => opt === "nonpassive" ? p`passive: false` : p`${opt}: true`)} }`);
        }
      } else if (block.renderer.options.dev) {
        args.push(FALSE);
      }
      if (block.renderer.options.dev) {
        args.push(this.node.modifiers.has("preventDefault") ? TRUE : FALSE);
        args.push(this.node.modifiers.has("stopPropagation") ? TRUE : FALSE);
        args.push(this.node.modifiers.has("stopImmediatePropagation") ? TRUE : FALSE);
      }
      block.event_listeners.push(x`@listen(${target}, "${this.node.name}", ${snippet}, ${args})`);
    }
  };
  function add_event_handlers(block, target, handlers2) {
    handlers2.forEach((handler) => add_event_handler(block, target, handler));
  }
  function add_event_handler(block, target, handler) {
    handler.render(block, target);
  }
  function add_actions(block, target, actions) {
    actions.forEach((action) => add_action(block, target, action));
  }
  var regex_invalid_variable_identifier_characters = /[^a-zA-Z0-9_$]/g;
  function add_action(block, target, action) {
    const { expression, template_scope } = action;
    let snippet;
    let dependencies;
    if (expression) {
      snippet = expression.manipulate(block);
      dependencies = expression.dynamic_dependencies();
    }
    const id2 = block.get_unique_name(`${action.name.replace(regex_invalid_variable_identifier_characters, "_")}_action`);
    block.add_variable(id2);
    const [obj, ...properties2] = action.name.split(".");
    const fn2 = is_contextual(action.component, template_scope, obj) ? block.renderer.reference(obj) : obj;
    if (properties2.length) {
      const member_expression = properties2.reduce((lhs, rhs) => x`${lhs}.${rhs}`, fn2);
      block.event_listeners.push(x`@action_destroyer(${id2} = ${member_expression}(${target}, ${snippet}))`);
    } else {
      block.event_listeners.push(x`@action_destroyer(${id2} = ${fn2}.call(null, ${target}, ${snippet}))`);
    }
    if (dependencies && dependencies.length > 0) {
      let condition = x`${id2} && @is_function(${id2}.update)`;
      if (dependencies.length > 0) {
        condition = x`${condition} && ${block.renderer.dirty(dependencies)}`;
      }
      block.chunks.update.push(b`if (${condition}) ${id2}.update.call(null, ${snippet});`);
    }
  }
  var BodyWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2) {
      super(renderer, block, parent, node2);
      this.handlers = this.node.handlers.map((handler) => new EventHandlerWrapper(handler, this));
    }
    render(block, _parent_node, _parent_nodes) {
      add_event_handlers(block, x`@_document.body`, this.handlers);
      add_actions(block, x`@_document.body`, this.node.actions);
    }
  };
  var DebugTagWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, _strip_whitespace, _next_sibling) {
      super(renderer, block, parent, node2);
    }
    render(block, _parent_node, _parent_nodes) {
      const { renderer } = this;
      const { component } = renderer;
      if (!renderer.options.dev)
        return;
      const { var_lookup } = component;
      const start = component.locate(this.node.start + 1);
      const end = { line: start.line, column: start.column + 6 };
      const loc = { start, end };
      const debug = {
        type: "DebuggerStatement",
        loc
      };
      if (this.node.expressions.length === 0) {
        block.chunks.create.push(debug);
        block.chunks.update.push(debug);
      } else {
        const log = {
          type: "Identifier",
          name: "log",
          loc
        };
        const dependencies = /* @__PURE__ */ new Set();
        this.node.expressions.forEach((expression) => {
          add_to_set(dependencies, expression.dependencies);
        });
        const contextual_identifiers = this.node.expressions.filter((e) => {
          const variable = var_lookup.get(e.node.name);
          return !(variable && variable.hoistable);
        }).map((e) => e.node.name);
        const logged_identifiers = this.node.expressions.map((e) => p`${e.node.name}`);
        const debug_statements = b`
				${contextual_identifiers.map((name2) => b`const ${name2} = ${renderer.reference(name2)};`)}
				@_console.${log}({ ${logged_identifiers} });
				debugger;`;
        if (dependencies.size) {
          const condition = renderer.dirty(Array.from(dependencies));
          block.chunks.update.push(b`
					if (${condition}) {
						${debug_statements}
					}
				`);
        }
        block.chunks.create.push(b`{
				${debug_statements}
			}`);
      }
    }
  };
  var associated_events = {
    fullscreenElement: ["fullscreenchange"],
    visibilityState: ["visibilitychange"]
  };
  var readonly = /* @__PURE__ */ new Set([
    "fullscreenElement",
    "visibilityState"
  ]);
  var DocumentWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2) {
      super(renderer, block, parent, node2);
      this.handlers = this.node.handlers.map((handler) => new EventHandlerWrapper(handler, this));
    }
    render(block, _parent_node, _parent_nodes) {
      const { renderer } = this;
      const { component } = renderer;
      const events2 = {};
      const bindings = {};
      add_event_handlers(block, x`@_document`, this.handlers);
      add_actions(block, x`@_document`, this.node.actions);
      this.node.bindings.forEach((binding) => {
        const binding_name = binding.expression.node.name;
        if (readonly.has(binding.name)) {
          renderer.readonly.add(binding_name);
        }
        bindings[binding.name] = binding_name;
        const binding_events = associated_events[binding.name];
        const property = binding.name;
        binding_events.forEach((associated_event) => {
          if (!events2[associated_event])
            events2[associated_event] = [];
          events2[associated_event].push({
            name: binding_name,
            value: property
          });
        });
      });
      Object.keys(events2).forEach((event) => {
        const id2 = block.get_unique_name(`ondocument${event}`);
        const props = events2[event];
        renderer.add_to_context(id2.name);
        const fn2 = renderer.reference(id2.name);
        props.forEach((prop) => {
          renderer.meta_bindings.push(b`this._state.${prop.name} = @_document.${prop.value};`);
        });
        block.event_listeners.push(x`
				@listen(@_document, "${event}", ${fn2})
			`);
        component.partly_hoisted.push(b`
				function ${id2}() {
					${props.map((prop) => renderer.invalidate(prop.name, x`${prop.name} = @_document.${prop.value}`))}
				}
			`);
        block.chunks.init.push(b`
				@add_render_callback(${fn2});
			`);
        component.has_reactive_assignments = true;
      });
    }
  };
  var ElseBlockWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.var = null;
      add_const_tags_context(renderer, this.node.const_tags);
      this.block = block.child({
        comment: create_debugging_comment(node2, this.renderer.component),
        name: this.renderer.component.get_unique_name("create_else_block"),
        type: "else"
      });
      this.fragment = new FragmentWrapper(renderer, this.block, this.node.children, parent, strip_whitespace, next_sibling);
      this.is_dynamic = this.block.dependencies.size > 0;
    }
  };
  var EachBlockWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.updates = [];
      this.var = { type: "Identifier", name: "each" };
      this.cannot_use_innerhtml();
      this.not_static_content();
      const { dependencies } = node2.expression;
      block.add_dependencies(dependencies);
      this.node.contexts.forEach((context) => {
        if (context.type !== "DestructuredVariable")
          return;
        renderer.add_to_context(context.key.name, true);
      });
      add_const_tags_context(renderer, this.node.const_tags);
      this.block = block.child({
        comment: create_debugging_comment(this.node, this.renderer.component),
        name: renderer.component.get_unique_name("create_each_block"),
        type: "each",
        // @ts-ignore todo: probably error
        key: node2.key,
        bindings: new Map(block.bindings)
      });
      this.block.has_animation = this.node.has_animation;
      this.index_name = this.node.index ? { type: "Identifier", name: this.node.index } : renderer.component.get_unique_name(`${this.node.context}_index`);
      const fixed_length = node2.expression.node.type === "ArrayExpression" && node2.expression.node.elements.every((element) => element.type !== "SpreadElement") ? node2.expression.node.elements.length : null;
      let c2 = this.node.start + 2;
      while (renderer.component.source[c2] !== "e")
        c2 += 1;
      const start = renderer.component.locate(c2);
      const end = { line: start.line, column: start.column + 4 };
      const length = {
        type: "Identifier",
        name: "length",
        loc: { start, end }
      };
      const each_block_value = renderer.component.get_unique_name(`${this.var.name}_value`);
      const iterations = block.get_unique_name(`${this.var.name}_blocks`);
      renderer.add_to_context(each_block_value.name, true);
      renderer.add_to_context(this.index_name.name, true);
      this.vars = {
        create_each_block: this.block.name,
        each_block_value,
        get_each_context: renderer.component.get_unique_name(`get_${this.var.name}_context`),
        iterations,
        // optimisation for array literal
        fixed_length,
        data_length: fixed_length === null ? x`${each_block_value}.${length}` : fixed_length,
        view_length: fixed_length === null ? x`${iterations}.length` : fixed_length
      };
      const object = get_object(node2.expression.node);
      const store = object.type === "Identifier" && object.name[0] === "$" ? object.name.slice(1) : null;
      node2.contexts.forEach((prop) => {
        if (prop.type !== "DestructuredVariable")
          return;
        this.block.bindings.set(prop.key.name, {
          object: this.vars.each_block_value,
          property: this.index_name,
          modifier: prop.modifier,
          snippet: prop.modifier(x`${this.vars.each_block_value}[${this.index_name}]`),
          store
        });
      });
      if (this.node.index) {
        this.block.get_unique_name(this.node.index);
      }
      renderer.blocks.push(this.block);
      this.fragment = new FragmentWrapper(renderer, this.block, node2.children, this, strip_whitespace, next_sibling);
      if (this.node.else) {
        this.else = new ElseBlockWrapper(renderer, block, this, this.node.else, strip_whitespace, next_sibling);
        renderer.blocks.push(this.else.block);
        if (this.else.is_dynamic) {
          this.block.add_dependencies(this.else.block.dependencies);
        }
      }
      block.add_dependencies(this.block.dependencies);
      if (this.block.has_outros || this.else && this.else.block.has_outros) {
        block.add_outro();
      }
    }
    render(block, parent_node, parent_nodes) {
      if (this.fragment.nodes.length === 0)
        return;
      const { renderer } = this;
      const { component } = renderer;
      const needs_anchor = this.next ? !this.next.is_dom_node() : !parent_node || !this.parent.is_dom_node();
      const snippet = this.node.expression.manipulate(block);
      block.chunks.init.push(b`let ${this.vars.each_block_value} = ${snippet};`);
      if (this.renderer.options.dev) {
        block.chunks.init.push(b`@validate_each_argument(${this.vars.each_block_value});`);
      }
      const initial_anchor_node = { type: "Identifier", name: parent_node ? "null" : "#anchor" };
      const initial_mount_node = parent_node || { type: "Identifier", name: "#target" };
      const update_anchor_node = needs_anchor ? block.get_unique_name(`${this.var.name}_anchor`) : this.next && this.next.var || { type: "Identifier", name: "null" };
      const update_mount_node = this.get_update_mount_node(update_anchor_node);
      const args = {
        block,
        parent_node,
        parent_nodes,
        snippet,
        initial_anchor_node,
        initial_mount_node,
        update_anchor_node,
        update_mount_node
      };
      const all_dependencies = new Set(this.block.dependencies);
      this.node.expression.dynamic_dependencies().forEach((dependency) => {
        all_dependencies.add(dependency);
      });
      if (this.node.key) {
        this.node.key.dynamic_dependencies().forEach((dependency) => {
          all_dependencies.add(dependency);
        });
      }
      this.dependencies = all_dependencies;
      if (this.node.key) {
        this.render_keyed(args);
      } else {
        this.render_unkeyed(args);
      }
      if (this.block.has_intro_method || this.block.has_outro_method) {
        block.chunks.intro.push(b`
				for (let #i = 0; #i < ${this.vars.data_length}; #i += 1) {
					@transition_in(${this.vars.iterations}[#i]);
				}
			`);
      }
      if (needs_anchor) {
        block.add_element(update_anchor_node, x`@empty()`, parent_nodes && x`@empty()`, parent_node);
      }
      if (this.else) {
        let else_ctx = x`#ctx`;
        if (this.else.node.const_tags.length > 0) {
          const get_ctx_name = this.renderer.component.get_unique_name("get_else_ctx");
          this.renderer.blocks.push(b`
					function ${get_ctx_name}(#ctx) {
						const child_ctx = #ctx.slice();
						${add_const_tags(block, this.else.node.const_tags, "child_ctx")}
						return child_ctx;
					}
				`);
          else_ctx = x`${get_ctx_name}(#ctx)`;
        }
        const each_block_else = component.get_unique_name(`${this.var.name}_else`);
        block.chunks.init.push(b`let ${each_block_else} = null;`);
        block.chunks.init.push(b`
				if (!${this.vars.data_length}) {
					${each_block_else} = ${this.else.block.name}(${else_ctx});
				}
			`);
        block.chunks.create.push(b`
				if (${each_block_else}) {
					${each_block_else}.c();
				}
			`);
        if (this.renderer.options.hydratable) {
          block.chunks.claim.push(b`
					if (${each_block_else}) {
						${each_block_else}.l(${parent_nodes});
					}
				`);
        }
        block.chunks.mount.push(b`
				if (${each_block_else}) {
					${each_block_else}.m(${initial_mount_node}, ${initial_anchor_node});
				}
			`);
        const has_transitions = !!(this.else.block.has_intro_method || this.else.block.has_outro_method);
        const destroy_block_else = this.else.block.has_outro_method ? b`
					@group_outros();
					@transition_out(${each_block_else}, 1, 1, () => {
						${each_block_else} = null;
					});
					@check_outros();` : b`
					${each_block_else}.d(1);
					${each_block_else} = null;`;
        if (this.else.block.has_update_method) {
          this.updates.push(b`
					if (!${this.vars.data_length} && ${each_block_else}) {
						${each_block_else}.p(${else_ctx}, #dirty);
					} else if (!${this.vars.data_length}) {
						${each_block_else} = ${this.else.block.name}(${else_ctx});
						${each_block_else}.c();
						${has_transitions && b`@transition_in(${each_block_else}, 1);`}
						${each_block_else}.m(${update_mount_node}, ${update_anchor_node});
					} else if (${each_block_else}) {
						${destroy_block_else};
					}
				`);
        } else {
          this.updates.push(b`
					if (${this.vars.data_length}) {
						if (${each_block_else}) {
							${destroy_block_else};
						}
					} else if (!${each_block_else}) {
						${each_block_else} = ${this.else.block.name}(${else_ctx});
						${each_block_else}.c();
						${has_transitions && b`@transition_in(${each_block_else}, 1);`}
						${each_block_else}.m(${update_mount_node}, ${update_anchor_node});
					}
				`);
        }
        block.chunks.destroy.push(b`
				if (${each_block_else}) ${each_block_else}.d(${parent_node ? "" : "detaching"});
			`);
      }
      if (this.updates.length) {
        block.chunks.update.push(b`
				if (${block.renderer.dirty(Array.from(all_dependencies))}) {
					${this.updates}
				}
			`);
      }
      this.fragment.render(this.block, null, x`#nodes`);
      if (this.else) {
        this.else.fragment.render(this.else.block, null, x`#nodes`);
      }
      this.context_props = this.node.contexts.map((prop) => {
        if (prop.type === "DestructuredVariable") {
          const to_ctx = (name2) => renderer.context_lookup.has(name2) ? x`child_ctx[${renderer.context_lookup.get(name2).index}]` : { type: "Identifier", name: name2 };
          return b`child_ctx[${renderer.context_lookup.get(prop.key.name).index}] = ${prop.default_modifier(prop.modifier(x`list[i]`), to_ctx)};`;
        } else {
          const expression = new Expression(this.renderer.component, this.node, this.node.scope, prop.key);
          return b`const ${prop.property_name} = ${expression.manipulate(block, "child_ctx")};`;
        }
      });
      if (this.node.has_binding)
        this.context_props.push(b`child_ctx[${renderer.context_lookup.get(this.vars.each_block_value.name).index}] = list;`);
      if (this.node.has_binding || this.node.has_index_binding || this.node.index)
        this.context_props.push(b`child_ctx[${renderer.context_lookup.get(this.index_name.name).index}] = i;`);
      renderer.blocks.push(b`
			function ${this.vars.get_each_context}(#ctx, list, i) {
				const child_ctx = #ctx.slice();
				${this.context_props}
				${add_const_tags(this.block, this.node.const_tags, "child_ctx")}
				return child_ctx;
			}
		`);
    }
    render_keyed({ block, parent_node, parent_nodes, snippet, initial_anchor_node, initial_mount_node, update_anchor_node, update_mount_node }) {
      const { create_each_block, iterations, data_length, view_length } = this.vars;
      const get_key = block.get_unique_name("get_key");
      const lookup = block.get_unique_name(`${this.var.name}_lookup`);
      block.add_variable(iterations, x`[]`);
      block.add_variable(lookup, x`new @_Map()`);
      if (this.fragment.nodes[0].is_dom_node()) {
        this.block.first = this.fragment.nodes[0].var;
      } else {
        this.block.first = this.block.get_unique_name("first");
        this.block.add_element(this.block.first, x`@empty()`, parent_nodes && x`@empty()`, null);
      }
      block.chunks.init.push(b`
			const ${get_key} = #ctx => ${this.node.key.manipulate(block)};

			${this.renderer.options.dev && b`@validate_each_keys(#ctx, ${this.vars.each_block_value}, ${this.vars.get_each_context}, ${get_key});`}
			for (let #i = 0; #i < ${data_length}; #i += 1) {
				let child_ctx = ${this.vars.get_each_context}(#ctx, ${this.vars.each_block_value}, #i);
				let key = ${get_key}(child_ctx);
				${lookup}.set(key, ${iterations}[#i] = ${create_each_block}(key, child_ctx));
			}
		`);
      block.chunks.create.push(b`
			for (let #i = 0; #i < ${view_length}; #i += 1) {
				${iterations}[#i].c();
			}
		`);
      if (parent_nodes && this.renderer.options.hydratable) {
        block.chunks.claim.push(b`
				for (let #i = 0; #i < ${view_length}; #i += 1) {
					${iterations}[#i].l(${parent_nodes});
				}
			`);
      }
      block.chunks.mount.push(b`
			for (let #i = 0; #i < ${view_length}; #i += 1) {
				if (${iterations}[#i]) {
					${iterations}[#i].m(${initial_mount_node}, ${initial_anchor_node});
				}
			}
		`);
      const dynamic = this.block.has_update_method;
      const destroy = this.node.has_animation ? this.block.has_outros ? "@fix_and_outro_and_destroy_block" : "@fix_and_destroy_block" : this.block.has_outros ? "@outro_and_destroy_block" : "@destroy_block";
      if (this.dependencies.size) {
        this.block.maintain_context = true;
        this.updates.push(b`
				${this.vars.each_block_value} = ${snippet};
				${this.renderer.options.dev && b`@validate_each_argument(${this.vars.each_block_value});`}

				${this.block.has_outros && b`@group_outros();`}
				${this.node.has_animation && b`for (let #i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].r();`}
				${this.renderer.options.dev && b`@validate_each_keys(#ctx, ${this.vars.each_block_value}, ${this.vars.get_each_context}, ${get_key});`}
				${iterations} = @update_keyed_each(${iterations}, #dirty, ${get_key}, ${dynamic ? 1 : 0}, #ctx, ${this.vars.each_block_value}, ${lookup}, ${update_mount_node}, ${destroy}, ${create_each_block}, ${update_anchor_node}, ${this.vars.get_each_context});
				${this.node.has_animation && b`for (let #i = 0; #i < ${view_length}; #i += 1) ${iterations}[#i].a();`}
				${this.block.has_outros && b`@check_outros();`}
			`);
      }
      if (this.block.has_outros) {
        block.chunks.outro.push(b`
				for (let #i = 0; #i < ${view_length}; #i += 1) {
					@transition_out(${iterations}[#i]);
				}
			`);
      }
      block.chunks.destroy.push(b`
			for (let #i = 0; #i < ${view_length}; #i += 1) {
				${iterations}[#i].d(${parent_node ? null : "detaching"});
			}
		`);
    }
    render_unkeyed({ block, parent_nodes, snippet, initial_anchor_node, initial_mount_node, update_anchor_node, update_mount_node }) {
      const { create_each_block, iterations, fixed_length, data_length, view_length } = this.vars;
      block.chunks.init.push(b`
			let ${iterations} = [];

			for (let #i = 0; #i < ${data_length}; #i += 1) {
				${iterations}[#i] = ${create_each_block}(${this.vars.get_each_context}(#ctx, ${this.vars.each_block_value}, #i));
			}
		`);
      block.chunks.create.push(b`
			for (let #i = 0; #i < ${view_length}; #i += 1) {
				${iterations}[#i].c();
			}
		`);
      if (parent_nodes && this.renderer.options.hydratable) {
        block.chunks.claim.push(b`
				for (let #i = 0; #i < ${view_length}; #i += 1) {
					${iterations}[#i].l(${parent_nodes});
				}
			`);
      }
      block.chunks.mount.push(b`
			for (let #i = 0; #i < ${view_length}; #i += 1) {
				if (${iterations}[#i]) {
					${iterations}[#i].m(${initial_mount_node}, ${initial_anchor_node});
				}
			}
		`);
      if (this.dependencies.size) {
        const has_transitions = !!(this.block.has_intro_method || this.block.has_outro_method);
        const for_loop_body = this.block.has_update_method ? b`
					if (${iterations}[#i]) {
						${iterations}[#i].p(child_ctx, #dirty);
						${has_transitions && b`@transition_in(${this.vars.iterations}[#i], 1);`}
					} else {
						${iterations}[#i] = ${create_each_block}(child_ctx);
						${iterations}[#i].c();
						${has_transitions && b`@transition_in(${this.vars.iterations}[#i], 1);`}
						${iterations}[#i].m(${update_mount_node}, ${update_anchor_node});
					}
				` : has_transitions ? b`
						if (${iterations}[#i]) {
							@transition_in(${this.vars.iterations}[#i], 1);
						} else {
							${iterations}[#i] = ${create_each_block}(child_ctx);
							${iterations}[#i].c();
							@transition_in(${this.vars.iterations}[#i], 1);
							${iterations}[#i].m(${update_mount_node}, ${update_anchor_node});
						}
					` : b`
						if (!${iterations}[#i]) {
							${iterations}[#i] = ${create_each_block}(child_ctx);
							${iterations}[#i].c();
							${iterations}[#i].m(${update_mount_node}, ${update_anchor_node});
						}
					`;
        const start = this.block.has_update_method ? 0 : "#old_length";
        let remove_old_blocks;
        if (this.block.has_outros) {
          const out = block.get_unique_name("out");
          block.chunks.init.push(b`
					const ${out} = i => @transition_out(${iterations}[i], 1, 1, () => {
						${iterations}[i] = null;
					});
				`);
          remove_old_blocks = b`
					@group_outros();
					for (#i = ${data_length}; #i < ${view_length}; #i += 1) {
						${out}(#i);
					}
					@check_outros();
				`;
        } else {
          remove_old_blocks = b`
					for (${this.block.has_update_method ? null : x`#i = ${data_length}`}; #i < ${this.block.has_update_method ? view_length : "#old_length"}; #i += 1) {
						${iterations}[#i].d(1);
					}
					${!fixed_length && b`${view_length} = ${data_length};`}
				`;
        }
        const update = b`
				${!this.block.has_update_method && b`const #old_length = ${this.vars.each_block_value}.length;`}
				${this.vars.each_block_value} = ${snippet};
				${this.renderer.options.dev && b`@validate_each_argument(${this.vars.each_block_value});`}

				let #i;
				for (#i = ${start}; #i < ${data_length}; #i += 1) {
					const child_ctx = ${this.vars.get_each_context}(#ctx, ${this.vars.each_block_value}, #i);

					${for_loop_body}
				}

				${remove_old_blocks}
			`;
        this.updates.push(update);
      }
      if (this.block.has_outros) {
        block.chunks.outro.push(b`
				${iterations} = ${iterations}.filter(@_Boolean);
				for (let #i = 0; #i < ${view_length}; #i += 1) {
					@transition_out(${iterations}[#i]);
				}
			`);
      }
      block.chunks.destroy.push(b`@destroy_each(${iterations}, detaching);`);
    }
  };
  var regex_non_whitespace_characters$1 = /[\S\u00A0]/;
  var TextWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, data2) {
      super(renderer, block, parent, node2);
      this.skip = this.node.should_skip();
      this.data = data2;
      this.var = this.skip ? null : x`t`;
    }
    use_space() {
      if (this.renderer.component.component_options.preserveWhitespace)
        return false;
      if (regex_non_whitespace_characters$1.test(this.data))
        return false;
      return !this.node.within_pre();
    }
    render(block, parent_node, parent_nodes) {
      if (this.skip)
        return;
      const use_space = this.use_space();
      const string_literal2 = {
        type: "Literal",
        value: this.data,
        loc: {
          start: this.renderer.locate(this.node.start),
          end: this.renderer.locate(this.node.end)
        }
      };
      block.add_element(this.var, use_space ? x`@space()` : x`@text(${string_literal2})`, parent_nodes && (use_space ? x`@claim_space(${parent_nodes})` : x`@claim_text(${parent_nodes}, ${string_literal2})`), parent_node);
    }
  };
  var svg_attributes = "accent-height accumulate additive alignment-baseline allowReorder alphabetic amplitude arabic-form ascent attributeName attributeType autoReverse azimuth baseFrequency baseline-shift baseProfile bbox begin bias by calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy edgeMode elevation enable-background end exponent externalResourcesRequired fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits hanging height href horiz-adv-x horiz-origin-x id ideographic image-rendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lang lengthAdjust letter-spacing lighting-color limitingConeAngle local marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode name numOctaves offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload opacity operator order orient orientation origin overflow overline-position overline-thickness panose-1 paint-order pathLength patternContentUnits patternTransform patternUnits pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform type u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility width widths word-spacing writing-mode x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space y y1 y2 yChannelSelector z zoomAndPan".split(" ");
  var svg_attribute_lookup = /* @__PURE__ */ new Map();
  svg_attributes.forEach((name2) => {
    svg_attribute_lookup.set(name2.toLowerCase(), name2);
  });
  function fix_attribute_casing(name2) {
    name2 = name2.toLowerCase();
    return svg_attribute_lookup.get(name2) || name2;
  }
  function handle_select_value_binding(attr, dependencies) {
    const { parent } = attr;
    if (parent.node.name === "select") {
      parent.select_binding_dependencies = dependencies;
      dependencies.forEach((prop) => {
        parent.renderer.component.indirect_dependencies.set(prop, /* @__PURE__ */ new Set());
      });
    }
  }
  var _boolean_attributes = [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ];
  var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);
  var non_textlike_input_types = /* @__PURE__ */ new Set([
    "button",
    "checkbox",
    "color",
    "date",
    "datetime-local",
    "file",
    "hidden",
    "image",
    "radio",
    "range",
    "reset",
    "submit"
  ]);
  var BaseAttributeWrapper = class {
    constructor(parent, block, node2) {
      this.node = node2;
      this.parent = parent;
      if (node2.dependencies.size > 0) {
        parent.cannot_use_innerhtml();
        parent.not_static_content();
        block.add_dependencies(node2.dependencies);
      }
    }
    render(_block) {
    }
  };
  var regex_minus_sign$1 = /-/;
  var regex_invalid_variable_identifier_characters$1 = /[^a-zA-Z_$]/g;
  var AttributeWrapper = class extends BaseAttributeWrapper {
    constructor(parent, block, node2) {
      super(parent, block, node2);
      if (node2.dependencies.size > 0) {
        if (this.parent.node.name === "option" && node2.name === "value") {
          let select = this.parent;
          while (select && (select.node.type !== "Element" || select.node.name !== "select")) {
            select = select.parent;
          }
          if (select && select.select_binding_dependencies) {
            select.select_binding_dependencies.forEach((prop) => {
              this.node.dependencies.forEach((dependency) => {
                this.parent.renderer.component.indirect_dependencies.get(prop).add(dependency);
              });
            });
          }
        }
        if (node2.name === "value") {
          handle_select_value_binding(this, node2.dependencies);
          this.parent.has_dynamic_value = true;
        }
      }
      if (this.parent.node.namespace == namespaces.foreign) {
        this.name = this.node.name;
        this.metadata = this.get_metadata();
        this.is_indirectly_bound_value = false;
        this.property_name = null;
        this.is_select_value_attribute = false;
        this.is_input_value = false;
      } else {
        this.name = fix_attribute_casing(this.node.name);
        this.metadata = this.get_metadata();
        this.is_indirectly_bound_value = is_indirectly_bound_value(this);
        this.property_name = this.is_indirectly_bound_value ? "__value" : this.metadata && this.metadata.property_name;
        this.is_select_value_attribute = this.name === "value" && this.parent.node.name === "select";
        this.is_input_value = this.name === "value" && this.parent.node.name === "input";
      }
      this.is_src = this.name === "src" && (!this.parent.node.namespace || this.parent.node.namespace === namespaces.html);
      this.should_cache = should_cache(this);
    }
    render(block) {
      const element = this.parent;
      const { name: name2, property_name, should_cache: should_cache2, is_indirectly_bound_value: is_indirectly_bound_value2 } = this;
      const method = regex_minus_sign$1.test(element.node.name) ? "@set_custom_element_data" : name2.slice(0, 6) === "xlink:" ? "@xlink_attr" : "@attr";
      const is_legacy_input_type = element.renderer.component.compile_options.legacy && name2 === "type" && this.parent.node.name === "input";
      const dependencies = this.get_dependencies();
      const value = this.get_value(block);
      let updater;
      const init = this.get_init(block, value);
      if (is_legacy_input_type) {
        block.chunks.hydrate.push(b`@set_input_type(${element.var}, ${init});`);
        updater = b`@set_input_type(${element.var}, ${should_cache2 ? this.last : value});`;
      } else if (this.is_select_value_attribute) {
        const is_multiple_select = element.node.get_static_attribute_value("multiple");
        if (is_multiple_select) {
          updater = b`@select_options(${element.var}, ${value});`;
        } else {
          updater = b`@select_option(${element.var}, ${value});`;
        }
        block.chunks.mount.push(b`
				${updater}
			`);
      } else if (this.is_src) {
        block.chunks.hydrate.push(b`if (!@src_url_equal(${element.var}.src, ${init})) ${method}(${element.var}, "${name2}", ${this.last});`);
        updater = b`${method}(${element.var}, "${name2}", ${should_cache2 ? this.last : value});`;
      } else if (property_name) {
        block.chunks.hydrate.push(b`${element.var}.${property_name} = ${init};`);
        updater = block.renderer.options.dev ? b`@prop_dev(${element.var}, "${property_name}", ${should_cache2 ? this.last : value});` : b`${element.var}.${property_name} = ${should_cache2 ? this.last : value};`;
      } else {
        block.chunks.hydrate.push(b`${method}(${element.var}, "${name2}", ${init});`);
        updater = b`${method}(${element.var}, "${name2}", ${should_cache2 ? this.last : value});`;
      }
      if (is_indirectly_bound_value2) {
        const update_value = b`${element.var}.value = ${element.var}.__value;`;
        block.chunks.hydrate.push(update_value);
        updater = b`
				${updater}
				${update_value};
			`;
      }
      if (this.node.name === "value" && dependencies.length > 0) {
        if (this.parent.bindings.some((binding) => binding.node.name === "group")) {
          this.parent.dynamic_value_condition = block.get_unique_name("value_has_changed");
          block.add_variable(this.parent.dynamic_value_condition, x`false`);
          updater = b`
					${updater}
					${this.parent.dynamic_value_condition} = true;
				`;
        }
      }
      if (dependencies.length > 0) {
        const condition = this.get_dom_update_conditions(block, block.renderer.dirty(dependencies));
        block.chunks.update.push(b`
				if (${condition}) {
					${updater}
				}`);
      }
      if (name2 === "autofocus") {
        block.autofocus = {
          element_var: element.var,
          condition_expression: this.node.is_true ? void 0 : value
        };
      }
    }
    get_init(block, value) {
      this.last = this.should_cache && block.get_unique_name(`${this.parent.var.name}_${this.name.replace(regex_invalid_variable_identifier_characters$1, "_")}_value`);
      if (this.should_cache)
        block.add_variable(this.last);
      return this.should_cache ? x`${this.last} = ${value}` : value;
    }
    get_dom_update_conditions(block, dependency_condition) {
      const { property_name, should_cache: should_cache2, last } = this;
      const element = this.parent;
      const value = this.get_value(block);
      let condition = dependency_condition;
      if (should_cache2) {
        condition = this.is_src ? x`${condition} && (!@src_url_equal(${element.var}.src, (${last} = ${value})))` : x`${condition} && (${last} !== (${last} = ${value}))`;
      }
      if (this.is_input_value) {
        const type = element.node.get_static_attribute_value("type");
        if (type !== true && !non_textlike_input_types.has(type)) {
          condition = x`${condition} && ${element.var}.${property_name} !== ${should_cache2 ? last : value}`;
        }
      }
      if (block.has_outros) {
        condition = x`!#current || ${condition}`;
      }
      return condition;
    }
    get_dependencies() {
      const node_dependencies = this.node.get_dependencies();
      const dependencies = new Set(node_dependencies);
      node_dependencies.forEach((prop) => {
        const indirect_dependencies = this.parent.renderer.component.indirect_dependencies.get(prop);
        if (indirect_dependencies) {
          indirect_dependencies.forEach((indirect_dependency) => {
            dependencies.add(indirect_dependency);
          });
        }
      });
      return Array.from(dependencies);
    }
    get_metadata() {
      if (this.parent.node.namespace)
        return null;
      const metadata = attribute_lookup[this.name];
      if (metadata && metadata.applies_to && !metadata.applies_to.includes(this.parent.node.name))
        return null;
      return metadata;
    }
    get_value(block) {
      if (this.node.is_true) {
        if (this.metadata && boolean_attributes.has(this.metadata.property_name.toLowerCase())) {
          return x`true`;
        }
        return x`""`;
      }
      if (this.node.chunks.length === 0)
        return x`""`;
      if (this.node.chunks.length === 1) {
        return this.node.chunks[0].type === "Text" ? string_literal(this.node.chunks[0].data) : this.node.chunks[0].manipulate(block);
      }
      let value = this.node.name === "class" ? this.get_class_name_text(block) : this.render_chunks(block).reduce((lhs, rhs) => x`${lhs} + ${rhs}`);
      if (this.node.chunks[0].type !== "Text") {
        value = x`"" + ${value}`;
      }
      return value;
    }
    get_class_name_text(block) {
      const scoped_css = this.node.chunks.some((chunk) => chunk.synthetic);
      const rendered = this.render_chunks(block);
      if (scoped_css && rendered.length === 2) {
        rendered[0] = x`@null_to_empty(${rendered[0]})`;
      }
      return rendered.reduce((lhs, rhs) => x`${lhs} + ${rhs}`);
    }
    render_chunks(block) {
      return this.node.chunks.map((chunk) => {
        if (chunk.type === "Text") {
          return string_literal(chunk.data);
        }
        return chunk.manipulate(block);
      });
    }
    stringify() {
      if (this.node.is_true)
        return "";
      const value = this.node.chunks;
      if (value.length === 0)
        return '=""';
      return `="${value.map((chunk) => {
        return chunk.type === "Text" ? chunk.data.replace(regex_double_quotes, '\\"') : `\${${chunk.manipulate()}}`;
      }).join("")}"`;
    }
  };
  var attribute_lookup = {
    allowfullscreen: { property_name: "allowFullscreen", applies_to: ["iframe"] },
    allowpaymentrequest: { property_name: "allowPaymentRequest", applies_to: ["iframe"] },
    async: { applies_to: ["script"] },
    autofocus: { applies_to: ["button", "input", "keygen", "select", "textarea"] },
    autoplay: { applies_to: ["audio", "video"] },
    checked: { applies_to: ["input"] },
    controls: { applies_to: ["audio", "video"] },
    default: { applies_to: ["track"] },
    defer: { applies_to: ["script"] },
    disabled: {
      applies_to: [
        "button",
        "fieldset",
        "input",
        "keygen",
        "optgroup",
        "option",
        "select",
        "textarea"
      ]
    },
    formnovalidate: { property_name: "formNoValidate", applies_to: ["button", "input"] },
    hidden: {},
    indeterminate: { applies_to: ["input"] },
    inert: {},
    ismap: { property_name: "isMap", applies_to: ["img"] },
    loop: { applies_to: ["audio", "bgsound", "video"] },
    multiple: { applies_to: ["input", "select"] },
    muted: { applies_to: ["audio", "video"] },
    nomodule: { property_name: "noModule", applies_to: ["script"] },
    novalidate: { property_name: "noValidate", applies_to: ["form"] },
    open: { applies_to: ["details", "dialog"] },
    playsinline: { property_name: "playsInline", applies_to: ["video"] },
    readonly: { property_name: "readOnly", applies_to: ["input", "textarea"] },
    required: { applies_to: ["input", "select", "textarea"] },
    reversed: { applies_to: ["ol"] },
    selected: { applies_to: ["option"] },
    value: {
      applies_to: [
        "button",
        "option",
        "input",
        "li",
        "meter",
        "progress",
        "param",
        "select",
        "textarea"
      ]
    }
  };
  Object.keys(attribute_lookup).forEach((name2) => {
    const metadata = attribute_lookup[name2];
    if (!metadata.property_name)
      metadata.property_name = name2;
  });
  function should_cache(attribute) {
    return attribute.is_src || attribute.node.should_cache();
  }
  var regex_contains_checked_or_group = /checked|group/;
  function is_indirectly_bound_value(attribute) {
    const element = attribute.parent;
    return attribute.name === "value" && (element.node.name === "option" || // TODO check it's actually bound
    element.node.name === "input" && element.node.bindings.some((binding) => regex_contains_checked_or_group.test(binding.name)));
  }
  var StyleAttributeWrapper = class extends AttributeWrapper {
    render(block) {
      const style_props = optimize_style(this.node.chunks);
      if (!style_props)
        return super.render(block);
      style_props.forEach((prop) => {
        let value;
        if (is_dynamic$1(prop.value)) {
          const prop_dependencies = /* @__PURE__ */ new Set();
          value = prop.value.map((chunk) => {
            if (chunk.type === "Text") {
              return string_literal(chunk.data);
            } else {
              add_to_set(prop_dependencies, chunk.dynamic_dependencies());
              return chunk.manipulate(block);
            }
          }).reduce((lhs, rhs) => x`${lhs} + ${rhs}`);
          if (prop_dependencies.size) {
            let condition = block.renderer.dirty(Array.from(prop_dependencies));
            if (block.has_outros) {
              condition = x`!#current || ${condition}`;
            }
            const update = b`
						if (${condition}) {
							@set_style(${this.parent.var}, "${prop.key}", ${value}, ${prop.important ? 1 : null});
						}`;
            block.chunks.update.push(update);
          }
        } else {
          value = string_literal(prop.value[0].data);
        }
        block.chunks.hydrate.push(b`@set_style(${this.parent.var}, "${prop.key}", ${value}, ${prop.important ? 1 : null});`);
      });
    }
  };
  var regex_style_prop_key = /^\s*([\w-]+):\s*/;
  function optimize_style(value) {
    const props = [];
    let chunks = value.slice();
    while (chunks.length) {
      const chunk = chunks[0];
      if (chunk.type !== "Text")
        return null;
      const key_match = regex_style_prop_key.exec(chunk.data);
      if (!key_match)
        return null;
      const key = key_match[1];
      const offset2 = key_match.index + key_match[0].length;
      const remaining_data = chunk.data.slice(offset2);
      if (remaining_data) {
        chunks[0] = {
          start: chunk.start + offset2,
          end: chunk.end,
          type: "Text",
          data: remaining_data
        };
      } else {
        chunks.shift();
      }
      const result = get_style_value(chunks);
      props.push({ key, value: result.value, important: result.important });
      chunks = result.chunks;
    }
    return props;
  }
  var regex_important_flag = /\s*!important\s*$/;
  var regex_semicolon_or_whitespace = /[;\s]/;
  function get_style_value(chunks) {
    const value = [];
    let in_url = false;
    let quote_mark = null;
    let escaped2 = false;
    let closed = false;
    while (chunks.length && !closed) {
      const chunk = chunks.shift();
      if (chunk.type === "Text") {
        let c2 = 0;
        while (c2 < chunk.data.length) {
          const char = chunk.data[c2];
          if (escaped2) {
            escaped2 = false;
          } else if (char === "\\") {
            escaped2 = true;
          } else if (char === quote_mark) {
            quote_mark = null;
          } else if (char === '"' || char === "'") {
            quote_mark = char;
          } else if (char === ")" && in_url) {
            in_url = false;
          } else if (char === "u" && chunk.data.slice(c2, c2 + 4) === "url(") {
            in_url = true;
          } else if (char === ";" && !in_url && !quote_mark) {
            closed = true;
            break;
          }
          c2 += 1;
        }
        if (c2 > 0) {
          value.push({
            type: "Text",
            start: chunk.start,
            end: chunk.start + c2,
            data: chunk.data.slice(0, c2)
          });
        }
        while (regex_semicolon_or_whitespace.test(chunk.data[c2]))
          c2 += 1;
        const remaining_data = chunk.data.slice(c2);
        if (remaining_data) {
          chunks.unshift({
            start: chunk.start + c2,
            end: chunk.end,
            type: "Text",
            data: remaining_data
          });
          break;
        }
      } else {
        value.push(chunk);
      }
    }
    let important = false;
    const last_chunk = value[value.length - 1];
    if (last_chunk && last_chunk.type === "Text" && regex_important_flag.test(last_chunk.data)) {
      important = true;
      last_chunk.data = last_chunk.data.replace(regex_important_flag, "");
      if (!last_chunk.data)
        value.pop();
    }
    return {
      chunks,
      value,
      important
    };
  }
  function is_dynamic$1(value) {
    return value.length > 1 || value[0].type !== "Text";
  }
  var SpreadAttributeWrapper = class extends BaseAttributeWrapper {
  };
  function mark_each_block_bindings(parent, binding) {
    binding.expression.references.forEach((name2) => {
      const each_block = parent.node.scope.get_owner(name2);
      if (each_block) {
        each_block.has_binding = true;
      }
    });
    if (binding.name === "group") {
      const add_index_binding = (name2) => {
        const each_block = parent.node.scope.get_owner(name2);
        if (each_block.type === "EachBlock") {
          each_block.has_index_binding = true;
          for (const dep of each_block.expression.contextual_dependencies) {
            add_index_binding(dep);
          }
        }
      };
      for (const name2 of binding.expression.contextual_dependencies) {
        add_index_binding(name2);
      }
    }
  }
  var BindingWrapper = class {
    constructor(block, node2, parent) {
      this.node = node2;
      this.parent = parent;
      const { dependencies } = this.node.expression;
      block.add_dependencies(dependencies);
      handle_select_value_binding(this, dependencies);
      if (node2.is_contextual) {
        mark_each_block_bindings(this.parent, this.node);
      }
      this.object = get_object(this.node.expression.node).name;
      if (this.node.name === "group") {
        this.binding_group = get_binding_group(parent.renderer, this, block);
      }
      this.handler = get_event_handler(this, parent.renderer, block, this.object, this.node.raw_expression);
      this.snippet = this.node.expression.manipulate(block);
      this.is_readonly = this.node.is_readonly;
      this.needs_lock = this.node.name === "currentTime";
    }
    get_dependencies() {
      const dependencies = new Set(this.node.expression.dependencies);
      this.node.expression.dependencies.forEach((prop) => {
        const indirect_dependencies = this.parent.renderer.component.indirect_dependencies.get(prop);
        if (indirect_dependencies) {
          indirect_dependencies.forEach((indirect_dependency) => {
            dependencies.add(indirect_dependency);
          });
        }
      });
      if (this.binding_group) {
        this.binding_group.list_dependencies.forEach((dep) => dependencies.add(dep));
      }
      return dependencies;
    }
    get_update_dependencies() {
      const object = this.object;
      const dependencies = /* @__PURE__ */ new Set();
      if (this.node.expression.template_scope.names.has(object)) {
        this.node.expression.template_scope.dependencies_for_name.get(object).forEach((name2) => dependencies.add(name2));
      } else {
        dependencies.add(object);
      }
      const result = new Set(dependencies);
      dependencies.forEach((dependency) => {
        const indirect_dependencies = this.parent.renderer.component.indirect_dependencies.get(dependency);
        if (indirect_dependencies) {
          indirect_dependencies.forEach((indirect_dependency) => {
            result.add(indirect_dependency);
          });
        }
      });
      return result;
    }
    is_readonly_media_attribute() {
      return this.node.is_readonly_media_attribute();
    }
    render(block, lock) {
      if (this.is_readonly)
        return;
      const { parent } = this;
      const update_conditions = this.needs_lock ? [x`!${lock}`] : [];
      const mount_conditions = [];
      let update_or_condition = null;
      const dependency_array = Array.from(this.get_dependencies());
      if (dependency_array.length > 0) {
        update_conditions.push(block.renderer.dirty(dependency_array));
      }
      if (parent.node.name === "input") {
        const type = parent.node.get_static_attribute_value("type");
        if (type === null || type === "" || type === "text" || type === "email" || type === "password" || type === "search" || type === "url") {
          update_conditions.push(x`${parent.var}.${this.node.name} !== ${this.snippet}`);
        } else if (type === "number") {
          update_conditions.push(x`@to_number(${parent.var}.${this.node.name}) !== ${this.snippet}`);
        }
      }
      let update_dom = get_dom_updater(parent, this, false);
      let mount_dom = get_dom_updater(parent, this, true);
      switch (this.node.name) {
        case "group": {
          block.renderer.add_to_context("$$binding_groups");
          this.binding_group.add_element(block, this.parent.var);
          if (this.parent.has_dynamic_value) {
            update_or_condition = this.parent.dynamic_value_condition;
          }
          break;
        }
        case "textContent":
          update_conditions.push(x`${this.snippet} !== ${parent.var}.textContent`);
          mount_conditions.push(x`${this.snippet} !== void 0`);
          break;
        case "innerText":
          update_conditions.push(x`${this.snippet} !== ${parent.var}.innerText`);
          mount_conditions.push(x`${this.snippet} !== void 0`);
          break;
        case "innerHTML":
          update_conditions.push(x`${this.snippet} !== ${parent.var}.innerHTML`);
          mount_conditions.push(x`${this.snippet} !== void 0`);
          break;
        case "currentTime":
          update_conditions.push(x`!@_isNaN(${this.snippet})`);
          mount_dom = null;
          break;
        case "playbackRate":
        case "volume":
          update_conditions.push(x`!@_isNaN(${this.snippet})`);
          mount_conditions.push(x`!@_isNaN(${this.snippet})`);
          break;
        case "paused": {
          const last = block.get_unique_name(`${parent.var.name}_is_paused`);
          block.add_variable(last, x`true`);
          update_conditions.push(x`${last} !== (${last} = ${this.snippet})`);
          update_dom = b`${parent.var}[${last} ? "pause" : "play"]();`;
          mount_dom = null;
          break;
        }
        case "value":
          if (parent.node.get_static_attribute_value("type") === "file") {
            update_dom = null;
            mount_dom = null;
          }
      }
      if (update_dom) {
        if (update_conditions.length > 0) {
          let condition = update_conditions.reduce((lhs, rhs) => x`${lhs} && ${rhs}`);
          if (update_or_condition)
            condition = x`${update_or_condition} || (${condition})`;
          block.chunks.update.push(b`
					if (${condition}) {
						${update_dom}
					}
				`);
        } else {
          block.chunks.update.push(update_dom);
        }
      }
      if (mount_dom) {
        if (mount_conditions.length > 0) {
          const condition = mount_conditions.reduce((lhs, rhs) => x`${lhs} && ${rhs}`);
          block.chunks.mount.push(b`
					if (${condition}) {
						${mount_dom}
					}
				`);
        } else {
          block.chunks.mount.push(mount_dom);
        }
      }
    }
  };
  function get_dom_updater(element, binding, mounting) {
    const { node: node2 } = element;
    if (binding.is_readonly_media_attribute()) {
      return null;
    }
    if (binding.node.name === "this") {
      return null;
    }
    if (node2.name === "select") {
      return node2.get_static_attribute_value("multiple") === true ? b`@select_options(${element.var}, ${binding.snippet})` : mounting ? b`@select_option(${element.var}, ${binding.snippet}, true)` : b`@select_option(${element.var}, ${binding.snippet})`;
    }
    if (binding.node.name === "group") {
      const type = node2.get_static_attribute_value("type");
      const condition = type === "checkbox" ? x`~(${binding.snippet} || []).indexOf(${element.var}.__value)` : x`${element.var}.__value === ${binding.snippet}`;
      return b`${element.var}.checked = ${condition};`;
    }
    if (binding.node.name === "value") {
      return b`@set_input_value(${element.var}, ${binding.snippet});`;
    }
    return b`${element.var}.${binding.node.name} = ${binding.snippet};`;
  }
  function get_binding_group(renderer, binding, block) {
    const value = binding.node;
    const { parts } = flatten_reference(value.raw_expression);
    let keypath = parts.join(".");
    const contexts = [];
    const contextual_dependencies = /* @__PURE__ */ new Set();
    const { template_scope } = value.expression;
    const add_contextual_dependency = (dep) => {
      contextual_dependencies.add(dep);
      const owner = template_scope.get_owner(dep);
      if (owner.type === "EachBlock") {
        for (const dep2 of owner.expression.contextual_dependencies) {
          add_contextual_dependency(dep2);
        }
      }
    };
    for (const dep of value.expression.contextual_dependencies) {
      add_contextual_dependency(dep);
    }
    for (const dep of contextual_dependencies) {
      const context = block.bindings.get(dep);
      let key;
      let name2;
      if (context) {
        key = context.object.name;
        name2 = context.property.name;
      } else {
        key = dep;
        name2 = dep;
      }
      keypath = `${key}@${keypath}`;
      contexts.push(name2);
    }
    if (!renderer.binding_groups.has(keypath)) {
      const index = renderer.binding_groups.size;
      const list_dependencies = /* @__PURE__ */ new Set();
      let parent = value.parent;
      while (parent) {
        if (parent.type === "EachBlock") {
          for (const dep of parent.expression.dynamic_dependencies()) {
            list_dependencies.add(dep);
          }
        }
        parent = parent.parent;
      }
      const elements = /* @__PURE__ */ new Map();
      contexts.forEach((context) => {
        renderer.add_to_context(context, true);
      });
      renderer.binding_groups.set(keypath, {
        binding_group: () => {
          let obj = x`$$binding_groups[${index}]`;
          if (contexts.length > 0) {
            contexts.forEach((secondary_index) => {
              obj = x`${obj}[${secondary_index}]`;
            });
          }
          return obj;
        },
        contexts,
        list_dependencies,
        keypath,
        add_element(block2, element) {
          if (!elements.has(block2)) {
            elements.set(block2, []);
          }
          elements.get(block2).push(element);
        },
        render(block2) {
          const local_name = block2.get_unique_name("binding_group");
          const binding_group2 = block2.renderer.reference("$$binding_groups");
          block2.add_variable(local_name);
          if (contexts.length > 0) {
            const indexes = { type: "ArrayExpression", elements: contexts.map((name2) => block2.renderer.reference(name2)) };
            block2.chunks.init.push(b`${local_name} = @init_binding_group_dynamic(${binding_group2}[${index}], ${indexes})`);
            block2.chunks.update.push(b`if (${block2.renderer.dirty(Array.from(list_dependencies))}) ${local_name}.u(${indexes})`);
          } else {
            block2.chunks.init.push(b`${local_name} = @init_binding_group(${binding_group2}[${index}])`);
          }
          block2.chunks.hydrate.push(b`${local_name}.p(${elements.get(block2)})`);
          block2.chunks.destroy.push(b`${local_name}.r()`);
        }
      });
    }
    const binding_group = renderer.binding_groups.get(keypath);
    block.binding_groups.add(binding_group);
    return binding_group;
  }
  function get_event_handler(binding, renderer, block, name2, lhs) {
    const contextual_dependencies = new Set(binding.node.expression.contextual_dependencies);
    const context = block.bindings.get(name2);
    let set_store;
    if (context) {
      const { object, property, store, snippet } = context;
      lhs = replace_object(lhs, snippet);
      contextual_dependencies.add(object.name);
      contextual_dependencies.add(property.name);
      contextual_dependencies.delete(name2);
      if (store) {
        set_store = b`${store}.set(${`$${store}`});`;
      }
    } else {
      const object = get_object(lhs);
      if (object.name[0] === "$") {
        const store = object.name.slice(1);
        set_store = b`${store}.set(${object.name});`;
      }
    }
    const value = get_value_from_dom(renderer, binding.parent, binding, contextual_dependencies);
    const mutation = b`
		${lhs} = ${value};
		${set_store}
	`;
    return {
      uses_context: binding.node.is_contextual || binding.node.expression.uses_context,
      mutation,
      contextual_dependencies,
      lhs
    };
  }
  function get_value_from_dom(_renderer, element, binding, contextual_dependencies) {
    const { node: node2 } = element;
    const { name: name2 } = binding.node;
    if (name2 === "this") {
      return x`$$value`;
    }
    if (regex_box_size.test(name2)) {
      return x`@ResizeObserverSingleton.entries.get(this)?.${name2}`;
    }
    if (node2.name === "select") {
      return node2.get_static_attribute_value("multiple") === true ? x`@select_multiple_value(this)` : x`@select_value(this)`;
    }
    const type = node2.get_static_attribute_value("type");
    if (name2 === "group") {
      if (type === "checkbox") {
        const { binding_group, contexts } = binding.binding_group;
        add_to_set(contextual_dependencies, contexts);
        return x`@get_binding_group_value(${binding_group()}, this.__value, this.checked)`;
      }
      return x`this.__value`;
    }
    if (type === "range" || type === "number") {
      return x`@to_number(this.${name2})`;
    }
    if (name2 === "buffered" || name2 === "seekable" || name2 === "played") {
      return x`@time_ranges_to_array(this.${name2})`;
    }
    return x`this.${name2}`;
  }
  function compare_node(a, b2) {
    if (a === b2)
      return true;
    if (!a || !b2)
      return false;
    if (a.type !== b2.type)
      return false;
    switch (a.type) {
      case "Identifier":
        return a.name === b2.name;
      case "MemberExpression":
        return compare_node(a.object, b2.object) && compare_node(a.property, b2.property) && a.computed === b2.computed;
      case "Literal":
        return a.value === b2.value;
    }
  }
  function bind_this(component, block, binding, variable) {
    const fn2 = component.get_unique_name(`${variable.name}_binding`);
    block.renderer.add_to_context(fn2.name);
    const callee = block.renderer.reference(fn2.name);
    const { contextual_dependencies, mutation } = binding.handler;
    const dependencies = binding.get_update_dependencies();
    const body = b`
		${mutation}
		${Array.from(dependencies).filter((dep) => dep[0] !== "$").filter((dep) => !contextual_dependencies.has(dep)).map((dep) => b`${block.renderer.invalidate(dep)};`)}
	`;
    if (contextual_dependencies.size) {
      const params = Array.from(contextual_dependencies).map((name2) => ({
        type: "Identifier",
        name: name2
      }));
      component.partly_hoisted.push(b`
			function ${fn2}($$value, ${params}) {
				@binding_callbacks[$$value ? 'unshift' : 'push'](() => {
					${body}
				});
			}
		`);
      const alias_map = /* @__PURE__ */ new Map();
      const args = [];
      for (let id2 of params) {
        const value = block.renderer.reference(id2.name);
        let found = false;
        if (block.variables.has(id2.name)) {
          let alias = id2.name;
          for (let i = 1; block.variables.has(alias) && !compare_node(block.variables.get(alias).init, value); alias = `${id2.name}_${i++}`)
            ;
          alias_map.set(alias, id2.name);
          id2 = { type: "Identifier", name: alias };
          found = block.variables.has(alias);
        }
        args.push(id2);
        if (!found) {
          block.add_variable(id2, value);
        }
      }
      const assign3 = block.get_unique_name(`assign_${variable.name}`);
      const unassign = block.get_unique_name(`unassign_${variable.name}`);
      block.chunks.init.push(b`
			const ${assign3} = () => ${callee}(${variable}, ${args});
			const ${unassign} = () => ${callee}(null, ${args});
		`);
      const condition = Array.from(args).map((name2) => x`${name2} !== ${block.renderer.reference(alias_map.get(name2.name) || name2.name)}`).reduce((lhs, rhs) => x`${lhs} || ${rhs}`);
      block.chunks.update.push(b`
			if (${condition}) {
				${unassign}();
				${args.map((a) => b`${a} = ${block.renderer.reference(alias_map.get(a.name) || a.name)}`)};
				${assign3}();
			}`);
      block.chunks.destroy.push(b`${unassign}();`);
      return b`${assign3}();`;
    }
    component.partly_hoisted.push(b`
		function ${fn2}($$value) {
			@binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				${body}
			});
		}
	`);
    block.chunks.destroy.push(b`${callee}(null);`);
    return b`${callee}(${variable});`;
  }
  var Tag$1 = class extends Wrapper {
    constructor(renderer, block, parent, node2) {
      super(renderer, block, parent, node2);
      this.cannot_use_innerhtml();
      if (!this.is_dependencies_static()) {
        this.not_static_content();
      }
      block.add_dependencies(node2.expression.dependencies);
    }
    is_dependencies_static() {
      return this.node.expression.contextual_dependencies.size === 0 && this.node.expression.dynamic_dependencies().length === 0;
    }
    rename_this_method(block, update) {
      const dependencies = this.node.expression.dynamic_dependencies();
      let snippet = this.node.expression.manipulate(block);
      const value = this.node.should_cache && block.get_unique_name(`${this.var.name}_value`);
      const content = this.node.should_cache ? value : snippet;
      snippet = x`${snippet} + ""`;
      if (this.node.should_cache)
        block.add_variable(value, snippet);
      if (dependencies.length > 0) {
        let condition = block.renderer.dirty(dependencies);
        if (block.has_outros) {
          condition = x`!#current || ${condition}`;
        }
        const update_cached_value = x`${value} !== (${value} = ${snippet})`;
        if (this.node.should_cache) {
          condition = x`${condition} && ${update_cached_value}`;
        }
        block.chunks.update.push(b`if (${condition}) ${update(content)}`);
      }
      return { init: content };
    }
  };
  var MustacheTagWrapper = class extends Tag$1 {
    constructor(renderer, block, parent, node2) {
      super(renderer, block, parent, node2);
      this.var = { type: "Identifier", name: "t" };
    }
    render(block, parent_node, parent_nodes, data2) {
      const contenteditable_attributes = this.parent instanceof ElementWrapper && this.parent.attributes.filter((a) => a.node.name === "contenteditable");
      const spread_attributes = this.parent instanceof ElementWrapper && this.parent.attributes.filter((a) => a.node.is_spread);
      let contenteditable_attr_value = void 0;
      if (contenteditable_attributes.length > 0) {
        const attribute = contenteditable_attributes[0];
        if ([true, "true", ""].includes(attribute.node.get_static_value())) {
          contenteditable_attr_value = true;
        } else {
          contenteditable_attr_value = x`${attribute.get_value(block)}`;
        }
      } else if (spread_attributes.length > 0 && data2.element_data_name) {
        contenteditable_attr_value = x`${data2.element_data_name}['contenteditable']`;
      }
      const { init } = this.rename_this_method(block, (value) => {
        if (contenteditable_attr_value) {
          if (contenteditable_attr_value === true) {
            return x`@set_data_contenteditable(${this.var}, ${value})`;
          } else {
            return x`@set_data_maybe_contenteditable(${this.var}, ${value}, ${contenteditable_attr_value})`;
          }
        } else {
          return x`@set_data(${this.var}, ${value})`;
        }
      });
      block.add_element(this.var, x`@text(${init})`, parent_nodes && x`@claim_text(${parent_nodes}, ${init})`, parent_node);
    }
  };
  var RawMustacheTagWrapper = class extends Tag$1 {
    constructor(renderer, block, parent, node2) {
      super(renderer, block, parent, node2);
      this.var = { type: "Identifier", name: "raw" };
      this.cannot_use_innerhtml();
      this.not_static_content();
    }
    render(block, parent_node, _parent_nodes) {
      const in_head = is_head(parent_node);
      const can_use_innerhtml = !in_head && parent_node && !this.prev && !this.next;
      if (can_use_innerhtml) {
        const insert = (content) => b`${parent_node}.innerHTML = ${content};`[0];
        const { init } = this.rename_this_method(block, (content) => insert(content));
        block.chunks.mount.push(insert(init));
      } else {
        const needs_anchor = in_head || (this.next ? !this.next.is_dom_node() : !this.parent || !this.parent.is_dom_node());
        const html_tag = block.get_unique_name("html_tag");
        const html_anchor = needs_anchor && block.get_unique_name("html_anchor");
        block.add_variable(html_tag);
        const { init } = this.rename_this_method(block, (content) => x`${html_tag}.p(${content})`);
        const update_anchor = needs_anchor ? html_anchor : this.next ? this.next.var : "null";
        const parent_element = this.node.find_nearest(/^Element/);
        const is_svg2 = parent_element && parent_element.namespace === namespaces.svg;
        block.chunks.create.push(b`${html_tag} = new @HtmlTag(${is_svg2 ? "true" : "false"});`);
        if (this.renderer.options.hydratable) {
          block.chunks.claim.push(b`${html_tag} = @claim_html_tag(${_parent_nodes}, ${is_svg2 ? "true" : "false"});`);
        }
        block.chunks.hydrate.push(b`${html_tag}.a = ${update_anchor};`);
        block.chunks.mount.push(b`${html_tag}.m(${init}, ${parent_node || "#target"}, ${parent_node ? null : "#anchor"});`);
        if (needs_anchor) {
          block.add_element(html_anchor, x`@empty()`, x`@empty()`, parent_node);
        }
        if (!parent_node || in_head) {
          block.chunks.destroy.push(b`if (detaching) ${html_tag}.d();`);
        }
      }
    }
  };
  var regex_contains_radio_or_checkbox_or_file = /radio|checkbox|file/;
  var regex_contains_radio_or_checkbox_or_range_or_file = /radio|checkbox|range|file/;
  var events = [
    {
      event_names: ["input"],
      filter: (node2, _name) => node2.name === "textarea" || node2.name === "input" && !regex_contains_radio_or_checkbox_or_range_or_file.test(node2.get_static_attribute_value("type"))
    },
    {
      event_names: ["input"],
      filter: (node2, name2) => is_name_contenteditable(name2) && has_contenteditable_attr(node2)
    },
    {
      event_names: ["change"],
      filter: (node2, _name) => node2.name === "select" || node2.name === "input" && regex_contains_radio_or_checkbox_or_file.test(node2.get_static_attribute_value("type"))
    },
    {
      event_names: ["change", "input"],
      filter: (node2, _name) => node2.name === "input" && node2.get_static_attribute_value("type") === "range"
    },
    // resize events
    {
      event_names: ["elementresize"],
      filter: (_node, name2) => regex_dimensions.test(name2)
    },
    {
      event_names: ["elementresizecontentbox"],
      filter: (_node, name2) => {
        var _a2;
        return (_a2 = regex_content_rect.test(name2)) !== null && _a2 !== void 0 ? _a2 : regex_content_box_size.test(name2);
      }
    },
    {
      event_names: ["elementresizeborderbox"],
      filter: (_node, name2) => regex_border_box_size.test(name2)
    },
    {
      event_names: ["elementresizedevicepixelcontentbox"],
      filter: (_node, name2) => regex_device_pixel_content_box_size.test(name2)
    },
    // media events
    {
      event_names: ["timeupdate"],
      filter: (node2, name2) => node2.is_media_node() && (name2 === "currentTime" || name2 === "played" || name2 === "ended")
    },
    {
      event_names: ["durationchange"],
      filter: (node2, name2) => node2.is_media_node() && name2 === "duration"
    },
    {
      event_names: ["play", "pause"],
      filter: (node2, name2) => node2.is_media_node() && name2 === "paused"
    },
    {
      event_names: ["progress"],
      filter: (node2, name2) => node2.is_media_node() && name2 === "buffered"
    },
    {
      event_names: ["loadedmetadata"],
      filter: (node2, name2) => node2.is_media_node() && (name2 === "buffered" || name2 === "seekable")
    },
    {
      event_names: ["volumechange"],
      filter: (node2, name2) => node2.is_media_node() && (name2 === "volume" || name2 === "muted")
    },
    {
      event_names: ["ratechange"],
      filter: (node2, name2) => node2.is_media_node() && name2 === "playbackRate"
    },
    {
      event_names: ["seeking", "seeked"],
      filter: (node2, name2) => node2.is_media_node() && name2 === "seeking"
    },
    {
      event_names: ["ended"],
      filter: (node2, name2) => node2.is_media_node() && name2 === "ended"
    },
    {
      event_names: ["resize"],
      filter: (node2, name2) => node2.is_media_node() && (name2 === "videoHeight" || name2 === "videoWidth")
    },
    {
      // from https://html.spec.whatwg.org/multipage/media.html#ready-states
      // and https://html.spec.whatwg.org/multipage/media.html#loading-the-media-resource
      event_names: ["loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "emptied"],
      filter: (node2, name2) => node2.is_media_node() && name2 === "readyState"
    },
    // details event
    {
      event_names: ["toggle"],
      filter: (node2, _name) => node2.name === "details"
    },
    {
      event_names: ["load"],
      filter: (_2, name2) => name2 === "naturalHeight" || name2 === "naturalWidth"
    }
  ];
  var CHILD_DYNAMIC_ELEMENT_BLOCK = "child_dynamic_element";
  var regex_invalid_variable_identifier_characters$2 = /[^a-zA-Z0-9_$]/g;
  var regex_minus_signs = /-/g;
  var ElementWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.child_dynamic_element_block = null;
      this.child_dynamic_element = null;
      this.element_data_name = null;
      this.var = {
        type: "Identifier",
        name: node2.name.replace(regex_invalid_variable_identifier_characters$2, "_")
      };
      this.void = is_void(node2.name);
      this.class_dependencies = [];
      if (node2.is_dynamic_element && block.type !== CHILD_DYNAMIC_ELEMENT_BLOCK) {
        this.child_dynamic_element_block = block.child({
          comment: create_debugging_comment(node2, renderer.component),
          name: renderer.component.get_unique_name("create_dynamic_element"),
          type: CHILD_DYNAMIC_ELEMENT_BLOCK
        });
        renderer.blocks.push(this.child_dynamic_element_block);
        this.child_dynamic_element = new ElementWrapper(renderer, this.child_dynamic_element_block, parent, node2, strip_whitespace, next_sibling);
        return;
      }
      this.dynamic_style_dependencies = /* @__PURE__ */ new Set();
      if (this.node.children.length) {
        this.node.lets.forEach((l) => {
          extract_names(l.value || l.name).forEach((name2) => {
            renderer.add_to_context(name2, true);
          });
        });
      }
      this.attributes = this.node.attributes.map((attribute) => {
        if (attribute.name === "style") {
          return new StyleAttributeWrapper(this, block, attribute);
        }
        if (attribute.type === "Spread") {
          return new SpreadAttributeWrapper(this, block, attribute);
        }
        return new AttributeWrapper(this, block, attribute);
      });
      this.has_dynamic_attribute = !!this.attributes.find((attr) => attr.node.get_dependencies().length > 0);
      this.bindings = this.node.bindings.map((binding) => new BindingWrapper(block, binding, this));
      this.event_handlers = this.node.handlers.map((event_handler) => new EventHandlerWrapper(event_handler, this));
      if (node2.intro || node2.outro) {
        if (node2.intro)
          block.add_intro(node2.intro.is_local);
        if (node2.outro)
          block.add_outro(node2.outro.is_local);
      }
      if (node2.animation) {
        block.add_animation();
      }
      block.add_dependencies(node2.tag_expr.dependencies);
      [node2.animation, node2.outro, ...node2.actions, ...node2.classes, ...node2.styles].forEach((directive) => {
        if (directive && directive.expression) {
          block.add_dependencies(directive.expression.dependencies);
        }
      });
      node2.handlers.forEach((handler) => {
        if (handler.expression) {
          block.add_dependencies(handler.expression.dependencies);
        }
      });
      if (this.parent) {
        if (node2.actions.length > 0 || node2.animation || node2.bindings.length > 0 || node2.classes.length > 0 || node2.intro || node2.outro || node2.handlers.length > 0 || node2.styles.length > 0 || this.node.name === "option" || node2.tag_expr.dynamic_dependencies().length || node2.is_dynamic_element || renderer.options.dev) {
          this.parent.cannot_use_innerhtml();
          this.parent.not_static_content();
        }
      }
      this.fragment = new FragmentWrapper(renderer, block, node2.children, this, strip_whitespace, next_sibling);
      this.element_data_name = block.get_unique_name(`${this.var.name}_data`);
    }
    render(block, parent_node, parent_nodes) {
      if (this.child_dynamic_element) {
        this.render_dynamic_element(block, parent_node, parent_nodes);
      } else {
        this.render_element(block, parent_node, parent_nodes);
      }
    }
    render_dynamic_element(block, parent_node, parent_nodes) {
      this.child_dynamic_element.render(this.child_dynamic_element_block, null, x`#nodes`);
      const is_tag_dynamic = this.node.tag_expr.dynamic_dependencies().length > 0;
      const tag2 = this.node.tag_expr.manipulate(block);
      block.chunks.init.push(b`
			${this.renderer.options.dev && b`@validate_dynamic_element(${tag2});`}
			${this.renderer.options.dev && this.node.children.length > 0 && b`@validate_void_dynamic_element(${tag2});`}
			let ${this.var} = ${tag2} && ${this.child_dynamic_element_block.name}(#ctx);
		`);
      block.chunks.create.push(b`
			if (${this.var}) ${this.var}.c();
		`);
      if (this.renderer.options.hydratable) {
        block.chunks.claim.push(b`
				if (${this.var}) ${this.var}.l(${parent_nodes});
			`);
      }
      block.chunks.mount.push(b`
			if (${this.var}) ${this.var}.m(${parent_node || "#target"}, ${parent_node ? "null" : "#anchor"});
		`);
      if (is_tag_dynamic) {
        const previous_tag = block.get_unique_name("previous_tag");
        block.add_variable(previous_tag, tag2);
        const anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);
        const has_transitions = !!(this.node.intro || this.node.outro);
        const not_equal = this.renderer.component.component_options.immutable ? x`@not_equal` : x`@safe_not_equal`;
        const tag_will_be_removed = block.get_unique_name("tag_will_be_removed");
        if (has_transitions) {
          block.add_variable(tag_will_be_removed, x`false`);
        }
        block.chunks.update.push(b`
				if (${tag2}) {
					if (!${previous_tag}) {
						${this.var} = ${this.child_dynamic_element_block.name}(#ctx);
						${previous_tag} = ${tag2};
						${this.var}.c();
						${has_transitions && b`@transition_in(${this.var})`}
						${this.var}.m(${this.get_update_mount_node(anchor)}, ${anchor});
					} else if (${not_equal}(${previous_tag}, ${tag2})) {
						${this.var}.d(1);
						${this.renderer.options.dev && b`@validate_dynamic_element(${tag2});`}
						${this.renderer.options.dev && this.node.children.length > 0 && b`@validate_void_dynamic_element(${tag2});`}
						${this.var} = ${this.child_dynamic_element_block.name}(#ctx);
						${previous_tag} = ${tag2};
						${this.var}.c();
						${has_transitions && b`if (${tag_will_be_removed}) {
							${tag_will_be_removed} = false;
							@transition_in(${this.var})
						}`}
						${this.var}.m(${this.get_update_mount_node(anchor)}, ${anchor});
					} else {
						${has_transitions && b`if (${tag_will_be_removed}) {
							${tag_will_be_removed} = false;
							@transition_in(${this.var})
						}`}
						${this.var}.p(#ctx, #dirty);
					}
				} else if (${previous_tag}) {
					${has_transitions ? b`
								${tag_will_be_removed} = true;
								@group_outros();
								@transition_out(${this.var}, 1, 1, () => {
									${this.var} = null;
									${previous_tag} = ${tag2};
									${tag_will_be_removed} = false;
								});
								@check_outros();
							` : b`
								${this.var}.d(1);
								${this.var} = null;
								${previous_tag} = ${tag2};
							`}
				}
			`);
      } else {
        block.chunks.update.push(b`
				if (${tag2}) {
					${this.var}.p(#ctx, #dirty);
				}
			`);
      }
      if (this.child_dynamic_element_block.has_intros) {
        block.chunks.intro.push(b`@transition_in(${this.var});`);
      }
      if (this.child_dynamic_element_block.has_outros) {
        block.chunks.outro.push(b`@transition_out(${this.var});`);
      }
      block.chunks.destroy.push(b`if (${this.var}) ${this.var}.d(detaching)`);
      if (this.node.animation) {
        const measurements = block.get_unique_name("measurements");
        block.add_variable(measurements);
        block.chunks.measure.push(b`${measurements} = ${this.var}.r()`);
        block.chunks.fix.push(b`${this.var}.f();`);
        block.chunks.animate.push(b`
				${this.var}.s(${measurements});
				${this.var}.a()
			`);
      }
    }
    is_dom_node() {
      return super.is_dom_node() && !this.child_dynamic_element;
    }
    render_element(block, parent_node, parent_nodes) {
      const { renderer } = this;
      if (this.node.name === "noscript")
        return;
      const node2 = this.var;
      const nodes = parent_nodes && block.get_unique_name(`${this.var.name}_nodes`);
      const children = x`@children(${this.node.name === "template" ? x`${node2}.content` : node2})`;
      block.add_variable(node2);
      const render_statement = this.get_render_statement(block);
      block.chunks.create.push(b`${node2} = ${render_statement};`);
      if (renderer.options.hydratable) {
        if (parent_nodes) {
          block.chunks.claim.push(b`
					${node2} = ${this.get_claim_statement(block, parent_nodes)};
				`);
          if (!this.void && this.node.children.length > 0) {
            block.chunks.claim.push(b`
						var ${nodes} = ${children};
					`);
          }
        } else {
          block.chunks.claim.push(b`${node2} = ${render_statement};`);
        }
      }
      if (parent_node) {
        const append = b`@append(${parent_node}, ${node2});`;
        append[0].expression.callee.loc = {
          start: this.renderer.locate(this.node.start),
          end: this.renderer.locate(this.node.end)
        };
        block.chunks.mount.push(append);
        if (is_head(parent_node)) {
          block.chunks.destroy.push(b`@detach(${node2});`);
        }
      } else {
        const insert = b`@insert(#target, ${node2}, #anchor);`;
        insert[0].expression.callee.loc = {
          start: this.renderer.locate(this.node.start),
          end: this.renderer.locate(this.node.end)
        };
        block.chunks.mount.push(insert);
        block.chunks.destroy.push(b`if (detaching) @detach(${node2});`);
      }
      const can_use_textcontent = this.can_use_textcontent();
      const is_template = this.node.name === "template";
      const is_template_with_text_content = is_template && can_use_textcontent;
      if (!is_template_with_text_content && !this.node.namespace && (this.can_use_innerhtml || can_use_textcontent) && this.fragment.nodes.length > 0) {
        if (this.fragment.nodes.length === 1 && this.fragment.nodes[0].node.type === "Text") {
          block.chunks.create.push(b`${node2}.textContent = ${string_literal(this.fragment.nodes[0].data)};`);
        } else {
          const state = {
            quasi: {
              type: "TemplateElement",
              value: { raw: "" }
            }
          };
          const literal2 = {
            type: "TemplateLiteral",
            expressions: [],
            quasis: []
          };
          const can_use_raw_text = !this.can_use_innerhtml && can_use_textcontent;
          to_html(this.fragment.nodes, block, literal2, state, can_use_raw_text);
          literal2.quasis.push(state.quasi);
          block.chunks.create.push(b`${node2}.${this.can_use_innerhtml ? "innerHTML" : "textContent"} = ${literal2};`);
        }
      } else {
        this.fragment.nodes.forEach((child) => {
          child.render(block, is_template ? x`${node2}.content` : node2, nodes, { element_data_name: this.element_data_name });
        });
      }
      const event_handler_or_binding_uses_context = this.bindings.some((binding) => binding.handler.uses_context) || this.node.handlers.some((handler) => handler.uses_context) || this.node.actions.some((action) => action.uses_context);
      if (event_handler_or_binding_uses_context) {
        block.maintain_context = true;
      }
      if (this.node.is_dynamic_element) {
        this.add_dynamic_element_attributes(block);
      } else {
        this.add_attributes(block);
      }
      this.add_directives_in_order(block);
      this.add_transitions(block);
      this.add_animation(block);
      this.add_classes(block);
      this.add_styles(block);
      this.add_manual_style_scoping(block);
      if (nodes && this.renderer.options.hydratable && !this.void) {
        block.chunks.claim.push(b`${this.node.children.length > 0 ? nodes : children}.forEach(@detach);`);
      }
      if (renderer.options.dev) {
        const loc = renderer.locate(this.node.start);
        block.chunks.hydrate.push(b`@add_location(${this.var}, ${renderer.file_var}, ${loc.line - 1}, ${loc.column}, ${this.node.start});`);
      }
      block.renderer.dirty(this.node.tag_expr.dynamic_dependencies());
    }
    can_use_textcontent() {
      return this.is_static_content && this.fragment.nodes.every((node2) => node2.node.type === "Text" || node2.node.type === "MustacheTag");
    }
    get_render_statement(block) {
      const { name: name2, namespace, tag_expr } = this.node;
      const reference = tag_expr.manipulate(block);
      if (namespace === namespaces.svg) {
        return x`@svg_element(${reference})`;
      }
      if (namespace) {
        return x`@_document.createElementNS("${namespace}", "${name2}")`;
      }
      const is3 = this.attributes.find((attr) => attr.node.name === "is");
      if (is3) {
        return x`@element_is("${name2}", ${is3.render_chunks(block).reduce((lhs, rhs) => x`${lhs} + ${rhs}`)})`;
      }
      return x`@element(${reference})`;
    }
    get_claim_statement(block, nodes) {
      const attributes = this.attributes.filter((attr) => !(attr instanceof SpreadAttributeWrapper) && !attr.property_name).map((attr) => p`${attr.name}: true`);
      let reference;
      if (this.node.tag_expr.node.type === "Literal") {
        if (this.node.namespace) {
          reference = `"${this.node.tag_expr.node.value}"`;
        } else {
          reference = `"${(this.node.tag_expr.node.value || "").toUpperCase()}"`;
        }
      } else if (this.node.namespace) {
        reference = x`${this.node.tag_expr.manipulate(block)}`;
      } else {
        reference = x`(${this.node.tag_expr.manipulate(block)} || 'null').toUpperCase()`;
      }
      if (this.node.namespace === namespaces.svg) {
        return x`@claim_svg_element(${nodes}, ${reference}, { ${attributes} })`;
      } else {
        return x`@claim_element(${nodes}, ${reference}, { ${attributes} })`;
      }
    }
    add_directives_in_order(block) {
      const binding_groups = events.map((event) => ({
        events: event.event_names,
        bindings: this.bindings.filter((binding) => binding.node.name !== "this").filter((binding) => event.filter(this.node, binding.node.name))
      })).filter((group) => group.bindings.length);
      const this_binding = this.bindings.find((b2) => b2.node.name === "this");
      function getOrder(item) {
        if (item instanceof EventHandlerWrapper) {
          return item.node.start;
        } else if (item instanceof BindingWrapper) {
          return item.node.start;
        } else if (item instanceof Action) {
          return item.start;
        } else {
          return item.bindings[0].node.start;
        }
      }
      [
        ...binding_groups,
        ...this.event_handlers,
        this_binding,
        ...this.node.actions
      ].filter(Boolean).sort((a, b2) => getOrder(a) - getOrder(b2)).forEach((item) => {
        if (item instanceof EventHandlerWrapper) {
          add_event_handler(block, this.var, item);
        } else if (item instanceof BindingWrapper) {
          this.add_this_binding(block, item);
        } else if (item instanceof Action) {
          add_action(block, this.var, item);
        } else {
          this.add_bindings(block, item);
        }
      });
    }
    add_bindings(block, binding_group) {
      const { renderer } = this;
      if (binding_group.bindings.length === 0)
        return;
      renderer.component.has_reactive_assignments = true;
      const lock = binding_group.bindings.some((binding) => binding.needs_lock) ? block.get_unique_name(`${this.var.name}_updating`) : null;
      if (lock)
        block.add_variable(lock, x`false`);
      const handler = renderer.component.get_unique_name(`${this.var.name}_${binding_group.events.join("_")}_handler`);
      renderer.add_to_context(handler.name);
      const needs_lock = binding_group.bindings.some((binding) => binding.needs_lock);
      const dependencies = /* @__PURE__ */ new Set();
      const contextual_dependencies = /* @__PURE__ */ new Set();
      binding_group.bindings.forEach((binding) => {
        add_to_set(dependencies, binding.get_update_dependencies());
        add_to_set(contextual_dependencies, binding.handler.contextual_dependencies);
        binding.render(block, lock);
      });
      let animation_frame;
      if (binding_group.events[0] === "timeupdate") {
        animation_frame = block.get_unique_name(`${this.var.name}_animationframe`);
        block.add_variable(animation_frame);
      }
      const has_local_function = contextual_dependencies.size > 0 || needs_lock || animation_frame;
      let callee = renderer.reference(handler);
      if (has_local_function) {
        const args = Array.from(contextual_dependencies).map((name2) => renderer.reference(name2));
        if (animation_frame) {
          block.chunks.init.push(b`
					function ${handler}() {
						@_cancelAnimationFrame(${animation_frame});
						if (!${this.var}.paused) {
							${animation_frame} = @raf(${handler});
							${needs_lock && b`${lock} = true;`}
						}
						${callee}.call(${this.var}, ${args});
					}
				`);
        } else {
          block.chunks.init.push(b`
					function ${handler}() {
						${needs_lock && b`${lock} = true;`}
						${callee}.call(${this.var}, ${args});
					}
				`);
        }
        callee = handler;
      }
      const params = Array.from(contextual_dependencies).map((name2) => ({
        type: "Identifier",
        name: name2
      }));
      this.renderer.component.partly_hoisted.push(b`
			function ${handler}(${params}) {
				${binding_group.bindings.map((b2) => b2.handler.mutation)}
				${Array.from(dependencies).filter((dep) => dep[0] !== "$").filter((dep) => !contextual_dependencies.has(dep)).map((dep) => b`${this.renderer.invalidate(dep)};`)}
			}
		`);
      binding_group.events.forEach((name2) => {
        if (["elementresize", "elementresizecontentbox", "elementresizeborderbox", "elementresizedevicepixelcontentbox"].indexOf(name2) !== -1) {
          const resize_listener = block.get_unique_name(`${this.var.name}_resize_listener`);
          block.add_variable(resize_listener);
          switch (name2) {
            case "elementresize":
              block.chunks.mount.push(b`${resize_listener} = @add_iframe_resize_listener(${this.var}, ${callee}.bind(${this.var}));`);
              break;
            case "elementresizecontentbox":
              block.chunks.mount.push(b`${resize_listener} = @resize_observer_content_box.observe(${this.var}, ${callee}.bind(${this.var}));`);
              break;
            case "elementresizeborderbox":
              block.chunks.mount.push(b`${resize_listener} = @resize_observer_border_box.observe(${this.var}, ${callee}.bind(${this.var}));`);
              break;
            case "elementresizedevicepixelcontentbox":
              block.chunks.mount.push(b`${resize_listener} = @resize_observer_device_pixel_content_box.observe(${this.var}, ${callee}.bind(${this.var}));`);
              break;
          }
          block.chunks.destroy.push(b`${resize_listener}();`);
        } else {
          block.event_listeners.push(x`@listen(${this.var}, "${name2}", ${callee})`);
        }
      });
      const some_initial_state_is_undefined = binding_group.bindings.map((binding) => x`${binding.snippet} === void 0`).reduce((lhs, rhs) => x`${lhs} || ${rhs}`);
      const should_initialise = this.node.name === "select" || binding_group.bindings.find((binding) => binding.node.name === "indeterminate" || is_name_contenteditable(binding.node.name) || binding.is_readonly_media_attribute());
      if (should_initialise) {
        const callback = has_local_function ? handler : x`() => ${callee}.call(${this.var})`;
        block.chunks.hydrate.push(b`if (${some_initial_state_is_undefined}) @add_render_callback(${callback});`);
      }
      if (binding_group.events[0] === "elementresize") {
        block.chunks.hydrate.push(b`@add_render_callback(() => ${callee}.call(${this.var}));`);
      }
      if (lock) {
        block.chunks.update.push(b`${lock} = false;`);
      }
    }
    add_this_binding(block, this_binding) {
      const { renderer } = this;
      renderer.component.has_reactive_assignments = true;
      const binding_callback = bind_this(renderer.component, block, this_binding, this.var);
      block.chunks.mount.push(binding_callback);
    }
    add_attributes(block) {
      this.attributes.forEach((attribute) => {
        if (attribute.node.name === "class") {
          const dependencies = attribute.node.get_dependencies();
          push_array$1(this.class_dependencies, dependencies);
        } else if (attribute.node.name === "style") {
          add_to_set(this.dynamic_style_dependencies, attribute.node.get_dependencies());
        }
      });
      if (this.node.attributes.some((attr) => attr.is_spread)) {
        this.add_spread_attributes(block);
        return;
      }
      this.attributes.forEach((attribute) => {
        attribute.render(block);
      });
    }
    add_spread_attributes(block) {
      const levels = block.get_unique_name(`${this.var.name}_levels`);
      const initial_props = [];
      const updates = [];
      this.attributes.forEach((attr) => {
        const dependencies = attr.node.get_dependencies();
        const condition = dependencies.length > 0 ? block.renderer.dirty(dependencies) : null;
        if (attr instanceof SpreadAttributeWrapper) {
          const snippet = attr.node.expression.manipulate(block);
          initial_props.push(snippet);
          updates.push(condition ? x`${condition} && ${snippet}` : snippet);
        } else {
          const name2 = attr.property_name || attr.name;
          initial_props.push(x`{ ${name2}: ${attr.get_init(block, attr.get_value(block))} }`);
          const snippet = x`{ ${name2}: ${attr.should_cache ? attr.last : attr.get_value(block)} }`;
          updates.push(condition ? x`${attr.get_dom_update_conditions(block, condition)} && ${snippet}` : snippet);
        }
      });
      block.chunks.init.push(b`
			let ${levels} = [${initial_props}];

			let ${this.element_data_name} = {};
			for (let #i = 0; #i < ${levels}.length; #i += 1) {
				${this.element_data_name} = @assign(${this.element_data_name}, ${levels}[#i]);
			}
		`);
      const fn2 = this.node.namespace === namespaces.svg ? x`@set_svg_attributes` : this.node.is_dynamic_element ? x`@set_dynamic_element_data(${this.node.tag_expr.manipulate(block)})` : x`@set_attributes`;
      block.chunks.hydrate.push(b`${fn2}(${this.var}, ${this.element_data_name});`);
      if (this.has_dynamic_attribute) {
        block.chunks.update.push(b`
				${fn2}(${this.var}, ${this.element_data_name} = @get_spread_update(${levels}, [
					${updates}
				]));
			`);
      }
      if (this.node.name === "select") {
        const dependencies = /* @__PURE__ */ new Set();
        for (const attr of this.attributes) {
          for (const dep of attr.node.dependencies) {
            dependencies.add(dep);
          }
        }
        block.chunks.mount.push(b`
				'value' in ${this.element_data_name} && (${this.element_data_name}.multiple ? @select_options : @select_option)(${this.var}, ${this.element_data_name}.value);
			`);
        block.chunks.update.push(b`
				if (${block.renderer.dirty(Array.from(dependencies))} && 'value' in ${this.element_data_name}) (${this.element_data_name}.multiple ? @select_options : @select_option)(${this.var}, ${this.element_data_name}.value);
			`);
      } else if (this.node.name === "input" && this.attributes.find((attr) => attr.node.name === "value")) {
        const type = this.node.get_static_attribute_value("type");
        if (type === null || type === "" || type === "text" || type === "email" || type === "password") {
          block.chunks.mount.push(b`
					if ('value' in ${this.element_data_name}) {
						${this.var}.value = ${this.element_data_name}.value;
					}
				`);
          block.chunks.update.push(b`
					if ('value' in ${this.element_data_name}) {
						${this.var}.value = ${this.element_data_name}.value;
					}
				`);
        }
      }
      if (["button", "input", "keygen", "select", "textarea"].includes(this.node.name)) {
        block.chunks.mount.push(b`
				if (${this.var}.autofocus) ${this.var}.focus();
			`);
      }
    }
    add_dynamic_element_attributes(block) {
      if (this.attributes.length === 0)
        return;
      if (this.has_dynamic_attribute) {
        this.add_spread_attributes(block);
        return;
      }
      const static_attributes = [];
      this.attributes.forEach((attr) => {
        if (attr instanceof SpreadAttributeWrapper) {
          static_attributes.push({ type: "SpreadElement", argument: attr.node.expression.node });
        } else {
          const name2 = attr.property_name || attr.name;
          static_attributes.push(p`${name2}: ${attr.get_value(block)}`);
        }
      });
      const fn2 = this.node.namespace === namespaces.svg ? x`@set_svg_attributes` : this.node.is_dynamic_element ? x`@set_dynamic_element_data(${this.node.tag_expr.manipulate(block)})` : x`@set_attributes`;
      block.chunks.hydrate.push(b`${fn2}(${this.var}, {${static_attributes}});`);
    }
    add_transitions(block) {
      const { intro, outro } = this.node;
      if (!intro && !outro)
        return;
      if (intro === outro) {
        const name2 = block.get_unique_name(`${this.var.name}_transition`);
        const snippet = intro.expression ? intro.expression.manipulate(block) : x`{}`;
        block.add_variable(name2);
        const fn2 = this.renderer.reference(intro.name);
        const intro_block = b`
				@add_render_callback(() => {
					if (!#current) return;
					if (!${name2}) ${name2} = @create_bidirectional_transition(${this.var}, ${fn2}, ${snippet}, true);
					${name2}.run(1);
				});
			`;
        const outro_block = b`
				if (!${name2}) ${name2} = @create_bidirectional_transition(${this.var}, ${fn2}, ${snippet}, false);
				${name2}.run(0);
			`;
        if (intro.is_local) {
          block.chunks.intro.push(b`
					if (#local) {
						${intro_block}
					}
				`);
          block.chunks.outro.push(b`
					if (#local) {
						${outro_block}
					}
				`);
        } else {
          block.chunks.intro.push(intro_block);
          block.chunks.outro.push(outro_block);
        }
        block.chunks.destroy.push(b`if (detaching && ${name2}) ${name2}.end();`);
      } else {
        const intro_name = intro && block.get_unique_name(`${this.var.name}_intro`);
        const outro_name = outro && block.get_unique_name(`${this.var.name}_outro`);
        if (intro) {
          block.add_variable(intro_name);
          const snippet = intro.expression ? intro.expression.manipulate(block) : x`{}`;
          const fn2 = this.renderer.reference(intro.name);
          let intro_block;
          if (outro) {
            intro_block = b`
						@add_render_callback(() => {
							if (!#current) return;
							if (${outro_name}) ${outro_name}.end(1);
							${intro_name} = @create_in_transition(${this.var}, ${fn2}, ${snippet});
							${intro_name}.start();
						});
					`;
            block.chunks.outro.push(b`if (${intro_name}) ${intro_name}.invalidate();`);
          } else {
            intro_block = b`
						if (!${intro_name}) {
							@add_render_callback(() => {
								${intro_name} = @create_in_transition(${this.var}, ${fn2}, ${snippet});
								${intro_name}.start();
							});
						}
					`;
          }
          if (intro.is_local) {
            intro_block = b`
						if (#local) {
							${intro_block}
						}
					`;
          }
          block.chunks.intro.push(intro_block);
        }
        if (outro) {
          block.add_variable(outro_name);
          const snippet = outro.expression ? outro.expression.manipulate(block) : x`{}`;
          const fn2 = this.renderer.reference(outro.name);
          if (!intro) {
            block.chunks.intro.push(b`
						if (${outro_name}) ${outro_name}.end(1);
					`);
          }
          let outro_block = b`
					${outro_name} = @create_out_transition(${this.var}, ${fn2}, ${snippet});
				`;
          if (outro.is_local) {
            outro_block = b`
						if (#local) {
							${outro_block}
						}
					`;
          }
          block.chunks.outro.push(outro_block);
          block.chunks.destroy.push(b`if (detaching && ${outro_name}) ${outro_name}.end();`);
        }
      }
      if (intro && intro.expression && intro.expression.dependencies.size || outro && outro.expression && outro.expression.dependencies.size) {
        block.maintain_context = true;
      }
    }
    add_animation(block) {
      if (!this.node.animation)
        return;
      const { outro } = this.node;
      const rect = block.get_unique_name("rect");
      const stop_animation = block.get_unique_name("stop_animation");
      block.add_variable(rect);
      block.add_variable(stop_animation, x`@noop`);
      block.chunks.measure.push(b`
			${rect} = ${this.var}.getBoundingClientRect();
		`);
      if (block.type === CHILD_DYNAMIC_ELEMENT_BLOCK) {
        block.chunks.measure.push(b`return ${rect}`);
        block.chunks.restore_measurements.push(b`${rect} = #measurement;`);
      }
      block.chunks.fix.push(b`
			@fix_position(${this.var});
			${stop_animation}();
			${outro && b`@add_transform(${this.var}, ${rect});`}
		`);
      let params;
      if (this.node.animation.expression) {
        params = this.node.animation.expression.manipulate(block);
        if (this.node.animation.expression.dynamic_dependencies().length) {
          const params_var = block.get_unique_name("params");
          block.add_variable(params_var);
          block.chunks.measure.push(b`${params_var} = ${params};`);
          params = params_var;
        }
      } else {
        params = x`{}`;
      }
      const name2 = this.renderer.reference(this.node.animation.name);
      block.chunks.animate.push(b`
			${stop_animation}();
			${stop_animation} = @create_animation(${this.var}, ${rect}, ${name2}, ${params});
		`);
    }
    add_classes(block) {
      const has_spread = this.node.attributes.some((attr) => attr.is_spread);
      this.node.classes.forEach((class_directive) => {
        const { expression, name: name2 } = class_directive;
        let snippet;
        let dependencies;
        if (expression) {
          snippet = expression.manipulate(block);
          dependencies = expression.dependencies;
        } else {
          snippet = name2;
          dependencies = /* @__PURE__ */ new Set([name2]);
        }
        const updater = b`@toggle_class(${this.var}, "${name2}", ${snippet});`;
        block.chunks.hydrate.push(updater);
        if ((this.node.is_dynamic_element || has_spread) && this.has_dynamic_attribute) {
          block.chunks.update.push(updater);
        } else if (dependencies && dependencies.size > 0 || this.class_dependencies.length) {
          const all_dependencies = this.class_dependencies.concat(...dependencies);
          let condition = block.renderer.dirty(all_dependencies);
          if (block.has_outros) {
            condition = x`!#current || ${condition}`;
          }
          const any_dynamic_dependencies = all_dependencies.some((dep) => {
            const variable = this.renderer.component.var_lookup.get(dep);
            return !variable || is_dynamic(variable);
          });
          if (any_dynamic_dependencies) {
            block.chunks.update.push(b`
						if (${condition}) {
							${updater}
						}
					`);
          }
        }
      });
    }
    add_styles(block) {
      const has_spread = this.node.attributes.some((attr) => attr.is_spread);
      let style_changed_var;
      const maybe_create_style_changed_var = () => {
        if (!style_changed_var && this.dynamic_style_dependencies.size) {
          style_changed_var = block.get_unique_name("style_changed");
          const style_attr_dirty = block.renderer.dirty([...this.dynamic_style_dependencies]);
          block.chunks.update.push(b`const ${style_changed_var} = ${style_attr_dirty};`);
        }
      };
      this.node.styles.forEach((style_directive) => {
        const { name: name2, expression, important, should_cache: should_cache2 } = style_directive;
        const snippet = expression.manipulate(block);
        let cached_snippet;
        if (should_cache2) {
          cached_snippet = block.get_unique_name(`style_${name2.replace(regex_minus_signs, "_")}`);
          block.add_variable(cached_snippet, snippet);
        }
        const updater = b`@set_style(${this.var}, "${name2}", ${should_cache2 ? cached_snippet : snippet}, ${important ? 1 : null})`;
        block.chunks.hydrate.push(updater);
        const self_deps = expression.dynamic_dependencies();
        const all_deps = /* @__PURE__ */ new Set([
          ...self_deps,
          ...this.dynamic_style_dependencies
        ]);
        let condition = block.renderer.dirty([...all_deps]);
        if (has_spread) {
          if (should_cache2 && all_deps.size) {
            block.chunks.update.push(b`
						if (${condition}) {
							${cached_snippet} = ${snippet};
						}`);
          }
          block.chunks.update.push(updater);
        } else {
          if (all_deps.size === 0)
            return;
          if (should_cache2) {
            condition = x`${condition} && ${cached_snippet} !== (${cached_snippet} = ${snippet})`;
          }
          if (this.dynamic_style_dependencies.size > 0) {
            maybe_create_style_changed_var();
            condition = all_deps.size === this.dynamic_style_dependencies.size ? style_changed_var : x`${style_changed_var} || ${condition}`;
          }
          block.chunks.update.push(b`
					if (${condition}) {
						${updater}
					}
				`);
        }
      });
    }
    add_manual_style_scoping(block) {
      if (this.node.needs_manual_style_scoping) {
        const updater = b`@toggle_class(${this.var}, "${this.node.component.stylesheet.id}", true);`;
        block.chunks.hydrate.push(updater);
        block.chunks.update.push(updater);
      }
    }
  };
  var regex_backticks = /`/g;
  var regex_dollar_signs = /\$/g;
  function to_html(wrappers2, block, literal2, state, can_use_raw_text) {
    wrappers2.forEach((wrapper) => {
      if (wrapper instanceof TextWrapper) {
        if (wrapper.use_space())
          state.quasi.value.raw += " ";
        const parent = wrapper.node.parent;
        const raw = parent && (parent.name === "script" || parent.name === "style" || can_use_raw_text);
        state.quasi.value.raw += (raw ? wrapper.data : escape_html(wrapper.data)).replace(regex_backslashes, "\\\\").replace(regex_backticks, "\\`").replace(regex_dollar_signs, "\\$");
      } else if (wrapper instanceof MustacheTagWrapper || wrapper instanceof RawMustacheTagWrapper) {
        literal2.quasis.push(state.quasi);
        literal2.expressions.push(wrapper.node.expression.manipulate(block));
        state.quasi = {
          type: "TemplateElement",
          value: { raw: "" }
        };
      } else if (wrapper.node.name === "noscript")
        ;
      else {
        const nodeName = wrapper.node.name;
        state.quasi.value.raw += `<${nodeName}`;
        const is_empty_textarea = nodeName === "textarea" && wrapper.fragment.nodes.length === 0;
        wrapper.attributes.forEach((attr) => {
          if (is_empty_textarea && attr.node.name === "value") {
            return;
          }
          state.quasi.value.raw += ` ${fix_attribute_casing(attr.node.name)}="`;
          to_html_for_attr_value(attr, block, literal2, state);
          state.quasi.value.raw += '"';
        });
        if (!wrapper.void) {
          state.quasi.value.raw += ">";
          if (nodeName === "pre") {
            const first = wrapper.fragment.nodes[0];
            if (first && first.node.type === "Text" && regex_starts_with_newline.test(first.node.data)) {
              state.quasi.value.raw += "\n";
            }
          }
          if (is_empty_textarea) {
            const value_attribute = wrapper.attributes.find((attr) => attr.node.name === "value");
            if (value_attribute) {
              const first = value_attribute.node.chunks[0];
              if (first && first.type === "Text" && regex_starts_with_newline.test(first.data)) {
                state.quasi.value.raw += "\n";
              }
              to_html_for_attr_value(value_attribute, block, literal2, state);
            }
          }
          to_html(wrapper.fragment.nodes, block, literal2, state);
          state.quasi.value.raw += `</${nodeName}>`;
        } else {
          state.quasi.value.raw += "/>";
        }
      }
    });
  }
  function to_html_for_attr_value(attr, block, literal2, state) {
    attr.node.chunks.forEach((chunk) => {
      if (chunk.type === "Text") {
        state.quasi.value.raw += escape_html(chunk.data);
      } else {
        literal2.quasis.push(state.quasi);
        literal2.expressions.push(chunk.manipulate(block));
        state.quasi = {
          type: "TemplateElement",
          value: { raw: "" }
        };
      }
    });
  }
  var HeadWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.can_use_innerhtml = false;
      this.fragment = new FragmentWrapper(renderer, block, node2.children, this, strip_whitespace, next_sibling);
    }
    render(block, _parent_node, _parent_nodes) {
      let nodes;
      if (this.renderer.options.hydratable && this.fragment.nodes.length) {
        nodes = block.get_unique_name("head_nodes");
        block.chunks.claim.push(b`const ${nodes} = @head_selector('${this.node.id}', @_document.head);`);
      }
      this.fragment.render(block, x`@_document.head`, nodes);
      if (nodes && this.renderer.options.hydratable) {
        block.chunks.claim.push(b`${nodes}.forEach(@detach);`);
      }
    }
  };
  function is_else_if(node2) {
    return node2 && node2.children.length === 1 && node2.children[0].type === "IfBlock";
  }
  var IfBlockBranch = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.var = null;
      const { expression } = node2;
      const is_else = !expression;
      if (expression) {
        this.dependencies = expression.dynamic_dependencies();
        let should_cache2 = false;
        walk(expression.node, {
          enter(node3) {
            if (node3.type === "CallExpression" || node3.type === "NewExpression") {
              should_cache2 = true;
            }
          }
        });
        if (should_cache2) {
          this.condition = block.get_unique_name("show_if");
          this.snippet = expression.manipulate(block);
        } else {
          this.condition = expression.manipulate(block);
        }
      }
      add_const_tags_context(renderer, this.node.const_tags);
      this.block = block.child({
        comment: create_debugging_comment(node2, parent.renderer.component),
        name: parent.renderer.component.get_unique_name(is_else ? "create_else_block" : "create_if_block"),
        type: node2.expression ? "if" : "else"
      });
      this.fragment = new FragmentWrapper(renderer, this.block, node2.children, parent, strip_whitespace, next_sibling);
      this.is_dynamic = this.block.dependencies.size > 0;
      if (node2.const_tags.length > 0) {
        this.get_ctx_name = parent.renderer.component.get_unique_name(is_else ? "get_else_ctx" : "get_if_ctx");
      }
    }
  };
  var IfBlockWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.needs_update = false;
      this.var = { type: "Identifier", name: "if_block" };
      this.cannot_use_innerhtml();
      this.not_static_content();
      this.branches = [];
      const blocks = [];
      let is_dynamic2 = false;
      let has_intros = false;
      let has_outros = false;
      const create_branches = (node3) => {
        const branch = new IfBlockBranch(renderer, block, this, node3, strip_whitespace, next_sibling);
        this.branches.push(branch);
        blocks.push(branch.block);
        block.add_dependencies(node3.expression.dependencies);
        if (branch.block.dependencies.size > 0) {
          is_dynamic2 = true;
          block.add_dependencies(branch.block.dependencies);
        }
        if (branch.dependencies && branch.dependencies.length > 0) {
          this.needs_update = true;
        }
        if (branch.block.has_intros)
          has_intros = true;
        if (branch.block.has_outros)
          has_outros = true;
        if (is_else_if(node3.else)) {
          create_branches(node3.else.children[0]);
        } else if (node3.else) {
          const branch2 = new IfBlockBranch(renderer, block, this, node3.else, strip_whitespace, next_sibling);
          this.branches.push(branch2);
          blocks.push(branch2.block);
          if (branch2.block.dependencies.size > 0) {
            is_dynamic2 = true;
            block.add_dependencies(branch2.block.dependencies);
          }
          if (branch2.block.has_intros)
            has_intros = true;
          if (branch2.block.has_outros)
            has_outros = true;
        }
      };
      create_branches(this.node);
      blocks.forEach((block2) => {
        block2.has_update_method = is_dynamic2;
        block2.has_intro_method = has_intros;
        block2.has_outro_method = has_outros;
      });
      push_array$1(renderer.blocks, blocks);
    }
    render(block, parent_node, parent_nodes) {
      const name2 = this.var;
      const needs_anchor = this.next ? !this.next.is_dom_node() : !parent_node || !this.parent.is_dom_node();
      const anchor = needs_anchor ? block.get_unique_name(`${this.var.name}_anchor`) : this.next && this.next.var || "null";
      const has_else = !this.branches[this.branches.length - 1].condition;
      const if_exists_condition = has_else ? null : name2;
      const dynamic = this.branches[0].block.has_update_method;
      const has_intros = this.branches[0].block.has_intro_method;
      const has_outros = this.branches[0].block.has_outro_method;
      const has_transitions = has_intros || has_outros;
      this.branches.forEach((branch) => {
        if (branch.get_ctx_name) {
          this.renderer.blocks.push(b`
				function ${branch.get_ctx_name}(#ctx) {
					const child_ctx = #ctx.slice();
					${add_const_tags(block, branch.node.const_tags, "child_ctx")}
					return child_ctx;
				}
				`);
        }
      });
      const vars = { name: name2, anchor, if_exists_condition, has_else, has_transitions };
      const detaching = parent_node && !is_head(parent_node) ? null : "detaching";
      if (this.node.else) {
        this.branches.forEach((branch) => {
          if (branch.snippet)
            block.add_variable(branch.condition);
        });
        if (has_outros) {
          this.render_compound_with_outros(block, parent_node, parent_nodes, dynamic, vars, detaching);
          block.chunks.outro.push(b`@transition_out(${name2});`);
        } else {
          this.render_compound(block, parent_node, parent_nodes, dynamic, vars, detaching);
        }
      } else {
        this.render_simple(block, parent_node, parent_nodes, dynamic, vars, detaching);
        if (has_outros) {
          block.chunks.outro.push(b`@transition_out(${name2});`);
        }
      }
      if (if_exists_condition) {
        block.chunks.create.push(b`if (${if_exists_condition}) ${name2}.c();`);
      } else {
        block.chunks.create.push(b`${name2}.c();`);
      }
      if (parent_nodes && this.renderer.options.hydratable) {
        if (if_exists_condition) {
          block.chunks.claim.push(b`if (${if_exists_condition}) ${name2}.l(${parent_nodes});`);
        } else {
          block.chunks.claim.push(b`${name2}.l(${parent_nodes});`);
        }
      }
      if (has_intros || has_outros) {
        block.chunks.intro.push(b`@transition_in(${name2});`);
      }
      if (needs_anchor) {
        block.add_element(anchor, x`@empty()`, parent_nodes && x`@empty()`, parent_node);
      }
      this.branches.forEach((branch) => {
        branch.fragment.render(branch.block, null, x`#nodes`);
      });
    }
    render_compound(block, parent_node, _parent_nodes, dynamic, { name: name2, anchor, has_else, if_exists_condition, has_transitions }, detaching) {
      const select_block_type = this.renderer.component.get_unique_name("select_block_type");
      const current_block_type = block.get_unique_name("current_block_type");
      const need_select_block_ctx = this.branches.some((branch) => branch.get_ctx_name);
      const select_block_ctx = need_select_block_ctx ? block.get_unique_name("select_block_ctx") : null;
      const if_ctx = select_block_ctx ? x`${select_block_ctx}(#ctx, ${current_block_type})` : x`#ctx`;
      const get_block = has_else ? x`${current_block_type}(${if_ctx})` : x`${current_block_type} && ${current_block_type}(${if_ctx})`;
      if (this.needs_update) {
        block.chunks.init.push(b`
				function ${select_block_type}(#ctx, #dirty) {
					${this.branches.map(({ dependencies, condition, snippet }) => {
          return b`${snippet && dependencies.length > 0 ? b`if (${block.renderer.dirty(dependencies)}) ${condition} = null;` : null}`;
        })}
					${this.branches.map(({ condition, snippet, block: block2 }) => condition ? b`
								${snippet && b`if (${condition} == null) ${condition} = !!${snippet}`}
								if (${condition}) return ${block2.name};` : b`return ${block2.name};`)}
				}
			`);
      } else {
        block.chunks.init.push(b`
				function ${select_block_type}(#ctx, #dirty) {
					${this.branches.map(({ condition, snippet, block: block2 }) => condition ? b`if (${snippet || condition}) return ${block2.name};` : b`return ${block2.name};`)}
				}
			`);
      }
      if (need_select_block_ctx) {
        if (this.branches.every((branch) => branch.get_ctx_name)) {
          block.chunks.init.push(b`
					function ${select_block_ctx}(#ctx, #type) {
						${this.branches.map(({ condition, get_ctx_name, block: block2 }) => {
            return condition ? b`if (#type === ${block2.name}) return ${get_ctx_name}(#ctx);` : b`return ${get_ctx_name}(#ctx);`;
          }).filter(Boolean)}
					}
				`);
        } else {
          block.chunks.init.push(b`
					function ${select_block_ctx}(#ctx, #type) {
						${this.branches.map(({ get_ctx_name, block: block2 }) => {
            return get_ctx_name ? b`if (#type === ${block2.name}) return ${get_ctx_name}(#ctx);` : null;
          }).filter(Boolean)}
						return #ctx;
					}
				`);
        }
      }
      block.chunks.init.push(b`
			let ${current_block_type} = ${select_block_type}(#ctx, ${this.renderer.get_initial_dirty()});
			let ${name2} = ${get_block};
		`);
      const initial_mount_node = parent_node || "#target";
      const anchor_node = parent_node ? "null" : "#anchor";
      if (if_exists_condition) {
        block.chunks.mount.push(b`if (${if_exists_condition}) ${name2}.m(${initial_mount_node}, ${anchor_node});`);
      } else {
        block.chunks.mount.push(b`${name2}.m(${initial_mount_node}, ${anchor_node});`);
      }
      if (this.needs_update) {
        const update_mount_node = this.get_update_mount_node(anchor);
        const change_block = b`
				${if_exists_condition ? b`if (${if_exists_condition}) ${name2}.d(1)` : b`${name2}.d(1)`};
				${name2} = ${get_block};
				if (${name2}) {
					${name2}.c();
					${has_transitions && b`@transition_in(${name2}, 1);`}
					${name2}.m(${update_mount_node}, ${anchor});
				}
			`;
        if (dynamic) {
          block.chunks.update.push(b`
					if (${current_block_type} === (${current_block_type} = ${select_block_type}(#ctx, #dirty)) && ${name2}) {
						${name2}.p(${if_ctx}, #dirty);
					} else {
						${change_block}
					}
				`);
        } else {
          block.chunks.update.push(b`
					if (${current_block_type} !== (${current_block_type} = ${select_block_type}(#ctx, #dirty))) {
						${change_block}
					}
				`);
        }
      } else if (dynamic) {
        if (if_exists_condition) {
          block.chunks.update.push(b`if (${if_exists_condition}) ${name2}.p(${if_ctx}, #dirty);`);
        } else {
          block.chunks.update.push(b`${name2}.p(${if_ctx}, #dirty);`);
        }
      }
      if (if_exists_condition) {
        block.chunks.destroy.push(b`
				if (${if_exists_condition}) {
					${name2}.d(${detaching});
				}
			`);
      } else {
        block.chunks.destroy.push(b`
				${name2}.d(${detaching});
			`);
      }
    }
    // if any of the siblings have outros, we need to keep references to the blocks
    // (TODO does this only apply to bidi transitions?)
    render_compound_with_outros(block, parent_node, _parent_nodes, dynamic, { name: name2, anchor, has_else, has_transitions, if_exists_condition }, detaching) {
      const select_block_type = this.renderer.component.get_unique_name("select_block_type");
      const current_block_type_index = block.get_unique_name("current_block_type_index");
      const previous_block_index = block.get_unique_name("previous_block_index");
      const if_block_creators = block.get_unique_name("if_block_creators");
      const if_blocks = block.get_unique_name("if_blocks");
      const need_select_block_ctx = this.branches.some((branch) => branch.get_ctx_name);
      const select_block_ctx = need_select_block_ctx ? block.get_unique_name("select_block_ctx") : null;
      const if_ctx = select_block_ctx ? x`${select_block_ctx}(#ctx, ${current_block_type_index})` : x`#ctx`;
      const if_current_block_type_index = has_else ? (nodes) => nodes : (nodes) => b`if (~${current_block_type_index}) { ${nodes} }`;
      block.add_variable(current_block_type_index);
      block.add_variable(name2);
      block.chunks.init.push(b`
			const ${if_block_creators} = [
				${this.branches.map((branch) => branch.block.name)}
			];

			const ${if_blocks} = [];

			${this.needs_update ? b`
					function ${select_block_type}(#ctx, #dirty) {
						${this.branches.map(({ dependencies, condition, snippet }) => {
        return b`${snippet && dependencies.length > 0 ? b`if (${block.renderer.dirty(dependencies)}) ${condition} = null;` : null}`;
      })}
						${this.branches.map(({ condition, snippet }, i) => condition ? b`
								${snippet && b`if (${condition} == null) ${condition} = !!${snippet}`}
								if (${condition}) return ${i};` : b`return ${i};`)}
								${!has_else && b`return -1;`}
							}
						` : b`
					function ${select_block_type}(#ctx, #dirty) {
						${this.branches.map(({ condition, snippet }, i) => condition ? b`if (${snippet || condition}) return ${i};` : b`return ${i};`)}
						${!has_else && b`return -1;`}
					}
				`}
		`);
      if (need_select_block_ctx) {
        if (this.branches.every((branch) => branch.get_ctx_name)) {
          block.chunks.init.push(b`
					function ${select_block_ctx}(#ctx, #index) {
						${this.branches.map(({ condition, get_ctx_name }, i) => {
            return condition ? b`if (#index === ${i}) return ${get_ctx_name}(#ctx);` : b`return ${get_ctx_name}(#ctx);`;
          }).filter(Boolean)}
					}
				`);
        } else {
          block.chunks.init.push(b`
					function ${select_block_ctx}(#ctx, #index) {
						${this.branches.map(({ get_ctx_name }, i) => {
            return get_ctx_name ? b`if (#index === ${i}) return ${get_ctx_name}(#ctx);` : null;
          }).filter(Boolean)}
						return #ctx;
					}
				`);
        }
      }
      if (has_else) {
        block.chunks.init.push(b`
				${current_block_type_index} = ${select_block_type}(#ctx, ${this.renderer.get_initial_dirty()});
				${name2} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](${if_ctx});
			`);
      } else {
        block.chunks.init.push(b`
				if (~(${current_block_type_index} = ${select_block_type}(#ctx, ${this.renderer.get_initial_dirty()}))) {
					${name2} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](${if_ctx});
				}
			`);
      }
      const initial_mount_node = parent_node || "#target";
      const anchor_node = parent_node ? "null" : "#anchor";
      block.chunks.mount.push(if_current_block_type_index(b`${if_blocks}[${current_block_type_index}].m(${initial_mount_node}, ${anchor_node});`));
      if (this.needs_update) {
        const update_mount_node = this.get_update_mount_node(anchor);
        const destroy_old_block = b`
				@group_outros();
				@transition_out(${if_blocks}[${previous_block_index}], 1, 1, () => {
					${if_blocks}[${previous_block_index}] = null;
				});
				@check_outros();
			`;
        const create_new_block = b`
				${name2} = ${if_blocks}[${current_block_type_index}];
				if (!${name2}) {
					${name2} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](${if_ctx});
					${name2}.c();
				} else {
					${dynamic && b`${name2}.p(${if_ctx}, #dirty);`}
				}
				${has_transitions && b`@transition_in(${name2}, 1);`}
				${name2}.m(${update_mount_node}, ${anchor});
			`;
        const change_block = has_else ? b`
					${destroy_old_block}

					${create_new_block}
				` : b`
					if (${name2}) {
						${destroy_old_block}
					}

					if (~${current_block_type_index}) {
						${create_new_block}
					} else {
						${name2} = null;
					}
				`;
        block.chunks.update.push(b`
				let ${previous_block_index} = ${current_block_type_index};
				${current_block_type_index} = ${select_block_type}(#ctx, #dirty);
			`);
        if (dynamic) {
          block.chunks.update.push(b`
					if (${current_block_type_index} === ${previous_block_index}) {
						${if_current_block_type_index(b`${if_blocks}[${current_block_type_index}].p(${if_ctx}, #dirty);`)}
					} else {
						${change_block}
					}
				`);
        } else {
          block.chunks.update.push(b`
					if (${current_block_type_index} !== ${previous_block_index}) {
						${change_block}
					}
				`);
        }
      } else if (dynamic) {
        if (if_exists_condition) {
          block.chunks.update.push(b`if (${if_exists_condition}) ${name2}.p(${if_ctx}, #dirty);`);
        } else {
          block.chunks.update.push(b`${name2}.p(${if_ctx}, #dirty);`);
        }
      }
      block.chunks.destroy.push(if_current_block_type_index(b`${if_blocks}[${current_block_type_index}].d(${detaching});`));
    }
    render_simple(block, parent_node, _parent_nodes, dynamic, { name: name2, anchor, if_exists_condition, has_transitions }, detaching) {
      const branch = this.branches[0];
      const if_ctx = branch.get_ctx_name ? x`${branch.get_ctx_name}(#ctx)` : x`#ctx`;
      if (branch.snippet)
        block.add_variable(branch.condition, branch.snippet);
      block.chunks.init.push(b`
			let ${name2} = ${branch.condition} && ${branch.block.name}(${if_ctx});
		`);
      const initial_mount_node = parent_node || "#target";
      const anchor_node = parent_node ? "null" : "#anchor";
      block.chunks.mount.push(b`if (${name2}) ${name2}.m(${initial_mount_node}, ${anchor_node});`);
      if (branch.dependencies.length > 0) {
        const update_mount_node = this.get_update_mount_node(anchor);
        const enter = b`
				if (${name2}) {
					${dynamic && b`${name2}.p(${if_ctx}, #dirty);`}
					${has_transitions && b`if (${block.renderer.dirty(branch.dependencies)}) {
									@transition_in(${name2}, 1);
								}`}
				} else {
					${name2} = ${branch.block.name}(${if_ctx});
					${name2}.c();
					${has_transitions && b`@transition_in(${name2}, 1);`}
					${name2}.m(${update_mount_node}, ${anchor});
				}
			`;
        if (branch.snippet) {
          block.chunks.update.push(b`if (${block.renderer.dirty(branch.dependencies)}) ${branch.condition} = ${branch.snippet}`);
        }
        if (branch.block.has_outro_method) {
          block.chunks.update.push(b`
					if (${branch.condition}) {
						${enter}
					} else if (${name2}) {
						@group_outros();
						@transition_out(${name2}, 1, 1, () => {
							${name2} = null;
						});
						@check_outros();
					}
				`);
        } else {
          block.chunks.update.push(b`
					if (${branch.condition}) {
						${enter}
					} else if (${name2}) {
						${name2}.d(1);
						${name2} = null;
					}
				`);
        }
      } else if (dynamic) {
        block.chunks.update.push(b`
				if (${branch.condition}) ${name2}.p(${if_ctx}, #dirty);
			`);
      }
      if (if_exists_condition) {
        block.chunks.destroy.push(b`
				if (${if_exists_condition}) ${name2}.d(${detaching});
			`);
      } else {
        block.chunks.destroy.push(b`
				${name2}.d(${detaching});
			`);
      }
    }
  };
  var KeyBlockWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.var = { type: "Identifier", name: "key_block" };
      this.cannot_use_innerhtml();
      this.not_static_content();
      this.dependencies = node2.expression.dynamic_dependencies();
      if (this.dependencies.length) {
        block = block.child({
          comment: create_debugging_comment(node2, renderer.component),
          name: renderer.component.get_unique_name("create_key_block"),
          type: "key"
        });
        block.add_dependencies(node2.expression.dependencies);
        renderer.blocks.push(block);
      }
      this.block = block;
      this.fragment = new FragmentWrapper(renderer, this.block, node2.children, this, strip_whitespace, next_sibling);
    }
    render(block, parent_node, parent_nodes) {
      if (this.dependencies.length === 0) {
        this.render_static_key(block, parent_node, parent_nodes);
      } else {
        this.render_dynamic_key(block, parent_node, parent_nodes);
      }
    }
    render_static_key(_block, parent_node, parent_nodes) {
      this.fragment.render(this.block, parent_node, parent_nodes);
    }
    render_dynamic_key(block, parent_node, parent_nodes) {
      this.fragment.render(this.block, null, x`#nodes`);
      const has_transitions = !!(this.block.has_intro_method || this.block.has_outro_method);
      const dynamic = this.block.has_update_method;
      const previous_key = block.get_unique_name("previous_key");
      const snippet = this.node.expression.manipulate(block);
      block.add_variable(previous_key, snippet);
      const not_equal = this.renderer.component.component_options.immutable ? x`@not_equal` : x`@safe_not_equal`;
      const condition = x`${this.renderer.dirty(this.dependencies)} && ${not_equal}(${previous_key}, ${previous_key} = ${snippet})`;
      block.chunks.init.push(b`
			let ${this.var} = ${this.block.name}(#ctx);
		`);
      block.chunks.create.push(b`${this.var}.c();`);
      if (this.renderer.options.hydratable) {
        block.chunks.claim.push(b`${this.var}.l(${parent_nodes});`);
      }
      block.chunks.mount.push(b`${this.var}.m(${parent_node || "#target"}, ${parent_node ? "null" : "#anchor"});`);
      const anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);
      const body = b`
			${has_transitions ? b`
						@group_outros();
						@transition_out(${this.var}, 1, 1, @noop);
						@check_outros();
					` : b`${this.var}.d(1);`}
			${this.var} = ${this.block.name}(#ctx);
			${this.var}.c();
			${has_transitions && b`@transition_in(${this.var}, 1)`}
			${this.var}.m(${this.get_update_mount_node(anchor)}, ${anchor});
		`;
      if (dynamic) {
        block.chunks.update.push(b`
				if (${condition}) {
					${body}
				} else {
					${this.var}.p(#ctx, #dirty);
				}
			`);
      } else {
        block.chunks.update.push(b`
				if (${condition}) {
					${body}
				}
			`);
      }
      if (has_transitions) {
        block.chunks.intro.push(b`@transition_in(${this.var})`);
        block.chunks.outro.push(b`@transition_out(${this.var})`);
      }
      block.chunks.destroy.push(b`${this.var}.d(detaching)`);
    }
  };
  function get_slot_definition(block, scope, lets) {
    if (lets.length === 0)
      return { block, scope };
    const context_input = {
      type: "ObjectPattern",
      properties: lets.map((l) => ({
        type: "Property",
        kind: "init",
        key: l.name,
        value: l.value || l.name
      }))
    };
    const properties2 = [];
    const value_map = /* @__PURE__ */ new Map();
    lets.forEach((l) => {
      let value;
      if (l.names.length > 1) {
        const unique_name = block.get_unique_name(l.names.join("_")).name;
        value_map.set(l.value, unique_name);
        value = { type: "Identifier", name: unique_name };
      } else {
        value = l.value || l.name;
      }
      properties2.push({
        type: "Property",
        kind: "init",
        key: l.name,
        value
      });
    });
    const changes_input = {
      type: "ObjectPattern",
      properties: properties2
    };
    const names = /* @__PURE__ */ new Set();
    const names_lookup = /* @__PURE__ */ new Map();
    lets.forEach((l) => {
      l.names.forEach((name2) => {
        names.add(name2);
        if (value_map.has(l.value)) {
          names_lookup.set(name2, value_map.get(l.value));
        }
      });
    });
    const context = {
      type: "ObjectExpression",
      properties: Array.from(names).map((name2) => p`${block.renderer.context_lookup.get(name2).index}: ${name2}`)
    };
    const { context_lookup } = block.renderer;
    const changes = {
      type: "ParenthesizedExpression",
      get expression() {
        if (block.renderer.context_overflow) {
          const grouped = [];
          Array.from(names).forEach((name2) => {
            const i = context_lookup.get(name2).index.value;
            const g2 = Math.floor(i / 31);
            const lookup_name = names_lookup.has(name2) ? names_lookup.get(name2) : name2;
            if (!grouped[g2])
              grouped[g2] = [];
            grouped[g2].push({ name: lookup_name, n: i % 31 });
          });
          const elements = [];
          for (let g2 = 0; g2 < grouped.length; g2 += 1) {
            elements[g2] = grouped[g2] ? grouped[g2].map(({ name: name2, n: n2 }) => x`${name2} ? ${1 << n2} : 0`).reduce((lhs, rhs) => x`${lhs} | ${rhs}`) : x`0`;
          }
          return {
            type: "ArrayExpression",
            elements
          };
        }
        return Array.from(names).map((name2) => {
          const lookup_name = names_lookup.has(name2) ? names_lookup.get(name2) : name2;
          const i = context_lookup.get(name2).index.value;
          return x`${lookup_name} ? ${1 << i} : 0`;
        }).reduce((lhs, rhs) => x`${lhs} | ${rhs}`);
      }
    };
    return {
      block,
      scope,
      get_context: x`${context_input} => ${context}`,
      get_changes: x`${changes_input} => ${changes}`
    };
  }
  var SlotTemplateWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      const { scope, lets, const_tags, slot_template_name } = this.node;
      lets.forEach((l) => {
        extract_names(l.value || l.name).forEach((name2) => {
          renderer.add_to_context(name2, true);
        });
      });
      add_const_tags_context(renderer, const_tags);
      this.block = block.child({
        comment: create_debugging_comment(this.node, this.renderer.component),
        name: this.renderer.component.get_unique_name(`create_${sanitize(slot_template_name)}_slot`),
        type: "slot"
      });
      this.renderer.blocks.push(this.block);
      const seen = new Set(lets.map((l) => l.name.name));
      this.parent.node.lets.forEach((l) => {
        if (!seen.has(l.name.name))
          lets.push(l);
      });
      this.parent.set_slot(slot_template_name, get_slot_definition(this.block, scope, lets));
      this.fragment = new FragmentWrapper(renderer, this.block, node2.type === "SlotTemplate" ? node2.children : [node2], this, strip_whitespace, next_sibling);
      this.block.parent.add_dependencies(this.block.dependencies);
    }
    render() {
      this.fragment.render(this.block, null, x`#nodes`);
      if (this.node.const_tags.length > 0) {
        this.render_get_context();
      }
    }
    render_get_context() {
      const get_context2 = this.block.renderer.component.get_unique_name("get_context");
      this.block.renderer.blocks.push(b`
			function ${get_context2}(#ctx) {
				${add_const_tags(this.block, this.node.const_tags, "#ctx")}
			}
		`);
      this.block.chunks.declarations.push(b`${get_context2}(#ctx)`);
      if (this.block.has_update_method) {
        this.block.chunks.update.unshift(b`${get_context2}(#ctx)`);
      }
    }
  };
  function string_to_member_expression(name2) {
    const parts = name2.split(".");
    let node2 = {
      type: "Identifier",
      name: parts[0]
    };
    for (let i = 1; i < parts.length; i++) {
      node2 = {
        type: "MemberExpression",
        object: node2,
        property: { type: "Identifier", name: parts[i] }
      };
    }
    return node2;
  }
  var regex_invalid_variable_identifier_characters$3 = /[^a-zA-Z_$]/g;
  var InlineComponentWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.slots = /* @__PURE__ */ new Map();
      this.children = [];
      this.cannot_use_innerhtml();
      this.not_static_content();
      if (this.node.expression) {
        block.add_dependencies(this.node.expression.dependencies);
      }
      this.node.attributes.forEach((attr) => {
        block.add_dependencies(attr.dependencies);
      });
      this.node.bindings.forEach((binding) => {
        if (binding.is_contextual) {
          mark_each_block_bindings(this, binding);
        }
        block.add_dependencies(binding.expression.dependencies);
      });
      this.node.handlers.forEach((handler) => {
        if (handler.expression) {
          block.add_dependencies(handler.expression.dependencies);
        }
      });
      this.node.css_custom_properties.forEach((attr) => {
        block.add_dependencies(attr.dependencies);
      });
      this.var = {
        type: "Identifier",
        name: (this.node.name === "svelte:self" ? renderer.component.name.name : this.node.name === "svelte:component" ? "switch_instance" : sanitize(this.node.name)).toLowerCase()
      };
      if (this.node.children.length) {
        this.node.lets.forEach((l) => {
          extract_names(l.value || l.name).forEach((name2) => {
            renderer.add_to_context(name2, true);
          });
        });
        this.children = this.node.children.map((child) => new SlotTemplateWrapper(renderer, block, this, child, strip_whitespace, next_sibling));
      }
      block.add_outro();
    }
    set_slot(name2, slot_definition) {
      if (this.slots.has(name2)) {
        if (name2 === "default") {
          throw new Error('Found elements without slot attribute when using slot="default"');
        }
        throw new Error(`Duplicate slot name "${name2}" in <${this.node.name}>`);
      }
      this.slots.set(name2, slot_definition);
    }
    warn_if_reactive() {
      const { name: name2 } = this.node;
      const variable = this.renderer.component.var_lookup.get(name2);
      if (!variable) {
        return;
      }
      const ignores = extract_ignores_above_node(this.node);
      this.renderer.component.push_ignores(ignores);
      if (variable.reassigned || variable.export_name || variable.is_reactive_dependency) {
        this.renderer.component.warn(this.node, compiler_warnings.reactive_component(name2));
      }
      this.renderer.component.pop_ignores();
    }
    render(block, parent_node, parent_nodes) {
      this.warn_if_reactive();
      const { renderer } = this;
      const { component } = renderer;
      const name2 = this.var;
      block.add_variable(name2);
      const component_opts = x`{}`;
      const statements = [];
      const updates = [];
      this.children.forEach((child) => {
        this.renderer.add_to_context("$$scope", true);
        child.render(block, null, x`#nodes`);
      });
      let props;
      const name_changes = block.get_unique_name(`${name2.name}_changes`);
      const uses_spread = !!this.node.attributes.find((a) => a.is_spread);
      for (const slot of this.slots.keys()) {
        if (!this.slots.get(slot).block.has_content()) {
          this.renderer.remove_block(this.slots.get(slot).block);
          this.slots.delete(slot);
        }
      }
      const has_css_custom_properties = this.node.css_custom_properties.length > 0;
      const is_svg_namespace = this.node.namespace === namespaces.svg;
      const css_custom_properties_wrapper_element = is_svg_namespace ? "g" : "div";
      const css_custom_properties_wrapper = has_css_custom_properties ? block.get_unique_name(css_custom_properties_wrapper_element) : null;
      if (has_css_custom_properties) {
        block.add_variable(css_custom_properties_wrapper);
      }
      const initial_props = this.slots.size > 0 ? [
        p`$$slots: {
					${Array.from(this.slots).map(([name3, slot]) => {
          return p`${name3}: [${slot.block.name}, ${slot.get_context || null}, ${slot.get_changes || null}]`;
        })}
				}`,
        p`$$scope: {
					ctx: #ctx
				}`
      ] : [];
      const attribute_object = uses_spread ? x`{ ${initial_props} }` : x`{
				${this.node.attributes.map((attr) => p`${attr.name}: ${attr.get_value(block)}`)},
				${initial_props}
			}`;
      if (this.node.attributes.length || this.node.bindings.length || initial_props.length) {
        if (!uses_spread && this.node.bindings.length === 0) {
          component_opts.properties.push(p`props: ${attribute_object}`);
        } else {
          props = block.get_unique_name(`${name2.name}_props`);
          component_opts.properties.push(p`props: ${props}`);
        }
      }
      if (component.compile_options.dev) {
        component_opts.properties.push(p`$$inline: true`);
      }
      const fragment_dependencies = new Set(this.slots.size ? ["$$scope"] : []);
      this.slots.forEach((slot) => {
        slot.block.dependencies.forEach((name3) => {
          const is_let = slot.scope.is_let(name3);
          const variable = renderer.component.var_lookup.get(name3);
          if (is_let || is_dynamic(variable))
            fragment_dependencies.add(name3);
        });
      });
      const dynamic_attributes = this.node.attributes.filter((a) => a.get_dependencies().length > 0);
      if (!uses_spread && (dynamic_attributes.length > 0 || this.node.bindings.length > 0 || fragment_dependencies.size > 0)) {
        updates.push(b`const ${name_changes} = {};`);
      }
      if (this.node.attributes.length) {
        if (uses_spread) {
          const levels = block.get_unique_name(`${this.var.name}_spread_levels`);
          const initial_props2 = [];
          const changes = [];
          const all_dependencies = /* @__PURE__ */ new Set();
          this.node.attributes.forEach((attr) => {
            add_to_set(all_dependencies, attr.dependencies);
          });
          this.node.attributes.forEach((attr, i) => {
            const { name: name3, dependencies } = attr;
            const condition = dependencies.size > 0 && dependencies.size !== all_dependencies.size ? renderer.dirty(Array.from(dependencies)) : null;
            const unchanged = dependencies.size === 0;
            let change_object;
            if (attr.is_spread) {
              const value = attr.expression.manipulate(block);
              initial_props2.push(value);
              let value_object = value;
              if (attr.expression.node.type !== "ObjectExpression") {
                value_object = x`@get_spread_object(${value})`;
              }
              change_object = value_object;
            } else {
              const obj = x`{ ${name3}: ${attr.get_value(block)} }`;
              initial_props2.push(obj);
              change_object = obj;
            }
            changes.push(unchanged ? x`${levels}[${i}]` : condition ? x`${condition} && ${change_object}` : change_object);
          });
          block.chunks.init.push(b`
					const ${levels} = [
						${initial_props2}
					];
				`);
          statements.push(b`
					for (let #i = 0; #i < ${levels}.length; #i += 1) {
						${props} = @assign(${props}, ${levels}[#i]);
					}
				`);
          if (all_dependencies.size) {
            const condition = renderer.dirty(Array.from(all_dependencies));
            updates.push(b`
						const ${name_changes} = ${condition} ? @get_spread_update(${levels}, [
							${changes}
						]) : {}
					`);
          } else {
            updates.push(b`
						const ${name_changes} = {};
					`);
          }
        } else {
          dynamic_attributes.forEach((attribute) => {
            const dependencies = attribute.get_dependencies();
            if (dependencies.length > 0) {
              const condition = renderer.dirty(dependencies);
              updates.push(b`
							if (${condition}) ${name_changes}.${attribute.name} = ${attribute.get_value(block)};
						`);
            }
          });
        }
      }
      if (fragment_dependencies.size > 0) {
        updates.push(b`
				if (${renderer.dirty(Array.from(fragment_dependencies))}) {
					${name_changes}.$$scope = { dirty: #dirty, ctx: #ctx };
				}`);
      }
      const munged_bindings = this.node.bindings.map((binding) => {
        component.has_reactive_assignments = true;
        if (binding.name === "this") {
          return bind_this(component, block, new BindingWrapper(block, binding, this), this.var);
        }
        const id2 = component.get_unique_name(`${this.var.name}_${binding.name}_binding`);
        renderer.add_to_context(id2.name);
        const callee = renderer.reference(id2);
        const updating = block.get_unique_name(`updating_${binding.name}`);
        block.add_variable(updating);
        const snippet = binding.expression.manipulate(block);
        statements.push(b`
				if (${snippet} !== void 0) {
					${props}.${binding.name} = ${snippet};
				}`);
        updates.push(b`
				if (!${updating} && ${renderer.dirty(Array.from(binding.expression.dependencies))}) {
					${updating} = true;
					${name_changes}.${binding.name} = ${snippet};
					@add_flush_callback(() => ${updating} = false);
				}
			`);
        const contextual_dependencies = Array.from(binding.expression.contextual_dependencies);
        const dependencies = Array.from(binding.expression.dependencies);
        let lhs = binding.raw_expression;
        if (binding.is_contextual && binding.expression.node.type === "Identifier") {
          const { name: name3 } = binding.expression.node;
          const { object, property, snippet: snippet2 } = block.bindings.get(name3);
          lhs = snippet2;
          contextual_dependencies.push(object.name, property.name);
        }
        const params = [x`#value`];
        const args = [x`#value`];
        if (contextual_dependencies.length > 0) {
          contextual_dependencies.forEach((name3) => {
            params.push({
              type: "Identifier",
              name: name3
            });
            renderer.add_to_context(name3, true);
            args.push(renderer.reference(name3));
          });
          block.maintain_context = true;
        }
        block.chunks.init.push(b`
				function ${id2}(#value) {
					${callee}(${args});
				}
			`);
        let invalidate_binding = b`
				${lhs} = #value;
				${renderer.invalidate(dependencies[0])};
			`;
        if (binding.expression.node.type === "MemberExpression") {
          invalidate_binding = b`
					if ($$self.$$.not_equal(${lhs}, #value)) {
						${invalidate_binding}
					}
				`;
        }
        const body = b`
				function ${id2}(${params}) {
					${invalidate_binding}
				}
			`;
        component.partly_hoisted.push(body);
        return b`@binding_callbacks.push(() => @bind(${this.var}, '${binding.name}', ${id2}));`;
      });
      const munged_handlers = this.node.handlers.map((handler) => {
        const event_handler = new EventHandlerWrapper(handler, this);
        let snippet = event_handler.get_snippet(block);
        if (handler.modifiers.has("once"))
          snippet = x`@once(${snippet})`;
        return b`${name2}.$on("${handler.name}", ${snippet});`;
      });
      const mount_target = has_css_custom_properties ? css_custom_properties_wrapper : parent_node || "#target";
      const mount_anchor = has_css_custom_properties ? "null" : parent_node ? "null" : "#anchor";
      const to_claim = parent_nodes && this.renderer.options.hydratable;
      let claim_nodes = parent_nodes;
      if (this.node.name === "svelte:component") {
        const switch_value = block.get_unique_name("switch_value");
        const switch_props = block.get_unique_name("switch_props");
        const snippet = this.node.expression.manipulate(block);
        const dependencies = this.node.expression.dynamic_dependencies();
        if (has_css_custom_properties) {
          this.set_css_custom_properties(block, css_custom_properties_wrapper, css_custom_properties_wrapper_element, is_svg_namespace);
        }
        block.chunks.init.push(b`
				var ${switch_value} = ${snippet};

				function ${switch_props}(#ctx) {
					${(this.node.attributes.length > 0 || this.node.bindings.length > 0) && b`
					${props && b`let ${props} = ${attribute_object};`}`}
					${statements}
					return ${component_opts};
				}

				if (${switch_value}) {
					${name2} = @construct_svelte_component(${switch_value}, ${switch_props}(#ctx));

					${munged_bindings}
					${munged_handlers}
				}
			`);
        block.chunks.create.push(b`if (${name2}) @create_component(${name2}.$$.fragment);`);
        if (css_custom_properties_wrapper)
          this.create_css_custom_properties_wrapper_mount_chunk(block, parent_node, css_custom_properties_wrapper);
        block.chunks.mount.push(b`if (${name2}) @mount_component(${name2}, ${mount_target}, ${mount_anchor});`);
        if (to_claim) {
          if (css_custom_properties_wrapper)
            claim_nodes = this.create_css_custom_properties_wrapper_claim_chunk(block, claim_nodes, css_custom_properties_wrapper, css_custom_properties_wrapper_element, is_svg_namespace);
          block.chunks.claim.push(b`if (${name2}) @claim_component(${name2}.$$.fragment, ${claim_nodes});`);
        }
        if (updates.length) {
          block.chunks.update.push(b`
					${updates}
				`);
        }
        const tmp_anchor = this.get_or_create_anchor(block, parent_node, parent_nodes);
        const anchor = has_css_custom_properties ? "null" : tmp_anchor;
        const update_mount_node = has_css_custom_properties ? css_custom_properties_wrapper : this.get_update_mount_node(tmp_anchor);
        const update_insert = css_custom_properties_wrapper && (tmp_anchor.name !== "null" ? b`@insert(${tmp_anchor}.parentNode, ${css_custom_properties_wrapper}, ${tmp_anchor});` : b`@insert(${parent_node}, ${css_custom_properties_wrapper}, ${tmp_anchor});`);
        let update_condition = x`${switch_value} !== (${switch_value} = ${snippet})`;
        if (dependencies.length > 0) {
          update_condition = x`${block.renderer.dirty(dependencies)} && ${update_condition}`;
        }
        block.chunks.update.push(b`
				if (${update_condition}) {
					if (${name2}) {
						@group_outros();
						const old_component = ${name2};
						@transition_out(old_component.$$.fragment, 1, 0, () => {
							@destroy_component(old_component, 1);
							${has_css_custom_properties ? b`@detach(${update_mount_node})` : null}
						});
						@check_outros();
					}

					if (${switch_value}) {
						${update_insert}
						${name2} = @construct_svelte_component(${switch_value}, ${switch_props}(#ctx));

						${munged_bindings}
						${munged_handlers}

						@create_component(${name2}.$$.fragment);
						@transition_in(${name2}.$$.fragment, 1);
						@mount_component(${name2}, ${update_mount_node}, ${anchor});
					} else {
						${name2} = null;
					}
				} else if (${switch_value}) {
					${updates.length > 0 && b`${name2}.$set(${name_changes});`}
				}
			`);
        block.chunks.intro.push(b`
				if (${name2}) @transition_in(${name2}.$$.fragment, #local);
			`);
        block.chunks.outro.push(b`if (${name2}) @transition_out(${name2}.$$.fragment, #local);`);
        block.chunks.destroy.push(b`if (${name2}) @destroy_component(${name2}, ${parent_node ? null : "detaching"});`);
      } else {
        const expression = this.node.name === "svelte:self" ? component.name : this.renderer.reference(string_to_member_expression(this.node.name));
        block.chunks.init.push(b`
				${(this.node.attributes.length > 0 || this.node.bindings.length > 0) && b`
				${props && b`let ${props} = ${attribute_object};`}`}
				${statements}
				${name2} = new ${expression}(${component_opts});

				${munged_bindings}
				${munged_handlers}
			`);
        if (has_css_custom_properties) {
          this.set_css_custom_properties(block, css_custom_properties_wrapper, css_custom_properties_wrapper_element, is_svg_namespace);
        }
        block.chunks.create.push(b`@create_component(${name2}.$$.fragment);`);
        if (css_custom_properties_wrapper)
          this.create_css_custom_properties_wrapper_mount_chunk(block, parent_node, css_custom_properties_wrapper);
        block.chunks.mount.push(b`@mount_component(${name2}, ${mount_target}, ${mount_anchor});`);
        if (to_claim) {
          if (css_custom_properties_wrapper)
            claim_nodes = this.create_css_custom_properties_wrapper_claim_chunk(block, claim_nodes, css_custom_properties_wrapper, css_custom_properties_wrapper_element, is_svg_namespace);
          block.chunks.claim.push(b`@claim_component(${name2}.$$.fragment, ${claim_nodes});`);
        }
        block.chunks.intro.push(b`
				@transition_in(${name2}.$$.fragment, #local);
			`);
        if (updates.length) {
          block.chunks.update.push(b`
					${updates}
					${name2}.$set(${name_changes});
				`);
        }
        block.chunks.destroy.push(b`
				@destroy_component(${name2}, ${parent_node ? null : "detaching"});
			`);
        block.chunks.outro.push(b`@transition_out(${name2}.$$.fragment, #local);`);
      }
    }
    create_css_custom_properties_wrapper_mount_chunk(block, parent_node, css_custom_properties_wrapper) {
      if (parent_node) {
        block.chunks.mount.push(b`@append(${parent_node}, ${css_custom_properties_wrapper})`);
        if (is_head(parent_node)) {
          block.chunks.destroy.push(b`@detach(${css_custom_properties_wrapper});`);
        }
      } else {
        block.chunks.mount.push(b`@insert(#target, ${css_custom_properties_wrapper}, #anchor);`);
        block.chunks.destroy.push(b`if (detaching && ${this.var}) @detach(${css_custom_properties_wrapper});`);
      }
    }
    create_css_custom_properties_wrapper_claim_chunk(block, parent_nodes, css_custom_properties_wrapper, css_custom_properties_wrapper_element, is_svg_namespace) {
      const nodes = block.get_unique_name(`${css_custom_properties_wrapper.name}_nodes`);
      const claim_element = is_svg_namespace ? x`@claim_svg_element` : x`@claim_element`;
      block.chunks.claim.push(b`
			${css_custom_properties_wrapper} = ${claim_element}(${parent_nodes}, "${css_custom_properties_wrapper_element.toUpperCase()}", { style: true })
			var ${nodes} = @children(${css_custom_properties_wrapper});
		`);
      return nodes;
    }
    set_css_custom_properties(block, css_custom_properties_wrapper, css_custom_properties_wrapper_element, is_svg_namespace) {
      const element = is_svg_namespace ? x`@svg_element` : x`@element`;
      block.chunks.create.push(b`${css_custom_properties_wrapper} = ${element}("${css_custom_properties_wrapper_element}");`);
      if (!is_svg_namespace)
        block.chunks.hydrate.push(b`@set_style(${css_custom_properties_wrapper}, "display", "contents");`);
      this.node.css_custom_properties.forEach((attr) => {
        const dependencies = attr.get_dependencies();
        const should_cache2 = attr.should_cache();
        const last = should_cache2 && block.get_unique_name(`${attr.name.replace(regex_invalid_variable_identifier_characters$3, "_")}_last`);
        if (should_cache2)
          block.add_variable(last);
        const value = attr.get_value(block);
        const init = should_cache2 ? x`${last} = ${value}` : value;
        block.chunks.hydrate.push(b`@set_style(${css_custom_properties_wrapper}, "${attr.name}", ${init});`);
        if (dependencies.length > 0) {
          let condition = block.renderer.dirty(dependencies);
          if (should_cache2)
            condition = x`${condition} && (${last} !== (${last} = ${value}))`;
          block.chunks.update.push(b`
					if (${condition}) {
						@set_style(${css_custom_properties_wrapper}, "${attr.name}", ${should_cache2 ? last : value});
					}
				`);
        }
      });
    }
  };
  function get_slot_data(values, block = null) {
    return {
      type: "ObjectExpression",
      properties: Array.from(values.values()).filter((attribute) => attribute.name !== "name").map((attribute) => {
        if (attribute.is_spread) {
          const argument = get_spread_value(block, attribute);
          return {
            type: "SpreadElement",
            argument
          };
        }
        const value = get_value(block, attribute);
        return p`${attribute.name}: ${value}`;
      })
    };
  }
  function get_value(block, attribute) {
    if (attribute.is_true)
      return x`true`;
    if (attribute.chunks.length === 0)
      return x`""`;
    let value = attribute.chunks.map((chunk) => chunk.type === "Text" ? string_literal(chunk.data) : block ? chunk.manipulate(block) : chunk.node).reduce((lhs, rhs) => x`${lhs} + ${rhs}`);
    if (attribute.chunks.length > 1 && attribute.chunks[0].type !== "Text") {
      value = x`"" + ${value}`;
    }
    return value;
  }
  function get_spread_value(block, attribute) {
    return block ? attribute.expression.manipulate(block) : attribute.expression.node;
  }
  var SlotWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, strip_whitespace, next_sibling) {
      super(renderer, block, parent, node2);
      this.fallback = null;
      this.var = { type: "Identifier", name: "slot" };
      this.dependencies = /* @__PURE__ */ new Set(["$$scope"]);
      this.cannot_use_innerhtml();
      this.not_static_content();
      if (this.node.children.length) {
        this.fallback = block.child({
          comment: create_debugging_comment(this.node.children[0], this.renderer.component),
          name: this.renderer.component.get_unique_name("fallback_block"),
          type: "fallback"
        });
        renderer.blocks.push(this.fallback);
      }
      this.fragment = new FragmentWrapper(renderer, this.fallback, node2.children, this, strip_whitespace, next_sibling);
      this.node.values.forEach((attribute) => {
        add_to_set(this.dependencies, attribute.dependencies);
      });
      block.add_dependencies(this.dependencies);
      block.add_intro();
      block.add_outro();
    }
    render(block, parent_node, parent_nodes) {
      const { renderer } = this;
      const { slot_name } = this.node;
      if (this.slot_block) {
        block = this.slot_block;
      }
      let get_slot_changes_fn;
      let get_slot_spread_changes_fn;
      let get_slot_context_fn;
      if (this.node.values.size > 0) {
        get_slot_changes_fn = renderer.component.get_unique_name(`get_${sanitize(slot_name)}_slot_changes`);
        get_slot_context_fn = renderer.component.get_unique_name(`get_${sanitize(slot_name)}_slot_context`);
        const changes = x`{}`;
        const spread_dynamic_dependencies = /* @__PURE__ */ new Set();
        this.node.values.forEach((attribute) => {
          if (attribute.type === "Spread") {
            add_to_set(spread_dynamic_dependencies, Array.from(attribute.dependencies).filter((name2) => this.is_dependency_dynamic(name2)));
          } else {
            const dynamic_dependencies2 = Array.from(attribute.dependencies).filter((name2) => this.is_dependency_dynamic(name2));
            if (dynamic_dependencies2.length > 0) {
              changes.properties.push(p`${attribute.name}: ${renderer.dirty(dynamic_dependencies2)}`);
            }
          }
        });
        renderer.blocks.push(b`
				const ${get_slot_changes_fn} = #dirty => ${changes};
				const ${get_slot_context_fn} = #ctx => ${get_slot_data(this.node.values, block)};
			`);
        if (spread_dynamic_dependencies.size) {
          get_slot_spread_changes_fn = renderer.component.get_unique_name(`get_${sanitize(slot_name)}_slot_spread_changes`);
          renderer.blocks.push(b`
					const ${get_slot_spread_changes_fn} = #dirty => ${renderer.dirty(Array.from(spread_dynamic_dependencies))};
				`);
        }
      } else {
        get_slot_changes_fn = "null";
        get_slot_context_fn = "null";
      }
      let has_fallback = !!this.fallback;
      if (this.fallback) {
        this.fragment.render(this.fallback, null, x`#nodes`);
        has_fallback = this.fallback.has_content();
        if (!has_fallback) {
          renderer.remove_block(this.fallback);
        }
      }
      const slot = block.get_unique_name(`${sanitize(slot_name)}_slot`);
      const slot_definition = block.get_unique_name(`${sanitize(slot_name)}_slot_template`);
      const slot_or_fallback = has_fallback ? block.get_unique_name(`${sanitize(slot_name)}_slot_or_fallback`) : slot;
      block.chunks.init.push(b`
			const ${slot_definition} = ${renderer.reference("#slots")}.${slot_name};
			const ${slot} = @create_slot(${slot_definition}, #ctx, ${renderer.reference("$$scope")}, ${get_slot_context_fn});
			${has_fallback ? b`const ${slot_or_fallback} = ${slot} || ${this.fallback.name}(#ctx);` : null}
		`);
      block.chunks.create.push(b`if (${slot_or_fallback}) ${slot_or_fallback}.c();`);
      if (renderer.options.hydratable) {
        block.chunks.claim.push(b`if (${slot_or_fallback}) ${slot_or_fallback}.l(${parent_nodes});`);
      }
      block.chunks.mount.push(b`
			if (${slot_or_fallback}) {
				${slot_or_fallback}.m(${parent_node || "#target"}, ${parent_node ? "null" : "#anchor"});
			}
		`);
      block.chunks.intro.push(b`@transition_in(${slot_or_fallback}, #local);`);
      block.chunks.outro.push(b`@transition_out(${slot_or_fallback}, #local);`);
      const dynamic_dependencies = Array.from(this.dependencies).filter((name2) => this.is_dependency_dynamic(name2));
      const fallback_dynamic_dependencies = has_fallback ? Array.from(this.fallback.dependencies).filter((name2) => this.is_dependency_dynamic(name2)) : [];
      let condition = renderer.dirty(dynamic_dependencies);
      if (block.has_outros) {
        condition = x`!#current || ${condition}`;
      }
      const all_dirty_conditions = [
        get_slot_spread_changes_fn ? x`${get_slot_spread_changes_fn}(#dirty)` : null,
        block.has_outros ? x`!#current` : null
      ].filter(Boolean);
      const all_dirty_condition = all_dirty_conditions.length ? all_dirty_conditions.reduce((condition1, condition2) => x`${condition1} || ${condition2}`) : null;
      let slot_update;
      if (all_dirty_condition) {
        const dirty = x`${all_dirty_condition} ? @get_all_dirty_from_scope(${renderer.reference("$$scope")}) : @get_slot_changes(${slot_definition}, ${renderer.reference("$$scope")}, #dirty, ${get_slot_changes_fn})`;
        slot_update = b`
				if (${slot}.p && ${condition}) {
					@update_slot_base(${slot}, ${slot_definition}, #ctx, ${renderer.reference("$$scope")}, ${dirty}, ${get_slot_context_fn});
				}
			`;
      } else {
        slot_update = b`
				if (${slot}.p && ${condition}) {
					@update_slot(${slot}, ${slot_definition}, #ctx, ${renderer.reference("$$scope")}, #dirty, ${get_slot_changes_fn}, ${get_slot_context_fn});
				}
			`;
      }
      let fallback_condition = renderer.dirty(fallback_dynamic_dependencies);
      let fallback_dirty = x`#dirty`;
      if (block.has_outros) {
        fallback_condition = x`!#current || ${fallback_condition}`;
        fallback_dirty = x`!#current ? ${renderer.get_initial_dirty()} : ${fallback_dirty}`;
      }
      const fallback_update = has_fallback && fallback_dynamic_dependencies.length > 0 && b`
			if (${slot_or_fallback} && ${slot_or_fallback}.p && ${fallback_condition}) {
				${slot_or_fallback}.p(#ctx, ${fallback_dirty});
			}
		`;
      if (fallback_update) {
        block.chunks.update.push(b`
				if (${slot}) {
					${slot_update}
				} else {
					${fallback_update}
				}
			`);
      } else {
        block.chunks.update.push(b`
				if (${slot}) {
					${slot_update}
				}
			`);
      }
      block.chunks.destroy.push(b`if (${slot_or_fallback}) ${slot_or_fallback}.d(detaching);`);
    }
    is_dependency_dynamic(name2) {
      if (name2 === "$$scope")
        return true;
      if (this.node.scope.is_let(name2))
        return true;
      if (is_reserved_keyword(name2))
        return true;
      const variable = this.renderer.component.var_lookup.get(name2);
      return is_dynamic(variable);
    }
  };
  var CommentWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2) {
      super(renderer, block, parent, node2);
      this.var = x`c`;
    }
    render(block, parent_node, parent_nodes) {
      if (!this.renderer.options.preserveComments)
        return;
      const string_literal2 = {
        type: "Literal",
        value: this.node.data,
        loc: {
          start: this.renderer.locate(this.node.start),
          end: this.renderer.locate(this.node.end)
        }
      };
      block.add_element(this.var, x`@comment(${string_literal2})`, parent_nodes && x`@claim_comment(${parent_nodes}, ${string_literal2})`, parent_node);
    }
  };
  var TitleWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2, _strip_whitespace, _next_sibling) {
      super(renderer, block, parent, node2);
    }
    render(block, _parent_node, _parent_nodes) {
      const is_dynamic2 = !!this.node.children.find((node2) => node2.type !== "Text");
      if (is_dynamic2) {
        let value;
        const all_dependencies = /* @__PURE__ */ new Set();
        if (this.node.children.length === 1) {
          const { expression } = this.node.children[0];
          value = expression.manipulate(block);
          add_to_set(all_dependencies, expression.dependencies);
        } else {
          value = this.node.children.map((chunk) => {
            if (chunk.type === "Text")
              return string_literal(chunk.data);
            chunk.expression.dependencies.forEach((d2) => {
              all_dependencies.add(d2);
            });
            return chunk.expression.manipulate(block);
          }).reduce((lhs, rhs) => x`${lhs} + ${rhs}`);
          if (this.node.children[0].type !== "Text") {
            value = x`"" + ${value}`;
          }
        }
        const last = this.node.should_cache && block.get_unique_name("title_value");
        if (this.node.should_cache)
          block.add_variable(last);
        const init = this.node.should_cache ? x`${last} = ${value}` : value;
        block.chunks.init.push(b`@_document.title = ${init};`);
        const updater = b`@_document.title = ${this.node.should_cache ? last : value};`;
        if (all_dependencies.size) {
          const dependencies = Array.from(all_dependencies);
          let condition = block.renderer.dirty(dependencies);
          if (block.has_outros) {
            condition = x`!#current || ${condition}`;
          }
          if (this.node.should_cache) {
            condition = x`${condition} && (${last} !== (${last} = ${value}))`;
          }
          block.chunks.update.push(b`
					if (${condition}) {
						${updater}
					}`);
        }
      } else {
        const value = this.node.children.length > 0 ? string_literal(this.node.children[0].data) : x`""`;
        block.chunks.hydrate.push(b`@_document.title = ${value};`);
      }
    }
  };
  var associated_events$1 = {
    innerWidth: "resize",
    innerHeight: "resize",
    outerWidth: "resize",
    outerHeight: "resize",
    devicePixelRatio: "resize",
    scrollX: "scroll",
    scrollY: "scroll"
  };
  var properties = {
    scrollX: "pageXOffset",
    scrollY: "pageYOffset"
  };
  var readonly$1 = /* @__PURE__ */ new Set([
    "innerWidth",
    "innerHeight",
    "outerWidth",
    "outerHeight",
    "devicePixelRatio",
    "online"
  ]);
  var WindowWrapper = class extends Wrapper {
    constructor(renderer, block, parent, node2) {
      super(renderer, block, parent, node2);
      this.handlers = this.node.handlers.map((handler) => new EventHandlerWrapper(handler, this));
    }
    render(block, _parent_node, _parent_nodes) {
      const { renderer } = this;
      const { component } = renderer;
      const events2 = {};
      const bindings = {};
      add_actions(block, "@_window", this.node.actions);
      add_event_handlers(block, "@_window", this.handlers);
      this.node.bindings.forEach((binding) => {
        const binding_name = binding.expression.node.name;
        if (readonly$1.has(binding.name)) {
          renderer.readonly.add(binding_name);
        }
        bindings[binding.name] = binding_name;
        if (binding.name === "online")
          return;
        const associated_event = associated_events$1[binding.name];
        const property = properties[binding.name] || binding.name;
        if (!events2[associated_event])
          events2[associated_event] = [];
        events2[associated_event].push({
          name: binding_name,
          value: property
        });
      });
      const scrolling = block.get_unique_name("scrolling");
      const clear_scrolling = block.get_unique_name("clear_scrolling");
      const scrolling_timeout = block.get_unique_name("scrolling_timeout");
      Object.keys(events2).forEach((event) => {
        const id2 = block.get_unique_name(`onwindow${event}`);
        const props = events2[event];
        renderer.add_to_context(id2.name);
        const fn2 = renderer.reference(id2.name);
        if (event === "scroll") {
          block.add_variable(scrolling, x`false`);
          block.add_variable(clear_scrolling, x`() => { ${scrolling} = false }`);
          block.add_variable(scrolling_timeout);
          const condition = bindings.scrollX && bindings.scrollY ? x`"${bindings.scrollX}" in this._state || "${bindings.scrollY}" in this._state` : x`"${bindings.scrollX || bindings.scrollY}" in this._state`;
          const scrollX = bindings.scrollX && x`this._state.${bindings.scrollX}`;
          const scrollY = bindings.scrollY && x`this._state.${bindings.scrollY}`;
          renderer.meta_bindings.push(b`
					if (${condition}) {
						@_scrollTo(${scrollX || "@_window.pageXOffset"}, ${scrollY || "@_window.pageYOffset"});
					}
					${scrollX && `${scrollX} = @_window.pageXOffset;`}
					${scrollY && `${scrollY} = @_window.pageYOffset;`}
				`);
          block.event_listeners.push(x`
					@listen(@_window, "${event}", () => {
						${scrolling} = true;
						@_clearTimeout(${scrolling_timeout});
						${scrolling_timeout} = @_setTimeout(${clear_scrolling}, 100);
						${fn2}();
					})
				`);
        } else {
          props.forEach((prop) => {
            renderer.meta_bindings.push(b`this._state.${prop.name} = @_window.${prop.value};`);
          });
          block.event_listeners.push(x`
					@listen(@_window, "${event}", ${fn2})
				`);
        }
        component.partly_hoisted.push(b`
				function ${id2}() {
					${props.map((prop) => renderer.invalidate(prop.name, x`${prop.name} = @_window.${prop.value}`))}
				}
			`);
        block.chunks.init.push(b`
				@add_render_callback(${fn2});
			`);
        component.has_reactive_assignments = true;
      });
      if (bindings.scrollX || bindings.scrollY) {
        const condition = renderer.dirty([bindings.scrollX, bindings.scrollY].filter(Boolean));
        const scrollX = bindings.scrollX ? renderer.reference(bindings.scrollX) : x`@_window.pageXOffset`;
        const scrollY = bindings.scrollY ? renderer.reference(bindings.scrollY) : x`@_window.pageYOffset`;
        block.chunks.update.push(b`
				if (${condition} && !${scrolling}) {
					${scrolling} = true;
					@_clearTimeout(${scrolling_timeout});
					@_scrollTo(${scrollX}, ${scrollY});
					${scrolling_timeout} = @_setTimeout(${clear_scrolling}, 100);
				}
			`);
      }
      if (bindings.online) {
        const id2 = block.get_unique_name("onlinestatuschanged");
        const name2 = bindings.online;
        renderer.add_to_context(id2.name);
        const reference = renderer.reference(id2.name);
        component.partly_hoisted.push(b`
				function ${id2}() {
					${renderer.invalidate(name2, x`${name2} = @_navigator.onLine`)}
				}
			`);
        block.chunks.init.push(b`
				@add_render_callback(${reference});
			`);
        block.event_listeners.push(x`@listen(@_window, "online", ${reference})`, x`@listen(@_window, "offline", ${reference})`);
        component.has_reactive_assignments = true;
      }
    }
  };
  function link(next, prev) {
    prev.next = next;
    if (next)
      next.prev = prev;
  }
  var wrappers = {
    AwaitBlock: AwaitBlockWrapper,
    Body: BodyWrapper,
    Comment: CommentWrapper,
    DebugTag: DebugTagWrapper,
    Document: DocumentWrapper,
    EachBlock: EachBlockWrapper,
    Element: ElementWrapper,
    Head: HeadWrapper,
    IfBlock: IfBlockWrapper,
    InlineComponent: InlineComponentWrapper,
    KeyBlock: KeyBlockWrapper,
    MustacheTag: MustacheTagWrapper,
    Options: null,
    RawMustacheTag: RawMustacheTagWrapper,
    Slot: SlotWrapper,
    SlotTemplate: SlotTemplateWrapper,
    Text: TextWrapper,
    Title: TitleWrapper,
    Window: WindowWrapper
  };
  function trimmable_at(child, next_sibling) {
    return next_sibling.node.find_nearest(/EachBlock/) === child.find_nearest(/EachBlock/) || next_sibling.node.prev.type === "EachBlock";
  }
  var FragmentWrapper = class {
    constructor(renderer, block, nodes, parent, strip_whitespace, next_sibling) {
      this.nodes = [];
      let last_child;
      let window_wrapper;
      let i = nodes.length;
      while (i--) {
        const child = nodes[i];
        if (!child.type) {
          throw new Error("missing type");
        }
        if (!(child.type in wrappers)) {
          throw new Error(`TODO implement ${child.type}`);
        }
        if (child.type === "Window") {
          window_wrapper = new WindowWrapper(renderer, block, parent, child);
          continue;
        }
        if (child.type === "Text") {
          let { data: data2 } = child;
          if (this.nodes.length === 0) {
            const should_trim = next_sibling ? next_sibling.node.type === "Text" && regex_starts_with_whitespace.test(next_sibling.node.data) && trimmable_at(child, next_sibling) : !child.has_ancestor("EachBlock");
            if (should_trim && !child.keep_space()) {
              data2 = trim_end(data2);
              if (!data2)
                continue;
            }
          }
          if (last_child && last_child.node.type === "Text") {
            last_child.data = data2 + last_child.data;
            continue;
          }
          const wrapper = new TextWrapper(renderer, block, parent, child, data2);
          if (wrapper.skip)
            continue;
          this.nodes.unshift(wrapper);
          link(last_child, last_child = wrapper);
        } else {
          const Wrapper2 = wrappers[child.type];
          if (!Wrapper2 || child.type === "Comment" && !renderer.options.preserveComments)
            continue;
          const wrapper = new Wrapper2(renderer, block, parent, child, strip_whitespace, last_child || next_sibling);
          this.nodes.unshift(wrapper);
          link(last_child, last_child = wrapper);
        }
      }
      if (strip_whitespace) {
        const first = this.nodes[0];
        if (first && first.node.type === "Text" && !first.node.keep_space()) {
          first.data = trim_start(first.data);
          if (!first.data) {
            first.var = null;
            this.nodes.shift();
            if (this.nodes[0]) {
              this.nodes[0].prev = null;
            }
          }
        }
      }
      if (window_wrapper) {
        this.nodes.unshift(window_wrapper);
        link(last_child, window_wrapper);
      }
    }
    render(block, parent_node, parent_nodes) {
      for (let i = 0; i < this.nodes.length; i += 1) {
        this.nodes[i].render(block, parent_node, parent_nodes);
      }
    }
  };
  var Renderer = class {
    constructor(component, options) {
      this.context = [];
      this.initial_context = [];
      this.context_lookup = /* @__PURE__ */ new Map();
      this.blocks = [];
      this.readonly = /* @__PURE__ */ new Set();
      this.meta_bindings = [];
      this.binding_groups = /* @__PURE__ */ new Map();
      this.component = component;
      this.options = options;
      this.locate = component.locate;
      this.file_var = options.dev && this.component.get_unique_name("file");
      component.vars.filter((v2) => !v2.hoistable || v2.export_name && !v2.module).forEach((v2) => this.add_to_context(v2.name));
      component.vars.filter((v2) => v2.subscribable).forEach((v2) => this.add_to_context(`$${v2.name}`));
      reserved_keywords.forEach((keyword) => {
        if (component.var_lookup.has(keyword)) {
          this.add_to_context(keyword);
        }
      });
      if (component.slots.size > 0) {
        this.add_to_context("$$scope");
        this.add_to_context("#slots");
      }
      this.block = new Block({
        renderer: this,
        name: null,
        type: "component",
        key: null,
        bindings: /* @__PURE__ */ new Map(),
        dependencies: /* @__PURE__ */ new Set()
      });
      this.block.has_update_method = true;
      this.fragment = new FragmentWrapper(this, this.block, component.fragment.children, null, true, null);
      this.blocks.forEach((block) => {
        if (block instanceof Block) {
          block.assign_variable_names();
        }
      });
      this.block.assign_variable_names();
      this.fragment.render(this.block, null, x`#nodes`);
      this.context_overflow = this.context.length > 31;
      this.context.forEach((member) => {
        const { variable } = member;
        if (variable) {
          member.priority += 2;
          if (variable.mutated || variable.reassigned)
            member.priority += 4;
          if (variable.is_reactive_dependency && (variable.mutated || variable.reassigned))
            member.priority += 16;
          if (variable.export_name)
            member.priority += 32;
          if (variable.referenced)
            member.priority += 64;
        } else if (member.is_non_contextual) {
          member.priority += 8;
        }
        if (!member.is_contextual) {
          member.priority += 1;
        }
      });
      this.context.sort((a, b2) => b2.priority - a.priority || a.index.value - b2.index.value);
      this.context.forEach((member, i2) => member.index.value = i2);
      let i = this.context.length;
      while (i--) {
        const member = this.context[i];
        if (member.variable) {
          if (member.variable.referenced || member.variable.export_name || member.variable.is_reactive_dependency && (member.variable.mutated || member.variable.reassigned))
            break;
        } else if (member.is_non_contextual) {
          break;
        }
      }
      this.initial_context = this.context.slice(0, i + 1);
    }
    add_to_context(name2, contextual = false) {
      if (!this.context_lookup.has(name2)) {
        const member2 = {
          name: name2,
          index: { type: "Literal", value: this.context.length },
          is_contextual: false,
          is_non_contextual: false,
          variable: null,
          priority: 0
        };
        this.context_lookup.set(name2, member2);
        this.context.push(member2);
      }
      const member = this.context_lookup.get(name2);
      if (contextual) {
        member.is_contextual = true;
      } else {
        member.is_non_contextual = true;
        member.variable = this.component.var_lookup.get(name2);
      }
      return member;
    }
    invalidate(name2, value, main_execution_context = false) {
      return renderer_invalidate(this, name2, value, main_execution_context);
    }
    dirty(names, is_reactive_declaration = false) {
      const renderer = this;
      const dirty = is_reactive_declaration ? x`$$self.$$.dirty` : x`#dirty`;
      const get_bitmask = () => {
        const bitmask = [];
        names.forEach((name2) => {
          const member = renderer.context_lookup.get(name2);
          if (!member)
            return;
          if (member.index.value === -1) {
            throw new Error("unset index");
          }
          const value = member.index.value;
          const i = value / 31 | 0;
          const n2 = 1 << value % 31;
          if (!bitmask[i])
            bitmask[i] = { n: 0, names: [] };
          bitmask[i].n |= n2;
          bitmask[i].names.push(name2);
        });
        return bitmask;
      };
      return {
        // Using a ParenthesizedExpression allows us to create
        // the expression lazily. TODO would be better if
        // context was determined before rendering, so that
        // this indirection was unnecessary
        type: "ParenthesizedExpression",
        get expression() {
          const bitmask = get_bitmask();
          if (!bitmask.length) {
            return x`${dirty} & /*${names.join(", ")}*/ 0`;
          }
          if (renderer.context_overflow) {
            return bitmask.map((b2, i) => ({ b: b2, i })).filter(({ b: b2 }) => b2).map(({ b: b2, i }) => x`${dirty}[${i}] & /*${b2.names.join(", ")}*/ ${b2.n}`).reduce((lhs, rhs) => x`${lhs} | ${rhs}`);
          }
          return x`${dirty} & /*${names.join(", ")}*/ ${bitmask[0].n}`;
        }
      };
    }
    // NOTE: this method may be called before this.context_overflow / this.context is fully defined
    // therefore, they can only be evaluated later in a getter function
    get_initial_dirty() {
      const _this = this;
      const val = x`-1`;
      return {
        get type() {
          return _this.context_overflow ? "ArrayExpression" : "UnaryExpression";
        },
        // as [-1]
        get elements() {
          const elements = [];
          for (let i = 0; i < _this.context.length; i += 31) {
            elements.push(val);
          }
          return elements;
        },
        // as -1
        operator: val.operator,
        prefix: val.prefix,
        argument: val.argument
      };
    }
    reference(node2, ctx = "#ctx") {
      if (typeof node2 === "string") {
        node2 = { type: "Identifier", name: node2 };
      }
      const { name: name2, nodes } = flatten_reference(node2);
      const member = this.context_lookup.get(name2);
      if (this.component.var_lookup.get(name2)) {
        this.component.add_reference(node2, name2);
      }
      if (member !== void 0) {
        const replacement = x`/*${member.name}*/ ${ctx}[${member.index}]`;
        if (nodes[0].loc)
          replacement.object.loc = nodes[0].loc;
        nodes[0] = replacement;
        return nodes.reduce((lhs, rhs) => x`${lhs}.${rhs}`);
      }
      return node2;
    }
    remove_block(block) {
      this.blocks.splice(this.blocks.indexOf(block), 1);
    }
  };
  var charToInteger = {};
  var chars$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  for (i$1 = 0; i$1 < chars$1.length; i$1++) {
    charToInteger[chars$1.charCodeAt(i$1)] = i$1;
  }
  var i$1;
  function decode$1(mappings) {
    var decoded = [];
    var line = [];
    var segment = [
      0,
      0,
      0,
      0,
      0
    ];
    var j = 0;
    for (var i = 0, shift = 0, value = 0; i < mappings.length; i++) {
      var c2 = mappings.charCodeAt(i);
      if (c2 === 44) {
        segmentify(line, segment, j);
        j = 0;
      } else if (c2 === 59) {
        segmentify(line, segment, j);
        j = 0;
        decoded.push(line);
        line = [];
        segment[0] = 0;
      } else {
        var integer = charToInteger[c2];
        if (integer === void 0) {
          throw new Error("Invalid character (" + String.fromCharCode(c2) + ")");
        }
        var hasContinuationBit = integer & 32;
        integer &= 31;
        value += integer << shift;
        if (hasContinuationBit) {
          shift += 5;
        } else {
          var shouldNegate = value & 1;
          value >>>= 1;
          if (shouldNegate) {
            value = value === 0 ? -2147483648 : -value;
          }
          segment[j] += value;
          j++;
          value = shift = 0;
        }
      }
    }
    segmentify(line, segment, j);
    decoded.push(line);
    return decoded;
  }
  function segmentify(line, segment, j) {
    if (j === 4)
      line.push([segment[0], segment[1], segment[2], segment[3]]);
    else if (j === 5)
      line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);
    else if (j === 1)
      line.push([segment[0]]);
  }
  function encode$1(decoded) {
    var sourceFileIndex = 0;
    var sourceCodeLine = 0;
    var sourceCodeColumn = 0;
    var nameIndex = 0;
    var mappings = "";
    for (var i = 0; i < decoded.length; i++) {
      var line = decoded[i];
      if (i > 0)
        mappings += ";";
      if (line.length === 0)
        continue;
      var generatedCodeColumn = 0;
      var lineMappings = [];
      for (var _i2 = 0, line_1 = line; _i2 < line_1.length; _i2++) {
        var segment = line_1[_i2];
        var segmentMappings = encodeInteger$1(segment[0] - generatedCodeColumn);
        generatedCodeColumn = segment[0];
        if (segment.length > 1) {
          segmentMappings += encodeInteger$1(segment[1] - sourceFileIndex) + encodeInteger$1(segment[2] - sourceCodeLine) + encodeInteger$1(segment[3] - sourceCodeColumn);
          sourceFileIndex = segment[1];
          sourceCodeLine = segment[2];
          sourceCodeColumn = segment[3];
        }
        if (segment.length === 5) {
          segmentMappings += encodeInteger$1(segment[4] - nameIndex);
          nameIndex = segment[4];
        }
        lineMappings.push(segmentMappings);
      }
      mappings += lineMappings.join(",");
    }
    return mappings;
  }
  function encodeInteger$1(num) {
    var result = "";
    num = num < 0 ? -num << 1 | 1 : num << 1;
    do {
      var clamped = num & 31;
      num >>>= 5;
      if (num > 0) {
        clamped |= 32;
      }
      result += chars$1[clamped];
    } while (num > 0);
    return result;
  }
  function defaults(target, source) {
    return Object.assign(/* @__PURE__ */ Object.create(null), source, target);
  }
  function decodeSourceMap(map) {
    if (typeof map === "string") {
      map = JSON.parse(map);
    }
    let { mappings } = map;
    if (typeof mappings === "string") {
      mappings = decode$1(mappings);
    } else {
      mappings = mappings.map(cloneSegmentLine);
    }
    mappings.forEach(sortSegments);
    return defaults({ mappings }, map);
  }
  function cloneSegmentLine(segments) {
    return segments.slice();
  }
  function sortSegments(segments) {
    segments.sort(segmentComparator);
  }
  function segmentComparator(a, b2) {
    return a[0] - b2[0];
  }
  var OriginalSource = class {
    constructor(filename, content) {
      this.filename = filename;
      this.content = content;
    }
    /**
     * Tracing a `SourceMapSegment` ends when we get to an `OriginalSource`,
     * meaning this line/column location originated from this source file.
     */
    traceSegment(line, column, name2) {
      return { column, line, name: name2, source: this };
    }
  };
  var Url = typeof URL !== "undefined" ? URL : __require("url").URL;
  var parentRegex = /(^|\/)\.\.(?=\/|$)/g;
  function isAbsoluteUrl(url) {
    try {
      return !!new Url(url);
    } catch (e) {
      return false;
    }
  }
  function uniqInStr(str) {
    let uniq = String(Math.random()).slice(2);
    while (str.indexOf(uniq) > -1) {
      uniq += uniq;
    }
    return uniq;
  }
  function stripPathFilename(path) {
    path = normalizePath(path);
    const index = path.lastIndexOf("/");
    return path.slice(0, index + 1);
  }
  function normalizeProtocolRelative(input, absoluteBase) {
    const { href, protocol } = new Url(input, absoluteBase);
    return href.slice(protocol.length);
  }
  function normalizeSimplePath(input) {
    const { href } = new Url(input, "https://foo.com/");
    return href.slice("https://foo.com/".length);
  }
  function normalizePath(input) {
    if (!parentRegex.test(input))
      return normalizeSimplePath(input);
    let total = 1;
    while (parentRegex.test(input))
      total++;
    const uniqDirectory = `z${uniqInStr(input)}/`;
    const search = new RegExp(`^(?:${uniqDirectory})*`);
    const relative = normalizeSimplePath(uniqDirectory.repeat(total) + input);
    return relative.replace(search, (all) => {
      const leftover = all.length / uniqDirectory.length;
      return "../".repeat(total - leftover);
    });
  }
  function resolve(input, base) {
    if (!base)
      base = "";
    if (isAbsoluteUrl(input))
      return new Url(input).href;
    if (base) {
      if (isAbsoluteUrl(base))
        return new Url(input, base).href;
      if (base.startsWith("//"))
        return normalizeProtocolRelative(input, `https:${base}`);
    }
    if (input.startsWith("//"))
      return normalizeProtocolRelative(input, "https://foo.com/");
    if (input.startsWith("/"))
      return "/" + normalizeSimplePath(input);
    const joined = stripPathFilename(base) + input;
    if (base.startsWith("/"))
      return "/" + normalizeSimplePath(joined);
    const relative = normalizePath(joined);
    if ((base || input).startsWith(".") && !relative.startsWith(".")) {
      return "./" + relative;
    }
    return relative;
  }
  function resolve$1(input, base) {
    if (base && !base.endsWith("/"))
      base += "/";
    return resolve(input, base);
  }
  function binarySearch(haystack, needle, comparator) {
    let low = 0;
    let high = haystack.length - 1;
    while (low <= high) {
      const mid = low + (high - low >> 1);
      const cmp = comparator(haystack[mid], needle);
      if (cmp === 0) {
        return mid;
      }
      if (cmp < 0) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    return ~low;
  }
  var FastStringArray = class {
    constructor() {
      this.indexes = /* @__PURE__ */ Object.create(null);
      this.array = [];
    }
    /**
     * Puts `key` into the backing array, if it is not already present. Returns
     * the index of the `key` in the backing array.
     */
    put(key) {
      const { array, indexes } = this;
      let index = indexes[key];
      if (index === void 0) {
        index = indexes[key] = array.length;
        array.push(key);
      }
      return index;
    }
  };
  var SourceMapTree = class {
    constructor(map, sources) {
      this.map = map;
      this.sources = sources;
    }
    /**
     * traceMappings is only called on the root level SourceMapTree, and begins
     * the process of resolving each mapping in terms of the original source
     * files.
     */
    traceMappings() {
      const mappings = [];
      const names = new FastStringArray();
      const sources = new FastStringArray();
      const sourcesContent = [];
      const { mappings: rootMappings, names: rootNames } = this.map;
      for (let i = 0; i < rootMappings.length; i++) {
        const segments = rootMappings[i];
        const tracedSegments = [];
        for (let j = 0; j < segments.length; j++) {
          const segment = segments[j];
          if (segment.length === 1)
            continue;
          const source = this.sources[segment[1]];
          const traced = source.traceSegment(segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : "");
          if (!traced)
            continue;
          const { column, line, name: name2 } = traced;
          const { content, filename } = traced.source;
          const sourceIndex = sources.put(filename);
          sourcesContent[sourceIndex] = content;
          if (name2) {
            tracedSegments.push([segment[0], sourceIndex, line, column, names.put(name2)]);
          } else {
            tracedSegments.push([segment[0], sourceIndex, line, column]);
          }
        }
        mappings.push(tracedSegments);
      }
      return defaults({
        mappings,
        names: names.array,
        sources: sources.array,
        sourcesContent
      }, this.map);
    }
    /**
     * traceSegment is only called on children SourceMapTrees. It recurses down
     * into its own child SourceMapTrees, until we find the original source map.
     */
    traceSegment(line, column, name2) {
      const { mappings, names } = this.map;
      if (line >= mappings.length)
        return null;
      const segments = mappings[line];
      if (segments.length === 0)
        return null;
      let index = binarySearch(segments, column, segmentComparator$1);
      if (index === -1)
        return null;
      if (index < 0) {
        index = ~index - 1;
      }
      const segment = segments[index];
      if (segment.length === 1)
        return null;
      const source = this.sources[segment[1]];
      return source.traceSegment(
        segment[2],
        segment[3],
        // A child map's recorded name for this segment takes precedence over the
        // parent's mapped name. Imagine a mangler changing the name over, etc.
        segment.length === 5 ? names[segment[4]] : name2
      );
    }
  };
  function segmentComparator$1(segment, column) {
    return segment[0] - column;
  }
  function stripFilename(path) {
    if (!path)
      return "";
    const index = path.lastIndexOf("/");
    return path.slice(0, index + 1);
  }
  function asArray(value) {
    if (Array.isArray(value))
      return value;
    return [value];
  }
  function buildSourceMapTree(input, loader, relativeRoot) {
    const maps = asArray(input).map(decodeSourceMap);
    const map = maps.pop();
    for (let i = 0; i < maps.length; i++) {
      if (maps[i].sources.length !== 1) {
        throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
      }
    }
    const { sourceRoot, sources, sourcesContent } = map;
    const children = sources.map((sourceFile, i) => {
      const uri = resolve$1(sourceFile || "", resolve$1(sourceRoot || "", stripFilename(relativeRoot)));
      const sourceMap = loader(uri);
      if (!sourceMap) {
        const sourceContent = sourcesContent ? sourcesContent[i] : null;
        return new OriginalSource(uri, sourceContent);
      }
      return buildSourceMapTree(decodeSourceMap(sourceMap), loader, uri);
    });
    let tree = new SourceMapTree(map, children);
    for (let i = maps.length - 1; i >= 0; i--) {
      tree = new SourceMapTree(maps[i], [tree]);
    }
    return tree;
  }
  var SourceMap = class {
    constructor(map, excludeContent) {
      this.version = 3;
      if ("file" in map)
        this.file = map.file;
      this.mappings = encode$1(map.mappings);
      this.names = map.names;
      this.sources = map.sources;
      if (!excludeContent && "sourcesContent" in map)
        this.sourcesContent = map.sourcesContent;
    }
    toString() {
      return JSON.stringify(this);
    }
  };
  function remapping(input, loader, excludeContent) {
    const graph = buildSourceMapTree(input, loader);
    return new SourceMap(graph.traceMappings(), !!excludeContent);
  }
  function combine_sourcemaps(filename, sourcemap_list) {
    if (sourcemap_list.length == 0)
      return null;
    let map_idx = 1;
    const map = sourcemap_list.slice(0, -1).find((m) => m.sources.length !== 1) === void 0 ? remapping(
      // use array interface
      // only the oldest sourcemap can have multiple sources
      sourcemap_list,
      () => null,
      true
      // skip optional field `sourcesContent`
    ) : remapping(
      // use loader interface
      sourcemap_list[0],
      // last map
      function loader(sourcefile) {
        if (sourcefile === filename && sourcemap_list[map_idx]) {
          return sourcemap_list[map_idx++];
        } else {
          return null;
        }
      },
      true
    );
    if (!map.file)
      delete map.file;
    if (!map.sources.length)
      map.sources = [filename];
    return map;
  }
  var b64enc = typeof btoa == "function" ? btoa : (b2) => Buffer.from(b2).toString("base64");
  function apply_preprocessor_sourcemap(filename, svelte_map, preprocessor_map_input) {
    if (!svelte_map || !preprocessor_map_input)
      return svelte_map;
    const preprocessor_map = typeof preprocessor_map_input === "string" ? JSON.parse(preprocessor_map_input) : preprocessor_map_input;
    const result_map = combine_sourcemaps(filename, [
      svelte_map,
      preprocessor_map
    ]);
    Object.defineProperties(result_map, {
      toString: {
        enumerable: false,
        value: function toString2() {
          return JSON.stringify(this);
        }
      },
      toUrl: {
        enumerable: false,
        value: function toUrl() {
          return "data:application/json;charset=utf-8;base64," + b64enc(this.toString());
        }
      }
    });
    return result_map;
  }
  function check_enable_sourcemap(enable_sourcemap, namespace) {
    return typeof enable_sourcemap === "boolean" ? enable_sourcemap : enable_sourcemap[namespace];
  }
  function dom(component, options) {
    const { name: name2 } = component;
    const renderer = new Renderer(component, options);
    const { block } = renderer;
    block.has_outro_method = true;
    if (options.customElement)
      block.chunks.create.push(b`this.c = @noop;`);
    const body = [];
    if (renderer.file_var) {
      const file = component.file ? x`"${component.file}"` : x`undefined`;
      body.push(b`const ${renderer.file_var} = ${file};`);
    }
    const css = component.stylesheet.render(options.filename, !options.customElement);
    const css_sourcemap_enabled = check_enable_sourcemap(options.enableSourcemap, "css");
    if (css_sourcemap_enabled) {
      css.map = apply_preprocessor_sourcemap(options.filename, css.map, options.sourcemap);
    } else {
      css.map = null;
    }
    const styles = css_sourcemap_enabled && component.stylesheet.has_styles && options.dev ? `${css.code}
/*# sourceMappingURL=${css.map.toUrl()} */` : css.code;
    const add_css = component.get_unique_name("add_css");
    const should_add_css = !options.customElement && !!styles && options.css === "injected";
    if (should_add_css) {
      body.push(b`
			function ${add_css}(target) {
				@append_styles(target, "${component.stylesheet.id}", "${styles}");
			}
		`);
    }
    const blocks = renderer.blocks.slice().reverse();
    push_array$1(body, blocks.map((block2) => {
      if (block2.render)
        return block2.render();
      return block2;
    }));
    if (options.dev && !options.hydratable) {
      block.chunks.claim.push(b`throw new @_Error("options.hydrate only works if the component was compiled with the \`hydratable: true\` option");`);
    }
    const uses_slots = component.var_lookup.has("$$slots");
    let compute_slots;
    if (uses_slots) {
      compute_slots = b`
			const $$slots = @compute_slots(#slots);
		`;
    }
    const uses_props = component.var_lookup.has("$$props");
    const uses_rest = component.var_lookup.has("$$restProps");
    const $$props = uses_props || uses_rest ? "$$new_props" : "$$props";
    const props = component.vars.filter((variable) => !variable.module && variable.export_name);
    const writable_props = props.filter((variable) => variable.writable);
    const omit_props_names = component.get_unique_name("omit_props_names");
    const compute_rest = x`@compute_rest_props($$props, ${omit_props_names.name})`;
    const rest = uses_rest ? b`
		const ${omit_props_names.name} = [${props.map((prop) => `"${prop.export_name}"`).join(",")}];
		let $$restProps = ${compute_rest};
	` : null;
    const set = uses_props || uses_rest || writable_props.length > 0 || component.slots.size > 0 ? x`
			${$$props} => {
				${uses_props && renderer.invalidate("$$props", x`$$props = @assign(@assign({}, $$props), @exclude_internal_props($$new_props))`)}
				${uses_rest && !uses_props && x`$$props = @assign(@assign({}, $$props), @exclude_internal_props($$new_props))`}
				${uses_rest && renderer.invalidate("$$restProps", x`$$restProps = ${compute_rest}`)}
				${writable_props.map((prop) => b`if ('${prop.export_name}' in ${$$props}) ${renderer.invalidate(prop.name, x`${prop.name} = ${$$props}.${prop.export_name}`)};`)}
				${component.slots.size > 0 && b`if ('$$scope' in ${$$props}) ${renderer.invalidate("$$scope", x`$$scope = ${$$props}.$$scope`)};`}
			}
		` : null;
    const accessors = [];
    const not_equal = component.component_options.immutable ? x`@not_equal` : x`@safe_not_equal`;
    let missing_props_check;
    let inject_state;
    let capture_state;
    let props_inject;
    props.forEach((prop) => {
      const variable = component.var_lookup.get(prop.name);
      if (!variable.writable || component.component_options.accessors) {
        accessors.push({
          type: "MethodDefinition",
          kind: "get",
          key: { type: "Identifier", name: prop.export_name },
          value: x`function() {
					return ${prop.hoistable ? prop.name : x`this.$$.ctx[${renderer.context_lookup.get(prop.name).index}]`}
				}`
        });
      } else if (component.compile_options.dev) {
        accessors.push({
          type: "MethodDefinition",
          kind: "get",
          key: { type: "Identifier", name: prop.export_name },
          value: x`function() {
					throw new @_Error("<${component.tag}>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
				}`
        });
      }
      if (component.component_options.accessors) {
        if (variable.writable && !renderer.readonly.has(prop.name)) {
          accessors.push({
            type: "MethodDefinition",
            kind: "set",
            key: { type: "Identifier", name: prop.export_name },
            value: x`function(${prop.name}) {
						this.$$set({ ${prop.export_name}: ${prop.name} });
						@flush();
					}`
          });
        } else if (component.compile_options.dev) {
          accessors.push({
            type: "MethodDefinition",
            kind: "set",
            key: { type: "Identifier", name: prop.export_name },
            value: x`function(value) {
						throw new @_Error("<${component.tag}>: Cannot set read-only property '${prop.export_name}'");
					}`
          });
        }
      } else if (component.compile_options.dev) {
        accessors.push({
          type: "MethodDefinition",
          kind: "set",
          key: { type: "Identifier", name: prop.export_name },
          value: x`function(value) {
					throw new @_Error("<${component.tag}>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
				}`
        });
      }
    });
    component.instance_exports_from.forEach((exports_from) => {
      const import_declaration = Object.assign(Object.assign({}, exports_from), { type: "ImportDeclaration", specifiers: [], source: exports_from.source });
      component.imports.push(import_declaration);
      exports_from.specifiers.forEach((specifier) => {
        if (component.component_options.accessors) {
          const name3 = component.get_unique_name(specifier.exported.name);
          import_declaration.specifiers.push(Object.assign(Object.assign({}, specifier), { type: "ImportSpecifier", imported: specifier.local, local: name3 }));
          accessors.push({
            type: "MethodDefinition",
            kind: "get",
            key: { type: "Identifier", name: specifier.exported.name },
            value: x`function() {
						return ${name3}
					}`
          });
        } else if (component.compile_options.dev) {
          accessors.push({
            type: "MethodDefinition",
            kind: "get",
            key: { type: "Identifier", name: specifier.exported.name },
            value: x`function() {
						throw new @_Error("<${component.tag}>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
					}`
          });
        }
      });
    });
    if (component.compile_options.dev) {
      const expected = props.filter((prop) => prop.writable && !prop.initialised);
      if (expected.length) {
        missing_props_check = b`
				$$self.$$.on_mount.push(function () {
					${expected.map((prop) => b`
					if (${prop.name} === undefined && !(('${prop.export_name}' in $$props) || $$self.$$.bound[$$self.$$.props['${prop.export_name}']])) {
						@_console.warn("<${component.tag}> was created without expected prop '${prop.export_name}'");
					}`)}
				});
			`;
      }
      const capturable_vars = component.vars.filter((v2) => !v2.internal && !v2.global && !v2.name.startsWith("$$"));
      if (capturable_vars.length > 0) {
        capture_state = x`() => ({ ${capturable_vars.map((prop) => p`${prop.name}`)} })`;
      }
      const injectable_vars = capturable_vars.filter((v2) => !v2.module && v2.writable && v2.name[0] !== "$");
      if (uses_props || injectable_vars.length > 0) {
        inject_state = x`
				${$$props} => {
					${uses_props && renderer.invalidate("$$props", x`$$props = @assign(@assign({}, $$props), $$new_props)`)}
					${injectable_vars.map((v2) => b`if ('${v2.name}' in $$props) ${renderer.invalidate(v2.name, x`${v2.name} = ${$$props}.${v2.name}`)};`)}
				}
			`;
        props_inject = b`
				if ($$props && "$$inject" in $$props) {
					$$self.$inject_state($$props.$$inject);
				}
			`;
      }
    }
    if (component.ast.instance) {
      let scope = component.instance_scope;
      const map = component.instance_scope_map;
      let execution_context = null;
      walk(component.ast.instance.content, {
        enter(node2) {
          if (map.has(node2)) {
            scope = map.get(node2);
            if (!execution_context && !scope.block) {
              execution_context = node2;
            }
          } else if (!execution_context && node2.type === "LabeledStatement" && node2.label.name === "$") {
            execution_context = node2;
          }
        },
        leave(node2) {
          if (map.has(node2)) {
            scope = scope.parent;
          }
          if (execution_context === node2) {
            execution_context = null;
          }
          if (node2.type === "AssignmentExpression" || node2.type === "UpdateExpression") {
            const assignee = node2.type === "AssignmentExpression" ? node2.left : node2.argument;
            const names = new Set(extract_names(assignee));
            this.replace(invalidate(renderer, scope, node2, names, execution_context === null));
          }
        }
      });
      component.rewrite_props(({ name: name3, reassigned, export_name }) => {
        const value = `$${name3}`;
        const i = renderer.context_lookup.get(`$${name3}`).index;
        const insert = reassigned || export_name ? b`${`$$subscribe_${name3}`}()` : b`@component_subscribe($$self, ${name3}, #value => $$invalidate(${i}, ${value} = #value))`;
        if (component.compile_options.dev) {
          return b`@validate_store(${name3}, '${name3}'); ${insert}`;
        }
        return insert;
      });
    }
    const args = [x`$$self`];
    const has_invalidate = props.length > 0 || component.has_reactive_assignments || component.slots.size > 0 || capture_state || inject_state;
    if (has_invalidate) {
      args.push(x`$$props`, x`$$invalidate`);
    } else if (component.compile_options.dev) {
      args.push(x`$$props`);
    }
    const has_create_fragment = component.compile_options.dev || block.has_content();
    if (has_create_fragment) {
      body.push(b`
			function create_fragment(#ctx) {
				${block.get_contents()}
			}
		`);
    }
    body.push(b`
		${component.extract_javascript(component.ast.module)}

		${component.fully_hoisted}
	`);
    const filtered_props = props.filter((prop) => {
      const variable = component.var_lookup.get(prop.name);
      if (variable.hoistable)
        return false;
      return prop.name[0] !== "$";
    });
    const reactive_stores = component.vars.filter((variable) => variable.name[0] === "$" && variable.name[1] !== "$");
    const instance_javascript = component.extract_javascript(component.ast.instance);
    const has_definition = component.compile_options.dev || instance_javascript && instance_javascript.length > 0 || filtered_props.length > 0 || uses_props || component.partly_hoisted.length > 0 || renderer.initial_context.length > 0 || component.reactive_declarations.length > 0 || capture_state || inject_state;
    const definition = has_definition ? component.alias("instance") : { type: "Literal", value: null };
    const reactive_store_subscriptions = reactive_stores.filter((store) => {
      const variable = component.var_lookup.get(store.name.slice(1));
      return !variable || variable.hoistable;
    }).map(({ name: name3 }) => b`
			${component.compile_options.dev && b`@validate_store(${name3.slice(1)}, '${name3.slice(1)}');`}
			@component_subscribe($$self, ${name3.slice(1)}, $$value => $$invalidate(${renderer.context_lookup.get(name3).index}, ${name3} = $$value));
		`);
    const resubscribable_reactive_store_unsubscribers = reactive_stores.filter((store) => {
      const variable = component.var_lookup.get(store.name.slice(1));
      return variable && (variable.reassigned || variable.export_name);
    }).map(({ name: name3 }) => b`$$self.$$.on_destroy.push(() => ${`$$unsubscribe_${name3.slice(1)}`}());`);
    if (has_definition) {
      const reactive_declarations = [];
      const fixed_reactive_declarations = [];
      component.reactive_declarations.forEach((d2) => {
        const dependencies = Array.from(d2.dependencies);
        const uses_rest_or_props = !!dependencies.find((n2) => n2 === "$$props" || n2 === "$$restProps");
        const writable = dependencies.filter((n2) => {
          const variable = component.var_lookup.get(n2);
          return variable && (variable.export_name || variable.mutated || variable.reassigned);
        });
        const condition = !uses_rest_or_props && writable.length > 0 && renderer.dirty(writable, true);
        let statement = d2.node;
        if (condition)
          statement = b`if (${condition}) { ${statement} }`[0];
        if (condition || uses_rest_or_props) {
          reactive_declarations.push(statement);
        } else {
          fixed_reactive_declarations.push(statement);
        }
      });
      const injected = Array.from(component.injected_reactive_declaration_vars).filter((name3) => {
        const variable = component.var_lookup.get(name3);
        return variable.injected && variable.name[0] !== "$";
      });
      const reactive_store_declarations = reactive_stores.map((variable) => {
        const $name = variable.name;
        const name3 = $name.slice(1);
        const store = component.var_lookup.get(name3);
        if (store && (store.reassigned || store.export_name)) {
          const unsubscribe = `$$unsubscribe_${name3}`;
          const subscribe = `$$subscribe_${name3}`;
          const i = renderer.context_lookup.get($name).index;
          return b`let ${$name}, ${unsubscribe} = @noop, ${subscribe} = () => (${unsubscribe}(), ${unsubscribe} = @subscribe(${name3}, $$value => $$invalidate(${i}, ${$name} = $$value)), ${name3})`;
        }
        return b`let ${$name};`;
      });
      let unknown_props_check;
      if (component.compile_options.dev && !(uses_props || uses_rest)) {
        unknown_props_check = b`
				const writable_props = [${writable_props.map((prop) => x`'${prop.export_name}'`)}];
				@_Object.keys($$props).forEach(key => {
					if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') @_console.warn(\`<${component.tag}> was created with unknown prop '\${key}'\`);
				});
			`;
      }
      const return_value = {
        type: "ArrayExpression",
        elements: renderer.initial_context.map((member) => ({
          type: "Identifier",
          name: member.name
        }))
      };
      body.push(b`
			function ${definition}(${args}) {
				${injected.map((name3) => b`let ${name3};`)}

				${rest}

				${reactive_store_declarations}

				${reactive_store_subscriptions}

				${resubscribable_reactive_store_unsubscribers}

				${component.slots.size || component.compile_options.dev || uses_slots ? b`let { $$slots: #slots = {}, $$scope } = $$props;` : null}
				${component.compile_options.dev && b`@validate_slots('${component.tag}', #slots, [${[...component.slots.keys()].map((key) => `'${key}'`).join(",")}]);`}
				${compute_slots}

				${instance_javascript}

				${missing_props_check}
				${unknown_props_check}

				${renderer.binding_groups.size > 0 && b`const $$binding_groups = [${[...renderer.binding_groups.keys()].map((_2) => x`[]`)}];`}

				${component.partly_hoisted}

				${set && b`$$self.$$set = ${set};`}

				${capture_state && b`$$self.$capture_state = ${capture_state};`}

				${inject_state && b`$$self.$inject_state = ${inject_state};`}

				${/* before reactive declarations */
      props_inject}

				${reactive_declarations.length > 0 && b`
				$$self.$$.update = () => {
					${reactive_declarations}
				};
				`}

				${fixed_reactive_declarations}

				${uses_props && b`$$props = @exclude_internal_props($$props);`}

				return ${return_value};
			}
		`);
    }
    const prop_indexes = x`{
		${props.filter((v2) => v2.export_name && !v2.module).map((v2) => p`${v2.export_name}: ${renderer.context_lookup.get(v2.name).index}`)}
	}`;
    let dirty;
    if (renderer.context_overflow) {
      dirty = x`[]`;
      for (let i = 0; i < renderer.context.length; i += 31) {
        dirty.elements.push(x`-1`);
      }
    }
    if (options.customElement) {
      let init_props = x`@attribute_to_object(this.attributes)`;
      if (uses_slots) {
        init_props = x`{ ...${init_props}, $$slots: @get_custom_elements_slots(this) }`;
      }
      const declaration = b`
			class ${name2} extends @SvelteElement {
				constructor(options) {
					super();

					${css.code && b`
						const style = document.createElement('style');
						style.textContent = \`${css.code.replace(regex_backslashes, "\\\\")}${css_sourcemap_enabled && options.dev ? `
/*# sourceMappingURL=${css.map.toUrl()} */` : ""}\`
						this.shadowRoot.appendChild(style)`}

					@init(this, { target: this.shadowRoot, props: ${init_props}, customElement: true }, ${definition}, ${has_create_fragment ? "create_fragment" : "null"}, ${not_equal}, ${prop_indexes}, null, ${dirty});

					if (options) {
						if (options.target) {
							@insert(options.target, this, options.anchor);
						}

						${(props.length > 0 || uses_props || uses_rest) && b`
						if (options.props) {
							this.$set(options.props);
							@flush();
						}`}
					}
				}
			}
		`[0];
      if (props.length > 0) {
        declaration.body.body.push({
          type: "MethodDefinition",
          kind: "get",
          static: true,
          computed: false,
          key: { type: "Identifier", name: "observedAttributes" },
          value: x`function() {
					return [${props.map((prop) => x`"${prop.export_name}"`)}];
				}`
        });
      }
      push_array$1(declaration.body.body, accessors);
      body.push(declaration);
      if (component.tag != null) {
        body.push(b`
				@_customElements.define("${component.tag}", ${name2});
			`);
      }
    } else {
      const superclass = {
        type: "Identifier",
        name: options.dev ? "@SvelteComponentDev" : "@SvelteComponent"
      };
      const optional_parameters = [];
      if (should_add_css) {
        optional_parameters.push(add_css);
      } else if (dirty) {
        optional_parameters.push(x`null`);
      }
      if (dirty) {
        optional_parameters.push(dirty);
      }
      const declaration = b`
			class ${name2} extends ${superclass} {
				constructor(options) {
					super(${options.dev && "options"});
					@init(this, options, ${definition}, ${has_create_fragment ? "create_fragment" : "null"}, ${not_equal}, ${prop_indexes}, ${optional_parameters});
					${options.dev && b`@dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "${name2.name}", options, id: create_fragment.name });`}
				}
			}
		`[0];
      push_array$1(declaration.body.body, accessors);
      body.push(declaration);
    }
    return { js: flatten(body), css };
  }
  function get_const_tags$1(const_tags) {
    if (const_tags.length === 0)
      return null;
    return {
      type: "VariableDeclaration",
      kind: "let",
      declarations: const_tags.map((const_tag) => {
        const assignment = const_tag.node.expression;
        return {
          type: "VariableDeclarator",
          id: assignment.left,
          init: assignment.right
        };
      })
    };
  }
  function AwaitBlock$1(node2, renderer, options) {
    renderer.push();
    renderer.render(node2.pending.children, options);
    const pending = renderer.pop();
    renderer.push();
    renderer.render(node2.then.children, options);
    const then = renderer.pop();
    renderer.add_expression(x`
		function(__value) {
			if (@is_promise(__value)) {
				__value.then(null, @noop);
				return ${pending};
			}
			return (function(${node2.then_node ? node2.then_node : ""}) { ${get_const_tags$1(node2.then.const_tags)}; return ${then}; }(__value));
		}(${node2.expression.node})
	`);
  }
  function Comment$2(node2, renderer, options) {
    if (options.preserveComments) {
      renderer.add_string(`<!--${node2.data}-->`);
    }
  }
  function DebugTag$1(node2, renderer, options) {
    if (!options.dev)
      return;
    const filename = options.filename || null;
    const { line, column } = options.locate(node2.start + 1);
    const obj = x`{
		${node2.expressions.map((e) => p`${e.node.name}`)}
	}`;
    renderer.add_expression(x`@debug(${filename ? x`"${filename}"` : x`null`}, ${line - 1}, ${column}, ${obj})`);
  }
  function EachBlock$1(node2, renderer, options) {
    const args = [node2.context_node];
    if (node2.index)
      args.push({ type: "Identifier", name: node2.index });
    renderer.push();
    renderer.render(node2.children, options);
    const result = renderer.pop();
    const consequent = x`@each(${node2.expression.node}, (${args}) => { ${get_const_tags$1(node2.const_tags)}; return ${result} })`;
    if (node2.else) {
      renderer.push();
      renderer.render(node2.else.children, options);
      let alternate = renderer.pop();
      if (node2.else.const_tags.length > 0)
        alternate = x`(() => { ${get_const_tags$1(node2.else.const_tags)}; return ${alternate} })()`;
      renderer.add_expression(x`${node2.expression.node}.length ? ${consequent} : ${alternate}`);
    } else {
      renderer.add_expression(consequent);
    }
  }
  function get_class_attribute_value(attribute) {
    if (attribute.chunks.length === 2 && attribute.chunks[1].synthetic) {
      const value = attribute.chunks[0].node;
      return x`@escape(@null_to_empty(${value}), true) + "${attribute.chunks[1].data}"`;
    }
    return get_attribute_value(attribute);
  }
  function get_attribute_value(attribute) {
    if (attribute.chunks.length === 0)
      return x`""`;
    const is_textarea_value = attribute.parent.name.toLowerCase() === "textarea" && attribute.name.toLowerCase() === "value";
    return attribute.chunks.map((chunk) => {
      return chunk.type === "Text" ? string_literal(chunk.data.replace(regex_double_quotes, "&quot;")) : x`@escape(${chunk.node}, ${is_textarea_value ? "false" : "true"})`;
    }).reduce((lhs, rhs) => x`${lhs} + ${rhs}`);
  }
  function get_attribute_expression(attribute) {
    if (attribute.chunks.length === 1 && attribute.chunks[0].type === "Expression") {
      return attribute.chunks[0].node;
    }
    return get_attribute_value(attribute);
  }
  function remove_whitespace_children(children, next) {
    const nodes = [];
    let last_child;
    let i = children.length;
    while (i--) {
      const child = children[i];
      if (child.type === "Text") {
        if (child.should_skip()) {
          continue;
        }
        let { data: data2 } = child;
        if (nodes.length === 0) {
          const should_trim = next ? next.type === "Text" && regex_starts_with_whitespace.test(next.data) && trimmable_at$1(child, next) : !child.has_ancestor("EachBlock");
          if (should_trim && !child.keep_space()) {
            data2 = trim_end(data2);
            if (!data2)
              continue;
          }
        }
        if (last_child && last_child.type === "Text") {
          last_child.data = data2 + last_child.data;
          continue;
        }
        nodes.unshift(child);
        link(last_child, last_child = child);
      } else {
        nodes.unshift(child);
        link(last_child, last_child = child);
      }
    }
    const first = nodes[0];
    if (first && first.type === "Text" && !first.keep_space()) {
      first.data = trim_start(first.data);
      if (!first.data) {
        first.var = null;
        nodes.shift();
        if (nodes[0]) {
          nodes[0].prev = null;
        }
      }
    }
    return nodes;
  }
  function trimmable_at$1(child, next_sibling) {
    return next_sibling.find_nearest(/EachBlock/) === child.find_nearest(/EachBlock/) || next_sibling.prev.type === "EachBlock";
  }
  function Element$1(node2, renderer, options) {
    const children = remove_whitespace_children(node2.children, node2.next);
    let node_contents;
    const contenteditable = is_contenteditable(node2);
    if (node2.is_dynamic_element) {
      renderer.push();
    }
    renderer.add_string("<");
    add_tag_name();
    const class_expression_list = node2.classes.map((class_directive) => {
      const { expression, name: name2 } = class_directive;
      const snippet = expression ? expression.node : x`#ctx.${name2}`;
      return x`${snippet} ? "${name2}" : ""`;
    });
    if (node2.needs_manual_style_scoping) {
      class_expression_list.push(x`"${node2.component.stylesheet.id}"`);
    }
    const class_expression = class_expression_list.length > 0 && class_expression_list.reduce((lhs, rhs) => x`${lhs} + ' ' + ${rhs}`);
    const style_expression_list = node2.styles.map((style_directive) => {
      let { name: name2, important, expression: { node: expression } } = style_directive;
      if (important) {
        expression = x`${expression} + ' !important'`;
      }
      return p`"${name2}": ${expression}`;
    });
    const style_expression = style_expression_list.length > 0 && x`{ ${style_expression_list} }`;
    if (node2.attributes.some((attr) => attr.is_spread)) {
      const args = [];
      node2.attributes.forEach((attribute) => {
        if (attribute.is_spread) {
          args.push(x`@escape_object(${attribute.expression.node})`);
        } else {
          const attr_name = node2.namespace === namespaces.foreign ? attribute.name : fix_attribute_casing(attribute.name);
          const name2 = attribute.name.toLowerCase();
          if (name2 === "value" && node2.name.toLowerCase() === "textarea") {
            node_contents = get_attribute_value(attribute);
          } else if (attribute.is_true) {
            args.push(x`{ ${attr_name}: true }`);
          } else if (boolean_attributes.has(name2) && attribute.chunks.length === 1 && attribute.chunks[0].type !== "Text") {
            args.push(x`{ ${attr_name}: ${attribute.chunks[0].node} || null }`);
          } else if (attribute.chunks.length === 1 && attribute.chunks[0].type !== "Text") {
            const snippet = attribute.chunks[0].node;
            args.push(x`{ ${attr_name}: @escape_attribute_value(${snippet}) }`);
          } else {
            args.push(x`{ ${attr_name}: ${get_attribute_value(attribute)} }`);
          }
        }
      });
      renderer.add_expression(x`@spread([${args}], { classes: ${class_expression}, styles: ${style_expression} })`);
    } else {
      let add_class_attribute = !!class_expression;
      let add_style_attribute = !!style_expression;
      node2.attributes.forEach((attribute) => {
        const name2 = attribute.name.toLowerCase();
        const attr_name = node2.namespace === namespaces.foreign ? attribute.name : fix_attribute_casing(attribute.name);
        if (name2 === "value" && node2.name.toLowerCase() === "textarea") {
          node_contents = get_attribute_value(attribute);
        } else if (attribute.is_true) {
          renderer.add_string(` ${attr_name}`);
        } else if (boolean_attributes.has(name2) && attribute.chunks.length === 1 && attribute.chunks[0].type !== "Text") {
          renderer.add_string(" ");
          renderer.add_expression(x`${attribute.chunks[0].node} ? "${attr_name}" : ""`);
        } else if (name2 === "class" && class_expression) {
          add_class_attribute = false;
          renderer.add_string(` ${attr_name}="`);
          renderer.add_expression(x`[${get_class_attribute_value(attribute)}, ${class_expression}].join(' ').trim()`);
          renderer.add_string('"');
        } else if (name2 === "style" && style_expression) {
          add_style_attribute = false;
          renderer.add_expression(x`@add_styles(@merge_ssr_styles(${get_attribute_value(attribute)}, ${style_expression}))`);
        } else if (attribute.chunks.length === 1 && attribute.chunks[0].type !== "Text") {
          const snippet = attribute.chunks[0].node;
          renderer.add_expression(x`@add_attribute("${attr_name}", ${snippet}, ${boolean_attributes.has(name2) ? 1 : 0})`);
        } else {
          renderer.add_string(` ${attr_name}="`);
          renderer.add_expression((name2 === "class" ? get_class_attribute_value : get_attribute_value)(attribute));
          renderer.add_string('"');
        }
      });
      if (add_class_attribute) {
        renderer.add_expression(x`@add_classes((${class_expression}).trim())`);
      }
      if (add_style_attribute) {
        renderer.add_expression(x`@add_styles(${style_expression})`);
      }
    }
    node2.bindings.forEach((binding) => {
      const { name: name2, expression } = binding;
      if (binding.is_readonly) {
        return;
      }
      if (name2 === "group") {
        const value_attribute = node2.attributes.find(({ name: name3 }) => name3 === "value");
        if (value_attribute) {
          const value = get_attribute_expression(value_attribute);
          const type = node2.get_static_attribute_value("type");
          const bound2 = expression.node;
          const condition = type === "checkbox" ? x`~${bound2}.indexOf(${value})` : x`${value} === ${bound2}`;
          renderer.add_expression(x`${condition} ? @add_attribute("checked", true, 1) : ""`);
        }
      } else if (contenteditable && is_name_contenteditable(name2)) {
        node_contents = expression.node;
      } else if (binding.name === "value" && node2.name === "textarea") {
        const snippet = expression.node;
        node_contents = x`${snippet} || ""`;
      } else if (binding.name === "value" && node2.name === "select")
        ;
      else {
        const snippet = expression.node;
        renderer.add_expression(x`@add_attribute("${name2}", ${snippet}, ${boolean_attributes.has(name2) ? 1 : 0})`);
      }
    });
    renderer.add_string(">");
    if (node_contents !== void 0) {
      if (contenteditable) {
        renderer.push();
        renderer.render(children, options);
        const result = renderer.pop();
        renderer.add_expression(x`($$value => $$value === void 0 ? ${result} : $$value)(${node_contents})`);
      } else {
        if (node2.name === "textarea") {
          const value_attribute = node2.attributes.find(({ name: name2 }) => name2 === "value");
          if (value_attribute) {
            const first = value_attribute.chunks[0];
            if (first && first.type === "Text" && regex_starts_with_newline.test(first.data)) {
              renderer.add_string("\n");
            }
          }
        }
        renderer.add_expression(node_contents);
      }
      add_close_tag();
    } else {
      if (node2.name === "pre") {
        const first = children[0];
        if (first && first.type === "Text" && regex_starts_with_newline.test(first.data)) {
          renderer.add_string("\n");
        }
      }
      if (node2.is_dynamic_element)
        renderer.push();
      renderer.render(children, options);
      if (node2.is_dynamic_element) {
        const children2 = renderer.pop();
        renderer.add_expression(x`@is_void(#tag) ? '' : ${children2}`);
      }
      add_close_tag();
    }
    if (node2.is_dynamic_element) {
      let content = renderer.pop();
      if (options.dev && node2.children.length > 0)
        content = x`(() => { @validate_void_dynamic_element(#tag); return ${content}; })()`;
      renderer.add_expression(x`((#tag) => {
			${options.dev && x`@validate_dynamic_element(#tag)`}
			return #tag ? ${content} : '';
		})(${node2.tag_expr.node})`);
    }
    function add_close_tag() {
      if (node2.tag_expr.node.type === "Literal") {
        if (!is_void(node2.tag_expr.node.value)) {
          renderer.add_string("</");
          add_tag_name();
          renderer.add_string(">");
        }
        return;
      }
      renderer.add_expression(x`@is_void(#tag) ? '' : \`</\${#tag}>\``);
    }
    function add_tag_name() {
      if (node2.tag_expr.node.type === "Literal") {
        renderer.add_string(node2.tag_expr.node.value);
      } else {
        renderer.add_expression(node2.tag_expr.node);
      }
    }
  }
  function Head$1(node2, renderer, options) {
    const head_options = Object.assign(Object.assign({}, options), { head_id: node2.id });
    renderer.push();
    renderer.render(node2.children, head_options);
    const result = renderer.pop();
    let expression = result;
    if (options.hydratable) {
      const start_comment = `HEAD_${node2.id}_START`;
      const end_comment = `HEAD_${node2.id}_END`;
      expression = x`'<!-- ${start_comment} -->' + ${expression} + '<!-- ${end_comment} -->'`;
    }
    renderer.add_expression(x`$$result.head += ${expression}, ""`);
  }
  function HtmlTag(node2, renderer, options) {
    if (options.hydratable)
      renderer.add_string("<!-- HTML_TAG_START -->");
    renderer.add_expression(node2.expression.node);
    if (options.hydratable)
      renderer.add_string("<!-- HTML_TAG_END -->");
  }
  function IfBlock$1(node2, renderer, options) {
    const condition = node2.expression.node;
    renderer.push();
    renderer.render(node2.children, options);
    let consequent = renderer.pop();
    if (node2.const_tags.length > 0)
      consequent = x`(() => { ${get_const_tags$1(node2.const_tags)}; return ${consequent} })()`;
    renderer.push();
    if (node2.else)
      renderer.render(node2.else.children, options);
    let alternate = renderer.pop();
    if (node2.else && node2.else.const_tags.length > 0)
      alternate = x`(() => { ${get_const_tags$1(node2.else.const_tags)}; return ${alternate} })()`;
    renderer.add_expression(x`${condition} ? ${consequent} : ${alternate}`);
  }
  function get_prop_value(attribute) {
    if (attribute.is_true)
      return x`true`;
    if (attribute.chunks.length === 0)
      return x`''`;
    return attribute.chunks.map((chunk) => {
      if (chunk.type === "Text")
        return string_literal(chunk.data);
      return chunk.node;
    }).reduce((lhs, rhs) => x`${lhs} + ${rhs}`);
  }
  function InlineComponent$1(node2, renderer, options) {
    const binding_props = [];
    const binding_fns = [];
    node2.bindings.forEach((binding) => {
      renderer.has_bindings = true;
      const snippet = binding.expression.node;
      binding_props.push(p`${binding.name}: ${snippet}`);
      binding_fns.push(p`${binding.name}: $$value => { ${snippet} = $$value; $$settled = false }`);
    });
    const uses_spread = node2.attributes.find((attr) => attr.is_spread);
    let props;
    if (uses_spread) {
      props = x`@_Object.assign({}, ${node2.attributes.map((attribute) => {
        if (attribute.is_spread) {
          return attribute.expression.node;
        } else {
          return x`{ ${attribute.name}: ${get_prop_value(attribute)} }`;
        }
      }).concat(binding_props.map((p2) => x`{ ${p2} }`))})`;
    } else {
      props = x`{
			${node2.attributes.map((attribute) => p`${attribute.name}: ${get_prop_value(attribute)}`)},
			${binding_props}
		}`;
    }
    const bindings = x`{
		${binding_fns}
	}`;
    const expression = node2.name === "svelte:self" ? renderer.name : node2.name === "svelte:component" ? x`(${node2.expression.node}) || @missing_component` : node2.name.split(".").reduce((lhs, rhs) => x`${lhs}.${rhs}`);
    const slot_fns = [];
    const children = node2.children;
    if (children.length) {
      const slot_scopes = /* @__PURE__ */ new Map();
      renderer.render(children, Object.assign({}, options, {
        slot_scopes
      }));
      slot_scopes.forEach(({ input, output, statements }, name2) => {
        slot_fns.push(p`${name2}: (${input}) => { ${statements}; return ${output}; }`);
      });
    }
    const slots = x`{
		${slot_fns}
	}`;
    if (node2.css_custom_properties.length > 0) {
      if (node2.namespace === namespaces.svg) {
        renderer.add_string('<g style="');
      } else {
        renderer.add_string('<div style="display: contents; ');
      }
      node2.css_custom_properties.forEach((attr, index) => {
        renderer.add_string(`${attr.name}:`);
        renderer.add_expression(get_attribute_value(attr));
        renderer.add_string(";");
        if (index < node2.css_custom_properties.length - 1)
          renderer.add_string(" ");
      });
      renderer.add_string('">');
    }
    renderer.add_expression(x`@validate_component(${expression}, "${node2.name}").$$render($$result, ${props}, ${bindings}, ${slots})`);
    if (node2.css_custom_properties.length > 0) {
      if (node2.namespace === namespaces.svg) {
        renderer.add_string("</g>");
      } else {
        renderer.add_string("</div>");
      }
    }
  }
  function KeyBlock$1(node2, renderer, options) {
    renderer.render(node2.children, options);
  }
  function get_slot_scope(lets) {
    if (lets.length === 0)
      return null;
    return {
      type: "ObjectPattern",
      properties: lets.map((l) => {
        return {
          type: "Property",
          kind: "init",
          method: false,
          shorthand: false,
          computed: false,
          key: l.name,
          value: l.value || l.name
        };
      })
    };
  }
  function Slot$1(node2, renderer, options) {
    const slot_data = get_slot_data(node2.values);
    const slot = node2.get_static_attribute_value("slot");
    const nearest_inline_component = node2.find_nearest(/InlineComponent/);
    if (slot && nearest_inline_component) {
      renderer.push();
    }
    renderer.push();
    renderer.render(node2.children, options);
    const result = renderer.pop();
    renderer.add_expression(x`
		#slots.${node2.slot_name}
			? #slots.${node2.slot_name}(${slot_data})
			: ${result}
	`);
    if (slot && nearest_inline_component) {
      const lets = node2.lets;
      const seen = new Set(lets.map((l) => l.name.name));
      nearest_inline_component.lets.forEach((l) => {
        if (!seen.has(l.name.name))
          lets.push(l);
      });
      options.slot_scopes.set(slot, {
        input: get_slot_scope(node2.lets),
        output: renderer.pop()
      });
    }
  }
  function SlotTemplate$1(node2, renderer, options) {
    const parent_inline_component = node2.parent;
    const children = remove_whitespace_children(node2 instanceof SlotTemplate ? node2.children : [node2], node2.next);
    renderer.push();
    renderer.render(children, options);
    const lets = node2.lets;
    const seen = new Set(lets.map((l) => l.name.name));
    parent_inline_component.lets.forEach((l) => {
      if (!seen.has(l.name.name))
        lets.push(l);
    });
    const slot_fragment_content = renderer.pop();
    if (!is_empty_template_literal(slot_fragment_content)) {
      if (options.slot_scopes.has(node2.slot_template_name)) {
        if (node2.slot_template_name === "default") {
          throw new Error('Found elements without slot attribute when using slot="default"');
        }
        throw new Error(`Duplicate slot name "${node2.slot_template_name}" in <${parent_inline_component.name}>`);
      }
      options.slot_scopes.set(node2.slot_template_name, {
        input: get_slot_scope(node2.lets),
        output: slot_fragment_content,
        statements: get_const_tags$1(node2.const_tags)
      });
    }
  }
  function is_empty_template_literal(template_literal) {
    return template_literal.expressions.length === 0 && template_literal.quasis.length === 1 && template_literal.quasis[0].value.raw === "";
  }
  function Tag$2(node2, renderer, _options) {
    const snippet = node2.expression.node;
    renderer.add_expression(node2.parent && node2.parent.type === "Element" && node2.parent.name === "style" ? snippet : x`@escape(${snippet})`);
  }
  function Text$1(node2, renderer, _options) {
    let text2 = node2.data;
    if (!node2.parent || node2.parent.type !== "Element" || node2.parent.name !== "script" && node2.parent.name !== "style") {
      text2 = escape_html(text2);
    }
    renderer.add_string(text2);
  }
  function Title$1(node2, renderer, options) {
    renderer.push();
    renderer.add_string("<title>");
    renderer.render(node2.children, options);
    renderer.add_string("</title>");
    const result = renderer.pop();
    renderer.add_expression(x`$$result.title = ${result}, ""`);
  }
  function collapse_template_literal(literal2) {
    if (!literal2.quasis.length)
      return;
    const collapsed_quasis = [];
    const collapsed_expressions = [];
    let cur_quasi = literal2.quasis[0];
    for (let i = 0; i < literal2.quasis.length; i++) {
      const expr = literal2.expressions[i];
      const next_quasi = literal2.quasis[i + 1];
      if (next_quasi && expr && expr.type === "Literal" && typeof expr.value === "string") {
        cur_quasi.value.raw += escape_template(expr.value) + next_quasi.value.raw;
      } else {
        if (expr) {
          collapsed_expressions.push(expr);
        }
        collapsed_quasis.push(cur_quasi);
        cur_quasi = next_quasi;
      }
    }
    literal2.quasis = collapsed_quasis;
    literal2.expressions = collapsed_expressions;
  }
  function noop() {
  }
  var handlers$1 = {
    AwaitBlock: AwaitBlock$1,
    Body: noop,
    Comment: Comment$2,
    DebugTag: DebugTag$1,
    Document: noop,
    EachBlock: EachBlock$1,
    Element: Element$1,
    Head: Head$1,
    IfBlock: IfBlock$1,
    InlineComponent: InlineComponent$1,
    KeyBlock: KeyBlock$1,
    MustacheTag: Tag$2,
    Options: noop,
    RawMustacheTag: HtmlTag,
    Slot: Slot$1,
    SlotTemplate: SlotTemplate$1,
    Text: Text$1,
    Title: Title$1,
    Window: noop
  };
  var Renderer$1 = class {
    constructor({ name: name2 }) {
      this.has_bindings = false;
      this.stack = [];
      this.targets = [];
      this.name = name2;
      this.push();
    }
    add_string(str) {
      this.current.value += escape_template(str);
    }
    add_expression(node2) {
      this.literal.quasis.push({
        type: "TemplateElement",
        value: { raw: this.current.value, cooked: null },
        tail: false
      });
      this.literal.expressions.push(node2);
      this.current.value = "";
    }
    push() {
      const current2 = this.current = { value: "" };
      const literal2 = this.literal = {
        type: "TemplateLiteral",
        expressions: [],
        quasis: []
      };
      this.stack.push({ current: current2, literal: literal2 });
    }
    pop() {
      this.literal.quasis.push({
        type: "TemplateElement",
        value: { raw: this.current.value, cooked: null },
        tail: true
      });
      const popped = this.stack.pop();
      const last = this.stack[this.stack.length - 1];
      if (last) {
        this.literal = last.literal;
        this.current = last.current;
      }
      collapse_template_literal(popped.literal);
      return popped.literal;
    }
    render(nodes, options) {
      nodes.forEach((node2) => {
        const handler = handlers$1[node2.type];
        if (!handler) {
          throw new Error(`No handler for '${node2.type}' nodes`);
        }
        handler(node2, this, options);
      });
    }
  };
  function ssr(component, options) {
    const renderer = new Renderer$1({
      name: component.name
    });
    const { name: name2 } = component;
    renderer.render(trim(component.fragment.children), Object.assign({
      locate: component.locate
    }, options));
    const literal2 = renderer.pop();
    const css = options.customElement ? { code: null, map: null } : component.stylesheet.render(options.filename, true);
    const uses_rest = component.var_lookup.has("$$restProps");
    const props = component.vars.filter((variable) => !variable.module && variable.export_name);
    const rest = uses_rest ? b`let $$restProps = @compute_rest_props($$props, [${props.map((prop) => `"${prop.export_name}"`).join(",")}]);` : null;
    const uses_slots = component.var_lookup.has("$$slots");
    const slots = uses_slots ? b`let $$slots = @compute_slots(#slots);` : null;
    const reactive_stores = component.vars.filter((variable) => variable.name[0] === "$" && variable.name[1] !== "$");
    const reactive_store_subscriptions = reactive_stores.filter((store) => {
      const variable = component.var_lookup.get(store.name.slice(1));
      return !variable || variable.hoistable;
    }).map(({ name: name3 }) => {
      const store_name = name3.slice(1);
      return b`
				${component.compile_options.dev && b`@validate_store(${store_name}, '${store_name}');`}
				${`$$unsubscribe_${store_name}`} = @subscribe(${store_name}, #value => ${name3} = #value)
			`;
    });
    const reactive_store_unsubscriptions = reactive_stores.map(({ name: name3 }) => b`${`$$unsubscribe_${name3.slice(1)}`}()`);
    const reactive_store_declarations = reactive_stores.map(({ name: name3 }) => {
      const store_name = name3.slice(1);
      const store = component.var_lookup.get(store_name);
      if (store && store.reassigned) {
        const unsubscribe = `$$unsubscribe_${store_name}`;
        const subscribe = `$$subscribe_${store_name}`;
        return b`let ${name3}, ${unsubscribe} = @noop, ${subscribe} = () => (${unsubscribe}(), ${unsubscribe} = @subscribe(${store_name}, $$value => ${name3} = $$value), ${store_name})`;
      }
      return b`let ${name3}, ${`$$unsubscribe_${store_name}`};`;
    });
    if (component.ast.instance) {
      let scope = component.instance_scope;
      const map = component.instance_scope_map;
      walk(component.ast.instance.content, {
        enter(node2) {
          if (map.has(node2)) {
            scope = map.get(node2);
          }
        },
        leave(node2) {
          if (map.has(node2)) {
            scope = scope.parent;
          }
          if (node2.type === "AssignmentExpression" || node2.type === "UpdateExpression") {
            const assignee = node2.type === "AssignmentExpression" ? node2.left : node2.argument;
            const names = new Set(extract_names(assignee));
            const to_invalidate = /* @__PURE__ */ new Set();
            for (const name3 of names) {
              const variable = component.var_lookup.get(name3);
              if (variable && !variable.hoistable && !variable.global && !variable.module && (variable.subscribable || variable.name[0] === "$")) {
                to_invalidate.add(variable.name);
              }
            }
            if (to_invalidate.size) {
              this.replace(invalidate({ component }, scope, node2, to_invalidate, true));
            }
          }
        }
      });
    }
    component.rewrite_props(({ name: name3, reassigned }) => {
      const value = `$${name3}`;
      let insert = reassigned ? b`${`$$subscribe_${name3}`}()` : b`${`$$unsubscribe_${name3}`} = @subscribe(${name3}, #value => $${value} = #value)`;
      if (component.compile_options.dev) {
        insert = b`@validate_store(${name3}, '${name3}'); ${insert}`;
      }
      return insert;
    });
    const instance_javascript = component.extract_javascript(component.ast.instance);
    const parent_bindings = instance_javascript ? component.vars.filter((variable) => !variable.module && variable.export_name).map((prop) => {
      return b`if ($$props.${prop.export_name} === void 0 && $$bindings.${prop.export_name} && ${prop.name} !== void 0) $$bindings.${prop.export_name}(${prop.name});`;
    }) : [];
    const injected = Array.from(component.injected_reactive_declaration_vars).filter((name3) => {
      const variable = component.var_lookup.get(name3);
      return variable.injected;
    });
    const reactive_declarations = component.reactive_declarations.map((d2) => {
      const body = d2.node.body;
      let statement = b`${body}`;
      if (!d2.declaration) {
        statement = b`$: { ${statement} }`;
      }
      return statement;
    });
    const main = renderer.has_bindings ? b`
			let $$settled;
			let $$rendered;

			do {
				$$settled = true;

				${reactive_declarations}

				$$rendered = ${literal2};
			} while (!$$settled);

			${reactive_store_unsubscriptions}

			return $$rendered;
		` : b`
			${reactive_declarations}

			${reactive_store_unsubscriptions}

			return ${literal2};`;
    const blocks = [
      ...injected.map((name3) => b`let ${name3};`),
      rest,
      slots,
      ...reactive_store_declarations,
      ...reactive_store_subscriptions,
      instance_javascript,
      ...parent_bindings,
      css.code && b`$$result.css.add(#css);`,
      main
    ].filter(Boolean);
    const css_sourcemap_enabled = check_enable_sourcemap(options.enableSourcemap, "css");
    const js2 = b`
		${css.code ? b`
		const #css = {
			code: "${css.code}",
			map: ${css_sourcemap_enabled && css.map ? string_literal(css.map.toString()) : "null"}
		};` : null}

		${component.extract_javascript(component.ast.module)}

		${component.fully_hoisted}

		const ${name2} = @create_ssr_component(($$result, $$props, $$bindings, #slots) => {
			${blocks}
		});
	`;
    return { js: js2, css };
  }
  function trim(nodes) {
    let start = 0;
    for (; start < nodes.length; start += 1) {
      const node2 = nodes[start];
      if (node2.type !== "Text")
        break;
      node2.data = node2.data.replace(/^\s+/, "");
      if (node2.data)
        break;
    }
    let end = nodes.length;
    for (; end > start; end -= 1) {
      const node2 = nodes[end - 1];
      if (node2.type !== "Text")
        break;
      node2.data = node2.data.trimRight();
      if (node2.data)
        break;
    }
    return nodes.slice(start, end);
  }
  var globals = /* @__PURE__ */ new Set([
    "AbortController",
    "AbortSignal",
    "AbstractRange",
    "ActiveXObject",
    "AggregateError",
    "AnalyserNode",
    "Animation",
    "AnimationEffect",
    "AnimationEvent",
    "AnimationPlaybackEvent",
    "AnimationTimeline",
    "Array",
    "ArrayBuffer",
    "Atomics",
    "Attr",
    "Audio",
    "AudioBuffer",
    "AudioBufferSourceNode",
    "AudioContext",
    "AudioDestinationNode",
    "AudioListener",
    "AudioNode",
    "AudioParam",
    "AudioParamMap",
    "AudioProcessingEvent",
    "AudioScheduledSourceNode",
    "AudioWorklet",
    "AudioWorkletNode",
    "AuthenticatorAssertionResponse",
    "AuthenticatorAttestationResponse",
    "AuthenticatorResponse",
    "BarProp",
    "BaseAudioContext",
    "BeforeUnloadEvent",
    "BigInt",
    "BigInt64Array",
    "BigUint64Array",
    "BiquadFilterNode",
    "Blob",
    "BlobEvent",
    "Boolean",
    "BroadcastChannel",
    "ByteLengthQueuingStrategy",
    "CDATASection",
    "CSS",
    "CSSAnimation",
    "CSSConditionRule",
    "CSSCounterStyleRule",
    "CSSFontFaceRule",
    "CSSGroupingRule",
    "CSSImportRule",
    "CSSKeyframeRule",
    "CSSKeyframesRule",
    "CSSMediaRule",
    "CSSNamespaceRule",
    "CSSPageRule",
    "CSSRule",
    "CSSRuleList",
    "CSSStyleDeclaration",
    "CSSStyleRule",
    "CSSStyleSheet",
    "CSSSupportsRule",
    "CSSTransition",
    "Cache",
    "CacheStorage",
    "CanvasCaptureMediaStreamTrack",
    "CanvasGradient",
    "CanvasPattern",
    "CanvasRenderingContext2D",
    "ChannelMergerNode",
    "ChannelSplitterNode",
    "CharacterData",
    "ClientRect",
    "Clipboard",
    "ClipboardEvent",
    "ClipboardItem",
    "CloseEvent",
    "Comment",
    "CompositionEvent",
    "ConstantSourceNode",
    "ConvolverNode",
    "CountQueuingStrategy",
    "Credential",
    "CredentialsContainer",
    "Crypto",
    "CryptoKey",
    "CustomElementRegistry",
    "CustomEvent",
    "DOMException",
    "DOMImplementation",
    "DOMMatrix",
    "DOMMatrixReadOnly",
    "DOMParser",
    "DOMPoint",
    "DOMPointReadOnly",
    "DOMQuad",
    "DOMRect",
    "DOMRectList",
    "DOMRectReadOnly",
    "DOMStringList",
    "DOMStringMap",
    "DOMTokenList",
    "DataTransfer",
    "DataTransferItem",
    "DataTransferItemList",
    "DataView",
    "Date",
    "DelayNode",
    "DeviceMotionEvent",
    "DeviceOrientationEvent",
    "Document",
    "DocumentFragment",
    "DocumentTimeline",
    "DocumentType",
    "DragEvent",
    "DynamicsCompressorNode",
    "Element",
    "ElementInternals",
    "Enumerator",
    "Error",
    "ErrorEvent",
    "EvalError",
    "Event",
    "EventCounts",
    "EventSource",
    "EventTarget",
    "External",
    "File",
    "FileList",
    "FileReader",
    "FileSystem",
    "FileSystemDirectoryEntry",
    "FileSystemDirectoryHandle",
    "FileSystemDirectoryReader",
    "FileSystemEntry",
    "FileSystemFileEntry",
    "FileSystemFileHandle",
    "FileSystemHandle",
    "FinalizationRegistry",
    "Float32Array",
    "Float64Array",
    "FocusEvent",
    "FontFace",
    "FontFaceSet",
    "FontFaceSetLoadEvent",
    "FormData",
    "FormDataEvent",
    "Function",
    "GainNode",
    "Gamepad",
    "GamepadButton",
    "GamepadEvent",
    "GamepadHapticActuator",
    "Geolocation",
    "GeolocationCoordinates",
    "GeolocationPosition",
    "GeolocationPositionError",
    "HTMLAllCollection",
    "HTMLAnchorElement",
    "HTMLAreaElement",
    "HTMLAudioElement",
    "HTMLBRElement",
    "HTMLBaseElement",
    "HTMLBodyElement",
    "HTMLButtonElement",
    "HTMLCanvasElement",
    "HTMLCollection",
    "HTMLDListElement",
    "HTMLDataElement",
    "HTMLDataListElement",
    "HTMLDetailsElement",
    "HTMLDialogElement",
    "HTMLDirectoryElement",
    "HTMLDivElement",
    "HTMLDocument",
    "HTMLElement",
    "HTMLEmbedElement",
    "HTMLFieldSetElement",
    "HTMLFontElement",
    "HTMLFormControlsCollection",
    "HTMLFormElement",
    "HTMLFrameElement",
    "HTMLFrameSetElement",
    "HTMLHRElement",
    "HTMLHeadElement",
    "HTMLHeadingElement",
    "HTMLHtmlElement",
    "HTMLIFrameElement",
    "HTMLImageElement",
    "HTMLInputElement",
    "HTMLLIElement",
    "HTMLLabelElement",
    "HTMLLegendElement",
    "HTMLLinkElement",
    "HTMLMapElement",
    "HTMLMarqueeElement",
    "HTMLMediaElement",
    "HTMLMenuElement",
    "HTMLMetaElement",
    "HTMLMeterElement",
    "HTMLModElement",
    "HTMLOListElement",
    "HTMLObjectElement",
    "HTMLOptGroupElement",
    "HTMLOptionElement",
    "HTMLOptionsCollection",
    "HTMLOutputElement",
    "HTMLParagraphElement",
    "HTMLParamElement",
    "HTMLPictureElement",
    "HTMLPreElement",
    "HTMLProgressElement",
    "HTMLQuoteElement",
    "HTMLScriptElement",
    "HTMLSelectElement",
    "HTMLSlotElement",
    "HTMLSourceElement",
    "HTMLSpanElement",
    "HTMLStyleElement",
    "HTMLTableCaptionElement",
    "HTMLTableCellElement",
    "HTMLTableColElement",
    "HTMLTableElement",
    "HTMLTableRowElement",
    "HTMLTableSectionElement",
    "HTMLTemplateElement",
    "HTMLTextAreaElement",
    "HTMLTimeElement",
    "HTMLTitleElement",
    "HTMLTrackElement",
    "HTMLUListElement",
    "HTMLUnknownElement",
    "HTMLVideoElement",
    "HashChangeEvent",
    "Headers",
    "History",
    "IDBCursor",
    "IDBCursorWithValue",
    "IDBDatabase",
    "IDBFactory",
    "IDBIndex",
    "IDBKeyRange",
    "IDBObjectStore",
    "IDBOpenDBRequest",
    "IDBRequest",
    "IDBTransaction",
    "IDBVersionChangeEvent",
    "IIRFilterNode",
    "IdleDeadline",
    "Image",
    "ImageBitmap",
    "ImageBitmapRenderingContext",
    "ImageData",
    "Infinity",
    "InputDeviceInfo",
    "InputEvent",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "InternalError",
    "IntersectionObserver",
    "IntersectionObserverEntry",
    "Intl",
    "JSON",
    "KeyboardEvent",
    "KeyframeEffect",
    "Location",
    "Lock",
    "LockManager",
    "Map",
    "Math",
    "MathMLElement",
    "MediaCapabilities",
    "MediaDeviceInfo",
    "MediaDevices",
    "MediaElementAudioSourceNode",
    "MediaEncryptedEvent",
    "MediaError",
    "MediaKeyMessageEvent",
    "MediaKeySession",
    "MediaKeyStatusMap",
    "MediaKeySystemAccess",
    "MediaKeys",
    "MediaList",
    "MediaMetadata",
    "MediaQueryList",
    "MediaQueryListEvent",
    "MediaRecorder",
    "MediaRecorderErrorEvent",
    "MediaSession",
    "MediaSource",
    "MediaStream",
    "MediaStreamAudioDestinationNode",
    "MediaStreamAudioSourceNode",
    "MediaStreamTrack",
    "MediaStreamTrackEvent",
    "MessageChannel",
    "MessageEvent",
    "MessagePort",
    "MimeType",
    "MimeTypeArray",
    "MouseEvent",
    "MutationEvent",
    "MutationObserver",
    "MutationRecord",
    "NaN",
    "NamedNodeMap",
    "NavigationPreloadManager",
    "Navigator",
    "NetworkInformation",
    "Node",
    "NodeFilter",
    "NodeIterator",
    "NodeList",
    "Notification",
    "Number",
    "Object",
    "OfflineAudioCompletionEvent",
    "OfflineAudioContext",
    "Option",
    "OscillatorNode",
    "OverconstrainedError",
    "PageTransitionEvent",
    "PannerNode",
    "Path2D",
    "PaymentAddress",
    "PaymentMethodChangeEvent",
    "PaymentRequest",
    "PaymentRequestUpdateEvent",
    "PaymentResponse",
    "Performance",
    "PerformanceEntry",
    "PerformanceEventTiming",
    "PerformanceMark",
    "PerformanceMeasure",
    "PerformanceNavigation",
    "PerformanceNavigationTiming",
    "PerformanceObserver",
    "PerformanceObserverEntryList",
    "PerformancePaintTiming",
    "PerformanceResourceTiming",
    "PerformanceServerTiming",
    "PerformanceTiming",
    "PeriodicWave",
    "PermissionStatus",
    "Permissions",
    "PictureInPictureWindow",
    "Plugin",
    "PluginArray",
    "PointerEvent",
    "PopStateEvent",
    "ProcessingInstruction",
    "ProgressEvent",
    "Promise",
    "PromiseRejectionEvent",
    "Proxy",
    "PublicKeyCredential",
    "PushManager",
    "PushSubscription",
    "PushSubscriptionOptions",
    "RTCCertificate",
    "RTCDTMFSender",
    "RTCDTMFToneChangeEvent",
    "RTCDataChannel",
    "RTCDataChannelEvent",
    "RTCDtlsTransport",
    "RTCEncodedAudioFrame",
    "RTCEncodedVideoFrame",
    "RTCError",
    "RTCErrorEvent",
    "RTCIceCandidate",
    "RTCIceTransport",
    "RTCPeerConnection",
    "RTCPeerConnectionIceErrorEvent",
    "RTCPeerConnectionIceEvent",
    "RTCRtpReceiver",
    "RTCRtpSender",
    "RTCRtpTransceiver",
    "RTCSctpTransport",
    "RTCSessionDescription",
    "RTCStatsReport",
    "RTCTrackEvent",
    "RadioNodeList",
    "Range",
    "RangeError",
    "ReadableByteStreamController",
    "ReadableStream",
    "ReadableStreamBYOBReader",
    "ReadableStreamBYOBRequest",
    "ReadableStreamDefaultController",
    "ReadableStreamDefaultReader",
    "ReferenceError",
    "Reflect",
    "RegExp",
    "RemotePlayback",
    "Request",
    "ResizeObserver",
    "ResizeObserverEntry",
    "ResizeObserverSize",
    "Response",
    "SVGAElement",
    "SVGAngle",
    "SVGAnimateElement",
    "SVGAnimateMotionElement",
    "SVGAnimateTransformElement",
    "SVGAnimatedAngle",
    "SVGAnimatedBoolean",
    "SVGAnimatedEnumeration",
    "SVGAnimatedInteger",
    "SVGAnimatedLength",
    "SVGAnimatedLengthList",
    "SVGAnimatedNumber",
    "SVGAnimatedNumberList",
    "SVGAnimatedPreserveAspectRatio",
    "SVGAnimatedRect",
    "SVGAnimatedString",
    "SVGAnimatedTransformList",
    "SVGAnimationElement",
    "SVGCircleElement",
    "SVGClipPathElement",
    "SVGComponentTransferFunctionElement",
    "SVGCursorElement",
    "SVGDefsElement",
    "SVGDescElement",
    "SVGElement",
    "SVGEllipseElement",
    "SVGFEBlendElement",
    "SVGFEColorMatrixElement",
    "SVGFEComponentTransferElement",
    "SVGFECompositeElement",
    "SVGFEConvolveMatrixElement",
    "SVGFEDiffuseLightingElement",
    "SVGFEDisplacementMapElement",
    "SVGFEDistantLightElement",
    "SVGFEDropShadowElement",
    "SVGFEFloodElement",
    "SVGFEFuncAElement",
    "SVGFEFuncBElement",
    "SVGFEFuncGElement",
    "SVGFEFuncRElement",
    "SVGFEGaussianBlurElement",
    "SVGFEImageElement",
    "SVGFEMergeElement",
    "SVGFEMergeNodeElement",
    "SVGFEMorphologyElement",
    "SVGFEOffsetElement",
    "SVGFEPointLightElement",
    "SVGFESpecularLightingElement",
    "SVGFESpotLightElement",
    "SVGFETileElement",
    "SVGFETurbulenceElement",
    "SVGFilterElement",
    "SVGForeignObjectElement",
    "SVGGElement",
    "SVGGeometryElement",
    "SVGGradientElement",
    "SVGGraphicsElement",
    "SVGImageElement",
    "SVGLength",
    "SVGLengthList",
    "SVGLineElement",
    "SVGLinearGradientElement",
    "SVGMPathElement",
    "SVGMarkerElement",
    "SVGMaskElement",
    "SVGMatrix",
    "SVGMetadataElement",
    "SVGNumber",
    "SVGNumberList",
    "SVGPathElement",
    "SVGPatternElement",
    "SVGPoint",
    "SVGPointList",
    "SVGPolygonElement",
    "SVGPolylineElement",
    "SVGPreserveAspectRatio",
    "SVGRadialGradientElement",
    "SVGRect",
    "SVGRectElement",
    "SVGSVGElement",
    "SVGScriptElement",
    "SVGSetElement",
    "SVGStopElement",
    "SVGStringList",
    "SVGStyleElement",
    "SVGSwitchElement",
    "SVGSymbolElement",
    "SVGTSpanElement",
    "SVGTextContentElement",
    "SVGTextElement",
    "SVGTextPathElement",
    "SVGTextPositioningElement",
    "SVGTitleElement",
    "SVGTransform",
    "SVGTransformList",
    "SVGUnitTypes",
    "SVGUseElement",
    "SVGViewElement",
    "SafeArray",
    "Screen",
    "ScreenOrientation",
    "ScriptProcessorNode",
    "SecurityPolicyViolationEvent",
    "Selection",
    "ServiceWorker",
    "ServiceWorkerContainer",
    "ServiceWorkerRegistration",
    "Set",
    "ShadowRoot",
    "SharedArrayBuffer",
    "SharedWorker",
    "SourceBuffer",
    "SourceBufferList",
    "SpeechRecognitionAlternative",
    "SpeechRecognitionErrorEvent",
    "SpeechRecognitionResult",
    "SpeechRecognitionResultList",
    "SpeechSynthesis",
    "SpeechSynthesisErrorEvent",
    "SpeechSynthesisEvent",
    "SpeechSynthesisUtterance",
    "SpeechSynthesisVoice",
    "StaticRange",
    "StereoPannerNode",
    "Storage",
    "StorageEvent",
    "StorageManager",
    "String",
    "StyleMedia",
    "StyleSheet",
    "StyleSheetList",
    "SubmitEvent",
    "SubtleCrypto",
    "Symbol",
    "SyntaxError",
    "Text",
    "TextDecoder",
    "TextDecoderStream",
    "TextEncoder",
    "TextEncoderStream",
    "TextMetrics",
    "TextTrack",
    "TextTrackCue",
    "TextTrackCueList",
    "TextTrackList",
    "TimeRanges",
    "Touch",
    "TouchEvent",
    "TouchList",
    "TrackEvent",
    "TransformStream",
    "TransformStreamDefaultController",
    "TransitionEvent",
    "TreeWalker",
    "TypeError",
    "UIEvent",
    "URIError",
    "URL",
    "URLSearchParams",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "VBArray",
    "VTTCue",
    "VTTRegion",
    "ValidityState",
    "VarDate",
    "VideoColorSpace",
    "VideoPlaybackQuality",
    "VisualViewport",
    "WSH",
    "WScript",
    "WaveShaperNode",
    "WeakMap",
    "WeakRef",
    "WeakSet",
    "WebAssembly",
    "WebGL2RenderingContext",
    "WebGLActiveInfo",
    "WebGLBuffer",
    "WebGLContextEvent",
    "WebGLFramebuffer",
    "WebGLProgram",
    "WebGLQuery",
    "WebGLRenderbuffer",
    "WebGLRenderingContext",
    "WebGLSampler",
    "WebGLShader",
    "WebGLShaderPrecisionFormat",
    "WebGLSync",
    "WebGLTexture",
    "WebGLTransformFeedback",
    "WebGLUniformLocation",
    "WebGLVertexArrayObject",
    "WebKitCSSMatrix",
    "WebSocket",
    "WheelEvent",
    "Window",
    "Worker",
    "Worklet",
    "WritableStream",
    "WritableStreamDefaultController",
    "WritableStreamDefaultWriter",
    "XMLDocument",
    "XMLHttpRequest",
    "XMLHttpRequestEventTarget",
    "XMLHttpRequestUpload",
    "XMLSerializer",
    "XPathEvaluator",
    "XPathExpression",
    "XPathResult",
    "XSLTProcessor",
    "addEventListener",
    "alert",
    "atob",
    "blur",
    "btoa",
    "caches",
    "cancelAnimationFrame",
    "cancelIdleCallback",
    "captureEvents",
    "clearInterval",
    "clearTimeout",
    "clientInformation",
    "close",
    "closed",
    "confirm",
    "console",
    "createImageBitmap",
    "crossOriginIsolated",
    "crypto",
    "customElements",
    "decodeURI",
    "decodeURIComponent",
    "devicePixelRatio",
    "dispatchEvent",
    "document",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "eval",
    "event",
    "external",
    "fetch",
    "focus",
    "frameElement",
    "frames",
    "getComputedStyle",
    "getSelection",
    "global",
    "globalThis",
    "history",
    "importScripts",
    "indexedDB",
    "innerHeight",
    "innerWidth",
    "isFinite",
    "isNaN",
    "isSecureContext",
    "length",
    "localStorage",
    "location",
    "locationbar",
    "matchMedia",
    "menubar",
    "moveBy",
    "moveTo",
    "name",
    "navigator",
    "onabort",
    "onafterprint",
    "onanimationcancel",
    "onanimationend",
    "onanimationiteration",
    "onanimationstart",
    "onauxclick",
    "onbeforeprint",
    "onbeforeunload",
    "onblur",
    "oncanplay",
    "oncanplaythrough",
    "onchange",
    "onclick",
    "onclose",
    "oncontextmenu",
    "oncuechange",
    "ondblclick",
    "ondevicemotion",
    "ondeviceorientation",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "ondurationchange",
    "onemptied",
    "onended",
    "onerror",
    "onfocus",
    "onformdata",
    "ongamepadconnected",
    "ongamepaddisconnected",
    "ongotpointercapture",
    "onhashchange",
    "oninput",
    "oninvalid",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "onlanguagechange",
    "onload",
    "onloadeddata",
    "onloadedmetadata",
    "onloadstart",
    "onlostpointercapture",
    "onmessage",
    "onmessageerror",
    "onmousedown",
    "onmouseenter",
    "onmouseleave",
    "onmousemove",
    "onmouseout",
    "onmouseover",
    "onmouseup",
    "onoffline",
    "ononline",
    "onorientationchange",
    "onpagehide",
    "onpageshow",
    "onpause",
    "onplay",
    "onplaying",
    "onpointercancel",
    "onpointerdown",
    "onpointerenter",
    "onpointerleave",
    "onpointermove",
    "onpointerout",
    "onpointerover",
    "onpointerup",
    "onpopstate",
    "onprogress",
    "onratechange",
    "onrejectionhandled",
    "onreset",
    "onresize",
    "onscroll",
    "onsecuritypolicyviolation",
    "onseeked",
    "onseeking",
    "onselect",
    "onselectionchange",
    "onselectstart",
    "onslotchange",
    "onstalled",
    "onstorage",
    "onsubmit",
    "onsuspend",
    "ontimeupdate",
    "ontoggle",
    "ontouchcancel",
    "ontouchend",
    "ontouchmove",
    "ontouchstart",
    "ontransitioncancel",
    "ontransitionend",
    "ontransitionrun",
    "ontransitionstart",
    "onunhandledrejection",
    "onunload",
    "onvolumechange",
    "onwaiting",
    "onwebkitanimationend",
    "onwebkitanimationiteration",
    "onwebkitanimationstart",
    "onwebkittransitionend",
    "onwheel",
    "open",
    "opener",
    "orientation",
    "origin",
    "outerHeight",
    "outerWidth",
    "pageXOffset",
    "pageYOffset",
    "parent",
    "parseFloat",
    "parseInt",
    "performance",
    "personalbar",
    "postMessage",
    "print",
    "process",
    "prompt",
    "queueMicrotask",
    "releaseEvents",
    "removeEventListener",
    "reportError",
    "requestAnimationFrame",
    "requestIdleCallback",
    "resizeBy",
    "resizeTo",
    "screen",
    "screenLeft",
    "screenTop",
    "screenX",
    "screenY",
    "scroll",
    "scrollBy",
    "scrollTo",
    "scrollX",
    "scrollY",
    "scrollbars",
    "self",
    "sessionStorage",
    "setInterval",
    "setTimeout",
    "speechSynthesis",
    "status",
    "statusbar",
    "stop",
    "structuredClone",
    "toString",
    "toolbar",
    "top",
    "undefined",
    "unescape",
    "visualViewport",
    "webkitURL",
    "window"
  ]);
  var wrappers$1 = { esm, cjs };
  function create_module(program, format, name2, banner, sveltePath = "svelte", helpers, globals2, imports, module_exports, exports_from) {
    const internal_path = `${sveltePath}/internal`;
    helpers.sort((a, b2) => a.name < b2.name ? -1 : 1);
    globals2.sort((a, b2) => a.name < b2.name ? -1 : 1);
    const formatter = wrappers$1[format];
    if (!formatter) {
      throw new Error(`options.format is invalid (must be ${list$1(Object.keys(wrappers$1))})`);
    }
    return formatter(program, name2, banner, sveltePath, internal_path, helpers, globals2, imports, module_exports, exports_from);
  }
  function edit_source(source, sveltePath) {
    return source === "svelte" || source.startsWith("svelte/") ? source.replace("svelte", sveltePath) : source;
  }
  function get_internal_globals(globals2, helpers) {
    return globals2.length > 0 && {
      type: "VariableDeclaration",
      kind: "const",
      declarations: [{
        type: "VariableDeclarator",
        id: {
          type: "ObjectPattern",
          properties: globals2.map((g2) => ({
            type: "Property",
            method: false,
            shorthand: false,
            computed: false,
            key: { type: "Identifier", name: g2.name },
            value: g2.alias,
            kind: "init"
          }))
        },
        init: helpers.find(({ name: name2 }) => name2 === "globals").alias
      }]
    };
  }
  function esm(program, name2, banner, sveltePath, internal_path, helpers, globals2, imports, module_exports, exports_from) {
    const import_declaration = {
      type: "ImportDeclaration",
      specifiers: helpers.map((h2) => ({
        type: "ImportSpecifier",
        local: h2.alias,
        imported: { type: "Identifier", name: h2.name }
      })),
      source: { type: "Literal", value: internal_path }
    };
    const internal_globals = get_internal_globals(globals2, helpers);
    function rewrite_import(node2) {
      const value = edit_source(node2.source.value, sveltePath);
      if (node2.source.value !== value) {
        node2.source.value = value;
        node2.source.raw = null;
      }
    }
    imports.forEach(rewrite_import);
    exports_from.forEach(rewrite_import);
    const exports = module_exports.length > 0 && {
      type: "ExportNamedDeclaration",
      specifiers: module_exports.map((x2) => ({
        type: "Specifier",
        local: { type: "Identifier", name: x2.name },
        exported: { type: "Identifier", name: x2.as }
      }))
    };
    program.body = b`
		/* ${banner} */

		${import_declaration}
		${internal_globals}
		${imports}
		${exports_from}

		${program.body}

		export default ${name2};
		${exports}
	`;
  }
  function cjs(program, name2, banner, sveltePath, internal_path, helpers, globals2, imports, module_exports, exports_from) {
    const internal_requires = {
      type: "VariableDeclaration",
      kind: "const",
      declarations: [{
        type: "VariableDeclarator",
        id: {
          type: "ObjectPattern",
          properties: helpers.map((h2) => ({
            type: "Property",
            method: false,
            shorthand: false,
            computed: false,
            key: { type: "Identifier", name: h2.name },
            value: h2.alias,
            kind: "init"
          }))
        },
        init: x`require("${internal_path}")`
      }]
    };
    const internal_globals = get_internal_globals(globals2, helpers);
    const user_requires = imports.map((node2) => {
      const init = x`require("${edit_source(node2.source.value, sveltePath)}")`;
      if (node2.specifiers.length === 0) {
        return b`${init};`;
      }
      return {
        type: "VariableDeclaration",
        kind: "const",
        declarations: [{
          type: "VariableDeclarator",
          id: node2.specifiers[0].type === "ImportNamespaceSpecifier" ? { type: "Identifier", name: node2.specifiers[0].local.name } : {
            type: "ObjectPattern",
            properties: node2.specifiers.map((s) => ({
              type: "Property",
              method: false,
              shorthand: false,
              computed: false,
              key: s.type === "ImportSpecifier" ? s.imported : { type: "Identifier", name: "default" },
              value: s.local,
              kind: "init"
            }))
          },
          init
        }]
      };
    });
    const exports = module_exports.map((x2) => b`exports.${{ type: "Identifier", name: x2.as }} = ${{ type: "Identifier", name: x2.name }};`);
    const user_exports_from = exports_from.map((node2) => {
      const init = x`require("${edit_source(node2.source.value, sveltePath)}")`;
      return node2.specifiers.map((specifier) => {
        return b`exports.${specifier.exported} = ${init}.${specifier.local};`;
      });
    });
    program.body = b`
		/* ${banner} */

		"use strict";
		${internal_requires}
		${internal_globals}
		${user_requires}
		${user_exports_from}

		${program.body}

		exports.default = ${name2};
		${exports}
	`;
  }
  var BitSet = class {
    constructor(arg) {
      this.bits = arg instanceof BitSet ? arg.bits.slice() : [];
    }
    add(n2) {
      this.bits[n2 >> 5] |= 1 << (n2 & 31);
    }
    has(n2) {
      return !!(this.bits[n2 >> 5] & 1 << (n2 & 31));
    }
  };
  var Chunk = class {
    constructor(start, end, content) {
      this.start = start;
      this.end = end;
      this.original = content;
      this.intro = "";
      this.outro = "";
      this.content = content;
      this.storeName = false;
      this.edited = false;
      {
        this.previous = null;
        this.next = null;
      }
    }
    appendLeft(content) {
      this.outro += content;
    }
    appendRight(content) {
      this.intro = this.intro + content;
    }
    clone() {
      const chunk = new Chunk(this.start, this.end, this.original);
      chunk.intro = this.intro;
      chunk.outro = this.outro;
      chunk.content = this.content;
      chunk.storeName = this.storeName;
      chunk.edited = this.edited;
      return chunk;
    }
    contains(index) {
      return this.start < index && index < this.end;
    }
    eachNext(fn2) {
      let chunk = this;
      while (chunk) {
        fn2(chunk);
        chunk = chunk.next;
      }
    }
    eachPrevious(fn2) {
      let chunk = this;
      while (chunk) {
        fn2(chunk);
        chunk = chunk.previous;
      }
    }
    edit(content, storeName, contentOnly) {
      this.content = content;
      if (!contentOnly) {
        this.intro = "";
        this.outro = "";
      }
      this.storeName = storeName;
      this.edited = true;
      return this;
    }
    prependLeft(content) {
      this.outro = content + this.outro;
    }
    prependRight(content) {
      this.intro = content + this.intro;
    }
    split(index) {
      const sliceIndex = index - this.start;
      const originalBefore = this.original.slice(0, sliceIndex);
      const originalAfter = this.original.slice(sliceIndex);
      this.original = originalBefore;
      const newChunk = new Chunk(index, this.end, originalAfter);
      newChunk.outro = this.outro;
      this.outro = "";
      this.end = index;
      if (this.edited) {
        newChunk.edit("", false);
        this.content = "";
      } else {
        this.content = originalBefore;
      }
      newChunk.next = this.next;
      if (newChunk.next)
        newChunk.next.previous = newChunk;
      newChunk.previous = this;
      this.next = newChunk;
      return newChunk;
    }
    toString() {
      return this.intro + this.content + this.outro;
    }
    trimEnd(rx) {
      this.outro = this.outro.replace(rx, "");
      if (this.outro.length)
        return true;
      const trimmed = this.content.replace(rx, "");
      if (trimmed.length) {
        if (trimmed !== this.content) {
          this.split(this.start + trimmed.length).edit("", void 0, true);
        }
        return true;
      } else {
        this.edit("", void 0, true);
        this.intro = this.intro.replace(rx, "");
        if (this.intro.length)
          return true;
      }
    }
    trimStart(rx) {
      this.intro = this.intro.replace(rx, "");
      if (this.intro.length)
        return true;
      const trimmed = this.content.replace(rx, "");
      if (trimmed.length) {
        if (trimmed !== this.content) {
          this.split(this.end - trimmed.length);
          this.edit("", void 0, true);
        }
        return true;
      } else {
        this.edit("", void 0, true);
        this.outro = this.outro.replace(rx, "");
        if (this.outro.length)
          return true;
      }
    }
  };
  function getBtoa() {
    if (typeof window !== "undefined" && typeof window.btoa === "function") {
      return (str) => window.btoa(unescape(encodeURIComponent(str)));
    } else if (typeof Buffer === "function") {
      return (str) => Buffer.from(str, "utf-8").toString("base64");
    } else {
      return () => {
        throw new Error("Unsupported environment: `window.btoa` or `Buffer` should be supported.");
      };
    }
  }
  var btoa$2 = /* @__PURE__ */ getBtoa();
  var SourceMap$1 = class {
    constructor(properties2) {
      this.version = 3;
      this.file = properties2.file;
      this.sources = properties2.sources;
      this.sourcesContent = properties2.sourcesContent;
      this.names = properties2.names;
      this.mappings = encode(properties2.mappings);
      if (typeof properties2.x_google_ignoreList !== "undefined") {
        this.x_google_ignoreList = properties2.x_google_ignoreList;
      }
    }
    toString() {
      return JSON.stringify(this);
    }
    toUrl() {
      return "data:application/json;charset=utf-8;base64," + btoa$2(this.toString());
    }
  };
  function guessIndent(code) {
    const lines = code.split("\n");
    const tabbed = lines.filter((line) => /^\t+/.test(line));
    const spaced = lines.filter((line) => /^ {2,}/.test(line));
    if (tabbed.length === 0 && spaced.length === 0) {
      return null;
    }
    if (tabbed.length >= spaced.length) {
      return "	";
    }
    const min = spaced.reduce((previous, current2) => {
      const numSpaces = /^ +/.exec(current2)[0].length;
      return Math.min(numSpaces, previous);
    }, Infinity);
    return new Array(min + 1).join(" ");
  }
  function getRelativePath(from, to2) {
    const fromParts = from.split(/[/\\]/);
    const toParts = to2.split(/[/\\]/);
    fromParts.pop();
    while (fromParts[0] === toParts[0]) {
      fromParts.shift();
      toParts.shift();
    }
    if (fromParts.length) {
      let i = fromParts.length;
      while (i--)
        fromParts[i] = "..";
    }
    return fromParts.concat(toParts).join("/");
  }
  var toString$2 = Object.prototype.toString;
  function isObject(thing) {
    return toString$2.call(thing) === "[object Object]";
  }
  function getLocator$1(source) {
    const originalLines = source.split("\n");
    const lineOffsets = [];
    for (let i = 0, pos = 0; i < originalLines.length; i++) {
      lineOffsets.push(pos);
      pos += originalLines[i].length + 1;
    }
    return function locate2(index) {
      let i = 0;
      let j = lineOffsets.length;
      while (i < j) {
        const m = i + j >> 1;
        if (index < lineOffsets[m]) {
          j = m;
        } else {
          i = m + 1;
        }
      }
      const line = i - 1;
      const column = index - lineOffsets[line];
      return { line, column };
    };
  }
  var Mappings = class {
    constructor(hires) {
      this.hires = hires;
      this.generatedCodeLine = 0;
      this.generatedCodeColumn = 0;
      this.raw = [];
      this.rawSegments = this.raw[this.generatedCodeLine] = [];
      this.pending = null;
    }
    addEdit(sourceIndex, content, loc, nameIndex) {
      if (content.length) {
        const segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];
        if (nameIndex >= 0) {
          segment.push(nameIndex);
        }
        this.rawSegments.push(segment);
      } else if (this.pending) {
        this.rawSegments.push(this.pending);
      }
      this.advance(content);
      this.pending = null;
    }
    addUneditedChunk(sourceIndex, chunk, original, loc, sourcemapLocations) {
      let originalCharIndex = chunk.start;
      let first = true;
      while (originalCharIndex < chunk.end) {
        if (this.hires || first || sourcemapLocations.has(originalCharIndex)) {
          this.rawSegments.push([this.generatedCodeColumn, sourceIndex, loc.line, loc.column]);
        }
        if (original[originalCharIndex] === "\n") {
          loc.line += 1;
          loc.column = 0;
          this.generatedCodeLine += 1;
          this.raw[this.generatedCodeLine] = this.rawSegments = [];
          this.generatedCodeColumn = 0;
          first = true;
        } else {
          loc.column += 1;
          this.generatedCodeColumn += 1;
          first = false;
        }
        originalCharIndex += 1;
      }
      this.pending = null;
    }
    advance(str) {
      if (!str)
        return;
      const lines = str.split("\n");
      if (lines.length > 1) {
        for (let i = 0; i < lines.length - 1; i++) {
          this.generatedCodeLine++;
          this.raw[this.generatedCodeLine] = this.rawSegments = [];
        }
        this.generatedCodeColumn = 0;
      }
      this.generatedCodeColumn += lines[lines.length - 1].length;
    }
  };
  var n = "\n";
  var warned = {
    insertLeft: false,
    insertRight: false,
    storeName: false
  };
  var MagicString = class {
    constructor(string, options = {}) {
      const chunk = new Chunk(0, string.length, string);
      Object.defineProperties(this, {
        original: { writable: true, value: string },
        outro: { writable: true, value: "" },
        intro: { writable: true, value: "" },
        firstChunk: { writable: true, value: chunk },
        lastChunk: { writable: true, value: chunk },
        lastSearchedChunk: { writable: true, value: chunk },
        byStart: { writable: true, value: {} },
        byEnd: { writable: true, value: {} },
        filename: { writable: true, value: options.filename },
        indentExclusionRanges: { writable: true, value: options.indentExclusionRanges },
        sourcemapLocations: { writable: true, value: new BitSet() },
        storedNames: { writable: true, value: {} },
        indentStr: { writable: true, value: void 0 },
        ignoreList: { writable: true, value: options.ignoreList }
      });
      this.byStart[0] = chunk;
      this.byEnd[string.length] = chunk;
    }
    addSourcemapLocation(char) {
      this.sourcemapLocations.add(char);
    }
    append(content) {
      if (typeof content !== "string")
        throw new TypeError("outro content must be a string");
      this.outro += content;
      return this;
    }
    appendLeft(index, content) {
      if (typeof content !== "string")
        throw new TypeError("inserted content must be a string");
      this._split(index);
      const chunk = this.byEnd[index];
      if (chunk) {
        chunk.appendLeft(content);
      } else {
        this.intro += content;
      }
      return this;
    }
    appendRight(index, content) {
      if (typeof content !== "string")
        throw new TypeError("inserted content must be a string");
      this._split(index);
      const chunk = this.byStart[index];
      if (chunk) {
        chunk.appendRight(content);
      } else {
        this.outro += content;
      }
      return this;
    }
    clone() {
      const cloned = new MagicString(this.original, { filename: this.filename });
      let originalChunk = this.firstChunk;
      let clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();
      while (originalChunk) {
        cloned.byStart[clonedChunk.start] = clonedChunk;
        cloned.byEnd[clonedChunk.end] = clonedChunk;
        const nextOriginalChunk = originalChunk.next;
        const nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();
        if (nextClonedChunk) {
          clonedChunk.next = nextClonedChunk;
          nextClonedChunk.previous = clonedChunk;
          clonedChunk = nextClonedChunk;
        }
        originalChunk = nextOriginalChunk;
      }
      cloned.lastChunk = clonedChunk;
      if (this.indentExclusionRanges) {
        cloned.indentExclusionRanges = this.indentExclusionRanges.slice();
      }
      cloned.sourcemapLocations = new BitSet(this.sourcemapLocations);
      cloned.intro = this.intro;
      cloned.outro = this.outro;
      return cloned;
    }
    generateDecodedMap(options) {
      options = options || {};
      const sourceIndex = 0;
      const names = Object.keys(this.storedNames);
      const mappings = new Mappings(options.hires);
      const locate2 = getLocator$1(this.original);
      if (this.intro) {
        mappings.advance(this.intro);
      }
      this.firstChunk.eachNext((chunk) => {
        const loc = locate2(chunk.start);
        if (chunk.intro.length)
          mappings.advance(chunk.intro);
        if (chunk.edited) {
          mappings.addEdit(
            sourceIndex,
            chunk.content,
            loc,
            chunk.storeName ? names.indexOf(chunk.original) : -1
          );
        } else {
          mappings.addUneditedChunk(sourceIndex, chunk, this.original, loc, this.sourcemapLocations);
        }
        if (chunk.outro.length)
          mappings.advance(chunk.outro);
      });
      return {
        file: options.file ? options.file.split(/[/\\]/).pop() : void 0,
        sources: [options.source ? getRelativePath(options.file || "", options.source) : options.file || ""],
        sourcesContent: options.includeContent ? [this.original] : void 0,
        names,
        mappings: mappings.raw,
        x_google_ignoreList: this.ignoreList ? [sourceIndex] : void 0
      };
    }
    generateMap(options) {
      return new SourceMap$1(this.generateDecodedMap(options));
    }
    _ensureindentStr() {
      if (this.indentStr === void 0) {
        this.indentStr = guessIndent(this.original);
      }
    }
    _getRawIndentString() {
      this._ensureindentStr();
      return this.indentStr;
    }
    getIndentString() {
      this._ensureindentStr();
      return this.indentStr === null ? "	" : this.indentStr;
    }
    indent(indentStr, options) {
      const pattern = /^[^\r\n]/gm;
      if (isObject(indentStr)) {
        options = indentStr;
        indentStr = void 0;
      }
      if (indentStr === void 0) {
        this._ensureindentStr();
        indentStr = this.indentStr || "	";
      }
      if (indentStr === "")
        return this;
      options = options || {};
      const isExcluded = {};
      if (options.exclude) {
        const exclusions = typeof options.exclude[0] === "number" ? [options.exclude] : options.exclude;
        exclusions.forEach((exclusion) => {
          for (let i = exclusion[0]; i < exclusion[1]; i += 1) {
            isExcluded[i] = true;
          }
        });
      }
      let shouldIndentNextCharacter = options.indentStart !== false;
      const replacer = (match) => {
        if (shouldIndentNextCharacter)
          return `${indentStr}${match}`;
        shouldIndentNextCharacter = true;
        return match;
      };
      this.intro = this.intro.replace(pattern, replacer);
      let charIndex = 0;
      let chunk = this.firstChunk;
      while (chunk) {
        const end = chunk.end;
        if (chunk.edited) {
          if (!isExcluded[charIndex]) {
            chunk.content = chunk.content.replace(pattern, replacer);
            if (chunk.content.length) {
              shouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === "\n";
            }
          }
        } else {
          charIndex = chunk.start;
          while (charIndex < end) {
            if (!isExcluded[charIndex]) {
              const char = this.original[charIndex];
              if (char === "\n") {
                shouldIndentNextCharacter = true;
              } else if (char !== "\r" && shouldIndentNextCharacter) {
                shouldIndentNextCharacter = false;
                if (charIndex === chunk.start) {
                  chunk.prependRight(indentStr);
                } else {
                  this._splitChunk(chunk, charIndex);
                  chunk = chunk.next;
                  chunk.prependRight(indentStr);
                }
              }
            }
            charIndex += 1;
          }
        }
        charIndex = chunk.end;
        chunk = chunk.next;
      }
      this.outro = this.outro.replace(pattern, replacer);
      return this;
    }
    insert() {
      throw new Error(
        "magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)"
      );
    }
    insertLeft(index, content) {
      if (!warned.insertLeft) {
        console.warn(
          "magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead"
        );
        warned.insertLeft = true;
      }
      return this.appendLeft(index, content);
    }
    insertRight(index, content) {
      if (!warned.insertRight) {
        console.warn(
          "magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead"
        );
        warned.insertRight = true;
      }
      return this.prependRight(index, content);
    }
    move(start, end, index) {
      if (index >= start && index <= end)
        throw new Error("Cannot move a selection inside itself");
      this._split(start);
      this._split(end);
      this._split(index);
      const first = this.byStart[start];
      const last = this.byEnd[end];
      const oldLeft = first.previous;
      const oldRight = last.next;
      const newRight = this.byStart[index];
      if (!newRight && last === this.lastChunk)
        return this;
      const newLeft = newRight ? newRight.previous : this.lastChunk;
      if (oldLeft)
        oldLeft.next = oldRight;
      if (oldRight)
        oldRight.previous = oldLeft;
      if (newLeft)
        newLeft.next = first;
      if (newRight)
        newRight.previous = last;
      if (!first.previous)
        this.firstChunk = last.next;
      if (!last.next) {
        this.lastChunk = first.previous;
        this.lastChunk.next = null;
      }
      first.previous = newLeft;
      last.next = newRight || null;
      if (!newLeft)
        this.firstChunk = first;
      if (!newRight)
        this.lastChunk = last;
      return this;
    }
    overwrite(start, end, content, options) {
      options = options || {};
      return this.update(start, end, content, { ...options, overwrite: !options.contentOnly });
    }
    update(start, end, content, options) {
      if (typeof content !== "string")
        throw new TypeError("replacement content must be a string");
      while (start < 0)
        start += this.original.length;
      while (end < 0)
        end += this.original.length;
      if (end > this.original.length)
        throw new Error("end is out of bounds");
      if (start === end)
        throw new Error(
          "Cannot overwrite a zero-length range \u2013 use appendLeft or prependRight instead"
        );
      this._split(start);
      this._split(end);
      if (options === true) {
        if (!warned.storeName) {
          console.warn(
            "The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string"
          );
          warned.storeName = true;
        }
        options = { storeName: true };
      }
      const storeName = options !== void 0 ? options.storeName : false;
      const overwrite = options !== void 0 ? options.overwrite : false;
      if (storeName) {
        const original = this.original.slice(start, end);
        Object.defineProperty(this.storedNames, original, {
          writable: true,
          value: true,
          enumerable: true
        });
      }
      const first = this.byStart[start];
      const last = this.byEnd[end];
      if (first) {
        let chunk = first;
        while (chunk !== last) {
          if (chunk.next !== this.byStart[chunk.end]) {
            throw new Error("Cannot overwrite across a split point");
          }
          chunk = chunk.next;
          chunk.edit("", false);
        }
        first.edit(content, storeName, !overwrite);
      } else {
        const newChunk = new Chunk(start, end, "").edit(content, storeName);
        last.next = newChunk;
        newChunk.previous = last;
      }
      return this;
    }
    prepend(content) {
      if (typeof content !== "string")
        throw new TypeError("outro content must be a string");
      this.intro = content + this.intro;
      return this;
    }
    prependLeft(index, content) {
      if (typeof content !== "string")
        throw new TypeError("inserted content must be a string");
      this._split(index);
      const chunk = this.byEnd[index];
      if (chunk) {
        chunk.prependLeft(content);
      } else {
        this.intro = content + this.intro;
      }
      return this;
    }
    prependRight(index, content) {
      if (typeof content !== "string")
        throw new TypeError("inserted content must be a string");
      this._split(index);
      const chunk = this.byStart[index];
      if (chunk) {
        chunk.prependRight(content);
      } else {
        this.outro = content + this.outro;
      }
      return this;
    }
    remove(start, end) {
      while (start < 0)
        start += this.original.length;
      while (end < 0)
        end += this.original.length;
      if (start === end)
        return this;
      if (start < 0 || end > this.original.length)
        throw new Error("Character is out of bounds");
      if (start > end)
        throw new Error("end must be greater than start");
      this._split(start);
      this._split(end);
      let chunk = this.byStart[start];
      while (chunk) {
        chunk.intro = "";
        chunk.outro = "";
        chunk.edit("");
        chunk = end > chunk.end ? this.byStart[chunk.end] : null;
      }
      return this;
    }
    lastChar() {
      if (this.outro.length)
        return this.outro[this.outro.length - 1];
      let chunk = this.lastChunk;
      do {
        if (chunk.outro.length)
          return chunk.outro[chunk.outro.length - 1];
        if (chunk.content.length)
          return chunk.content[chunk.content.length - 1];
        if (chunk.intro.length)
          return chunk.intro[chunk.intro.length - 1];
      } while (chunk = chunk.previous);
      if (this.intro.length)
        return this.intro[this.intro.length - 1];
      return "";
    }
    lastLine() {
      let lineIndex = this.outro.lastIndexOf(n);
      if (lineIndex !== -1)
        return this.outro.substr(lineIndex + 1);
      let lineStr = this.outro;
      let chunk = this.lastChunk;
      do {
        if (chunk.outro.length > 0) {
          lineIndex = chunk.outro.lastIndexOf(n);
          if (lineIndex !== -1)
            return chunk.outro.substr(lineIndex + 1) + lineStr;
          lineStr = chunk.outro + lineStr;
        }
        if (chunk.content.length > 0) {
          lineIndex = chunk.content.lastIndexOf(n);
          if (lineIndex !== -1)
            return chunk.content.substr(lineIndex + 1) + lineStr;
          lineStr = chunk.content + lineStr;
        }
        if (chunk.intro.length > 0) {
          lineIndex = chunk.intro.lastIndexOf(n);
          if (lineIndex !== -1)
            return chunk.intro.substr(lineIndex + 1) + lineStr;
          lineStr = chunk.intro + lineStr;
        }
      } while (chunk = chunk.previous);
      lineIndex = this.intro.lastIndexOf(n);
      if (lineIndex !== -1)
        return this.intro.substr(lineIndex + 1) + lineStr;
      return this.intro + lineStr;
    }
    slice(start = 0, end = this.original.length) {
      while (start < 0)
        start += this.original.length;
      while (end < 0)
        end += this.original.length;
      let result = "";
      let chunk = this.firstChunk;
      while (chunk && (chunk.start > start || chunk.end <= start)) {
        if (chunk.start < end && chunk.end >= end) {
          return result;
        }
        chunk = chunk.next;
      }
      if (chunk && chunk.edited && chunk.start !== start)
        throw new Error(`Cannot use replaced character ${start} as slice start anchor.`);
      const startChunk = chunk;
      while (chunk) {
        if (chunk.intro && (startChunk !== chunk || chunk.start === start)) {
          result += chunk.intro;
        }
        const containsEnd = chunk.start < end && chunk.end >= end;
        if (containsEnd && chunk.edited && chunk.end !== end)
          throw new Error(`Cannot use replaced character ${end} as slice end anchor.`);
        const sliceStart = startChunk === chunk ? start - chunk.start : 0;
        const sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;
        result += chunk.content.slice(sliceStart, sliceEnd);
        if (chunk.outro && (!containsEnd || chunk.end === end)) {
          result += chunk.outro;
        }
        if (containsEnd) {
          break;
        }
        chunk = chunk.next;
      }
      return result;
    }
    // TODO deprecate this? not really very useful
    snip(start, end) {
      const clone2 = this.clone();
      clone2.remove(0, start);
      clone2.remove(end, clone2.original.length);
      return clone2;
    }
    _split(index) {
      if (this.byStart[index] || this.byEnd[index])
        return;
      let chunk = this.lastSearchedChunk;
      const searchForward = index > chunk.end;
      while (chunk) {
        if (chunk.contains(index))
          return this._splitChunk(chunk, index);
        chunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];
      }
    }
    _splitChunk(chunk, index) {
      if (chunk.edited && chunk.content.length) {
        const loc = getLocator$1(this.original)(index);
        throw new Error(
          `Cannot split a chunk that has already been edited (${loc.line}:${loc.column} \u2013 "${chunk.original}")`
        );
      }
      const newChunk = chunk.split(index);
      this.byEnd[index] = chunk;
      this.byStart[index] = newChunk;
      this.byEnd[newChunk.end] = newChunk;
      if (chunk === this.lastChunk)
        this.lastChunk = newChunk;
      this.lastSearchedChunk = chunk;
      return true;
    }
    toString() {
      let str = this.intro;
      let chunk = this.firstChunk;
      while (chunk) {
        str += chunk.toString();
        chunk = chunk.next;
      }
      return str + this.outro;
    }
    isEmpty() {
      let chunk = this.firstChunk;
      do {
        if (chunk.intro.length && chunk.intro.trim() || chunk.content.length && chunk.content.trim() || chunk.outro.length && chunk.outro.trim())
          return false;
      } while (chunk = chunk.next);
      return true;
    }
    length() {
      let chunk = this.firstChunk;
      let length = 0;
      do {
        length += chunk.intro.length + chunk.content.length + chunk.outro.length;
      } while (chunk = chunk.next);
      return length;
    }
    trimLines() {
      return this.trim("[\\r\\n]");
    }
    trim(charType) {
      return this.trimStart(charType).trimEnd(charType);
    }
    trimEndAborted(charType) {
      const rx = new RegExp((charType || "\\s") + "+$");
      this.outro = this.outro.replace(rx, "");
      if (this.outro.length)
        return true;
      let chunk = this.lastChunk;
      do {
        const end = chunk.end;
        const aborted = chunk.trimEnd(rx);
        if (chunk.end !== end) {
          if (this.lastChunk === chunk) {
            this.lastChunk = chunk.next;
          }
          this.byEnd[chunk.end] = chunk;
          this.byStart[chunk.next.start] = chunk.next;
          this.byEnd[chunk.next.end] = chunk.next;
        }
        if (aborted)
          return true;
        chunk = chunk.previous;
      } while (chunk);
      return false;
    }
    trimEnd(charType) {
      this.trimEndAborted(charType);
      return this;
    }
    trimStartAborted(charType) {
      const rx = new RegExp("^" + (charType || "\\s") + "+");
      this.intro = this.intro.replace(rx, "");
      if (this.intro.length)
        return true;
      let chunk = this.firstChunk;
      do {
        const end = chunk.end;
        const aborted = chunk.trimStart(rx);
        if (chunk.end !== end) {
          if (chunk === this.lastChunk)
            this.lastChunk = chunk.next;
          this.byEnd[chunk.end] = chunk;
          this.byStart[chunk.next.start] = chunk.next;
          this.byEnd[chunk.next.end] = chunk.next;
        }
        if (aborted)
          return true;
        chunk = chunk.next;
      } while (chunk);
      return false;
    }
    trimStart(charType) {
      this.trimStartAborted(charType);
      return this;
    }
    hasChanged() {
      return this.original !== this.toString();
    }
    _replaceRegexp(searchValue, replacement) {
      function getReplacement(match, str) {
        if (typeof replacement === "string") {
          return replacement.replace(/\$(\$|&|\d+)/g, (_2, i) => {
            if (i === "$")
              return "$";
            if (i === "&")
              return match[0];
            const num = +i;
            if (num < match.length)
              return match[+i];
            return `$${i}`;
          });
        } else {
          return replacement(...match, match.index, str, match.groups);
        }
      }
      function matchAll(re2, str) {
        let match;
        const matches = [];
        while (match = re2.exec(str)) {
          matches.push(match);
        }
        return matches;
      }
      if (searchValue.global) {
        const matches = matchAll(searchValue, this.original);
        matches.forEach((match) => {
          if (match.index != null)
            this.overwrite(
              match.index,
              match.index + match[0].length,
              getReplacement(match, this.original)
            );
        });
      } else {
        const match = this.original.match(searchValue);
        if (match && match.index != null)
          this.overwrite(
            match.index,
            match.index + match[0].length,
            getReplacement(match, this.original)
          );
      }
      return this;
    }
    _replaceString(string, replacement) {
      const { original } = this;
      const index = original.indexOf(string);
      if (index !== -1) {
        this.overwrite(index, index + string.length, replacement);
      }
      return this;
    }
    replace(searchValue, replacement) {
      if (typeof searchValue === "string") {
        return this._replaceString(searchValue, replacement);
      }
      return this._replaceRegexp(searchValue, replacement);
    }
    _replaceAllString(string, replacement) {
      const { original } = this;
      const stringLength = string.length;
      for (let index = original.indexOf(string); index !== -1; index = original.indexOf(string, index + stringLength)) {
        this.overwrite(index, index + stringLength, replacement);
      }
      return this;
    }
    replaceAll(searchValue, replacement) {
      if (typeof searchValue === "string") {
        return this._replaceAllString(searchValue, replacement);
      }
      if (!searchValue.global) {
        throw new TypeError(
          "MagicString.prototype.replaceAll called with a non-global RegExp argument"
        );
      }
      return this._replaceRegexp(searchValue, replacement);
    }
  };
  var UNKNOWN = {};
  function gather_possible_values(node2, set) {
    if (node2.type === "Literal") {
      set.add(node2.value);
    } else if (node2.type === "ConditionalExpression") {
      gather_possible_values(node2.consequent, set);
      gather_possible_values(node2.alternate, set);
    } else {
      set.add(UNKNOWN);
    }
  }
  var BlockAppliesToNode;
  (function(BlockAppliesToNode2) {
    BlockAppliesToNode2[BlockAppliesToNode2["NotPossible"] = 0] = "NotPossible";
    BlockAppliesToNode2[BlockAppliesToNode2["Possible"] = 1] = "Possible";
    BlockAppliesToNode2[BlockAppliesToNode2["UnknownSelectorType"] = 2] = "UnknownSelectorType";
  })(BlockAppliesToNode || (BlockAppliesToNode = {}));
  var NodeExist;
  (function(NodeExist2) {
    NodeExist2[NodeExist2["Probably"] = 1] = "Probably";
    NodeExist2[NodeExist2["Definitely"] = 2] = "Definitely";
  })(NodeExist || (NodeExist = {}));
  var whitelist_attribute_selector = /* @__PURE__ */ new Map([
    ["details", /* @__PURE__ */ new Set(["open"])],
    ["dialog", /* @__PURE__ */ new Set(["open"])]
  ]);
  var regex_is_single_css_selector = /[^\\],(?!([^([]+[^\\]|[^([\\])[)\]])/;
  var Selector = class {
    constructor(node2, stylesheet) {
      this.node = node2;
      this.stylesheet = stylesheet;
      this.blocks = group_selectors(node2);
      let i = this.blocks.length;
      while (i > 0) {
        if (!this.blocks[i - 1].global)
          break;
        i -= 1;
      }
      this.local_blocks = this.blocks.slice(0, i);
      const host_only = this.blocks.length === 1 && this.blocks[0].host;
      const root_only = this.blocks.length === 1 && this.blocks[0].root;
      this.used = this.local_blocks.length === 0 || host_only || root_only;
    }
    apply(node2) {
      const to_encapsulate = [];
      apply_selector(this.local_blocks.slice(), node2, to_encapsulate);
      if (to_encapsulate.length > 0) {
        to_encapsulate.forEach(({ node: node3, block }) => {
          this.stylesheet.nodes_with_css_class.add(node3);
          block.should_encapsulate = true;
        });
        this.used = true;
      }
    }
    minify(code) {
      let c2 = null;
      this.blocks.forEach((block, i) => {
        if (i > 0) {
          if (block.start - c2 > 1) {
            code.update(c2, block.start, block.combinator.name || " ");
          }
        }
        c2 = block.end;
      });
    }
    transform(code, attr, max_amount_class_specificity_increased) {
      const amount_class_specificity_to_increase = max_amount_class_specificity_increased - this.blocks.filter((block) => block.should_encapsulate).length;
      function remove_global_pseudo_class(selector) {
        const first = selector.children[0];
        const last = selector.children[selector.children.length - 1];
        code.remove(selector.start, first.start).remove(last.end, selector.end);
      }
      function encapsulate_block(block, attr2) {
        for (const selector of block.selectors) {
          if (selector.type === "PseudoClassSelector" && selector.name === "global") {
            remove_global_pseudo_class(selector);
          }
        }
        let i = block.selectors.length;
        while (i--) {
          const selector = block.selectors[i];
          if (selector.type === "PseudoElementSelector" || selector.type === "PseudoClassSelector") {
            if (selector.name !== "root" && selector.name !== "host") {
              if (i === 0)
                code.prependRight(selector.start, attr2);
            }
            continue;
          }
          if (selector.type === "TypeSelector" && selector.name === "*") {
            code.update(selector.start, selector.end, attr2);
          } else {
            code.appendLeft(selector.end, attr2);
          }
          break;
        }
      }
      this.blocks.forEach((block, index) => {
        if (block.global) {
          remove_global_pseudo_class(block.selectors[0]);
        }
        if (block.should_encapsulate)
          encapsulate_block(block, index === this.blocks.length - 1 ? attr.repeat(amount_class_specificity_to_increase + 1) : attr);
      });
    }
    validate(component) {
      let start = 0;
      let end = this.blocks.length;
      for (; start < end; start += 1) {
        if (!this.blocks[start].global)
          break;
      }
      for (; end > start; end -= 1) {
        if (!this.blocks[end - 1].global)
          break;
      }
      for (let i = start; i < end; i += 1) {
        if (this.blocks[i].global) {
          return component.error(this.blocks[i].selectors[0], compiler_errors.css_invalid_global);
        }
      }
      this.validate_global_with_multiple_selectors(component);
      this.validate_global_compound_selector(component);
      this.validate_invalid_combinator_without_selector(component);
    }
    validate_global_with_multiple_selectors(component) {
      if (this.blocks.length === 1 && this.blocks[0].selectors.length === 1) {
        return;
      }
      for (const block of this.blocks) {
        for (const selector of block.selectors) {
          if (selector.type === "PseudoClassSelector" && selector.name === "global") {
            if (regex_is_single_css_selector.test(selector.children[0].value)) {
              component.error(selector, compiler_errors.css_invalid_global_selector);
            }
          }
        }
      }
    }
    validate_invalid_combinator_without_selector(component) {
      for (let i = 0; i < this.blocks.length; i++) {
        const block = this.blocks[i];
        if (block.combinator && block.selectors.length === 0) {
          component.error(this.node, compiler_errors.css_invalid_selector(component.source.slice(this.node.start, this.node.end)));
        }
        if (!block.combinator && block.selectors.length === 0) {
          component.error(this.node, compiler_errors.css_invalid_selector(component.source.slice(this.node.start, this.node.end)));
        }
      }
    }
    validate_global_compound_selector(component) {
      for (const block of this.blocks) {
        for (let index = 0; index < block.selectors.length; index++) {
          const selector = block.selectors[index];
          if (selector.type === "PseudoClassSelector" && selector.name === "global" && index !== 0 && selector.children && selector.children.length > 0 && !/[.:#\s]/.test(selector.children[0].value[0])) {
            component.error(selector, compiler_errors.css_invalid_global_selector_position);
          }
        }
      }
    }
    get_amount_class_specificity_increased() {
      let count = 0;
      for (const block of this.blocks) {
        if (block.should_encapsulate) {
          count++;
        }
      }
      return count;
    }
  };
  function apply_selector(blocks, node2, to_encapsulate) {
    const block = blocks.pop();
    if (!block)
      return false;
    if (!node2) {
      return block.global && blocks.every((block2) => block2.global) || block.host && blocks.length === 0;
    }
    switch (block_might_apply_to_node(block, node2)) {
      case BlockAppliesToNode.NotPossible:
        return false;
      case BlockAppliesToNode.UnknownSelectorType:
        to_encapsulate.push({ node: node2, block });
        return true;
    }
    if (block.combinator) {
      if (block.combinator.type === "Combinator" && block.combinator.name === " ") {
        for (const ancestor_block of blocks) {
          if (ancestor_block.global) {
            continue;
          }
          if (ancestor_block.host) {
            to_encapsulate.push({ node: node2, block });
            return true;
          }
          let parent = node2;
          while (parent = get_element_parent(parent)) {
            if (block_might_apply_to_node(ancestor_block, parent) !== BlockAppliesToNode.NotPossible) {
              to_encapsulate.push({ node: parent, block: ancestor_block });
            }
          }
          if (to_encapsulate.length) {
            to_encapsulate.push({ node: node2, block });
            return true;
          }
        }
        if (blocks.every((block2) => block2.global)) {
          to_encapsulate.push({ node: node2, block });
          return true;
        }
        return false;
      } else if (block.combinator.name === ">") {
        const has_global_parent = blocks.every((block2) => block2.global);
        if (has_global_parent || apply_selector(blocks, get_element_parent(node2), to_encapsulate)) {
          to_encapsulate.push({ node: node2, block });
          return true;
        }
        return false;
      } else if (block.combinator.name === "+" || block.combinator.name === "~") {
        const siblings = get_possible_element_siblings(node2, block.combinator.name === "+");
        let has_match = false;
        const has_global = blocks.some((block2) => block2.global);
        if (has_global) {
          if (siblings.size === 0 && get_element_parent(node2) !== null) {
            return false;
          }
          to_encapsulate.push({ node: node2, block });
          return true;
        }
        for (const possible_sibling of siblings.keys()) {
          if (apply_selector(blocks.slice(), possible_sibling, to_encapsulate)) {
            to_encapsulate.push({ node: node2, block });
            has_match = true;
          }
        }
        return has_match;
      }
      to_encapsulate.push({ node: node2, block });
      return true;
    }
    to_encapsulate.push({ node: node2, block });
    return true;
  }
  var regex_backslash_and_following_character = /\\(.)/g;
  function block_might_apply_to_node(block, node2) {
    let i = block.selectors.length;
    while (i--) {
      const selector = block.selectors[i];
      const name2 = typeof selector.name === "string" && selector.name.replace(regex_backslash_and_following_character, "$1");
      if (selector.type === "PseudoClassSelector" && (name2 === "host" || name2 === "root")) {
        return BlockAppliesToNode.NotPossible;
      }
      if (block.selectors.length === 1 && selector.type === "PseudoClassSelector" && name2 === "global") {
        return BlockAppliesToNode.NotPossible;
      }
      if (selector.type === "PseudoClassSelector" || selector.type === "PseudoElementSelector") {
        continue;
      }
      if (selector.type === "ClassSelector") {
        if (!attribute_matches(node2, "class", name2, "~=", false) && !node2.classes.some((c2) => c2.name === name2))
          return BlockAppliesToNode.NotPossible;
      } else if (selector.type === "IdSelector") {
        if (!attribute_matches(node2, "id", name2, "=", false))
          return BlockAppliesToNode.NotPossible;
      } else if (selector.type === "AttributeSelector") {
        if (!(whitelist_attribute_selector.has(node2.name.toLowerCase()) && whitelist_attribute_selector.get(node2.name.toLowerCase()).has(selector.name.name.toLowerCase())) && !attribute_matches(node2, selector.name.name, selector.value && unquote(selector.value), selector.matcher, selector.flags)) {
          return BlockAppliesToNode.NotPossible;
        }
      } else if (selector.type === "TypeSelector") {
        if (node2.name.toLowerCase() !== name2.toLowerCase() && name2 !== "*" && !node2.is_dynamic_element)
          return BlockAppliesToNode.NotPossible;
      } else {
        return BlockAppliesToNode.UnknownSelectorType;
      }
    }
    return BlockAppliesToNode.Possible;
  }
  function test_attribute(operator, expected_value, case_insensitive, value) {
    if (case_insensitive) {
      expected_value = expected_value.toLowerCase();
      value = value.toLowerCase();
    }
    switch (operator) {
      case "=":
        return value === expected_value;
      case "~=":
        return value.split(/\s/).includes(expected_value);
      case "|=":
        return `${value}-`.startsWith(`${expected_value}-`);
      case "^=":
        return value.startsWith(expected_value);
      case "$=":
        return value.endsWith(expected_value);
      case "*=":
        return value.includes(expected_value);
      default:
        throw new Error("this shouldn't happen");
    }
  }
  function attribute_matches(node2, name2, expected_value, operator, case_insensitive) {
    const spread = node2.attributes.find((attr2) => attr2.type === "Spread");
    if (spread)
      return true;
    if (node2.bindings.some((binding) => binding.name === name2))
      return true;
    const attr = node2.attributes.find((attr2) => attr2.name === name2);
    if (!attr)
      return false;
    if (attr.is_true)
      return operator === null;
    if (expected_value == null)
      return true;
    if (attr.chunks.length === 1) {
      const value = attr.chunks[0];
      if (!value)
        return false;
      if (value.type === "Text")
        return test_attribute(operator, expected_value, case_insensitive, value.data);
    }
    const possible_values = /* @__PURE__ */ new Set();
    let prev_values = [];
    for (const chunk of attr.chunks) {
      const current_possible_values = /* @__PURE__ */ new Set();
      if (chunk.type === "Text") {
        current_possible_values.add(chunk.data);
      } else {
        gather_possible_values(chunk.node, current_possible_values);
      }
      if (current_possible_values.has(UNKNOWN))
        return true;
      if (prev_values.length > 0) {
        const start_with_space = [];
        const remaining = [];
        current_possible_values.forEach((current_possible_value) => {
          if (regex_starts_with_whitespace.test(current_possible_value)) {
            start_with_space.push(current_possible_value);
          } else {
            remaining.push(current_possible_value);
          }
        });
        if (remaining.length > 0) {
          if (start_with_space.length > 0) {
            prev_values.forEach((prev_value) => possible_values.add(prev_value));
          }
          const combined = [];
          prev_values.forEach((prev_value) => {
            remaining.forEach((value) => {
              combined.push(prev_value + value);
            });
          });
          prev_values = combined;
          start_with_space.forEach((value) => {
            if (regex_ends_with_whitespace.test(value)) {
              possible_values.add(value);
            } else {
              prev_values.push(value);
            }
          });
          continue;
        } else {
          prev_values.forEach((prev_value) => possible_values.add(prev_value));
          prev_values = [];
        }
      }
      current_possible_values.forEach((current_possible_value) => {
        if (regex_ends_with_whitespace.test(current_possible_value)) {
          possible_values.add(current_possible_value);
        } else {
          prev_values.push(current_possible_value);
        }
      });
      if (prev_values.length < current_possible_values.size) {
        prev_values.push(" ");
      }
      if (prev_values.length > 20) {
        return true;
      }
    }
    prev_values.forEach((prev_value) => possible_values.add(prev_value));
    if (possible_values.has(UNKNOWN))
      return true;
    for (const value of possible_values) {
      if (test_attribute(operator, expected_value, case_insensitive, value))
        return true;
    }
    return false;
  }
  function unquote(value) {
    if (value.type === "Identifier")
      return value.name;
    const str = value.value;
    if (str[0] === str[str.length - 1] && str[0] === "'" || str[0] === '"') {
      return str.slice(1, str.length - 1);
    }
    return str;
  }
  function get_element_parent(node2) {
    let parent = node2;
    while ((parent = parent.parent) && parent.type !== "Element")
      ;
    return parent;
  }
  function get_possible_element_siblings(node2, adjacent_only) {
    const result = /* @__PURE__ */ new Map();
    let prev = node2;
    while (prev = prev.prev) {
      if (prev.type === "Element") {
        if (!prev.attributes.find((attr) => attr.type === "Attribute" && attr.name.toLowerCase() === "slot")) {
          result.set(prev, NodeExist.Definitely);
        }
        if (adjacent_only) {
          break;
        }
      } else if (prev.type === "EachBlock" || prev.type === "IfBlock" || prev.type === "AwaitBlock") {
        const possible_last_child = get_possible_last_child(prev, adjacent_only);
        add_to_map(possible_last_child, result);
        if (adjacent_only && has_definite_elements(possible_last_child)) {
          return result;
        }
      }
    }
    if (!prev || !adjacent_only) {
      let parent = node2;
      let skip_each_for_last_child = node2.type === "ElseBlock";
      while ((parent = parent.parent) && (parent.type === "EachBlock" || parent.type === "IfBlock" || parent.type === "ElseBlock" || parent.type === "AwaitBlock")) {
        const possible_siblings = get_possible_element_siblings(parent, adjacent_only);
        add_to_map(possible_siblings, result);
        if (parent.type === "EachBlock") {
          if (skip_each_for_last_child) {
            skip_each_for_last_child = false;
          } else {
            add_to_map(get_possible_last_child(parent, adjacent_only), result);
          }
        } else if (parent.type === "ElseBlock") {
          skip_each_for_last_child = true;
          parent = parent.parent;
        }
        if (adjacent_only && has_definite_elements(possible_siblings)) {
          break;
        }
      }
    }
    return result;
  }
  function get_possible_last_child(block, adjacent_only) {
    const result = /* @__PURE__ */ new Map();
    if (block.type === "EachBlock") {
      const each_result = loop_child(block.children, adjacent_only);
      const else_result = block.else ? loop_child(block.else.children, adjacent_only) : /* @__PURE__ */ new Map();
      const not_exhaustive = !has_definite_elements(else_result);
      if (not_exhaustive) {
        mark_as_probably(each_result);
        mark_as_probably(else_result);
      }
      add_to_map(each_result, result);
      add_to_map(else_result, result);
    } else if (block.type === "IfBlock") {
      const if_result = loop_child(block.children, adjacent_only);
      const else_result = block.else ? loop_child(block.else.children, adjacent_only) : /* @__PURE__ */ new Map();
      const not_exhaustive = !has_definite_elements(if_result) || !has_definite_elements(else_result);
      if (not_exhaustive) {
        mark_as_probably(if_result);
        mark_as_probably(else_result);
      }
      add_to_map(if_result, result);
      add_to_map(else_result, result);
    } else if (block.type === "AwaitBlock") {
      const pending_result = block.pending ? loop_child(block.pending.children, adjacent_only) : /* @__PURE__ */ new Map();
      const then_result = block.then ? loop_child(block.then.children, adjacent_only) : /* @__PURE__ */ new Map();
      const catch_result = block.catch ? loop_child(block.catch.children, adjacent_only) : /* @__PURE__ */ new Map();
      const not_exhaustive = !has_definite_elements(pending_result) || !has_definite_elements(then_result) || !has_definite_elements(catch_result);
      if (not_exhaustive) {
        mark_as_probably(pending_result);
        mark_as_probably(then_result);
        mark_as_probably(catch_result);
      }
      add_to_map(pending_result, result);
      add_to_map(then_result, result);
      add_to_map(catch_result, result);
    }
    return result;
  }
  function has_definite_elements(result) {
    if (result.size === 0)
      return false;
    for (const exist of result.values()) {
      if (exist === NodeExist.Definitely) {
        return true;
      }
    }
    return false;
  }
  function add_to_map(from, to2) {
    from.forEach((exist, element) => {
      to2.set(element, higher_existence(exist, to2.get(element)));
    });
  }
  function higher_existence(exist1, exist2) {
    if (exist1 === void 0 || exist2 === void 0)
      return exist1 || exist2;
    return exist1 > exist2 ? exist1 : exist2;
  }
  function mark_as_probably(result) {
    for (const key of result.keys()) {
      result.set(key, NodeExist.Probably);
    }
  }
  function loop_child(children, adjacent_only) {
    const result = /* @__PURE__ */ new Map();
    for (let i = children.length - 1; i >= 0; i--) {
      const child = children[i];
      if (child.type === "Element") {
        result.set(child, NodeExist.Definitely);
        if (adjacent_only) {
          break;
        }
      } else if (child.type === "EachBlock" || child.type === "IfBlock" || child.type === "AwaitBlock") {
        const child_result = get_possible_last_child(child, adjacent_only);
        add_to_map(child_result, result);
        if (adjacent_only && has_definite_elements(child_result)) {
          break;
        }
      }
    }
    return result;
  }
  var Block$1 = class {
    constructor(combinator) {
      this.combinator = combinator;
      this.host = false;
      this.root = false;
      this.selectors = [];
      this.start = null;
      this.end = null;
      this.should_encapsulate = false;
    }
    add(selector) {
      if (this.selectors.length === 0) {
        this.start = selector.start;
        this.host = selector.type === "PseudoClassSelector" && selector.name === "host";
      }
      this.root = this.root || selector.type === "PseudoClassSelector" && selector.name === "root";
      this.selectors.push(selector);
      this.end = selector.end;
    }
    get global() {
      return this.selectors.length >= 1 && this.selectors[0].type === "PseudoClassSelector" && this.selectors[0].name === "global" && this.selectors.every((selector) => selector.type === "PseudoClassSelector" || selector.type === "PseudoElementSelector");
    }
  };
  function group_selectors(selector) {
    let block = new Block$1(null);
    const blocks = [block];
    selector.children.forEach((child) => {
      if (child.type === "WhiteSpace" || child.type === "Combinator") {
        block = new Block$1(child);
        blocks.push(block);
      } else {
        block.add(child);
      }
    });
    return blocks;
  }
  var regex_css_browser_prefix = /^-((webkit)|(moz)|(o)|(ms))-/;
  function remove_css_prefix(name2) {
    return name2.replace(regex_css_browser_prefix, "");
  }
  var is_keyframes_node = (node2) => remove_css_prefix(node2.name) === "keyframes";
  var at_rule_has_declaration = ({ block }) => block && block.children && block.children.find((node2) => node2.type === "Declaration");
  function minify_declarations(code, start, declarations) {
    let c2 = start;
    declarations.forEach((declaration, i) => {
      const separator = i > 0 ? ";" : "";
      if (declaration.node.start - c2 > separator.length) {
        code.update(c2, declaration.node.start, separator);
      }
      declaration.minify(code);
      c2 = declaration.node.end;
    });
    return c2;
  }
  var Rule = class {
    constructor(node2, stylesheet, parent) {
      this.node = node2;
      this.parent = parent;
      this.selectors = node2.prelude.children.map((node3) => new Selector(node3, stylesheet));
      this.declarations = node2.block.children.map((node3) => new Declaration(node3));
    }
    apply(node2) {
      this.selectors.forEach((selector) => selector.apply(node2));
    }
    is_used(dev) {
      if (this.parent && this.parent.node.type === "Atrule" && is_keyframes_node(this.parent.node))
        return true;
      if (this.declarations.length === 0)
        return dev;
      return this.selectors.some((s) => s.used);
    }
    minify(code, _dev) {
      let c2 = this.node.start;
      let started = false;
      this.selectors.forEach((selector) => {
        if (selector.used) {
          const separator = started ? "," : "";
          if (selector.node.start - c2 > separator.length) {
            code.update(c2, selector.node.start, separator);
          }
          selector.minify(code);
          c2 = selector.node.end;
          started = true;
        }
      });
      code.remove(c2, this.node.block.start);
      c2 = this.node.block.start + 1;
      c2 = minify_declarations(code, c2, this.declarations);
      code.remove(c2, this.node.block.end - 1);
    }
    transform(code, id2, keyframes, max_amount_class_specificity_increased) {
      if (this.parent && this.parent.node.type === "Atrule" && is_keyframes_node(this.parent.node))
        return true;
      const attr = `.${id2}`;
      this.selectors.forEach((selector) => selector.transform(code, attr, max_amount_class_specificity_increased));
      this.declarations.forEach((declaration) => declaration.transform(code, keyframes));
    }
    validate(component) {
      this.selectors.forEach((selector) => {
        selector.validate(component);
      });
    }
    warn_on_unused_selector(handler) {
      this.selectors.forEach((selector) => {
        if (!selector.used)
          handler(selector);
      });
    }
    get_max_amount_class_specificity_increased() {
      return Math.max(...this.selectors.map((selector) => selector.get_amount_class_specificity_increased()));
    }
  };
  var Declaration = class {
    constructor(node2) {
      this.node = node2;
    }
    transform(code, keyframes) {
      const property = this.node.property && remove_css_prefix(this.node.property.toLowerCase());
      if (property === "animation" || property === "animation-name") {
        this.node.value.children.forEach((block) => {
          if (block.type === "Identifier") {
            const name2 = block.name;
            if (keyframes.has(name2)) {
              code.update(block.start, block.end, keyframes.get(name2));
            }
          }
        });
      }
    }
    minify(code) {
      if (!this.node.property)
        return;
      const c2 = this.node.start + this.node.property.length;
      const first = this.node.value.children ? this.node.value.children[0] : this.node.value;
      if (first.type === "Raw" && regex_only_whitespaces.test(first.value))
        return;
      let start = first.start;
      while (regex_whitespace.test(code.original[start]))
        start += 1;
      if (start - c2 > 1) {
        code.update(c2, start, ":");
      }
    }
  };
  var Atrule = class {
    constructor(node2) {
      this.node = node2;
      this.children = [];
      this.declarations = [];
    }
    apply(node2) {
      if (this.node.name === "container" || this.node.name === "media" || this.node.name === "supports" || this.node.name === "layer") {
        this.children.forEach((child) => {
          child.apply(node2);
        });
      } else if (is_keyframes_node(this.node)) {
        this.children.forEach((rule) => {
          rule.selectors.forEach((selector) => {
            selector.used = true;
          });
        });
      }
    }
    is_used(_dev) {
      return true;
    }
    minify(code, dev) {
      if (this.node.name === "media") {
        const expression_char = code.original[this.node.prelude.start];
        let c2 = this.node.start + (expression_char === "(" ? 6 : 7);
        if (this.node.prelude.start > c2)
          code.remove(c2, this.node.prelude.start);
        this.node.prelude.children.forEach((query) => {
          c2 = query.end;
        });
        code.remove(c2, this.node.block.start);
      } else if (this.node.name === "supports") {
        let c2 = this.node.start + 9;
        if (this.node.prelude.start - c2 > 1)
          code.update(c2, this.node.prelude.start, " ");
        this.node.prelude.children.forEach((query) => {
          c2 = query.end;
        });
        code.remove(c2, this.node.block.start);
      } else {
        let c2 = this.node.start + this.node.name.length + 1;
        if (this.node.prelude) {
          if (this.node.prelude.start - c2 > 1)
            code.update(c2, this.node.prelude.start, " ");
          c2 = this.node.prelude.end;
        }
        if (this.node.block && this.node.block.start - c2 > 0) {
          code.remove(c2, this.node.block.start);
        }
      }
      if (this.node.block) {
        let c2 = this.node.block.start + 1;
        if (this.declarations.length) {
          c2 = minify_declarations(code, c2, this.declarations);
          if (this.children.length)
            c2++;
        }
        this.children.forEach((child) => {
          if (child.is_used(dev)) {
            code.remove(c2, child.node.start);
            child.minify(code, dev);
            c2 = child.node.end;
          }
        });
        code.remove(c2, this.node.block.end - 1);
      }
    }
    transform(code, id2, keyframes, max_amount_class_specificity_increased) {
      if (is_keyframes_node(this.node)) {
        this.node.prelude.children.forEach(({ type, name: name2, start, end }) => {
          if (type === "Identifier") {
            if (name2.startsWith("-global-")) {
              code.remove(start, start + 8);
              this.children.forEach((rule) => {
                rule.selectors.forEach((selector) => {
                  selector.used = true;
                });
              });
            } else {
              code.update(start, end, keyframes.get(name2));
            }
          }
        });
      }
      this.children.forEach((child) => {
        child.transform(code, id2, keyframes, max_amount_class_specificity_increased);
      });
    }
    validate(component) {
      this.children.forEach((child) => {
        child.validate(component);
      });
    }
    warn_on_unused_selector(handler) {
      if (this.node.name !== "media")
        return;
      this.children.forEach((child) => {
        child.warn_on_unused_selector(handler);
      });
    }
    get_max_amount_class_specificity_increased() {
      return Math.max(...this.children.map((rule) => rule.get_max_amount_class_specificity_increased()));
    }
  };
  var get_default_css_hash = ({ css, hash: hash2 }) => {
    return `svelte-${hash2(css)}`;
  };
  var Stylesheet = class {
    constructor({ source, ast, component_name, filename, dev, get_css_hash = get_default_css_hash }) {
      this.children = [];
      this.keyframes = /* @__PURE__ */ new Map();
      this.nodes_with_css_class = /* @__PURE__ */ new Set();
      this.source = source;
      this.ast = ast;
      this.filename = filename;
      this.dev = dev;
      if (ast.css && ast.css.children.length) {
        this.id = get_css_hash({
          filename,
          name: component_name,
          css: ast.css.content.styles,
          hash
        });
        this.has_styles = true;
        const stack = [];
        let depth = 0;
        let current_atrule = null;
        walk(ast.css, {
          enter: (node2) => {
            if (node2.type === "Atrule") {
              const atrule = new Atrule(node2);
              stack.push(atrule);
              if (current_atrule) {
                current_atrule.children.push(atrule);
              } else if (depth <= 1) {
                this.children.push(atrule);
              }
              if (is_keyframes_node(node2)) {
                node2.prelude.children.forEach((expression) => {
                  if (expression.type === "Identifier" && !expression.name.startsWith("-global-")) {
                    this.keyframes.set(expression.name, `${this.id}-${expression.name}`);
                  }
                });
              } else if (at_rule_has_declaration(node2)) {
                const at_rule_declarations = node2.block.children.filter((node3) => node3.type === "Declaration").map((node3) => new Declaration(node3));
                push_array$1(atrule.declarations, at_rule_declarations);
              }
              current_atrule = atrule;
            }
            if (node2.type === "Rule") {
              const rule = new Rule(node2, this, current_atrule);
              if (current_atrule) {
                current_atrule.children.push(rule);
              } else if (depth <= 1) {
                this.children.push(rule);
              }
            }
            depth += 1;
          },
          leave: (node2) => {
            if (node2.type === "Atrule") {
              stack.pop();
              current_atrule = stack[stack.length - 1];
            }
            depth -= 1;
          }
        });
      } else {
        this.has_styles = false;
      }
    }
    apply(node2) {
      if (!this.has_styles)
        return;
      for (let i = 0; i < this.children.length; i += 1) {
        const child = this.children[i];
        child.apply(node2);
      }
    }
    reify() {
      this.nodes_with_css_class.forEach((node2) => {
        node2.add_css_class();
      });
    }
    render(file, should_transform_selectors) {
      if (!this.has_styles) {
        return { code: null, map: null };
      }
      const code = new MagicString(this.source);
      walk(this.ast.css, {
        enter: (node2) => {
          code.addSourcemapLocation(node2.start);
          code.addSourcemapLocation(node2.end);
        }
      });
      if (should_transform_selectors) {
        const max = Math.max(...this.children.map((rule) => rule.get_max_amount_class_specificity_increased()));
        this.children.forEach((child) => {
          child.transform(code, this.id, this.keyframes, max);
        });
      }
      let c2 = 0;
      this.children.forEach((child) => {
        if (child.is_used(this.dev)) {
          code.remove(c2, child.node.start);
          child.minify(code, this.dev);
          c2 = child.node.end;
        }
      });
      code.remove(c2, this.source.length);
      return {
        code: code.toString(),
        map: code.generateMap({
          includeContent: true,
          source: this.filename,
          file
        })
      };
    }
    validate(component) {
      this.children.forEach((child) => {
        child.validate(component);
      });
    }
    warn_on_unused_selectors(component) {
      const ignores = !this.ast.css ? [] : extract_ignores_above_position(this.ast.css.start, this.ast.html.children);
      component.push_ignores(ignores);
      this.children.forEach((child) => {
        child.warn_on_unused_selector((selector) => {
          component.warn(selector.node, compiler_warnings.css_unused_selector(this.source.slice(selector.node.start, selector.node.end)));
        });
      });
      component.pop_ignores();
    }
  };
  var test = typeof process !== "undefined" && process.env.TEST;
  var TemplateScope = class {
    constructor(parent) {
      this.owners = /* @__PURE__ */ new Map();
      this.parent = parent;
      this.names = new Set(parent ? parent.names : []);
      this.dependencies_for_name = new Map(parent ? parent.dependencies_for_name : []);
    }
    add(name2, dependencies, owner) {
      this.names.add(name2);
      this.dependencies_for_name.set(name2, dependencies);
      this.owners.set(name2, owner);
      return this;
    }
    child() {
      const child = new TemplateScope(this);
      return child;
    }
    is_top_level(name2) {
      return !this.parent || !this.names.has(name2) && this.parent.is_top_level(name2);
    }
    get_owner(name2) {
      return this.owners.get(name2) || this.parent && this.parent.get_owner(name2);
    }
    is_let(name2) {
      const owner = this.get_owner(name2);
      return owner && (owner.type === "Element" || owner.type === "InlineComponent" || owner.type === "SlotTemplate");
    }
    is_await(name2) {
      const owner = this.get_owner(name2);
      return owner && (owner.type === "ThenBlock" || owner.type === "CatchBlock");
    }
    is_const(name2) {
      const owner = this.get_owner(name2);
      return owner && owner.type === "ConstTag";
    }
  };
  var Fragment = class extends Node$1 {
    constructor(component, info) {
      const scope = new TemplateScope();
      super(component, null, scope, info);
      this.scope = scope;
      this.children = map_children(component, this, scope, info.children);
    }
  };
  var internal_exports = /* @__PURE__ */ new Set(["HtmlTag", "HtmlTagHydration", "ResizeObserverSingleton", "SvelteComponent", "SvelteComponentDev", "SvelteComponentTyped", "SvelteElement", "action_destroyer", "add_attribute", "add_classes", "add_flush_callback", "add_iframe_resize_listener", "add_location", "add_render_callback", "add_styles", "add_transform", "afterUpdate", "append", "append_dev", "append_empty_stylesheet", "append_hydration", "append_hydration_dev", "append_styles", "assign", "attr", "attr_dev", "attribute_to_object", "beforeUpdate", "bind", "binding_callbacks", "blank_object", "bubble", "check_outros", "children", "claim_comment", "claim_component", "claim_element", "claim_html_tag", "claim_space", "claim_svg_element", "claim_text", "clear_loops", "comment", "component_subscribe", "compute_rest_props", "compute_slots", "construct_svelte_component", "construct_svelte_component_dev", "contenteditable_truthy_values", "createEventDispatcher", "create_animation", "create_bidirectional_transition", "create_component", "create_in_transition", "create_out_transition", "create_slot", "create_ssr_component", "current_component", "custom_event", "dataset_dev", "debug", "destroy_block", "destroy_component", "destroy_each", "detach", "detach_after_dev", "detach_before_dev", "detach_between_dev", "detach_dev", "dirty_components", "dispatch_dev", "each", "element", "element_is", "empty", "end_hydrating", "escape", "escape_attribute_value", "escape_object", "exclude_internal_props", "fix_and_destroy_block", "fix_and_outro_and_destroy_block", "fix_position", "flush", "flush_render_callbacks", "getAllContexts", "getContext", "get_all_dirty_from_scope", "get_binding_group_value", "get_current_component", "get_custom_elements_slots", "get_root_for_style", "get_slot_changes", "get_spread_object", "get_spread_update", "get_store_value", "globals", "group_outros", "handle_promise", "hasContext", "has_prop", "head_selector", "identity", "init", "init_binding_group", "init_binding_group_dynamic", "insert", "insert_dev", "insert_hydration", "insert_hydration_dev", "intros", "invalid_attribute_name_character", "is_client", "is_crossorigin", "is_empty", "is_function", "is_promise", "is_void", "listen", "listen_dev", "loop", "loop_guard", "merge_ssr_styles", "missing_component", "mount_component", "noop", "not_equal", "now", "null_to_empty", "object_without_properties", "onDestroy", "onMount", "once", "outro_and_destroy_block", "prevent_default", "prop_dev", "query_selector_all", "raf", "resize_observer_border_box", "resize_observer_content_box", "resize_observer_device_pixel_content_box", "run", "run_all", "safe_not_equal", "schedule_update", "select_multiple_value", "select_option", "select_options", "select_value", "self", "setContext", "set_attributes", "set_current_component", "set_custom_element_data", "set_custom_element_data_map", "set_data", "set_data_contenteditable", "set_data_contenteditable_dev", "set_data_dev", "set_data_maybe_contenteditable", "set_data_maybe_contenteditable_dev", "set_dynamic_element_data", "set_input_type", "set_input_value", "set_now", "set_raf", "set_store_value", "set_style", "set_svg_attributes", "space", "split_css_unit", "spread", "src_url_equal", "start_hydrating", "stop_immediate_propagation", "stop_propagation", "subscribe", "svg_element", "text", "tick", "time_ranges_to_array", "to_number", "toggle_class", "transition_in", "transition_out", "trusted", "update_await_block_branch", "update_keyed_each", "update_slot", "update_slot_base", "validate_component", "validate_dynamic_element", "validate_each_argument", "validate_each_keys", "validate_slots", "validate_store", "validate_void_dynamic_element", "xlink_attr"]);
  function is_used_as_reference(node2, parent) {
    if (!is_reference(node2, parent)) {
      return false;
    }
    if (!parent) {
      return true;
    }
    switch (parent.type) {
      case "VariableDeclarator":
        return node2 !== parent.id;
      case "FunctionDeclaration":
      case "ImportSpecifier":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ExportSpecifier":
        return false;
      default:
        return true;
    }
  }
  var regex_leading_directory_separator = /^[/\\]/;
  var regex_starts_with_term_export = /^Export/;
  var regex_contains_term_function = /Function/;
  var Component = class {
    constructor(ast, source, name2, compile_options, stats, warnings) {
      this.ignore_stack = [];
      this.vars = [];
      this.var_lookup = /* @__PURE__ */ new Map();
      this.imports = [];
      this.exports_from = [];
      this.instance_exports_from = [];
      this.hoistable_nodes = /* @__PURE__ */ new Set();
      this.node_for_declaration = /* @__PURE__ */ new Map();
      this.partly_hoisted = [];
      this.fully_hoisted = [];
      this.reactive_declarations = [];
      this.reactive_declaration_nodes = /* @__PURE__ */ new Set();
      this.has_reactive_assignments = false;
      this.injected_reactive_declaration_vars = /* @__PURE__ */ new Set();
      this.helpers = /* @__PURE__ */ new Map();
      this.globals = /* @__PURE__ */ new Map();
      this.indirect_dependencies = /* @__PURE__ */ new Map();
      this.elements = [];
      this.aliases = /* @__PURE__ */ new Map();
      this.used_names = /* @__PURE__ */ new Set();
      this.globally_used_names = /* @__PURE__ */ new Set();
      this.slots = /* @__PURE__ */ new Map();
      this.slot_outlets = /* @__PURE__ */ new Set();
      this.name = { type: "Identifier", name: name2 };
      this.stats = stats;
      this.warnings = warnings;
      this.ast = ast;
      this.source = source;
      this.compile_options = compile_options;
      this.original_ast = clone({
        html: ast.html,
        css: ast.css,
        instance: ast.instance,
        module: ast.module
      });
      this.file = compile_options.filename && (typeof process !== "undefined" ? compile_options.filename.replace(process.cwd(), "").replace(regex_leading_directory_separator, "") : compile_options.filename);
      this.locate = getLocator(this.source, { offsetLine: 1 });
      this.stylesheet = new Stylesheet({
        source,
        ast,
        filename: compile_options.filename,
        component_name: name2,
        dev: compile_options.dev,
        get_css_hash: compile_options.cssHash
      });
      this.stylesheet.validate(this);
      this.component_options = process_component_options(this, this.ast.html.children);
      this.namespace = namespaces[this.component_options.namespace] || this.component_options.namespace;
      if (compile_options.customElement) {
        if (this.component_options.tag === void 0 && compile_options.tag === void 0) {
          const svelteOptions = ast.html.children.find((child) => child.name === "svelte:options") || { start: 0, end: 0 };
          this.warn(svelteOptions, compiler_warnings.custom_element_no_tag);
        }
        this.tag = this.component_options.tag || compile_options.tag;
      } else {
        this.tag = this.name.name;
      }
      this.walk_module_js();
      this.push_ignores(this.ast.instance ? extract_ignores_above_position(this.ast.instance.start, this.ast.html.children) : []);
      this.walk_instance_js_pre_template();
      this.pop_ignores();
      this.fragment = new Fragment(this, ast.html);
      this.name = this.get_unique_name(name2);
      this.push_ignores(this.ast.instance ? extract_ignores_above_position(this.ast.instance.start, this.ast.html.children) : []);
      this.walk_instance_js_post_template();
      this.pop_ignores();
      this.elements.forEach((element) => this.stylesheet.apply(element));
      if (!compile_options.customElement)
        this.stylesheet.reify();
      this.stylesheet.warn_on_unused_selectors(this);
    }
    add_var(node2, variable, add_to_lookup = true) {
      this.vars.push(variable);
      if (add_to_lookup) {
        if (this.var_lookup.has(variable.name)) {
          const exists_var = this.var_lookup.get(variable.name);
          if (exists_var.module && exists_var.imported) {
            this.error(node2, compiler_errors.illegal_variable_declaration);
          }
        }
        this.var_lookup.set(variable.name, variable);
      }
    }
    add_reference(node2, name2) {
      const variable = this.var_lookup.get(name2);
      if (variable) {
        variable.referenced = true;
      } else if (is_reserved_keyword(name2)) {
        this.add_var(node2, {
          name: name2,
          injected: true,
          referenced: true
        });
      } else if (name2[0] === "$") {
        this.add_var(node2, {
          name: name2,
          injected: true,
          referenced: true,
          mutated: true,
          writable: true
        });
        const subscribable_name = name2.slice(1);
        const variable2 = this.var_lookup.get(subscribable_name);
        if (variable2) {
          variable2.referenced = true;
          variable2.subscribable = true;
        }
      } else {
        if (this.compile_options.varsReport === "full") {
          this.add_var(node2, { name: name2, referenced: true }, false);
        }
        this.used_names.add(name2);
      }
    }
    alias(name2) {
      if (!this.aliases.has(name2)) {
        this.aliases.set(name2, this.get_unique_name(name2));
      }
      return this.aliases.get(name2);
    }
    apply_stylesheet(element) {
      this.elements.push(element);
    }
    global(name2) {
      const alias = this.alias(name2);
      this.globals.set(name2, alias);
      return alias;
    }
    generate(result) {
      let js2 = null;
      let css = null;
      if (result) {
        const { compile_options, name: name2 } = this;
        const { format = "esm" } = compile_options;
        const banner = `${this.file ? `${this.file} ` : ""}generated by Svelte v${"3.59.1"}`;
        const program = { type: "Program", body: result.js };
        walk(program, {
          enter: (node2, parent, key) => {
            if (node2.type === "Identifier") {
              if (node2.name[0] === "@") {
                if (node2.name[1] === "_") {
                  const alias = this.global(node2.name.slice(2));
                  node2.name = alias.name;
                } else {
                  let name3 = node2.name.slice(1);
                  if (compile_options.hydratable) {
                    if (internal_exports.has(`${name3}_hydration`)) {
                      name3 += "_hydration";
                    } else if (internal_exports.has(`${name3}Hydration`)) {
                      name3 += "Hydration";
                    }
                  }
                  if (compile_options.dev) {
                    if (internal_exports.has(`${name3}_dev`)) {
                      name3 += "_dev";
                    } else if (internal_exports.has(`${name3}Dev`)) {
                      name3 += "Dev";
                    }
                  }
                  const alias = this.alias(name3);
                  this.helpers.set(name3, alias);
                  node2.name = alias.name;
                }
              } else if (node2.name[0] !== "#" && !is_valid(node2.name)) {
                const literal2 = { type: "Literal", value: node2.name };
                if (parent.type === "Property" && key === "key") {
                  parent.key = literal2;
                } else if (parent.type === "MemberExpression" && key === "property") {
                  parent.property = literal2;
                  parent.computed = true;
                }
              }
            }
          }
        });
        const referenced_globals = Array.from(this.globals, ([name3, alias]) => name3 !== alias.name && { name: name3, alias }).filter(Boolean);
        if (referenced_globals.length) {
          this.helpers.set("globals", this.alias("globals"));
        }
        const imported_helpers = Array.from(this.helpers, ([name3, alias]) => ({
          name: name3,
          alias
        }));
        create_module(program, format, name2, banner, compile_options.sveltePath, imported_helpers, referenced_globals, this.imports, this.vars.filter((variable) => variable.module && variable.export_name).map((variable) => ({
          name: variable.name,
          as: variable.export_name
        })), this.exports_from);
        css = compile_options.customElement ? { code: null, map: null } : result.css;
        const js_sourcemap_enabled = check_enable_sourcemap(compile_options.enableSourcemap, "js");
        if (!js_sourcemap_enabled) {
          js2 = print(program);
          js2.map = null;
        } else {
          const sourcemap_source_filename = get_sourcemap_source_filename(compile_options);
          js2 = print(program, {
            sourceMapSource: sourcemap_source_filename
          });
          js2.map.sources = [
            sourcemap_source_filename
          ];
          js2.map.sourcesContent = [
            this.source
          ];
          js2.map = apply_preprocessor_sourcemap(sourcemap_source_filename, js2.map, compile_options.sourcemap);
        }
      }
      return {
        js: js2,
        css,
        ast: this.original_ast,
        warnings: this.warnings,
        vars: this.get_vars_report(),
        stats: this.stats.render()
      };
    }
    get_unique_name(name2, scope) {
      if (test)
        name2 = `${name2}$`;
      let alias = name2;
      for (let i = 1; reserved.has(alias) || this.var_lookup.has(alias) || this.used_names.has(alias) || this.globally_used_names.has(alias) || scope && scope.has(alias); alias = `${name2}_${i++}`)
        ;
      this.used_names.add(alias);
      return { type: "Identifier", name: alias };
    }
    get_unique_name_maker() {
      const local_used_names = /* @__PURE__ */ new Set();
      function add(name2) {
        local_used_names.add(name2);
      }
      reserved.forEach(add);
      internal_exports.forEach(add);
      this.var_lookup.forEach((_value, key) => add(key));
      return (name2) => {
        if (test)
          name2 = `${name2}$`;
        let alias = name2;
        for (let i = 1; this.used_names.has(alias) || local_used_names.has(alias); alias = `${name2}_${i++}`)
          ;
        local_used_names.add(alias);
        this.globally_used_names.add(alias);
        return {
          type: "Identifier",
          name: alias
        };
      };
    }
    get_vars_report() {
      const { compile_options, vars } = this;
      const vars_report = compile_options.varsReport === false ? [] : compile_options.varsReport === "full" ? vars : vars.filter((v2) => !v2.global && !v2.internal);
      return vars_report.map((v2) => ({
        name: v2.name,
        export_name: v2.export_name || null,
        injected: v2.injected || false,
        module: v2.module || false,
        mutated: v2.mutated || false,
        reassigned: v2.reassigned || false,
        referenced: v2.referenced || false,
        writable: v2.writable || false,
        referenced_from_script: v2.referenced_from_script || false
      }));
    }
    error(pos, e) {
      if (this.compile_options.errorMode === "warn") {
        this.warn(pos, e);
      } else {
        error(e.message, {
          name: "ValidationError",
          code: e.code,
          source: this.source,
          start: pos.start,
          end: pos.end,
          filename: this.compile_options.filename
        });
      }
    }
    warn(pos, warning) {
      if (this.ignores && this.ignores.has(warning.code)) {
        return;
      }
      const start = this.locate(pos.start);
      const end = this.locate(pos.end);
      const frame = get_code_frame(this.source, start.line - 1, start.column);
      this.warnings.push({
        code: warning.code,
        message: warning.message,
        frame,
        start,
        end,
        pos: pos.start,
        filename: this.compile_options.filename,
        toString: () => `${warning.message} (${start.line}:${start.column})
${frame}`
      });
    }
    extract_imports(node2) {
      this.imports.push(node2);
    }
    extract_exports(node2, module_script = false) {
      const ignores = extract_svelte_ignore_from_comments(node2);
      if (ignores.length)
        this.push_ignores(ignores);
      const result = this._extract_exports(node2, module_script);
      if (ignores.length)
        this.pop_ignores();
      return result;
    }
    _extract_exports(node2, module_script) {
      if (node2.type === "ExportDefaultDeclaration") {
        return this.error(node2, compiler_errors.default_export);
      }
      if (node2.type === "ExportNamedDeclaration") {
        if (node2.source) {
          if (module_script) {
            this.exports_from.push(node2);
          } else {
            this.instance_exports_from.push(node2);
          }
          return null;
        }
        if (node2.declaration) {
          if (node2.declaration.type === "VariableDeclaration") {
            node2.declaration.declarations.forEach((declarator) => {
              extract_names(declarator.id).forEach((name2) => {
                const variable = this.var_lookup.get(name2);
                variable.export_name = name2;
                if (!module_script && variable.writable && !(variable.referenced || variable.referenced_from_script || variable.subscribable)) {
                  this.warn(declarator, compiler_warnings.unused_export_let(this.name.name, name2));
                }
              });
            });
          } else {
            const { name: name2 } = node2.declaration.id;
            const variable = this.var_lookup.get(name2);
            variable.export_name = name2;
          }
          return node2.declaration;
        } else {
          node2.specifiers.forEach((specifier) => {
            const variable = this.var_lookup.get(specifier.local.name);
            if (variable) {
              variable.export_name = specifier.exported.name;
              if (!module_script && variable.writable && !(variable.referenced || variable.referenced_from_script || variable.subscribable)) {
                this.warn(specifier, compiler_warnings.unused_export_let(this.name.name, specifier.exported.name));
              }
            }
          });
          return null;
        }
      }
    }
    extract_javascript(script) {
      if (!script)
        return null;
      return script.content.body.filter((node2) => {
        if (!node2)
          return false;
        if (this.hoistable_nodes.has(node2))
          return false;
        if (this.reactive_declaration_nodes.has(node2))
          return false;
        if (node2.type === "ImportDeclaration")
          return false;
        if (node2.type === "ExportDeclaration" && node2.specifiers.length > 0)
          return false;
        return true;
      });
    }
    walk_module_js() {
      const component = this;
      const script = this.ast.module;
      if (!script)
        return;
      walk(script.content, {
        enter(node2) {
          if (node2.type === "LabeledStatement" && node2.label.name === "$") {
            component.warn(node2, compiler_warnings.module_script_reactive_declaration);
          }
        }
      });
      const { scope, globals: globals2 } = create_scopes(script.content);
      this.module_scope = scope;
      scope.declarations.forEach((node2, name2) => {
        if (name2[0] === "$") {
          return this.error(node2, compiler_errors.illegal_declaration);
        }
        const writable = node2.type === "VariableDeclaration" && (node2.kind === "var" || node2.kind === "let");
        const imported = node2.type.startsWith("Import");
        this.add_var(node2, {
          name: name2,
          module: true,
          hoistable: true,
          writable,
          imported
        });
      });
      globals2.forEach((node2, name2) => {
        if (name2[0] === "$") {
          return this.error(node2, compiler_errors.illegal_subscription);
        } else {
          this.add_var(node2, {
            name: name2,
            global: true,
            hoistable: true
          });
        }
      });
      const { body } = script.content;
      let i = body.length;
      while (--i >= 0) {
        const node2 = body[i];
        if (node2.type === "ImportDeclaration") {
          this.extract_imports(node2);
          body.splice(i, 1);
        }
        if (regex_starts_with_term_export.test(node2.type)) {
          const replacement = this.extract_exports(node2, true);
          if (replacement) {
            body[i] = replacement;
          } else {
            body.splice(i, 1);
          }
        }
      }
    }
    walk_instance_js_pre_template() {
      const script = this.ast.instance;
      if (!script)
        return;
      script.content.body.forEach((node2) => {
        if (node2.type !== "LabeledStatement")
          return;
        if (node2.body.type !== "ExpressionStatement")
          return;
        const { expression } = node2.body;
        if (expression.type !== "AssignmentExpression")
          return;
        if (expression.left.type === "MemberExpression")
          return;
        extract_names(expression.left).forEach((name2) => {
          if (!this.var_lookup.has(name2) && name2[0] !== "$") {
            this.injected_reactive_declaration_vars.add(name2);
          }
        });
      });
      const { scope: instance_scope, map, globals: globals2 } = create_scopes(script.content);
      this.instance_scope = instance_scope;
      this.instance_scope_map = map;
      instance_scope.declarations.forEach((node2, name2) => {
        if (name2[0] === "$") {
          return this.error(node2, compiler_errors.illegal_declaration);
        }
        const writable = node2.type === "VariableDeclaration" && (node2.kind === "var" || node2.kind === "let");
        const imported = node2.type.startsWith("Import");
        this.add_var(node2, {
          name: name2,
          initialised: instance_scope.initialised_declarations.has(name2),
          writable,
          imported
        });
        this.node_for_declaration.set(name2, node2);
      });
      const global_keys = Array.from(globals2.keys());
      const sorted_globals = [
        ...global_keys.filter((key) => key[0] !== "$"),
        ...global_keys.filter((key) => key[0] === "$")
      ];
      sorted_globals.forEach((name2) => {
        if (this.var_lookup.has(name2))
          return;
        const node2 = globals2.get(name2);
        if (this.injected_reactive_declaration_vars.has(name2)) {
          this.add_var(node2, {
            name: name2,
            injected: true,
            writable: true,
            reassigned: true,
            initialised: true
          });
        } else if (is_reserved_keyword(name2)) {
          this.add_var(node2, {
            name: name2,
            injected: true
          });
        } else if (name2[0] === "$") {
          if (name2 === "$" || name2[1] === "$") {
            return this.error(node2, compiler_errors.illegal_global(name2));
          }
          this.add_var(node2, {
            name: name2,
            injected: true,
            mutated: true,
            writable: true
          });
          this.add_reference(node2, name2.slice(1));
          const variable = this.var_lookup.get(name2.slice(1));
          if (variable) {
            variable.subscribable = true;
            variable.referenced_from_script = true;
          }
        } else {
          this.add_var(node2, {
            name: name2,
            global: true,
            hoistable: true
          });
        }
      });
      this.track_references_and_mutations();
    }
    walk_instance_js_post_template() {
      const script = this.ast.instance;
      if (!script)
        return;
      this.post_template_walk();
      this.hoist_instance_declarations();
      this.extract_reactive_declarations();
    }
    post_template_walk() {
      const script = this.ast.instance;
      if (!script)
        return;
      const component = this;
      const { content } = script;
      const { instance_scope, instance_scope_map: map } = this;
      let scope = instance_scope;
      const to_remove = [];
      const remove = (parent, prop, index) => {
        to_remove.unshift([parent, prop, index]);
      };
      let scope_updated = false;
      const current_function_stack = [];
      let current_function = null;
      walk(content, {
        enter(node2, parent, prop, index) {
          if (node2.type === "FunctionDeclaration" || node2.type === "FunctionExpression") {
            current_function_stack.push(current_function = node2);
          }
          if (map.has(node2)) {
            scope = map.get(node2);
          }
          let deep = false;
          let names = [];
          if (node2.type === "AssignmentExpression") {
            if (node2.left.type === "ArrayPattern") {
              walk(node2.left, {
                enter(node3, parent2) {
                  if (node3.type === "Identifier" && parent2.type !== "MemberExpression" && (parent2.type !== "AssignmentPattern" || parent2.right !== node3)) {
                    names.push(node3.name);
                  }
                }
              });
            } else {
              deep = node2.left.type === "MemberExpression";
              names = deep ? [get_object(node2.left).name] : extract_names(node2.left);
            }
          } else if (node2.type === "UpdateExpression") {
            deep = node2.argument.type === "MemberExpression";
            const { name: name2 } = get_object(node2.argument);
            names.push(name2);
          }
          if (names.length > 0) {
            names.forEach((name2) => {
              let current_scope = scope;
              let declaration;
              while (current_scope) {
                if (current_scope.declarations.has(name2)) {
                  declaration = current_scope.declarations.get(name2);
                  break;
                }
                current_scope = current_scope.parent;
              }
              if (declaration && declaration.kind === "const" && !deep) {
                component.error(node2, {
                  code: "assignment-to-const",
                  message: "You are assigning to a const"
                });
              }
            });
          }
          if (node2.type === "ImportDeclaration") {
            component.extract_imports(node2);
            remove(parent, prop, index);
            return this.skip();
          }
          if (regex_starts_with_term_export.test(node2.type)) {
            const replacement = component.extract_exports(node2);
            if (replacement) {
              this.replace(replacement);
            } else {
              remove(parent, prop, index);
            }
            return this.skip();
          }
          component.warn_on_undefined_store_value_references(node2, parent, prop, scope);
        },
        leave(node2) {
          if (node2.type === "FunctionDeclaration" || node2.type === "FunctionExpression") {
            current_function_stack.pop();
            current_function = current_function_stack[current_function_stack.length - 1];
          }
          if (component.compile_options.dev && component.compile_options.loopGuardTimeout > 0 && (!current_function || !current_function.generator && !current_function.async)) {
            const to_replace_for_loop_protect = component.loop_protect(node2, scope, component.compile_options.loopGuardTimeout);
            if (to_replace_for_loop_protect) {
              this.replace(to_replace_for_loop_protect);
              scope_updated = true;
            }
          }
          if (map.has(node2)) {
            scope = scope.parent;
          }
        }
      });
      for (const [parent, prop, index] of to_remove) {
        if (parent) {
          if (index !== null) {
            parent[prop].splice(index, 1);
          } else {
            delete parent[prop];
          }
        }
      }
      if (scope_updated) {
        const { scope: scope2, map: map2 } = create_scopes(script.content);
        this.instance_scope = scope2;
        this.instance_scope_map = map2;
      }
    }
    track_references_and_mutations() {
      const script = this.ast.instance;
      if (!script)
        return;
      const component = this;
      const { content } = script;
      const { instance_scope, module_scope, instance_scope_map: map } = this;
      let scope = instance_scope;
      walk(content, {
        enter(node2, parent) {
          if (map.has(node2)) {
            scope = map.get(node2);
          }
          if (node2.type === "AssignmentExpression" || node2.type === "UpdateExpression") {
            const assignee = node2.type === "AssignmentExpression" ? node2.left : node2.argument;
            const names = extract_names(assignee);
            const deep = assignee.type === "MemberExpression";
            names.forEach((name2) => {
              const scope_owner = scope.find_owner(name2);
              if (scope_owner !== null ? scope_owner === instance_scope : module_scope && module_scope.has(name2)) {
                const variable = component.var_lookup.get(name2);
                variable[deep ? "mutated" : "reassigned"] = true;
              }
            });
          }
          if (is_used_as_reference(node2, parent)) {
            const object = get_object(node2);
            if (scope.find_owner(object.name) === instance_scope) {
              const variable = component.var_lookup.get(object.name);
              variable.referenced_from_script = true;
            }
          }
        },
        leave(node2) {
          if (map.has(node2)) {
            scope = scope.parent;
          }
        }
      });
    }
    warn_on_undefined_store_value_references(node2, parent, prop, scope) {
      if (node2.type === "LabeledStatement" && node2.label.name === "$" && parent.type !== "Program") {
        this.warn(node2, compiler_warnings.non_top_level_reactive_declaration);
      }
      if (is_reference(node2, parent)) {
        const object = get_object(node2);
        const { name: name2 } = object;
        if (name2[0] === "$") {
          if (!scope.has(name2)) {
            this.warn_if_undefined(name2, object, null);
          }
          if (name2[1] !== "$" && scope.has(name2.slice(1)) && scope.find_owner(name2.slice(1)) !== this.instance_scope) {
            if (!(regex_contains_term_function.test(parent.type) && prop === "params" || parent.type === "VariableDeclarator" && prop === "id")) {
              return this.error(node2, compiler_errors.contextual_store);
            }
          }
        }
      }
    }
    loop_protect(node2, scope, timeout) {
      if (node2.type === "WhileStatement" || node2.type === "ForStatement" || node2.type === "DoWhileStatement") {
        const guard = this.get_unique_name("guard", scope);
        this.used_names.add(guard.name);
        const before = b`const ${guard} = @loop_guard(${timeout})`;
        const inside = b`${guard}();`;
        if (node2.body.type !== "BlockStatement") {
          node2.body = {
            type: "BlockStatement",
            body: [node2.body]
          };
        }
        node2.body.body.push(inside[0]);
        return {
          type: "BlockStatement",
          body: [
            before[0],
            node2
          ]
        };
      }
      return null;
    }
    rewrite_props(get_insert) {
      if (!this.ast.instance)
        return;
      const component = this;
      const { instance_scope, instance_scope_map: map } = this;
      let scope = instance_scope;
      walk(this.ast.instance.content, {
        enter(node2) {
          if (regex_contains_term_function.test(node2.type)) {
            return this.skip();
          }
          if (map.has(node2)) {
            scope = map.get(node2);
          }
          if (node2.type === "ExportNamedDeclaration" && node2.declaration) {
            return this.replace(node2.declaration);
          }
          if (node2.type === "VariableDeclaration") {
            if (node2.kind === "var" || scope === instance_scope) {
              let add_new_props = function(exported2, local, default_value) {
                props.push({
                  type: "Property",
                  method: false,
                  shorthand: false,
                  computed: false,
                  kind: "init",
                  key: exported2,
                  value: default_value ? {
                    type: "AssignmentPattern",
                    left: local,
                    right: default_value
                  } : local
                });
              };
              const inserts = [];
              const props = [];
              for (let index = 0; index < node2.declarations.length; index++) {
                const declarator = node2.declarations[index];
                if (declarator.id.type !== "Identifier") {
                  let get_new_name = function(local) {
                    const variable = component.var_lookup.get(local.name);
                    if (variable.subscribable) {
                      inserts.push(get_insert(variable));
                    }
                    if (variable.export_name && variable.writable) {
                      const alias_name = component.get_unique_name(local.name);
                      add_new_props({ type: "Identifier", name: variable.export_name }, local, alias_name);
                      return alias_name;
                    }
                    return local;
                  }, rename_identifiers = function(param) {
                    switch (param.type) {
                      case "ObjectPattern": {
                        const handle_prop = (prop) => {
                          if (prop.type === "RestElement") {
                            rename_identifiers(prop);
                          } else if (prop.value.type === "Identifier") {
                            prop.value = get_new_name(prop.value);
                          } else {
                            rename_identifiers(prop.value);
                          }
                        };
                        param.properties.forEach(handle_prop);
                        break;
                      }
                      case "ArrayPattern": {
                        const handle_element = (element, index2, array) => {
                          if (element) {
                            if (element.type === "Identifier") {
                              array[index2] = get_new_name(element);
                            } else {
                              rename_identifiers(element);
                            }
                          }
                        };
                        param.elements.forEach(handle_element);
                        break;
                      }
                      case "RestElement":
                        if (param.argument.type === "Identifier") {
                          param.argument = get_new_name(param.argument);
                        } else {
                          rename_identifiers(param.argument);
                        }
                        break;
                      case "AssignmentPattern":
                        if (param.left.type === "Identifier") {
                          param.left = get_new_name(param.left);
                        } else {
                          rename_identifiers(param.left);
                        }
                        break;
                    }
                  };
                  rename_identifiers(declarator.id);
                } else {
                  const { name: name2 } = declarator.id;
                  const variable = component.var_lookup.get(name2);
                  const is_props = variable.export_name && variable.writable;
                  if (is_props) {
                    add_new_props({ type: "Identifier", name: variable.export_name }, declarator.id, declarator.init);
                    node2.declarations.splice(index--, 1);
                  }
                  if (variable.subscribable && (is_props || declarator.init)) {
                    inserts.push(get_insert(variable));
                  }
                }
              }
              this.replace(b`
							${node2.declarations.length ? node2 : null}
							${props.length > 0 && b`let { ${props} } = $$props;`}
							${inserts}
						`);
              return this.skip();
            }
          }
        },
        leave(node2) {
          if (map.has(node2)) {
            scope = scope.parent;
          }
        }
      });
    }
    hoist_instance_declarations() {
      const { hoistable_nodes, var_lookup, injected_reactive_declaration_vars, imports } = this;
      const top_level_function_declarations = /* @__PURE__ */ new Map();
      const { body } = this.ast.instance.content;
      for (let i = 0; i < body.length; i += 1) {
        const node2 = body[i];
        if (node2.type === "VariableDeclaration") {
          const all_hoistable = node2.declarations.every((d2) => {
            if (!d2.init)
              return false;
            if (d2.init.type !== "Literal")
              return false;
            if (node2.kind !== "const" && this.compile_options.dev)
              return false;
            const { name: name2 } = d2.id;
            const v2 = this.var_lookup.get(name2);
            if (v2.reassigned)
              return false;
            if (v2.export_name)
              return false;
            if (this.var_lookup.get(name2).reassigned)
              return false;
            if (this.vars.find((variable) => variable.name === name2 && variable.module)) {
              return false;
            }
            return true;
          });
          if (all_hoistable) {
            node2.declarations.forEach((d2) => {
              const variable = this.var_lookup.get(d2.id.name);
              variable.hoistable = true;
            });
            hoistable_nodes.add(node2);
            body.splice(i--, 1);
            this.fully_hoisted.push(node2);
          }
        }
        if (node2.type === "ExportNamedDeclaration" && node2.declaration && node2.declaration.type === "FunctionDeclaration") {
          top_level_function_declarations.set(node2.declaration.id.name, node2);
        }
        if (node2.type === "FunctionDeclaration") {
          top_level_function_declarations.set(node2.id.name, node2);
        }
      }
      const checked = /* @__PURE__ */ new Set();
      const walking = /* @__PURE__ */ new Set();
      const is_hoistable = (fn_declaration) => {
        if (fn_declaration.type === "ExportNamedDeclaration") {
          fn_declaration = fn_declaration.declaration;
        }
        const instance_scope = this.instance_scope;
        let scope = this.instance_scope;
        const map = this.instance_scope_map;
        let hoistable = true;
        walking.add(fn_declaration);
        walk(fn_declaration, {
          enter(node2, parent) {
            if (!hoistable)
              return this.skip();
            if (map.has(node2)) {
              scope = map.get(node2);
            }
            if (is_reference(node2, parent)) {
              const { name: name2 } = flatten_reference(node2);
              const owner = scope.find_owner(name2);
              if (injected_reactive_declaration_vars.has(name2)) {
                hoistable = false;
              } else if (name2[0] === "$" && !owner) {
                hoistable = false;
              } else if (owner === instance_scope) {
                const variable = var_lookup.get(name2);
                if (variable.reassigned || variable.mutated)
                  hoistable = false;
                if (name2 === fn_declaration.id.name)
                  return;
                if (variable.hoistable)
                  return;
                if (top_level_function_declarations.has(name2)) {
                  const other_declaration = top_level_function_declarations.get(name2);
                  if (walking.has(other_declaration)) {
                    hoistable = false;
                  } else if (other_declaration.type === "ExportNamedDeclaration" && walking.has(other_declaration.declaration)) {
                    hoistable = false;
                  } else if (!is_hoistable(other_declaration)) {
                    hoistable = false;
                  }
                } else {
                  hoistable = false;
                }
              }
              this.skip();
            }
          },
          leave(node2) {
            if (map.has(node2)) {
              scope = scope.parent;
            }
          }
        });
        checked.add(fn_declaration);
        walking.delete(fn_declaration);
        return hoistable;
      };
      for (const [name2, node2] of top_level_function_declarations) {
        if (is_hoistable(node2)) {
          const variable = this.var_lookup.get(name2);
          variable.hoistable = true;
          hoistable_nodes.add(node2);
          const i = body.indexOf(node2);
          body.splice(i, 1);
          this.fully_hoisted.push(node2);
        }
      }
      for (const { specifiers } of imports) {
        for (const specifier of specifiers) {
          const variable = var_lookup.get(specifier.local.name);
          if (!variable.mutated || variable.subscribable) {
            variable.hoistable = true;
          }
        }
      }
    }
    extract_reactive_declarations() {
      const component = this;
      const unsorted_reactive_declarations = [];
      this.ast.instance.content.body.forEach((node2) => {
        const ignores = extract_svelte_ignore_from_comments(node2);
        if (ignores.length)
          this.push_ignores(ignores);
        if (node2.type === "LabeledStatement" && node2.label.name === "$") {
          this.reactive_declaration_nodes.add(node2);
          const assignees = /* @__PURE__ */ new Set();
          const assignee_nodes = /* @__PURE__ */ new Set();
          const dependencies = /* @__PURE__ */ new Set();
          const module_dependencies = /* @__PURE__ */ new Set();
          let scope = this.instance_scope;
          const map = this.instance_scope_map;
          walk(node2.body, {
            enter(node3, parent) {
              if (map.has(node3)) {
                scope = map.get(node3);
              }
              if (node3.type === "AssignmentExpression") {
                const left = get_object(node3.left);
                extract_identifiers(left).forEach((node4) => {
                  assignee_nodes.add(node4);
                  assignees.add(node4.name);
                });
                if (node3.operator !== "=") {
                  dependencies.add(left.name);
                }
              } else if (node3.type === "UpdateExpression") {
                const identifier = get_object(node3.argument);
                assignees.add(identifier.name);
              } else if (is_reference(node3, parent)) {
                const identifier = get_object(node3);
                if (!assignee_nodes.has(identifier)) {
                  const { name: name2 } = identifier;
                  const owner = scope.find_owner(name2);
                  const variable = component.var_lookup.get(name2);
                  let should_add_as_dependency = true;
                  if (variable) {
                    variable.is_reactive_dependency = true;
                    if (variable.module && variable.writable) {
                      should_add_as_dependency = false;
                      module_dependencies.add(name2);
                    }
                  }
                  const is_writable_or_mutated = variable && (variable.writable || variable.mutated);
                  if (should_add_as_dependency && (!owner || owner === component.instance_scope) && (name2[0] === "$" || is_writable_or_mutated)) {
                    dependencies.add(name2);
                  }
                }
                this.skip();
              }
            },
            leave(node3) {
              if (map.has(node3)) {
                scope = scope.parent;
              }
            }
          });
          if (module_dependencies.size > 0 && dependencies.size === 0) {
            component.warn(node2.body, compiler_warnings.module_script_variable_reactive_declaration(Array.from(module_dependencies)));
          }
          const { expression } = node2.body;
          const declaration = expression && expression.left;
          unsorted_reactive_declarations.push({
            assignees,
            dependencies,
            node: node2,
            declaration
          });
        }
        if (ignores.length)
          this.pop_ignores();
      });
      const lookup = /* @__PURE__ */ new Map();
      unsorted_reactive_declarations.forEach((declaration) => {
        declaration.assignees.forEach((name2) => {
          if (!lookup.has(name2)) {
            lookup.set(name2, []);
          }
          lookup.get(name2).push(declaration);
        });
      });
      const cycle = check_graph_for_cycles(unsorted_reactive_declarations.reduce((acc, declaration) => {
        declaration.assignees.forEach((v2) => {
          declaration.dependencies.forEach((w2) => {
            if (!declaration.assignees.has(w2)) {
              acc.push([v2, w2]);
            }
          });
        });
        return acc;
      }, []));
      if (cycle && cycle.length) {
        const declarationList = lookup.get(cycle[0]);
        const declaration = declarationList[0];
        return this.error(declaration.node, compiler_errors.cyclical_reactive_declaration(cycle));
      }
      const add_declaration = (declaration) => {
        if (this.reactive_declarations.includes(declaration))
          return;
        declaration.dependencies.forEach((name2) => {
          if (declaration.assignees.has(name2))
            return;
          const earlier_declarations = lookup.get(name2);
          if (earlier_declarations) {
            earlier_declarations.forEach(add_declaration);
          }
        });
        this.reactive_declarations.push(declaration);
      };
      unsorted_reactive_declarations.forEach(add_declaration);
    }
    warn_if_undefined(name2, node2, template_scope) {
      if (name2[0] === "$") {
        if (name2 === "$" || name2[1] === "$" && !is_reserved_keyword(name2)) {
          return this.error(node2, compiler_errors.illegal_global(name2));
        }
        this.has_reactive_assignments = true;
        if (is_reserved_keyword(name2))
          return;
        name2 = name2.slice(1);
      }
      if (this.var_lookup.has(name2) && !this.var_lookup.get(name2).global)
        return;
      if (template_scope && template_scope.names.has(name2))
        return;
      if (globals.has(name2) && node2.type !== "InlineComponent")
        return;
      this.warn(node2, compiler_warnings.missing_declaration(name2, !!this.ast.instance));
    }
    push_ignores(ignores) {
      this.ignores = new Set(this.ignores || []);
      add_to_set(this.ignores, ignores);
      this.ignore_stack.push(this.ignores);
    }
    pop_ignores() {
      this.ignore_stack.pop();
      this.ignores = this.ignore_stack[this.ignore_stack.length - 1];
    }
  };
  var regex_valid_tag_name = /^[a-zA-Z][a-zA-Z0-9]*-[a-zA-Z0-9-]+$/;
  function process_component_options(component, nodes) {
    const component_options = {
      immutable: component.compile_options.immutable || false,
      accessors: "accessors" in component.compile_options ? component.compile_options.accessors : !!component.compile_options.customElement,
      preserveWhitespace: !!component.compile_options.preserveWhitespace,
      namespace: component.compile_options.namespace
    };
    const node2 = nodes.find((node3) => node3.name === "svelte:options");
    function get_value2(attribute, { code, message }) {
      const { value } = attribute;
      const chunk = value[0];
      if (!chunk)
        return true;
      if (value.length > 1) {
        return component.error(attribute, { code, message });
      }
      if (chunk.type === "Text")
        return chunk.data;
      if (chunk.expression.type !== "Literal") {
        return component.error(attribute, { code, message });
      }
      return chunk.expression.value;
    }
    if (node2) {
      node2.attributes.forEach((attribute) => {
        if (attribute.type === "Attribute") {
          const { name: name2 } = attribute;
          switch (name2) {
            case "tag": {
              const tag2 = get_value2(attribute, compiler_errors.invalid_tag_attribute);
              if (typeof tag2 !== "string" && tag2 !== null) {
                return component.error(attribute, compiler_errors.invalid_tag_attribute);
              }
              if (tag2 && !regex_valid_tag_name.test(tag2)) {
                return component.error(attribute, compiler_errors.invalid_tag_property);
              }
              if (tag2 && !component.compile_options.customElement) {
                component.warn(attribute, compiler_warnings.missing_custom_element_compile_options);
              }
              component_options.tag = tag2;
              break;
            }
            case "namespace": {
              const ns2 = get_value2(attribute, compiler_errors.invalid_namespace_attribute);
              if (typeof ns2 !== "string") {
                return component.error(attribute, compiler_errors.invalid_namespace_attribute);
              }
              if (valid_namespaces.indexOf(ns2) === -1) {
                const match = fuzzymatch(ns2, valid_namespaces);
                return component.error(attribute, compiler_errors.invalid_namespace_property(ns2, match));
              }
              component_options.namespace = ns2;
              break;
            }
            case "accessors":
            case "immutable":
            case "preserveWhitespace": {
              const value = get_value2(attribute, compiler_errors.invalid_attribute_value(name2));
              if (typeof value !== "boolean") {
                return component.error(attribute, compiler_errors.invalid_attribute_value(name2));
              }
              component_options[name2] = value;
              break;
            }
            default:
              return component.error(attribute, compiler_errors.invalid_options_attribute_unknown);
          }
        } else {
          return component.error(attribute, compiler_errors.invalid_options_attribute);
        }
      });
    }
    return component_options;
  }
  function get_relative_path(from, to2) {
    const from_parts = from.split(/[/\\]/);
    const to_parts = to2.split(/[/\\]/);
    from_parts.pop();
    while (from_parts[0] === to_parts[0]) {
      from_parts.shift();
      to_parts.shift();
    }
    if (from_parts.length) {
      let i = from_parts.length;
      while (i--)
        from_parts[i] = "..";
    }
    return from_parts.concat(to_parts).join("/");
  }
  function get_basename(filename) {
    return filename.split(/[/\\]/).pop();
  }
  function get_sourcemap_source_filename(compile_options) {
    if (!compile_options.filename)
      return null;
    return compile_options.outputFilename ? get_relative_path(compile_options.outputFilename, compile_options.filename) : get_basename(compile_options.filename);
  }
  var regex_percentage_characters = /%/g;
  var regex_file_ending = /\.[^.]+$/;
  var regex_repeated_invalid_variable_identifier_characters = /[^a-zA-Z_$0-9]+/g;
  var regex_starts_with_digit = /^(\d)/;
  var regex_may_starts_or_ends_with_underscore = /^_?(.+?)_?$/;
  function get_name_from_filename(filename) {
    if (!filename)
      return null;
    const parts = filename.split(/[/\\]/).map(encodeURI);
    if (parts.length > 1) {
      const index_match = parts[parts.length - 1].match(/^index(\.\w+)/);
      if (index_match) {
        parts.pop();
        parts[parts.length - 1] += index_match[1];
      }
    }
    const base = parts.pop().replace(regex_percentage_characters, "u").replace(regex_file_ending, "").replace(regex_repeated_invalid_variable_identifier_characters, "_").replace(regex_may_starts_or_ends_with_underscore, "$1").replace(regex_starts_with_digit, "_$1");
    if (!base) {
      throw new Error(`Could not derive component name from file ${filename}`);
    }
    return base[0].toUpperCase() + base.slice(1);
  }
  var valid_options = [
    "format",
    "name",
    "filename",
    "sourcemap",
    "enableSourcemap",
    "generate",
    "errorMode",
    "varsReport",
    "outputFilename",
    "cssOutputFilename",
    "sveltePath",
    "dev",
    "accessors",
    "immutable",
    "hydratable",
    "legacy",
    "customElement",
    "namespace",
    "tag",
    "css",
    "loopGuardTimeout",
    "preserveComments",
    "preserveWhitespace",
    "cssHash"
  ];
  var valid_css_values = [
    true,
    false,
    "injected",
    "external",
    "none"
  ];
  var regex_valid_identifier = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;
  var regex_starts_with_lowercase_character = /^[a-z]/;
  function validate_options(options, warnings) {
    const { name: name2, filename, loopGuardTimeout, dev, namespace, css } = options;
    Object.keys(options).forEach((key) => {
      if (!valid_options.includes(key)) {
        const match = fuzzymatch(key, valid_options);
        let message = `Unrecognized option '${key}'`;
        if (match)
          message += ` (did you mean '${match}'?)`;
        throw new Error(message);
      }
    });
    if (name2 && !regex_valid_identifier.test(name2)) {
      throw new Error(`options.name must be a valid identifier (got '${name2}')`);
    }
    if (name2 && regex_starts_with_lowercase_character.test(name2)) {
      const message = "options.name should be capitalised";
      warnings.push({
        code: "options-lowercase-name",
        message,
        filename,
        toString: () => message
      });
    }
    if (loopGuardTimeout && !dev) {
      const message = "options.loopGuardTimeout is for options.dev = true only";
      warnings.push({
        code: "options-loop-guard-timeout",
        message,
        filename,
        toString: () => message
      });
    }
    if (valid_css_values.indexOf(css) === -1) {
      throw new Error(`options.css must be true, false, 'injected', 'external', or 'none' (got '${css}')`);
    }
    if (css === true || css === false) {
      options.css = css === true ? "injected" : "external";
    }
    if (namespace && valid_namespaces.indexOf(namespace) === -1) {
      const match = fuzzymatch(namespace, valid_namespaces);
      if (match) {
        throw new Error(`Invalid namespace '${namespace}' (did you mean '${match}'?)`);
      } else {
        throw new Error(`Invalid namespace '${namespace}'`);
      }
    }
  }
  function compile(source, options = {}) {
    options = Object.assign({ generate: "dom", dev: false, enableSourcemap: true, css: "injected" }, options);
    const stats = new Stats();
    const warnings = [];
    validate_options(options, warnings);
    stats.start("parse");
    const ast = parse$b(source, options);
    stats.stop("parse");
    stats.start("create component");
    const component = new Component(ast, source, options.name || get_name_from_filename(options.filename) || "Component", options, stats, warnings);
    stats.stop("create component");
    const result = options.generate === false ? null : options.generate === "ssr" ? ssr(component, options) : dom(component, options);
    return component.generate(result);
  }

  // compiler.ts
  function compile2(input) {
    const { code, path, target, dev, css } = input;
    const svelte = compile(code, {
      name: "Component",
      filename: path,
      generate: target,
      hydratable: true,
      format: "esm",
      dev,
      css
    });
    return JSON.stringify({
      CSS: svelte.css.code,
      JS: svelte.js.code
    });
  }
  return __toCommonJS(compiler_exports);
})();
